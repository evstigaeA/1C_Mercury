// Конвертация УВС2.0 от 05.04.2018 17:00:07
#Область ПроцедурыКонвертации
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	
	Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
	
		// Заполнение параметров из узла обмена.
		РеквизитыУзлаОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			КомпонентыОбмена.УзелКорреспондента,
			"ВалютаПоУмолчанию");
		ПараметрыКонвертации.ВалютаПоУмолчанию = РеквизитыУзлаОбмена.ВалютаПоУмолчанию;
			
		// Заполнение параметров из узла обмена.
		РеквизитыУзлаОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			КомпонентыОбмена.УзелКорреспондента,
			"ИспользоватьОтборПоОрганизациям");
		
		ПараметрыКонвертации.ИспользоватьОтборПоОрганизациям = РеквизитыУзлаОбмена.ИспользоватьОтборПоОрганизациям;
			
		СписокОрганизаций = Новый СписокЗначений;
		СписокОрганизаций.ЗагрузитьЗначения(КомпонентыОбмена.УзелКорреспондента.Организации.ВыгрузитьКолонку("Организация"));
		ПараметрыКонвертации.Вставить("Организации", СписокОрганизаций);
		
	КонецЕсли;
КонецПроцедуры

Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

// Возвращает версию формата менеджера обмена.
// Возвращаемое значение:
//  Число - номер версии.
Функция ВерсияФорматаМенеджераОбмена() Экспорт
    Возврат "2";
КонецФункции

#КонецОбласти
#Область ПОД
// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаОбработкиДанных - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		Если ПравилаОбработкиДанных.Колонки.Найти("ОчисткаДанных") = Неопределено Тогда
			ПравилаОбработкиДанных.Колонки.Добавить("ОчисткаДанных");
		КонецЕсли;
		ДобавитьПОД_Документ_Инвентаризации_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПриходныеОперации_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПроизводственныеОперации_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ТранспортныеОперации_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Валюты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЕдиницыИзмерения_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КонтрагентыУчетнойСистемы_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СкладыУчетнойСистемы_Отправка(ПравилаОбработкиДанных);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_Справочник_Валюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КонтрагентыУСГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КонтрагентыУчетнойСистемы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НоменклатураУСГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НоменклатураУчетнойСистемы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ОрганизацииУчетнойСистемы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СкладыУСГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СкладыУчетнойСистемы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_УпаковкиЕдИзмУчетнойСистемыЕд_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_УпаковкиЕдИзмУчетнойСистемыУп_Получение(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры

#Область Отправка
#Область Документ_Инвентаризации_Отправка
Процедура ДобавитьПОД_Документ_Инвентаризации_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_Инвентаризации_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.Инвентаризации;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_Инвентаризации_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_Инвентаризации_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_Инвентаризации_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ТекущийСтатус = РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ТекущийСтатусДокумента(ДанныеИБ.Ссылка);
		
	ИспользованиеПКО.Документ_Инвентаризации_Отправка = ТекущийСтатус = Справочники.СтатусыЗаявок.УспешноОбработана;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПриходныеОперации_Отправка
Процедура ДобавитьПОД_Документ_ПриходныеОперации_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПриходныеОперации_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПриходныеОперацииСводно;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПриходныеОперации_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПриходныеОперации_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПриходныеОперации_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ.КонтрагентОтправитель = ДанныеИБ.КонтрагентПолучатель ИЛИ ДанныеИБ.Статус <> Перечисления.СтатусыСводныхДокументов.УспешноПогашено 
		И ДанныеИБ.Статус <> Перечисления.СтатусыСводныхДокументов.УспешноПогашено Тогда
		ИспользованиеПКО.Документ_ПриходныеОперации_Отправка = Ложь;
	КонецЕсли
КонецПроцедуры
#КонецОбласти
#Область Документ_ПроизводственныеОперации_Отправка
Процедура ДобавитьПОД_Документ_ПроизводственныеОперации_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПроизводственныеОперации_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПроизводственныеОперации;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ПроизводственныеОперации_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПроизводственныеОперации_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПроизводственныеОперации_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ТекущийСтатус = РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ТекущийСтатусДокумента(ДанныеИБ.Ссылка);
		
	ИспользованиеПКО.Документ_ПроизводственныеОперации_Отправка = ТекущийСтатус = Справочники.СтатусыЗаявок.УспешноОбработана;
КонецПроцедуры
#КонецОбласти
#Область Документ_ТранспортныеОперации_Отправка
Процедура ДобавитьПОД_Документ_ТранспортныеОперации_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ТранспортныеОперации_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ТранспортныеОперации;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_ТранспортныеОперации_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Истина;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ТранспортныеОперации_Перемещение_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ТранспортныеОперации_Реализация_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ТранспортныеОперации_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ТекущийСтатус = РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ТекущийСтатусДокумента(ДанныеИБ.Ссылка);
		
	ИспользованиеПКО.Документ_ТранспортныеОперации_Реализация_Отправка  = ТекущийСтатус = Справочники.СтатусыЗаявок.УспешноОбработана;
	ИспользованиеПКО.Документ_ТранспортныеОперации_Перемещение_Отправка = ТекущийСтатус = Справочники.СтатусыЗаявок.УспешноОбработана;
		
	Если ДанныеИБ.КонтрагентОтправитель = ДанныеИБ.КонтрагентПолучатель Тогда
		ИспользованиеПКО.Документ_ТранспортныеОперации_Реализация_Отправка = Ложь;
	ИначеЕсли ДанныеИБ.КонтрагентОтправитель <> ДанныеИБ.КонтрагентПолучатель Тогда
		ИспользованиеПКО.Документ_ТранспортныеОперации_Перемещение_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты_Отправка
Процедура ДобавитьПОД_Справочник_Валюты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Валюты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Валюты;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЕдиницыИзмерения_Отправка
Процедура ДобавитьПОД_Справочник_ЕдиницыИзмерения_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ЕдиницыИзмерения_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.УпаковкиЕдиницыИзмеренияУчетнойСистемы;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЕдиницыИзмерения_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтрагентыУчетнойСистемы_Отправка
Процедура ДобавитьПОД_Справочник_КонтрагентыУчетнойСистемы_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КонтрагентыУчетнойСистемы_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КонтрагентыУчетнойСистемы;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыУчетнойСистемы_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СкладыУчетнойСистемы_Отправка
Процедура ДобавитьПОД_Справочник_СкладыУчетнойСистемы_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СкладыУчетнойСистемы_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СкладыУчетнойСистемы;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СкладыУчетнойСистемы_Отправка");
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область Получение
#Область Справочник_Валюты_Получение
Процедура ДобавитьПОД_Справочник_Валюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Валюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Валюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтрагентыУСГруппа_Получение
Процедура ДобавитьПОД_Справочник_КонтрагентыУСГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КонтрагентыУСГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.КонтрагентыГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыУСГруппа_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтрагентыУчетнойСистемы_Получение
Процедура ДобавитьПОД_Справочник_КонтрагентыУчетнойСистемы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КонтрагентыУчетнойСистемы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Контрагенты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыУчетнойСистемы_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатураУСГруппа_Получение
Процедура ДобавитьПОД_Справочник_НоменклатураУСГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_НоменклатураУСГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.НоменклатураГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураУСГруппа_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатураУчетнойСистемы_Получение
Процедура ДобавитьПОД_Справочник_НоменклатураУчетнойСистемы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_НоменклатураУчетнойСистемы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Номенклатура";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураУчетнойСистемы_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ОрганизацииУчетнойСистемы_Получение
Процедура ДобавитьПОД_Справочник_ОрганизацииУчетнойСистемы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ОрганизацииУчетнойСистемы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Организации";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ОрганизацииУчетнойСистемы_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СкладыУСГруппа_Получение
Процедура ДобавитьПОД_Справочник_СкладыУСГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СкладыУСГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СкладыГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СкладыУСГруппа_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СкладыУчетнойСистемы_Получение
Процедура ДобавитьПОД_Справочник_СкладыУчетнойСистемы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СкладыУчетнойСистемы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Склады";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СкладыУчетнойСистемы_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_УпаковкиЕдИзмУчетнойСистемыЕд_Получение
Процедура ДобавитьПОД_Справочник_УпаковкиЕдИзмУчетнойСистемыЕд_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_УпаковкиЕдИзмУчетнойСистемыЕд_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ЕдиницыИзмерения";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_УпаковкиЕдИзмУчетнойСистемыЕд_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_УпаковкиЕдИзмУчетнойСистемыУп_Получение
Процедура ДобавитьПОД_Справочник_УпаковкиЕдИзмУчетнойСистемыУп_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_УпаковкиЕдИзмУчетнойСистемыУп_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Упаковки";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_УпаковкиЕдИзмУчетнойСистемыУп_Получение");
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКО
// Заполняет таблицу правил конвертации объектов.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПКО_Документ_Инвентаризации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПриходныеОперации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПроизводственныеОперации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ТранспортныеОперации_Перемещение_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ТранспортныеОперации_Реализация_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Договоры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЕдиницыИзмерения_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КонтрагентыУчетнойСистемы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НоменклатураУчетнойСистемы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ОрганизацииУчетнойСистемы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СкладыУчетнойСистемы_Отправка(ПравилаКонвертации);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПКО_Справочник_КонтрагентыУСГруппа_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_КонтрагентыУчетнойСистемы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НоменклатураУСГруппа_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НоменклатураУчетнойСистемы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ОрганизацииУчетнойСистемы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СкладыУСГруппа_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СкладыУчетнойСистемы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_УпаковкиЕдИзмУчетнойСистемыЕд_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_УпаковкиЕдИзмУчетнойСистемыУп_Получение(ПравилаКонвертации);
	КонецЕсли;
	ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации);
КонецПроцедуры

Функция ДобавитьПКТЧ(ПравилоКонвертации, ИмяТЧКонфигурации, ИмяТЧФормата)
    Если ПравилоКонвертации.СвойстваТабличныхЧастей.Колонки.Количество() = 0 Тогда
        ОбменДаннымиXDTOСервер.ИнициализироватьСвойстваТабличныхЧастей(ПравилоКонвертации);
    КонецЕсли;
    КонвертацияТабличнойЧасти                = ПравилоКонвертации.СвойстваТабличныхЧастей.Добавить();
    КонвертацияТабличнойЧасти.ТЧКонфигурации = ИмяТЧКонфигурации;
    КонвертацияТабличнойЧасти.ТЧФормата      = ИмяТЧФормата;
    КонвертацияТабличнойЧасти.Свойства       = ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации();
    Возврат КонвертацияТабличнойЧасти.Свойства;
КонецФункции

Процедура ДобавитьПКС(РодительПКС, СвойствоКонфигурации, СвойствоФормата, ИспользуетсяАлгоритмКонвертации = 0, 
                    ПравилоКонвертацииСвойства = "")
	НоваяСтрока                                 = РодительПКС.Добавить();
	НоваяСтрока.СвойствоКонфигурации            = СвойствоКонфигурации;
	НоваяСтрока.СвойствоФормата                 = СвойствоФормата;
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = ?(ИспользуетсяАлгоритмКонвертации = 0, Ложь, Истина);
	НоваяСтрока.ПравилоКонвертацииСвойства      = ПравилоКонвертацииСвойства;
КонецПроцедуры

#Область Отправка
#Область Документ_Инвентаризации_Отправка
Процедура ДобавитьПКО_Документ_Инвентаризации_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_Инвентаризации_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.Инвентаризации;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ИнвентаризацияТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_Инвентаризации_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                                 "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаАктаНесоответствия",               "ДокументОснованиеДата");
	ДобавитьПКС(СвойстваШапки, "НомерАктаНесоответствия",              "ДокументОснованиеНомер");
	ДобавитьПКС(СвойстваШапки, "ПричинаСоставленияАктаНесоответствия", "ПричинаПроведенияИнвентаризации");
	ДобавитьПКС(СвойстваШапки, "",                                     "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",                                     "Организация", 1, "Справочник_ОрганизацииУчетнойСистемы_Отправка");
	ДобавитьПКС(СвойстваШапки, "",                                     "Склад", 1, "Справочник_СкладыУчетнойСистемы_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",                                "Номер", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_НоменклатураУчетнойСистемы_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

КонецПроцедуры

Процедура ПКО_Документ_Инвентаризации_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Организация", ПолучитьОрганизациюУчетнойСистемы(ДанныеИБ.Ссылка.Организация, КомпонентыОбмена));
	СформироватьНомерДокумента(ДанныеXDTO, ДанныеИБ);
	
	СформироватьКомментарийДокумента(ДанныеXDTO, ДанныеИБ);
	
	ДанныеXDTO.Вставить("Склад" , ПолучитьСкладУчетнойСистемы(ДанныеИБ.Ссылка.Предприятие));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнвентаризацииТаблицаНовойПродукции.НоменклатураУчетнойСистемы КАК Номенклатура,
		|	""СобственныеТовары"" КАК ТипЗапасов,
		|	МАКСИМУМ(ЕСТЬNULL(СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы.ЕдиницаИзмеренияУчетнойСистемы, ИнвентаризацииТаблицаНовойПродукции.ЕдиницаИзмерения)) КАК ЕдиницаИзмерения,
		|	СУММА(ИнвентаризацииТаблицаНовойПродукции.Количество) КАК Количество
		|ИЗ
		|	Документ.Инвентаризации.ТаблицаНовойПродукции КАК ИнвентаризацииТаблицаНовойПродукции
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы КАК СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы
		|		ПО ИнвентаризацииТаблицаНовойПродукции.ЕдиницаИзмерения = СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы.ЕдиницаИзмеренияУпаковка
		|			И (СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы.ЕдиницаИзмеренияУпаковка ССЫЛКА Справочник.КлассификаторЕдиницИзмерения)
		|ГДЕ
		|	ИнвентаризацииТаблицаНовойПродукции.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ИнвентаризацииТаблицаНовойПродукции.НоменклатураУчетнойСистемы
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИнвентаризацииТаблицаПродукции.НоменклатураУчетнойСистемы,
		|	""СобственныеТовары"",
		|	МАКСИМУМ(ЕСТЬNULL(СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы.ЕдиницаИзмеренияУчетнойСистемы, ИнвентаризацииТаблицаПродукции.ЕдиницаИзмерения)),
		|	СУММА(ИнвентаризацииТаблицаПродукции.Количество)
		|ИЗ
		|	Документ.Инвентаризации.ТаблицаПродукции КАК ИнвентаризацииТаблицаПродукции
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы КАК СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы
		|		ПО ИнвентаризацииТаблицаПродукции.ЕдиницаИзмерения = СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы.ЕдиницаИзмеренияУпаковка
		|			И (СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы.ЕдиницаИзмеренияУпаковка ССЫЛКА Справочник.КлассификаторЕдиницИзмерения)
		|ГДЕ
		|	ИнвентаризацииТаблицаПродукции.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ИнвентаризацииТаблицаПродукции.НоменклатураУчетнойСистемы";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Товары = Запрос.Выполнить().Выгрузить();
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПриходныеОперации_Отправка
Процедура ДобавитьПКО_Документ_ПриходныеОперации_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПриходныеОперации_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПриходныеОперацииСводно;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПриходныеОперации_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",  "Дата");
	ДобавитьПКС(СвойстваШапки, "",      "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",      "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",      "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",      "Договор", 1, "Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваШапки, "",      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",      "Контрагент", 1, "Справочник_КонтрагентыУчетнойСистемы_Отправка");
	ДобавитьПКС(СвойстваШапки, "",      "Организация", 1, "Справочник_ОрганизацииУчетнойСистемы_Отправка");
	ДобавитьПКС(СвойстваШапки, "",      "Склад", 1, "Справочник_СкладыУчетнойСистемы_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер", "Номер", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_НоменклатураУчетнойСистемы_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПриходныеОперации_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Организация = ПолучитьОрганизациюУчетнойСистемы(ДанныеИБ.Ссылка.Организация, КомпонентыОбмена);
	Контрагент  = ПолучитьКонтрагентаУчетнойСистемы(ДанныеИБ.Ссылка.КонтрагентОтправитель);
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Организация", Организация);
	СформироватьНомерДокумента(ДанныеXDTO, ДанныеИБ);
	
	ДанныеXDTO.Вставить("Контрагент" , Контрагент);
	ДанныеXDTO.Вставить("Склад"      , ПолучитьСкладУчетнойСистемы(ДанныеИБ.Ссылка.ПредприятиеПолучатель));
	ДанныеXDTO.Вставить("ВидОперации", "ПокупкаУПоставщика");
	
	СформироватьКомментарийДокумента(ДанныеXDTO, ДанныеИБ);
	
	ДанныеXDTO.Вставить("Валюта", ДанныеВалюты(КомпонентыОбмена.ПараметрыКонвертации));
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ДанныеВалюты(КомпонентыОбмена.ПараметрыКонвертации));
	
	ПараметрыДоговора = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
	ПараметрыДоговора.Организация = Организация;
	ПараметрыДоговора.Контрагент  = Контрагент;
	ПараметрыДоговора.ВидДоговора = "СПоставщиком";
	ПараметрыДоговора.РасчетыВУсловныхЕдиницах = Ложь;
	ПараметрыДоговора.ВалютаВзаиморасчетов = ДанныеВалюты(КомпонентыОбмена.ПараметрыКонвертации);
	
	ДанныеXDTO.Вставить("Договор", Новый Структура("Значение, ИмяПКО", ПараметрыДоговора, "Справочник_Договоры_Отправка"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходныеОперации.НоменклатураУчетнойСистемы КАК Номенклатура,
		|	ПриходныеОперации.НоменклатураУчетнойСистемы.СтавкаНДС КАК СтавкаНДС,
		|	МАКСИМУМ(ЕСТЬNULL(СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы.ЕдиницаИзмеренияУчетнойСистемы, ПриходныеОперации.ЕдиницаИзмерения)) КАК ЕдиницаИзмерения,
		|	СУММА(ПриходныеОперации.Количество) КАК Количество
		|ИЗ
		|	Документ.ПриходныеОперации КАК ПриходныеОперации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы КАК СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы
		|		ПО ПриходныеОперации.ЕдиницаИзмерения = СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы.ЕдиницаИзмеренияУпаковка
		|			И (СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы.ЕдиницаИзмеренияУпаковка ССЫЛКА Справочник.КлассификаторЕдиницИзмерения)
		|ГДЕ
		|	ПриходныеОперации.Количество > 0
		|	И ПриходныеОперации.Ссылка В
		|			(ВЫБРАТЬ
		|				ПриходныеОперацииСводноТаблицаДанных.ПриходнаяОперация КАК ПриходнаяОперация
		|			ИЗ
		|				Документ.ПриходныеОперацииСводно.ТаблицаДанных КАК ПриходныеОперацииСводноТаблицаДанных
		|			ГДЕ
		|				ПриходныеОперацииСводноТаблицаДанных.Ссылка = &Ссылка
		|			СГРУППИРОВАТЬ ПО
		|				ПриходныеОперацииСводноТаблицаДанных.ПриходнаяОперация)
		|	И НЕ ПриходныеОперации.УполномоченноеГашение
		|
		|СГРУППИРОВАТЬ ПО
		|	ПриходныеОперации.НоменклатураУчетнойСистемы";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Товары = Запрос.Выполнить().Выгрузить();
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПроизводственныеОперации_Отправка
Процедура ДобавитьПКО_Документ_ПроизводственныеОперации_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПроизводственныеОперации_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ПроизводственныеОперации;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ВыпускПродукции";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПроизводственныеОперации_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",  "Дата");
	ДобавитьПКС(СвойстваШапки, "",      "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",      "Организация", 1, "Справочник_ОрганизацииУчетнойСистемы_Отправка");
	ДобавитьПКС(СвойстваШапки, "",      "Склад", 1, "Справочник_СкладыУчетнойСистемы_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер", "Номер", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Материалы");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_НоменклатураУчетнойСистемы_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Продукция");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_НоменклатураУчетнойСистемы_Отправка");

КонецПроцедуры

Процедура ПКО_Документ_ПроизводственныеОперации_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Организация = ПолучитьОрганизациюУчетнойСистемы(ДанныеИБ.Ссылка.Организация, КомпонентыОбмена);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Организация", Организация);
	СформироватьНомерДокумента(ДанныеXDTO, ДанныеИБ);
	
	СформироватьКомментарийДокумента(ДанныеXDTO, ДанныеИБ);
	
	ДанныеXDTO.Вставить("ВидОперации", "ВыпускПродукцииНаСклад");
	ДанныеXDTO.Вставить("Склад", ПолучитьСкладУчетнойСистемы(ДанныеИБ.Ссылка.Предприятие));
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПроизводственныеОперацииТаблицаСырье.НоменклатураУчетнойСистемы КАК Номенклатура,
	|	МАКСИМУМ(ЕСТЬNULL(СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы.ЕдиницаИзмеренияУчетнойСистемы, ПроизводственныеОперацииТаблицаСырье.ЗаписьСкладскогоЖурнала.ЕдиницаИзмерения)) КАК ЕдиницаИзмерения,
	|	СУММА(ПроизводственныеОперацииТаблицаСырье.Количество) КАК Количество
	|ИЗ
	|	Документ.ПроизводственныеОперации.ТаблицаСырье КАК ПроизводственныеОперацииТаблицаСырье
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы КАК СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы
	|		ПО ПроизводственныеОперацииТаблицаСырье.ЗаписьСкладскогоЖурнала.ЕдиницаИзмерения = СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы.ЕдиницаИзмеренияУпаковка
	|			И (СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы.ЕдиницаИзмеренияУпаковка ССЫЛКА Справочник.КлассификаторЕдиницИзмерения)
	|ГДЕ
	|	ПроизводственныеОперацииТаблицаСырье.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроизводственныеОперацииТаблицаСырье.НоменклатураУчетнойСистемы");
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Материалы = Запрос.Выполнить().Выгрузить();
	ДанныеXDTO.Вставить("Материалы", Материалы);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПроизводственныеОперацииТаблицаПродукции.НоменклатураУчетнойСистемы КАК Номенклатура,
	|	МАКСИМУМ(ЕСТЬNULL(СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы.ЕдиницаИзмеренияУчетнойСистемы, ПроизводственныеОперацииТаблицаПродукции.ЕдиницаИзмерения)) КАК ЕдиницаИзмерения,
	|	СУММА(ПроизводственныеОперацииТаблицаПродукции.Количество) КАК Количество
	|ИЗ
	|	Документ.ПроизводственныеОперации.ТаблицаПродукции КАК ПроизводственныеОперацииТаблицаПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы КАК СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы
	|		ПО ПроизводственныеОперацииТаблицаПродукции.ЕдиницаИзмерения = СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы.ЕдиницаИзмеренияУпаковка
	|			И (СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы.ЕдиницаИзмеренияУпаковка ССЫЛКА Справочник.КлассификаторЕдиницИзмерения)
	|ГДЕ
	|	ПроизводственныеОперацииТаблицаПродукции.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроизводственныеОперацииТаблицаПродукции.НоменклатураУчетнойСистемы");
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Продукция = Запрос.Выполнить().Выгрузить();
	ДанныеXDTO.Вставить("Продукция", Продукция);
КонецПроцедуры
#КонецОбласти
#Область Документ_ТранспортныеОперации_Перемещение_Отправка
Процедура ДобавитьПКО_Документ_ТранспортныеОперации_Перемещение_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ТранспортныеОперации_Перемещение_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ТранспортныеОперации;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ТранспортныеОперации_Перемещение_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",  "Дата");
	ДобавитьПКС(СвойстваШапки, "",      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",      "Организация", 1, "Справочник_ОрганизацииУчетнойСистемы_Отправка");
	ДобавитьПКС(СвойстваШапки, "",      "СкладОтправитель", 1, "Справочник_СкладыУчетнойСистемы_Отправка");
	ДобавитьПКС(СвойстваШапки, "",      "СкладПолучатель", 1, "Справочник_СкладыУчетнойСистемы_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер", "Номер", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_НоменклатураУчетнойСистемы_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДСВРознице", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

КонецПроцедуры

Процедура ПКО_Документ_ТранспортныеОперации_Перемещение_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Организация = ПолучитьОрганизациюУчетнойСистемы(ДанныеИБ.Ссылка.Организация, КомпонентыОбмена);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Организация", Организация);
	СформироватьНомерДокумента(ДанныеXDTO, ДанныеИБ);
	
	СформироватьКомментарийДокумента(ДанныеXDTO, ДанныеИБ);
	
	ДанныеXDTO.Вставить("СкладОтправитель", ПолучитьСкладУчетнойСистемы(ДанныеИБ.Ссылка.ПредприятиеОтправитель));
	ДанныеXDTO.Вставить("СкладПолучатель" , ПолучитьСкладУчетнойСистемы(ДанныеИБ.Ссылка.ПредприятиеПолучатель));
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ТранспортныеОперацииТаблицаПродукция.НоменклатураУчетнойСистемы КАК Номенклатура,
	|	ТранспортныеОперацииТаблицаПродукция.НоменклатураУчетнойСистемы.СтавкаНДС КАК СтавкаНДСВРознице,
	|	""СобственныеТовары"" КАК ТипЗапасов,
	|	МАКСИМУМ(ЕСТЬNULL(СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы.ЕдиницаИзмеренияУчетнойСистемы, ТранспортныеОперацииТаблицаПродукция.ЗаписьСкладскогоЖурнала.ЕдиницаИзмерения)) КАК ЕдиницаИзмерения,
	|	СУММА(ТранспортныеОперацииТаблицаПродукция.Количество) КАК Количество
	|ИЗ
	|	Документ.ТранспортныеОперации.ТаблицаПродукция КАК ТранспортныеОперацииТаблицаПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы КАК СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы
	|		ПО ТранспортныеОперацииТаблицаПродукция.ЗаписьСкладскогоЖурнала.ЕдиницаИзмерения = СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы.ЕдиницаИзмеренияУпаковка
	|			И (СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы.ЕдиницаИзмеренияУпаковка ССЫЛКА Справочник.КлассификаторЕдиницИзмерения)
	|ГДЕ
	|	ТранспортныеОперацииТаблицаПродукция.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТранспортныеОперацииТаблицаПродукция.НоменклатураУчетнойСистемы");
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Товары = Запрос.Выполнить().Выгрузить();
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ТранспортныеОперации_Реализация_Отправка
Процедура ДобавитьПКО_Документ_ТранспортныеОперации_Реализация_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ТранспортныеОперации_Реализация_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы.ТранспортныеОперации;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ТранспортныеОперации_Реализация_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",  "Дата");
	ДобавитьПКС(СвойстваШапки, "",      "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",      "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "",      "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",      "Договор", 1, "Справочник_Договоры_Отправка");
	ДобавитьПКС(СвойстваШапки, "",      "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "",      "Контрагент", 1, "Справочник_КонтрагентыУчетнойСистемы_Отправка");
	ДобавитьПКС(СвойстваШапки, "",      "Организация", 1, "Справочник_ОрганизацииУчетнойСистемы_Отправка");
	ДобавитьПКС(СвойстваШапки, "",      "Склад", 1, "Справочник_СкладыУчетнойСистемы_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер", "Номер", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_НоменклатураУчетнойСистемы_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "СтавкаНДС", 1);

КонецПроцедуры

Процедура ПКО_Документ_ТранспортныеОперации_Реализация_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Организация = ПолучитьОрганизациюУчетнойСистемы(ДанныеИБ.Ссылка.Организация, КомпонентыОбмена);
	Контрагент  = ПолучитьКонтрагентаУчетнойСистемы(ДанныеИБ.Ссылка.КонтрагентПолучатель);
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Организация", Организация);
	СформироватьНомерДокумента(ДанныеXDTO, ДанныеИБ);
	
	ДанныеXDTO.Вставить("Контрагент",  Контрагент);
	ДанныеXDTO.Вставить("Склад"     ,  ПолучитьСкладУчетнойСистемы(ДанныеИБ.Ссылка.ПредприятиеОтправитель));
	ДанныеXDTO.Вставить("ВидОперации", "РеализацияКлиенту");
	
	СформироватьКомментарийДокумента(ДанныеXDTO, ДанныеИБ);
	
	ДанныеXDTO.Вставить("Валюта", ДанныеВалюты(КомпонентыОбмена.ПараметрыКонвертации));
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", ДанныеВалюты(КомпонентыОбмена.ПараметрыКонвертации));
	
	ПараметрыДоговора = Новый Структура(ДоговорФиксированнаяСтруктураКлючей());
	ПараметрыДоговора.Организация = Организация;
	ПараметрыДоговора.Контрагент  = Контрагент;
	ПараметрыДоговора.ВидДоговора = "СПокупателем";
	ПараметрыДоговора.РасчетыВУсловныхЕдиницах = Ложь;
	ПараметрыДоговора.ВалютаВзаиморасчетов = ДанныеВалюты(КомпонентыОбмена.ПараметрыКонвертации);
	
	ДанныеXDTO.Вставить("Договор", Новый Структура("Значение, ИмяПКО", ПараметрыДоговора, "Справочник_Договоры_Отправка"));
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ТранспортныеОперацииТаблицаПродукция.НоменклатураУчетнойСистемы КАК Номенклатура,
	|	ТранспортныеОперацииТаблицаПродукция.НоменклатураУчетнойСистемы.СтавкаНДС КАК СтавкаНДС,
	|	МАКСИМУМ(ЕСТЬNULL(СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы.ЕдиницаИзмеренияУчетнойСистемы, ТранспортныеОперацииТаблицаПродукция.ЗаписьСкладскогоЖурнала.ЕдиницаИзмерения)) КАК ЕдиницаИзмерения,
	|	СУММА(ТранспортныеОперацииТаблицаПродукция.Количество) КАК Количество
	|ИЗ
	|	Документ.ТранспортныеОперации.ТаблицаПродукция КАК ТранспортныеОперацииТаблицаПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы КАК СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы
	|		ПО ТранспортныеОперацииТаблицаПродукция.ЗаписьСкладскогоЖурнала.ЕдиницаИзмерения = СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы.ЕдиницаИзмеренияУпаковка
	|			И (СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы.ЕдиницаИзмеренияУпаковка ССЫЛКА Справочник.КлассификаторЕдиницИзмерения)
	|ГДЕ
	|	ТранспортныеОперацииТаблицаПродукция.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТранспортныеОперацииТаблицаПродукция.НоменклатураУчетнойСистемы");
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Товары = Запрос.Выполнить().Выгрузить();
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Договоры_Отправка
Процедура ДобавитьПКО_Справочник_Договоры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Договоры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Договоры";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВалютаВзаиморасчетов", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "", "ВидДоговора", 1);
	ДобавитьПКС(СвойстваШапки, "", "Контрагент", 1, "Справочник_КонтрагентыУчетнойСистемы_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_ОрганизацииУчетнойСистемы_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "РасчетыВУсловныхЕдиницах", 1);

КонецПроцедуры
#КонецОбласти
#Область Справочник_ЕдиницыИзмерения_Отправка
Процедура ДобавитьПКО_Справочник_ЕдиницыИзмерения_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ЕдиницыИзмерения_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.УпаковкиЕдиницыИзмеренияУчетнойСистемы;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ЕдиницыИзмерения";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "ПолноеНаименование", "НаименованиеПолное");

КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтрагентыУчетнойСистемы_Отправка
Процедура ДобавитьПКО_Справочник_КонтрагентыУчетнойСистемы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_КонтрагентыУчетнойСистемы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.КонтрагентыУчетнойСистемы;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Контрагенты";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "КПП",                "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "ПолноеНаименование", "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "ИНН",                "ИНН", 1);
	ДобавитьПКС(СвойстваШапки, "ЮрФизЛицо",          "ЮридическоеФизическоеЛицо", 1, "ЮридическоеФизическоеЛицо");

КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатураУчетнойСистемы_Отправка
Процедура ДобавитьПКО_Справочник_НоменклатураУчетнойСистемы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_НоменклатураУчетнойСистемы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.НоменклатураУчетнойСистемы;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Номенклатура";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Артикул",         "Артикул");
	ДобавитьПКС(СвойстваШапки, "ВидНоменклатуры", "ТипНоменклатуры");
	ДобавитьПКС(СвойстваШапки, "Код",             "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Наименование");
	ДобавитьПКС(СвойстваШапки, "",                "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения_Отправка");

КонецПроцедуры
#КонецОбласти
#Область Справочник_ОрганизацииУчетнойСистемы_Отправка
Процедура ДобавитьПКО_Справочник_ОрганизацииУчетнойСистемы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ОрганизацииУчетнойСистемы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.ОрганизацииУчетнойСистемы;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Организации";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ИНН",          "ИНН");
	ДобавитьПКС(СвойстваШапки, "КПП",          "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "ОГРН",         "ОГРН");
	ДобавитьПКС(СвойстваШапки, "ЮрФизЛицо",    "ЮридическоеФизическоеЛицо", 1, "ЮридическоеФизическоеЛицо");

КонецПроцедуры
#КонецОбласти
#Область Справочник_СкладыУчетнойСистемы_Отправка
Процедура ДобавитьПКО_Справочник_СкладыУчетнойСистемы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_СкладыУчетнойСистемы_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники.СкладыУчетнойСистемы;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Склады";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");

КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область Получение
#Область Справочник_КонтрагентыУСГруппа_Получение
Процедура ДобавитьПКО_Справочник_КонтрагентыУСГруппа_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КонтрагентыУСГруппа_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КонтрагентыУчетнойСистемы;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.КонтрагентыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_КонтрагентыУСГруппа_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_КонтрагентыУСГруппа_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_КонтрагентыУСГруппа_Получение");
	ДобавитьПКС(СвойстваШапки, "УИ",           "", 1);

КонецПроцедуры

Процедура ПКО_Справочник_КонтрагентыУСГруппа_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("Ссылка") И ЗначениеЗаполнено(ДанныеXDTO.Ссылка) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("УИ", ДанныеXDTO.Ссылка.Значение);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_КонтрагентыУСГруппа_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УИ = "";
	ПолученныеДанные.ДополнительныеСвойства.Свойство("УИ", УИ);
	ПолученныеДанные.УИ = УИ;
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтрагентыУчетнойСистемы_Получение
Процедура ДобавитьПКО_Справочник_КонтрагентыУчетнойСистемы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КонтрагентыУчетнойСистемы_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КонтрагентыУчетнойСистемы;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Контрагенты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_КонтрагентыУчетнойСистемы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_КонтрагентыУчетнойСистемы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "СинхронизацияКонтрагентов";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ИНН",                "ИНН");
	ДобавитьПКС(СвойстваШапки, "КПП",                "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "ОГРН",               "РегистрационныйНомерНерезидента");
	ДобавитьПКС(СвойстваШапки, "ПолноеНаименование", "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "Родитель",           "Группа", , "Справочник_КонтрагентыУСГруппа_Получение");
	ДобавитьПКС(СвойстваШапки, "УИ",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "ЮрФизЛицо",          "ЮридическоеФизическоеЛицо", 1, "ЮридическоеФизическоеЛицо");

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,КПП,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("ПолноеНаименование,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ПКО_Справочник_КонтрагентыУчетнойСистемы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("Ссылка") И ЗначениеЗаполнено(ДанныеXDTO.Ссылка) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("УИ", ДанныеXDTO.Ссылка.Значение);
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("НалоговыйНомерНерезидента") Тогда
		ПолученныеДанные.ИНН = ДанныеXDTO.НалоговыйНомерНерезидента;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_КонтрагентыУчетнойСистемы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УИ = "";
	ПолученныеДанные.ДополнительныеСвойства.Свойство("УИ", УИ);
	ПолученныеДанные.УИ = УИ;
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатураУСГруппа_Получение
Процедура ДобавитьПКО_Справочник_НоменклатураУСГруппа_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_НоменклатураУСГруппа_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.НоменклатураУчетнойСистемы;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.НоменклатураГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_НоменклатураУСГруппа_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_НоменклатураУСГруппа_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_НоменклатураУСГруппа_Получение");
	ДобавитьПКС(СвойстваШапки, "УИ",           "", 1);

КонецПроцедуры

Процедура ПКО_Справочник_НоменклатураУСГруппа_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("Ссылка") И ЗначениеЗаполнено(ДанныеXDTO.Ссылка) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("УИ", ДанныеXDTO.Ссылка.Значение);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_НоменклатураУСГруппа_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УИ = "";
	ПолученныеДанные.ДополнительныеСвойства.Свойство("УИ", УИ);
	ПолученныеДанные.УИ = УИ;
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатураУчетнойСистемы_Получение
Процедура ДобавитьПКО_Справочник_НоменклатураУчетнойСистемы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_НоменклатураУчетнойСистемы_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.НоменклатураУчетнойСистемы;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Номенклатура";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_НоменклатураУчетнойСистемы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_НоменклатураУчетнойСистемы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Артикул",          "Артикул");
	ДобавитьПКС(СвойстваШапки, "ЕдиницаИзмерения", "ЕдиницаИзмерения", , "Справочник_УпаковкиЕдИзмУчетнойСистемыЕд_Получение");
	ДобавитьПКС(СвойстваШапки, "Код",              "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование",     "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",         "Группа", , "Справочник_НоменклатураУСГруппа_Получение");
	ДобавитьПКС(СвойстваШапки, "ВидНоменклатуры",  "", 1);
	ДобавитьПКС(СвойстваШапки, "СтавкаНДС",        "СтавкаНДС", 1, "Перечисление_СтавкаНДС");
	ДобавитьПКС(СвойстваШапки, "УИ",               "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Артикул,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ПКО_Справочник_НоменклатураУчетнойСистемы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("ТипНоменклатуры") И ЗначениеЗаполнено(ДанныеXDTO.ТипНоменклатуры) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ТипНоменклатуры", ДанныеXDTO.ТипНоменклатуры.Значение);
	КонецЕсли;
	Если ДанныеXDTO.Свойство("Ссылка") И ЗначениеЗаполнено(ДанныеXDTO.Ссылка) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("УИ", ДанныеXDTO.Ссылка.Значение);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_НоменклатураУчетнойСистемы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ТипНоменклатуры = "";
	ПолученныеДанные.ДополнительныеСвойства.Свойство("ТипНоменклатуры", ТипНоменклатуры);
	ВидНоменклатуры = Неопределено;
		
	Если ЗначениеЗаполнено(ТипНоменклатуры) Тогда
		НаименованиеЭлементаДляОбменаПоУмолчанию = ТипНоменклатуры; 
	Иначе
		НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru = 'Тип номенклатуры не указан'", Метаданные.ОсновнойЯзык.КодЯзыка); 
	КонецЕсли;
	ВидыНоменклатурыСсылка = Справочники.ВидНоменклатурыУчетнойСистемы.НайтиПоНаименованию(НаименованиеЭлементаДляОбменаПоУмолчанию);
	Если ЗначениеЗаполнено(ВидыНоменклатурыСсылка) Тогда
		ВидНоменклатуры = ВидыНоменклатурыСсылка;
	Иначе
		ВидыНоменклатурыОбъект = Справочники.ВидНоменклатурыУчетнойСистемы.СоздатьЭлемент();
		ВидыНоменклатурыОбъект.Наименование = НаименованиеЭлементаДляОбменаПоУмолчанию;
		ВидыНоменклатурыОбъект.Записать();
		ВидНоменклатуры = ВидыНоменклатурыОбъект.Ссылка;
	КонецЕсли;
		
	ПолученныеДанные.ВидНоменклатуры = ВидНоменклатуры;
	
	УИ = "";
	ПолученныеДанные.ДополнительныеСвойства.Свойство("УИ", УИ);
	ПолученныеДанные.УИ = УИ;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ОрганизацииУчетнойСистемы_Получение
Процедура ДобавитьПКО_Справочник_ОрганизацииУчетнойСистемы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ОрганизацииУчетнойСистемы_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ОрганизацииУчетнойСистемы;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Организации";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ОрганизацииУчетнойСистемы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ОрганизацииУчетнойСистемы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "СинхронизацияОрганизаций";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ИНН",                "ИНН");
	ДобавитьПКС(СвойстваШапки, "КПП",                "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "ОГРН",               "ОГРН");
	ДобавитьПКС(СвойстваШапки, "ПолноеНаименование", "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "УИ",                 "", 1);
	ДобавитьПКС(СвойстваШапки, "ЮрФизЛицо",          "ЮридическоеФизическоеЛицо", 1, "ЮридическоеФизическоеЛицо");

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,КПП");
	ПравилоКонвертации.ПоляПоиска.Добавить("ПолноеНаименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_ОрганизацииУчетнойСистемы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("Ссылка") И ЗначениеЗаполнено(ДанныеXDTO.Ссылка) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("УИ", ДанныеXDTO.Ссылка.Значение);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ОрганизацииУчетнойСистемы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УИ = "";
	ПолученныеДанные.ДополнительныеСвойства.Свойство("УИ", УИ);
	ПолученныеДанные.УИ = УИ;
КонецПроцедуры
#КонецОбласти
#Область Справочник_СкладыУСГруппа_Получение
Процедура ДобавитьПКО_Справочник_СкладыУСГруппа_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СкладыУСГруппа_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СкладыУчетнойСистемы;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СкладыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_СкладыУСГруппа_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_СкладыУСГруппа_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_СкладыУСГруппа_Получение");
	ДобавитьПКС(СвойстваШапки, "УИ",           "", 1);

КонецПроцедуры

Процедура ПКО_Справочник_СкладыУСГруппа_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("Ссылка") И ЗначениеЗаполнено(ДанныеXDTO.Ссылка) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("УИ", ДанныеXDTO.Ссылка.Значение);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_СкладыУСГруппа_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УИ = "";
	ПолученныеДанные.ДополнительныеСвойства.Свойство("УИ", УИ);
	ПолученныеДанные.УИ = УИ;
КонецПроцедуры
#КонецОбласти
#Область Справочник_СкладыУчетнойСистемы_Получение
Процедура ДобавитьПКО_Справочник_СкладыУчетнойСистемы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СкладыУчетнойСистемы_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СкладыУчетнойСистемы;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Склады";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_СкладыУчетнойСистемы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_СкладыУчетнойСистемы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_СкладыУСГруппа_Получение");
	ДобавитьПКС(СвойстваШапки, "УИ",           "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ПКО_Справочник_СкладыУчетнойСистемы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("Ссылка") И ЗначениеЗаполнено(ДанныеXDTO.Ссылка) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("УИ", ДанныеXDTO.Ссылка.Значение);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_СкладыУчетнойСистемы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УИ = "";
	ПолученныеДанные.ДополнительныеСвойства.Свойство("УИ", УИ);
	ПолученныеДанные.УИ = УИ;
КонецПроцедуры
#КонецОбласти
#Область Справочник_УпаковкиЕдИзмУчетнойСистемыЕд_Получение
Процедура ДобавитьПКО_Справочник_УпаковкиЕдИзмУчетнойСистемыЕд_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_УпаковкиЕдИзмУчетнойСистемыЕд_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.УпаковкиЕдиницыИзмеренияУчетнойСистемы;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ЕдиницыИзмерения";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_УпаковкиЕдИзмУчетнойСистемыЕд_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_УпаковкиЕдИзмУчетнойСистемыЕд_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "СинхронизацияЕдиницИзмерения";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "ПолноеНаименование", "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "УИ",                 "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_УпаковкиЕдИзмУчетнойСистемыЕд_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("Ссылка") И ЗначениеЗаполнено(ДанныеXDTO.Ссылка) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("УИ", ДанныеXDTO.Ссылка.Значение);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_УпаковкиЕдИзмУчетнойСистемыЕд_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УИ = "";
	ПолученныеДанные.ДополнительныеСвойства.Свойство("УИ", УИ);
	ПолученныеДанные.УИ = УИ;
КонецПроцедуры
#КонецОбласти
#Область Справочник_УпаковкиЕдИзмУчетнойСистемыУп_Получение
Процедура ДобавитьПКО_Справочник_УпаковкиЕдИзмУчетнойСистемыУп_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_УпаковкиЕдИзмУчетнойСистемыУп_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.УпаковкиЕдиницыИзмеренияУчетнойСистемы;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Упаковки";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_УпаковкиЕдИзмУчетнойСистемыУп_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_УпаковкиЕдИзмУчетнойСистемыУп_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "СинхронизацияУпаковок";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "ПолноеНаименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "УИ",                 "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_УпаковкиЕдИзмУчетнойСистемыУп_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("Ссылка") И ЗначениеЗаполнено(ДанныеXDTO.Ссылка) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("УИ", ДанныеXDTO.Ссылка.Значение);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_УпаковкиЕдИзмУчетнойСистемыУп_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	УИ = "";
	ПолученныеДанные.ДополнительныеСвойства.Свойство("УИ", УИ);
	ПолученныеДанные.УИ = УИ;
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область ОтправкаИПолучение
#Область Справочник_Валюты
Процедура ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Валюты";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Валюты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Валюты";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ЗагружаетсяИзИнтернета", "ЗагружаетсяИзИнтернета");
	ДобавитьПКС(СвойстваШапки, "Код",                    "Код");
	ДобавитьПКС(СвойстваШапки, "Наименование",           "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",     "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "Наценка",                "Наценка");
	ДобавитьПКС(СвойстваШапки, "ОсновнаяВалюта",         "ОсновнаяВалюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ПараметрыПрописи",       "ПараметрыПрописиНаРусском");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод;
КонецПроцедуры

Процедура ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
		// Если валюта уже существует в базе,
		// то не перезатираем ее данные.
		ПолученныеДанные = Неопределено;
	КонецЕсли;;
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКПД
// Заполняет таблицу правил конвертации предопределенных данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую будут добавлены правила. 
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт

	// Перечисление_СтавкаНДС.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_СтавкаНДС";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СтавкиНДС;
	ПравилоКонвертации.ТипXDTO   = "СтавкиНДС";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.БезНДС, "БезНДС");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС0, "НДС0");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС10, "НДС10");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС10_110, "НДС10_110");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС18, "НДС18");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС18_118, "НДС18_118");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("БезНДС", Перечисления.СтавкиНДС.БезНДС);
	ЗначенияДляПолучения.Вставить("НДС0", Перечисления.СтавкиНДС.НДС0);
	ЗначенияДляПолучения.Вставить("НДС10", Перечисления.СтавкиНДС.НДС10);
	ЗначенияДляПолучения.Вставить("НДС10_110", Перечисления.СтавкиНДС.НДС10_110);
	ЗначенияДляПолучения.Вставить("НДС18", Перечисления.СтавкиНДС.НДС18);
	ЗначенияДляПолучения.Вставить("НДС18_118", Перечисления.СтавкиНДС.НДС18_118);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ЮридическоеФизическоеЛицо.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ЮридическоеФизическоеЛицо";
	ПравилоКонвертации.ТипДанных = Метаданные.Справочники.ТипыПредприятий;
	ПравилоКонвертации.ТипXDTO   = "ЮридическоеФизическоеЛицо";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Справочники.ТипыПредприятий.ИндивидуальныйПредприниматель, "ФизическоеЛицо");
	ЗначенияДляОтправки.Вставить(Справочники.ТипыПредприятий.ФизическоеЛицо, "ФизическоеЛицо");
	ЗначенияДляОтправки.Вставить(Справочники.ТипыПредприятий.ЮридическоеЛицо, "ЮридическоеЛицо");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Справочники.ТипыПредприятий.ИндивидуальныйПредприниматель);
	ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Справочники.ТипыПредприятий.ФизическоеЛицо);
	ЗначенияДляПолучения.Вставить("ЮридическоеЛицо", Справочники.ТипыПредприятий.ЮридическоеЛицо);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

КонецПроцедуры

#КонецОбласти
#Область Алгоритмы


Функция ДанныеВалюты(ПараметрыКонвертации)
	Если НЕ ЗначениеЗаполнено(ПараметрыКонвертации.ВалютаПоУмолчанию) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка
		|ИЗ Справочник.Валюты ГДЕ Наименование = ""руб."" И ПометкаУдаления = ЛОЖЬ";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПараметрыКонвертации.ВалютаПоУмолчанию = Выборка.Ссылка;
		Иначе
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка
			|ИЗ Справочник.Валюты ГДЕ ПометкаУдаления = ЛОЖЬ";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ПараметрыКонвертации.ВалютаПоУмолчанию = Выборка.Ссылка;
			Иначе
				
				СправочникОбъект = Справочники.Валюты.СоздатьЭлемент();
			
				СправочникОбъект.Код                  = "643";
				СправочникОбъект.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод;
				СправочникОбъект.Наименование         = "руб.";
				СправочникОбъект.НаименованиеПолное   = "Российский рубль";
				СправочникОбъект.ПараметрыПрописи     = "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2";
			
				СправочникОбъект.Записать();
				
				ПараметрыКонвертации.ВалютаПоУмолчанию = СправочникОбъект.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыКонвертации.ВалютаПоУмолчанию;
КонецФункции
Функция ДоговорФиксированнаяСтруктураКлючей()
	ПараметрыПоУмолчанию = Новый Структура("Контрагент, Организация, ВалютаВзаиморасчетов, ВидДоговора, РасчетыВУсловныхЕдиницах, Наименование, Дата, Номер, ВнешнийИдентификатор");
		
	Возврат Новый ФиксированнаяСтруктура(ПараметрыПоУмолчанию);
КонецФункции
Функция ПолучитьКонтрагентаУчетнойСистемы(ДанныеИБ)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СоответствиеХозяйствующихСубъектовКонтрагентамУчетнойСистемы.КонтрагентУчетнойСистемы КАК КонтрагентУчетнойСистемы
		|ИЗ
		|	РегистрСведений.СоответствиеХозяйствующихСубъектовКонтрагентамУчетнойСистемы КАК СоответствиеХозяйствующихСубъектовКонтрагентамУчетнойСистемы
		|ГДЕ
		|	СоответствиеХозяйствующихСубъектовКонтрагентамУчетнойСистемы.ХозяйствующийСубъект = &ХозяйствующийСубъект
		|	И НЕ СоответствиеХозяйствующихСубъектовКонтрагентамУчетнойСистемы.КонтрагентУчетнойСистемы.ПометкаУдаления";
				
	Запрос.УстановитьПараметр("ХозяйствующийСубъект", ДанныеИБ);
				
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		КонтрагентУчетнойСистемы = Справочники.КонтрагентыУчетнойСистемы.СоздатьЭлемент();
		НоваяСсылка = Справочники.КонтрагентыУчетнойСистемы.ПолучитьСсылку();
		КонтрагентУчетнойСистемы.УстановитьСсылкуНового(НоваяСсылка);
	
		КонтрагентУчетнойСистемы.УИ = Строка(НоваяСсылка.УникальныйИдентификатор());
		КонтрагентУчетнойСистемы.Наименование = ДанныеИБ.Наименование;
		КонтрагентУчетнойСистемы.ПолноеНаименование = ДанныеИБ.ПолноеНаименование;
		КонтрагентУчетнойСистемы.ИНН = ДанныеИБ.ИНН;
		КонтрагентУчетнойСистемы.КПП = ДанныеИБ.КПП;
		КонтрагентУчетнойСистемы.ЮрФизЛицо = ДанныеИБ.ТипПредприятия;
	
		КонтрагентУчетнойСистемы.Записать();
	
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("КонтрагентУчетнойСистемы", КонтрагентУчетнойСистемы.Ссылка);
		СтруктураЗаписи.Вставить("ХозяйствующийСубъект", ДанныеИБ);
	
		РегистрыСведений.СоответствиеХозяйствующихСубъектовКонтрагентамУчетнойСистемы.ДобавитьЗапись(СтруктураЗаписи);
	
		Возврат КонтрагентУчетнойСистемы.Ссылка;
	
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
			
		Возврат Выборка.КонтрагентУчетнойСистемы;
	
	КонецЕсли;
КонецФункции
Функция ПолучитьОрганизациюУчетнойСистемы(ДанныеИБ, КомпонентыОбмена)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СоответствиеОрганизацийОрганизациямУчетнойСистемы.ОрганизацияУчетнойСистемы КАК ОрганизацияУчетнойСистемы
		|ИЗ
		|	РегистрСведений.СоответствиеОрганизацийОрганизациямУчетнойСистемы КАК СоответствиеОрганизацийОрганизациямУчетнойСистемы
		|ГДЕ
		|	СоответствиеОрганизацийОрганизациямУчетнойСистемы.Организация = &Организация
		|	И НЕ СоответствиеОрганизацийОрганизациямУчетнойСистемы.Организация.ПометкаУдаления";
			
	Запрос.УстановитьПараметр("Организация", ДанныеИБ);
			
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для организации %1 не указано сопоставление организации учетной системы.'"), ДанныеИБ);
		
		ОбменДаннымиXDTOСервер.ЗаписьЖурналаРегистрацииОбменДанными(ТекстОшибки, КомпонентыОбмена, , ДанныеИБ.Ссылка);
		
		КомпонентыОбмена.ФлагОшибки = Истина;
		КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
			
	Иначе
			
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
			
		Возврат Выборка.ОрганизацияУчетнойСистемы;
	
	КонецЕсли;
КонецФункции
Функция ПолучитьСкладУчетнойСистемы(ДанныеИБ)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СоответствиеПредприятийСкладамУчетнойСистемы.СкладУчетнойСистемы КАК СкладУчетнойСистемы
		|ИЗ
		|	РегистрСведений.СоответствиеПредприятийСкладамУчетнойСистемы КАК СоответствиеПредприятийСкладамУчетнойСистемы
		|ГДЕ
		|	СоответствиеПредприятийСкладамУчетнойСистемы.Предприятие = &Предприятие
		|	И НЕ СоответствиеПредприятийСкладамУчетнойСистемы.СкладУчетнойСистемы.ПометкаУдаления";
			
	Запрос.УстановитьПараметр("Предприятие", ДанныеИБ);
			
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		СкладУчетнойСистемы = Справочники.СкладыУчетнойСистемы.СоздатьЭлемент();
		НоваяСсылка = Справочники.СкладыУчетнойСистемы.ПолучитьСсылку();
		СкладУчетнойСистемы.УстановитьСсылкуНового(НоваяСсылка);
		
		СкладУчетнойСистемы.УИ = Строка(НоваяСсылка.УникальныйИдентификатор());
		СкладУчетнойСистемы.Наименование = ДанныеИБ.Наименование;
		
		СкладУчетнойСистемы.Записать();
	
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("СкладУчетнойСистемы", СкладУчетнойСистемы.Ссылка);
		СтруктураЗаписи.Вставить("Предприятие", ДанныеИБ);
	
		РегистрыСведений.СоответствиеПредприятийСкладамУчетнойСистемы.ДобавитьЗапись(СтруктураЗаписи);
	
		Возврат СкладУчетнойСистемы.Ссылка;
		
	Иначе
	
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
			
		Возврат Выборка.СкладУчетнойСистемы;
		
	КонецЕсли;
КонецФункции
Процедура СинхронизацияЕдиницИзмерения(Объект)
	ЕдиницаИзмеренияУчетнойСистемы = Объект.Ссылка;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК Поле1
		|ИЗ
		|	РегистрСведений.СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы КАК СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы
		|ГДЕ
		|	СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы.ЕдиницаИзмеренияУчетнойСистемы = &ЕдиницаИзмеренияУчетнойСистемы
		|	И НЕ СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы.ЕдиницаИзмеренияУпаковка.НеИспользуется
		|	И НЕ СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы.ЕдиницаИзмеренияУпаковка.ПометкаУдаления";
		
	Запрос.УстановитьПараметр("ЕдиницаИзмеренияУчетнойСистемы", ЕдиницаИзмеренияУчетнойСистемы);
		
	РезультатЗапроса = Запрос.Выполнить();
		
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НайденнаяСсылка = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(ЕдиницаИзмеренияУчетнойСистемы.Наименование);
	
	Если НайденнаяСсылка <> Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка() Тогда
		
		СтруктураЗаписи = Новый Структура();
		
		СтруктураЗаписи.Вставить("ЕдиницаИзмеренияУпаковка"	     , НайденнаяСсылка);
		СтруктураЗаписи.Вставить("ЕдиницаИзмеренияУчетнойСистемы", ЕдиницаИзмеренияУчетнойСистемы);
		
		РегистрыСведений.СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы.ДобавитьЗапись(СтруктураЗаписи);
	
	КонецЕсли;
КонецПроцедуры
Процедура СинхронизацияКонтрагентов(Объект)
	КонтрагентУчетнойСистемы = Объект.Ссылка;
	
	Если Не ЗначениеЗаполнено(КонтрагентУчетнойСистемы.ИНН) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК Поле1
		|ИЗ
		|	РегистрСведений.СоответствиеХозяйствующихСубъектовКонтрагентамУчетнойСистемы КАК СоответствиеХозяйствующихСубъектовКонтрагентамУчетнойСистемы
		|ГДЕ
		|	СоответствиеХозяйствующихСубъектовКонтрагентамУчетнойСистемы.КонтрагентУчетнойСистемы = &КонтрагентУчетнойСистемы
		|	И НЕ СоответствиеХозяйствующихСубъектовКонтрагентамУчетнойСистемы.ХозяйствующийСубъект.ПометкаУдаления
		|	И НЕ СоответствиеХозяйствующихСубъектовКонтрагентамУчетнойСистемы.ХозяйствующийСубъект.НеИспользуется";
		
	Запрос.УстановитьПараметр("КонтрагентУчетнойСистемы", КонтрагентУчетнойСистемы);
		
	РезультатЗапроса = Запрос.Выполнить();
		
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН
		|	И НЕ Контрагенты.НеИспользуется
		|	И НЕ Контрагенты.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	Контрагенты.Ссылка";
		
	Запрос.УстановитьПараметр("ИНН", КонтрагентУчетнойСистемы.ИНН);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		ПараметрыПодключения = ИнтеграцияВетисAPIСлужебный.ПараметрыПодключенияДляРаботыСоСправочнойИнформацией(Справочники.ВидыОперацийОбменаAPI.АктуализацияКонтрагентов);
		
		Если ЗначениеЗаполнено(ПараметрыПодключения.ОписаниеОшибки) Тогда
			Возврат;
		КонецЕсли;
	
		ХозяйствующийСубъект = ИнтеграцияВетисAPIКонтрагентыПредприятия.ПолучитьКонтрагента(ПараметрыПодключения,,, КонтрагентУчетнойСистемы.ИНН,, Ложь);
		
		Если Не ЗначениеЗаполнено(ХозяйствующийСубъект) Тогда
			Возврат;
		КонецЕсли;
	
	Иначе
			
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ХозяйствующийСубъект = Выборка.Ссылка;
			
	КонецЕсли;
	
	СтруктураЗаписи = Новый Структура();
		
	СтруктураЗаписи.Вставить("ХозяйствующийСубъект"	   , ХозяйствующийСубъект);
	СтруктураЗаписи.Вставить("КонтрагентУчетнойСистемы", КонтрагентУчетнойСистемы);
		
	РегистрыСведений.СоответствиеХозяйствующихСубъектовКонтрагентамУчетнойСистемы.ДобавитьЗапись(СтруктураЗаписи);
КонецПроцедуры
Процедура СинхронизацияОрганизаций(Объект)
	ОрганизацияУчетнойСистемы = Объект.Ссылка;
	
	Если Не ЗначениеЗаполнено(ОрганизацияУчетнойСистемы.ИНН) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК Поле1
		|ИЗ
		|	РегистрСведений.СоответствиеОрганизацийОрганизациямУчетнойСистемы КАК СоответствиеОрганизацийОрганизациямУчетнойСистемы
		|ГДЕ
		|	СоответствиеОрганизацийОрганизациямУчетнойСистемы.ОрганизацияУчетнойСистемы = &ОрганизацияУчетнойСистемы
		|	И НЕ СоответствиеОрганизацийОрганизациямУчетнойСистемы.Организация.ПометкаУдаления";
		
	Запрос.УстановитьПараметр("ОрганизацияУчетнойСистемы", ОрганизацияУчетнойСистемы);
		
	РезультатЗапроса = Запрос.Выполнить();
		
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ИНН = &ИНН
		|	И НЕ Организации.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	Организации.Ссылка";
		
	Запрос.УстановитьПараметр("ИНН", ОрганизацияУчетнойСистемы.ИНН);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Организация = Выборка.Ссылка;
			
		СтруктураЗаписи = Новый Структура();
		
		СтруктураЗаписи.Вставить("Организация"	            , Организация);
		СтруктураЗаписи.Вставить("ОрганизацияУчетнойСистемы", ОрганизацияУчетнойСистемы);
		
		РегистрыСведений.СоответствиеОрганизацийОрганизациямУчетнойСистемы.ДобавитьЗапись(СтруктураЗаписи);
	
	КонецЕсли;
КонецПроцедуры
Процедура СинхронизацияУпаковок(Объект)
	УпаковкаУчетнойСистемы = Объект.Ссылка;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК Поле1
		|ИЗ
		|	РегистрСведений.СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы КАК СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы
		|ГДЕ
		|	СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы.ЕдиницаИзмеренияУчетнойСистемы = &УпаковкаУчетнойСистемы
		|	И НЕ СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы.ЕдиницаИзмеренияУпаковка.НеИспользуется
		|	И НЕ СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы.ЕдиницаИзмеренияУпаковка.ПометкаУдаления";
		
	Запрос.УстановитьПараметр("УпаковкаУчетнойСистемы", УпаковкаУчетнойСистемы);
		
	РезультатЗапроса = Запрос.Выполнить();
		
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НайденнаяСсылка = Справочники.Упаковки.НайтиПоНаименованию(УпаковкаУчетнойСистемы.Наименование);
	
	Если НайденнаяСсылка <> Справочники.Упаковки.ПустаяСсылка() Тогда
		
		СтруктураЗаписи = Новый Структура();
		
		СтруктураЗаписи.Вставить("ЕдиницаИзмеренияУпаковка"	     , НайденнаяСсылка);
		СтруктураЗаписи.Вставить("ЕдиницаИзмеренияУчетнойСистемы", УпаковкаУчетнойСистемы);
		
		РегистрыСведений.СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы.ДобавитьЗапись(СтруктураЗаписи);
	
	КонецЕсли;
КонецПроцедуры
Процедура СформироватьКомментарийДокумента(ДанныеXDTO, ДанныеИБ)
	ПредставлениеДокумента = Строка(ДанныеИБ);
	
	Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Загружен из УВС в %1. Документ: %2'"), ТекущаяДата(), ПредставлениеДокумента);
	
	ДанныеXDTO.Вставить("Комментарий", Комментарий);
КонецПроцедуры
Процедура СформироватьНомерДокумента(ДанныеXDTO, ДанныеИБ)
	// В типовых конфигурациях длина номера 11 символов, поэтому при выгрузке удалим первый ноль из номера
	
	Если СтрДлина(СокрЛП(ДанныеИБ.Номер)) = 12 Тогда
		ПозицияПервогоНуля   = СтрНайти(ДанныеИБ.Номер, 0,, 6);
		ФорматированныйНомер = Лев(ДанныеИБ.Номер, ПозицияПервогоНуля - 1) + Сред(ДанныеИБ.Номер, ПозицияПервогоНуля +1);
	КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер", ФорматированныйНомер);
КонецПроцедуры
Функция ПолучитьЕдиницуИзмеренияУчетнойСистемы(ДанныеИБ)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы.ЕдиницаИзмеренияУчетнойСистемы КАК ЕдиницаИзмеренияУчетнойСистемы
		|ИЗ
		|	РегистрСведений.СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы КАК СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы
		|ГДЕ
		|	СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы.ЕдиницаИзмеренияУпаковка = &ЕдиницаИзмеренияУпаковка
		|	И НЕ СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы.ЕдиницаИзмеренияУчетнойСистемы.ПометкаУдаления";
			
	Запрос.УстановитьПараметр("ЕдиницаИзмеренияУпаковка", ДанныеИБ);
			
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	
		ЕдиницаИзмеренияУчетнойСистемы = Справочники.УпаковкиЕдиницыИзмеренияУчетнойСистемы.СоздатьЭлемент();
		НоваяСсылка = Справочники.УпаковкиЕдиницыИзмеренияУчетнойСистемы.ПолучитьСсылку();
		ЕдиницаИзмеренияУчетнойСистемы.УстановитьСсылкуНового(НоваяСсылка);
		
		ЕдиницаИзмеренияУчетнойСистемы.УИ = Строка(НоваяСсылка.УникальныйИдентификатор());
		ЕдиницаИзмеренияУчетнойСистемы.Наименование = ДанныеИБ.Наименование;
		ЕдиницаИзмеренияУчетнойСистемы.ПолноеНаименование = ДанныеИБ.НаименованиеПолное;
	
		ЕдиницаИзмеренияУчетнойСистемы.Записать();
	
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("ЕдиницаИзмеренияУпаковка", ДанныеИБ);
		СтруктураЗаписи.Вставить("ЕдиницаИзмеренияУчетнойСистемы", ЕдиницаИзмеренияУчетнойСистемы.Ссылка);
	
		РегистрыСведений.СоответствиеЕдиницИзмеренийЕдиницамУчетнойСистемы.ДобавитьЗапись(СтруктураЗаписи);
	
		Возврат ЕдиницаИзмеренияУчетнойСистемы.Ссылка;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
			
		Возврат Выборка.ЕдиницаИзмеренияУчетнойСистемы;
	
	КонецЕсли;
КонецФункции

#КонецОбласти
#Область Параметры
// Заполняет параметры конвертации.
//
// Параметры:
//  ПараметрыКонвертации - структура, в которую добавляются параметры конвертации.
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
	ПараметрыКонвертации.Вставить("ВалютаПоУмолчанию");
	ПараметрыКонвертации.Вставить("Организации");
	ПараметрыКонвертации.Вставить("ИспользоватьОтборПоОрганизациям");
КонецПроцедуры

#КонецОбласти
#Область ОбщегоНазначения
// Процедура-обертка, выполняет запуск указанной в параметрах процедуры модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяПроцедуры - строка.
//  СтруктураПараметров - структура, содержащая передаваемые параметры.
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	Если ИмяПроцедуры = "ПОД_Документ_Инвентаризации_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_Инвентаризации_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПриходныеОперации_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПриходныеОперации_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПроизводственныеОперации_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПроизводственныеОперации_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ТранспортныеОперации_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ТранспортныеОперации_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_Инвентаризации_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_Инвентаризации_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПриходныеОперации_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПриходныеОперации_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПроизводственныеОперации_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПроизводственныеОперации_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ТранспортныеОперации_Перемещение_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ТранспортныеОперации_Перемещение_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ТранспортныеОперации_Реализация_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ТранспортныеОперации_Реализация_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КонтрагентыУСГруппа_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_КонтрагентыУСГруппа_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КонтрагентыУСГруппа_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_КонтрагентыУСГруппа_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КонтрагентыУчетнойСистемы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_КонтрагентыУчетнойСистемы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_КонтрагентыУчетнойСистемы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_КонтрагентыУчетнойСистемы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НоменклатураУСГруппа_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_НоменклатураУСГруппа_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НоменклатураУСГруппа_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_НоменклатураУСГруппа_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НоменклатураУчетнойСистемы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_НоменклатураУчетнойСистемы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НоменклатураУчетнойСистемы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_НоменклатураУчетнойСистемы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ОрганизацииУчетнойСистемы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ОрганизацииУчетнойСистемы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ОрганизацииУчетнойСистемы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ОрганизацииУчетнойСистемы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СкладыУСГруппа_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_СкладыУСГруппа_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СкладыУСГруппа_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_СкладыУСГруппа_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СкладыУчетнойСистемы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_СкладыУчетнойСистемы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СкладыУчетнойСистемы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_СкладыУчетнойСистемы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_УпаковкиЕдИзмУчетнойСистемыЕд_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_УпаковкиЕдИзмУчетнойСистемыЕд_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_УпаковкиЕдИзмУчетнойСистемыЕд_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_УпаковкиЕдИзмУчетнойСистемыЕд_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_УпаковкиЕдИзмУчетнойСистемыУп_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_УпаковкиЕдИзмУчетнойСистемыУп_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_УпаковкиЕдИзмУчетнойСистемыУп_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_УпаковкиЕдИзмУчетнойСистемыУп_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "СинхронизацияЕдиницИзмерения" Тогда 
		СинхронизацияЕдиницИзмерения(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "СинхронизацияКонтрагентов" Тогда 
		СинхронизацияКонтрагентов(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "СинхронизацияОрганизаций" Тогда 
		СинхронизацияОрганизаций(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "СинхронизацияУпаковок" Тогда 
		СинхронизацияУпаковок(
			Параметры.Объект);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
