#Область ПроисхождениеПродукции

#Область ПродукцияПроизводителя

Процедура ПродукцияПроизводителяНачалоВыбора(Объект, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.СтранаПроисхождения) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗарегистрированнаяПродукция", Объект.СтранаПроисхождения = ПредопределенноеЗначение("Справочник.СтраныМира.Россия"));
		ПараметрыФормы.Вставить("ВидПродукции"               , Объект.ВидПродукции);
		
		ОткрытьФорму(
			"Справочник.Продукция.ФормаВыбора",
			ПараметрыФормы,
			Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПродукцияПроизводителяАвтоПодбор(Объект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка) Экспорт
	
	СформироватьДанныеВыбораЗначенияПродукцииПроизводителя(Объект, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПродукцияПроизводителяОкончаниеВводаТекста(Объект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка) Экспорт
	
	СформироватьДанныеВыбораЗначенияПродукцииПроизводителя(Объект, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СформироватьДанныеВыбораЗначенияПродукцииПроизводителя(Объект, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.СтранаПроисхождения <> ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ЗарегистрированнаяПродукция", Истина);
	ПараметрыПодбора.Вставить("ВидПродукции"               , Объект.ВидПродукции);
	
	ДанныеВыбора = ОбщегоНазначенияУВСВызовСервера.ПродукцияПредприятия(ПараметрыПодбора, Текст);
	
КонецПроцедуры

#КонецОбласти

#Область ПроизводителиПродукции

Процедура ПроизводителиПродукцииПередНачаломДобавления(Элемент) Экспорт
	
	Элемент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Предприятия");
	
КонецПроцедуры

Процедура ПроизводителиПродукцииПриНачалеРедактирования(Элементы, ИмяТЧ, Элемент, НоваяСтрока, Копирование, ПроизводительДоНачалаИзменения) Экспорт
	
	Элемент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Предприятия");
	
	ТекущаяСтрока = Элементы[ИмяТЧ].ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущаяСтрока.РольПроизводителя = ПредопределенноеЗначение("Справочник.РолиПредприятий.ЯвляетсяПроизводителемПродукции");
	КонецЕсли;
	
	ПроизводительДоНачалаИзменения = ТекущаяСтрока.Производитель;
	
КонецПроцедуры

Процедура ПроизводителиПродукцииПередОкончаниемРедактирования(
		ДанныеФормы, ИмяТЧ, ПроизводительДоНачалаИзменения, Элемент, НоваяСтрока, ОтменаНачалаРедактирования, ОтменаЗавершенияРедактирования) Экспорт
	
	Если ОтменаНачалаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ПолучитьУправляемуюФорму(ДанныеФормы);
	
	Если ОбщегоНазначенияУВСКлиентСервер.ЕстьРеквизитОбъекта(Форма, ИмяТЧ) Тогда
		ТЧ = Форма[ИмяТЧ];
	Иначе
		ТЧ = Форма.Объект[ИмяТЧ];
	КонецЕсли;
	
	ЭлементыФормы = Форма.Элементы;
	
	ТекущиеДанные = ЭлементыФормы[ИмяТЧ].ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Производитель = ТекущиеДанные.Производитель;
	
	Если Производитель = Неопределено Тогда
		ОтменаЗавершенияРедактирования = Истина; // Запрет пустых значений.
	Иначе
		СтрокиСПроизводителями = ТЧ.НайтиСтроки(Новый Структура("Производитель", Производитель));
		ОтменаЗавершенияРедактирования = СтрокиСПроизводителями.Количество() > 1; // Запрет дублей.
	КонецЕсли;
	
	Если ОтменаЗавершенияРедактирования Тогда
		Состояние(НСтр("ru = 'Обнаружен дублирующийся/либо не заполненный производитель. Редактирование отменено.'"));
		// Откат значений.
		ТекущиеДанные.Производитель = ПроизводительДоНачалаИзменения;
		// Перезапуск события "ПередОкончаниемРедактирования" с ОтменаНачалаРедактирования = Истина.
		Элемент.ЗакончитьРедактированиеСтроки(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроизводителиПродукцииПроизводительНачалоВыбора(Объект, Элемент, СтандартнаяОбработка) Экспорт
	
	ОткрытьФормуВыбораПроизводителей(Объект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПроизводителиПродукцииПроизводительОбработкаВыбора(Объект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	ОткрытьФормуВыбораПроизводителей(Объект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПроизводителиПродукцииПроизводительАвтоПодбор(Объект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка) Экспорт

	СформироватьДанныеВыбораЗначенияПроизводителейПродукции(Объект, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПроизводителиПродукцииПроизводительОкончаниеВводаТекста(Объект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка) Экспорт
	
	СформироватьДанныеВыбораЗначенияПроизводителейПродукции(Объект, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОткрытьФормуВыбораПроизводителей(Объект, Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.ПродукцияПроизводителя) Тогда
		
		СписокПроизводителей = ИнтеграцияВетисAPIВызовСервера.СписокПроизводителейПродукции(Объект.ПродукцияПроизводителя, Объект.СтранаПроисхождения);
		
		Если СписокПроизводителей <> Неопределено Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ОтборПоПредприятиям", СписокПроизводителей);
			
			ОткрытьФорму(
				"Справочник.Предприятия.ФормаВыбора",
				ПараметрыФормы,
				Элемент);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДанныеВыбораЗначенияПроизводителейПродукции(Объект, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.ПродукцияПроизводителя) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	СписокПроизводителей = ИнтеграцияВетисAPIВызовСервера.СписокПроизводителейПродукции(Объект.ПродукцияПроизводителя, Объект.СтранаПроисхождения, Текст);
	
	Если СписокПроизводителей <> Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДанныеВыбора = СписокПроизводителей;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РаботаСДатамиВыработкиИСроковГодности

Процедура ОткрытьФормуЗаданияДат(Форма, Данные, Элемент, ЗаданиеДатВыработки = Истина) Экспорт
	
	ДанныеПоСрокам = Новый Структура;
	ДанныеПоСрокам.Вставить("Продукция");
	ДанныеПоСрокам.Вставить("СкоропортящаясяПродукция");
	Если ЗаданиеДатВыработки Тогда
		ДанныеПоСрокам.Вставить("ФорматДатыВыработки");
		ДанныеПоСрокам.Вставить("ДатаВыработкиНачало");
		ДанныеПоСрокам.Вставить("ДатаВыработкиОкончание");
		ДанныеПоСрокам.Вставить("ДатаВыработкиСтрокой");
	Иначе
		ДанныеПоСрокам.Вставить("ФорматСрокаГодности");
		ДанныеПоСрокам.Вставить("ДатаОкончанияСрокаГодностиНачало");
		ДанныеПоСрокам.Вставить("ДатаОкончанияСрокаГодностиОкончание");
		ДанныеПоСрокам.Вставить("ДатаСрокаГодностиСтрокой");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеПоСрокам, Данные);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр"     , Форма.ТолькоПросмотр);
	ПараметрыФормы.Вставить("ЗаданиеДатВыработки", ЗаданиеДатВыработки);
	ПараметрыФормы.Вставить("ДанныеПоСрокам"     , ДанныеПоСрокам);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Данные"             , Данные);
	ДополнительныеПараметры.Вставить("Форма"              , Форма);
	ДополнительныеПараметры.Вставить("ЗаданиеДатВыработки", ЗаданиеДатВыработки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаданиеДатЗавершение", ИнтеграцияВетисAPIКлиент, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ФормаЗаданияДат", ПараметрыФормы, Элемент,,,, ОписаниеОповещения);
	
КонецПроцедуры

Процедура ЗаданиеДатЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Данные = ДополнительныеПараметры.Данные;
	Форма  = ДополнительныеПараметры.Форма;
	
	ЗаполнитьЗначенияСвойств(Данные, Результат);
	
	Если ТипЗнч(Данные) = Тип("ДанныеФормыСтруктура") Тогда
		Если ДополнительныеПараметры.ЗаданиеДатВыработки Тогда
			Форма.ПредставлениеДатыВыработки  = ИнтеграцияВетисAPIКлиентСервер.СформироватьПредставлениеДатыВыработки(Данные);
		Иначе
			Форма.ПредставлениеСрокаГодности  = ИнтеграцияВетисAPIКлиентСервер.СформироватьПредставлениеСрокаГодности(Данные);
		КонецЕсли;
	Иначе
		Если ДополнительныеПараметры.ЗаданиеДатВыработки Тогда
			Данные.ПредставлениеДатыВыработки = ИнтеграцияВетисAPIКлиентСервер.СформироватьПредставлениеДатыВыработки(Данные);
		Иначе
			Данные.ПредставлениеСрокаГодности = ИнтеграцияВетисAPIКлиентСервер.СформироватьПредставлениеСрокаГодности(Данные);
		КонецЕсли;
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

Процедура ПриИзмененииПризнакаСкоропортящейсяПродукции(ТекущиеДанные) Экспорт
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.СкоропортящаясяПродукция Тогда
		Если ТекущиеДанные.ФорматДатыВыработки <> ПредопределенноеЗначение("Перечисление.СпособыЗаданияДаты.Неизвестно")
			И ТекущиеДанные.ФорматДатыВыработки <> ПредопределенноеЗначение("Перечисление.СпособыЗаданияДаты.Строка") Тогда
			ТекущиеДанные.ФорматДатыВыработки = ПредопределенноеЗначение("Перечисление.СпособыЗаданияДаты.Дата");
		КонецЕсли;
		Если ТекущиеДанные.ФорматСрокаГодности <> ПредопределенноеЗначение("Перечисление.СпособыЗаданияДаты.БезСрокаГодности")
			И ТекущиеДанные.ФорматСрокаГодности <> ПредопределенноеЗначение("Перечисление.СпособыЗаданияДаты.НеОграничен")
			И ТекущиеДанные.ФорматСрокаГодности <> ПредопределенноеЗначение("Перечисление.СпособыЗаданияДаты.Строка") Тогда
				ТекущиеДанные.ФорматСрокаГодности = ПредопределенноеЗначение("Перечисление.СпособыЗаданияДаты.Дата");
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанные.ФорматДатыВыработки = ПредопределенноеЗначение("Перечисление.СпособыЗаданияДаты.Дата") Тогда
		ТекущиеДанные.ДатаВыработкиНачало                 = НачалоДня(ТекущиеДанные.ДатаВыработкиНачало);
		ТекущиеДанные.ДатаВыработкиОкончание              = НачалоДня(ТекущиеДанные.ДатаВыработкиОкончание);
		ТекущиеДанные.ДатаОкончанияСрокаГодностиНачало    = НачалоДня(ТекущиеДанные.ДатаОкончанияСрокаГодностиНачало);
		ТекущиеДанные.ДатаОкончанияСрокаГодностиОкончание = НачалоДня(ТекущиеДанные.ДатаОкончанияСрокаГодностиОкончание);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВводМесяцаПриИзменении(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, Модифицированность = Ложь) Экспорт
	
	ЗначениеПредставления = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления);
	Значение              = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	
	ДатаКакМесяцПодобратьДатуПоТексту(ЗначениеПредставления, Значение);
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, ПолучитьПредставлениеМесяца(Значение));
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
	
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ВводМесяцаНачалоВыбора(РедактируемыйОбъект, Элемент, ПутьРеквизита, ПутьРеквизитаПредставления, СтандартнаяОбработка, НачальноеЗначение = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если НачальноеЗначение = Неопределено Тогда
		
		НачальноеЗначение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
		
		Если НачальноеЗначение <= '19000101' Тогда
			
			НачальноеЗначение = НачалоМесяца(ТекущаяДата());
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РедактируемыйОбъект", РедактируемыйОбъект);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ПутьРеквизита", ПутьРеквизита);
	ДополнительныеПараметры.Вставить("ПутьРеквизитаПредставления", ПутьРеквизитаПредставления);
	ДополнительныеПараметры.Вставить("СтандартнаяОбработка", СтандартнаяОбработка);
	ДополнительныеПараметры.Вставить("НачальноеЗначение", НачальноеЗначение);
	
	СписокВыбора = Новый СписокЗначений;
	НачалоТекущегоГода = НачалоГода(НачальноеЗначение);
	НачалоПрошлогоГода = НачалоГода(НачалоТекущегоГода - 1);
	СписокВыбора.Добавить(НачалоПрошлогоГода, (Формат(НачалоПрошлогоГода, "ДФ='yyyy'") + "..."));
	НачалоМесяцаЗаполнения = НачалоТекущегоГода;
	ЭлементПоУмолчанию = Неопределено;
	Для а = 1 По 12 Цикл
		ДобавленныйЭлемент = СписокВыбора.Добавить(НачалоМесяцаЗаполнения, ПолучитьПредставлениеМесяца(НачалоМесяцаЗаполнения));
		Если НачальноеЗначение = НачалоМесяцаЗаполнения Тогда
			ЭлементПоУмолчанию = ДобавленныйЭлемент;
		КонецЕсли; 
		НачалоМесяцаЗаполнения = ДобавитьМесяц(НачалоМесяцаЗаполнения, 1);
	КонецЦикла;
	НачалоСледующегоГода = КонецГода(НачалоТекущегоГода) + 1;
	СписокВыбора.Добавить(НачалоСледующегоГода, (Формат(НачалоСледующегоГода, "ДФ='yyyy'") + "..."));
	
	Оповещение = Новый ОписаниеОповещения("ВводМесяцаПослеВыбора", ИнтеграцияВетисAPIКлиент, ДополнительныеПараметры);
	
	РедактируемыйОбъект.ПоказатьВыборИзСписка(Оповещение, СписокВыбора, Элемент, ЭлементПоУмолчанию);
	
КонецПроцедуры

Процедура ВводМесяцаПослеВыбора(ВыбраннаяДата, ДополнительныеПараметры) Экспорт
	
	Если ВыбраннаяДата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РедактируемыйОбъект        = ДополнительныеПараметры.РедактируемыйОбъект;
	Элемент                    = ДополнительныеПараметры.Элемент;
	ПутьРеквизита              = ДополнительныеПараметры.ПутьРеквизита;
	ПутьРеквизитаПредставления = ДополнительныеПараметры.ПутьРеквизитаПредставления;
	СтандартнаяОбработка       = ДополнительныеПараметры.СтандартнаяОбработка;
	
	Если Год(ВыбраннаяДата.Значение) <> Год(ДополнительныеПараметры.НачальноеЗначение) Тогда
		ВводМесяцаНачалоВыбора(РедактируемыйОбъект,
			Элемент,
			ПутьРеквизита,
			ПутьРеквизитаПредставления,
			СтандартнаяОбработка,
			ВыбраннаяДата.Значение);
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, ПолучитьПредставлениеМесяца(ВыбраннаяДата.Значение));
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, ВыбраннаяДата.Значение);
	РедактируемыйОбъект.Модифицированность = Истина;
	
КонецПроцедуры

Процедура ВводМесяцаРегулирование(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, Направление, Модифицированность = Ложь, ЗначениеМесяцаПоУмолчанию = Неопределено) Экспорт
	
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	
	Если Значение <= '19000101' Тогда
		
		Если ЗначениеМесяцаПоУмолчанию = Неопределено Тогда
			Значение = НачалоМесяца(ОбщегоНазначенияКлиент.ДатаСеанса());
		Иначе
			Значение = НачалоМесяца(ЗначениеМесяцаПоУмолчанию);
		КонецЕсли;
		
		НовоеЗначение = Значение;
		
	Иначе
		НовоеЗначение = ДобавитьМесяц(Значение, Направление);
	КонецЕсли; 
	
	Если НовоеЗначение >= '00010101' Тогда
		
		Значение = НовоеЗначение;
		
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, ПолучитьПредставлениеМесяца(Значение));
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Если Не ПустаяСтрока(Текст) Тогда
		ДанныеВыбора = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Если Текст <> "" Тогда
		ДанныеВыбора = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает представление месяца по переданной дате.
//
// Параметры:
//		ДатаНачалаМесяца
//
// Возвращаемое значение;
//		Строка
//
Функция ПолучитьПредставлениеМесяца(ДатаНачалаМесяца) Экспорт
	
	Возврат Формат(ДатаНачалаМесяца, "ДФ='ММММ гггг'");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Универсальный механизм "Месяц строкой".

// Подбирает массив номеров месяцев, соответствующих переданной строке
// например, для строки "ма" это будут 3 и 5, для "а" - 4 и 8
// используется в ПодобратьДатуПоТексту.
//
Функция СписокМесяцевПоСтроке(Текст)
	
	СписокМесяцев  = Новый СписокЗначений;
	Месяцы         = Новый Соответствие;
	МесяцыВозврата = Новый Массив;
	
	Для Счетчик = 1 По 12 Цикл
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='ММММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='МММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из СписокМесяцев Цикл
		Если ВРег(Текст) = ВРег(Лев(ЭлементСписка.Представление, СтрДлина(Текст))) Тогда
			Месяцы[ЭлементСписка.Значение] = 0;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из Месяцы Цикл
		МесяцыВозврата.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Возврат МесяцыВозврата;
	
КонецФункции

Функция ДатаКакМесяцПодобратьДатуПоТексту(Текст, ДатаПоТексту = НеОпределено)
	
	СписокВозврата = Новый СписокЗначений;
	ТекущийГод = Год(ОбщегоНазначенияКлиент.ДатаСеанса());
	
	Если ПустаяСтрока(Текст) Тогда
		ДатаПоТексту = Дата(1, 1, 1);
		Возврат СписокВозврата;
	КонецЕсли;
	
	Если СтрНайти(Текст, ".") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ".");
	ИначеЕсли СтрНайти(Текст, ",") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ",");
	ИначеЕсли СтрНайти(Текст, "-") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "-");
	ИначеЕсли СтрНайти(Текст, "/") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "/");
	ИначеЕсли СтрНайти(Текст, "\") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "\");
	Иначе
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, " ");
	КонецЕсли;
	
	Если Подстроки.Количество() = 1 Тогда
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Текст) Тогда
			МесяцЧислом = Число(Текст);
			Если МесяцЧислом >= 1 И МесяцЧислом <=12 Тогда
				ДатаПоТексту = Дата(ТекущийГод, МесяцЧислом, 1);
				Если СтрДлина(Текст) = 1 Тогда
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='М/гг'"));
				Иначе
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММ/гг'"));
				КонецЕсли;
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
		Иначе
			СписокМесяцев = СписокМесяцевПоСтроке(Текст);
			Для Каждого Месяц Из СписокМесяцев Цикл
				ДатаПоТексту = Дата(ТекущийГод, Месяц, 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Подстроки.Количество() = 2 Тогда
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
			
			Если ПустаяСтрока(Подстроки[1]) Тогда
				ГодЧислом = 0;
				Подстроки[1] = "0";
				ТекстВозврата = Текст + "0";
			Иначе
				ГодЧислом = Число(Подстроки[1]);
				ТекстВозврата = "";
			КонецЕсли;
			
			Если ГодЧислом > 3000 Тогда
				Возврат СписокВозврата;
			КонецЕсли;
			
			Если СтрДлина(Подстроки[1]) <= 1 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 3) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 2 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 2) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 3 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 1) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 4 Тогда
				ГодЧислом = Число(Подстроки[1]);
			КонецЕсли;                    
			
		Иначе
			
			Возврат СписокВозврата;
			
		КонецЕсли;                
		Если ЗначениеЗаполнено(Подстроки[0]) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
			
			МесяцЧислом = Число(Подстроки[0]);
			Если МесяцЧислом >= 1 И МесяцЧислом <= 12 Тогда
				ДатаПоТексту = Дата(ГодЧислом, МесяцЧислом, 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
			
		Иначе
			
			СписокМесяцев = СписокМесяцевПоСтроке(Подстроки[0]);
			
			Если СписокМесяцев.Количество() = 1 Тогда
				ДатаПоТексту = Дата(ГодЧислом, СписокМесяцев[0], 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гггг'"));
			Иначе
				Для Каждого Месяц Из СписокМесяцев Цикл
					ДатаПоТексту = Дата(ГодЧислом, Месяц, 1);
					СписокВозврата.Добавить(Формат(Дата(ГодЧислом, Месяц, 1), "ДФ='ММММ гггг'"));
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокВозврата;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьУправляемуюФорму(ДанныеФормы) Экспорт
	
	Если ТипЗнч(ДанныеФормы) = Тип("УправляемаяФорма") Тогда
		Возврат ДанныеФормы;
	Иначе
		Возврат ПолучитьУправляемуюФорму(ДанныеФормы.Родитель);
	КонецЕсли;
	
КонецФункции

#КонецОбласти