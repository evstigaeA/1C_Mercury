#Область ПрограммныйИнтерфейс

// Процедура заполняет элемент контактной информации
//
// Параметры:
//  Форма					 - УправляемаяФорма							 - форма, из которой вызывается процедура.
//  ВидКонтактнойИнформации	 - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации, для которого
//																		   получаются данные.
//  СтруктураДанных			 - Структура								 - данные контактной информации.
//
Процедура ЗаполнитьЭлементКонтактнойИнформации(Форма, ВидКонтактнойИнформации, СтруктураДанных) Экспорт
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = ДанныеСтрокиКонтактнойИнформацииПоВиду(Форма, ВидКонтактнойИнформации);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДанныеСтроки.Представление = СтруктураДанных.Представление;
	ДанныеСтроки.ЗначенияПолей = СтруктураДанных.КонтактнаяИнформация;
	Форма[ДанныеСтроки.ИмяРеквизита] = СтруктураДанных.Представление;
	
КонецПроцедуры

// Получает данные контактной информации партнера, хранящиеся в таблице формы.
//
// Параметры:
//  Форма                   - УправляемаяФорма - форма, в которой находится таблица с данными.
//  ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации, для которого
//																		  получаются данные.
//
// Возвращаемое значение:
//   ДанныеФормыЭлементКоллекции   - строка с данными контактной информации.
//
Функция ДанныеСтрокиКонтактнойИнформацииПоВиду(Форма, ВидКонтактнойИнформации) Экспорт
	
	Отбор  = Новый Структура("Вид", ВидКонтактнойИнформации);
	Строки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	Возврат ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Формирует текст ошибок заполнения полей и списков.
//
// Параметры:
//  Форма       	- Форма - передаваемая форма;
//  РеквизитыФормы  - Строка - перечисленные через запятую наименования реквизитов формы
//					в формате "Реквизит1,Реквизит2,...".
//
// Возвращаемое значение:
//   Строка - обобщенное представление элементов формы.
//
Функция ОбщееПредставлениеЭлементовФорм(Форма, РеквизитыФормыСтрокой) Экспорт 

	МассивИменРеквизитов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(РеквизитыФормыСтрокой);
	
	Текст = "";
	
	Для каждого ИмяРеквизита Из МассивИменРеквизитов Цикл
	
		Если ЗначениеЗаполнено(Форма[ИмяРеквизита]) Тогда
			Текст = Текст + 1;
		КонецЕсли;
		
	КонецЦикла; 

	Если Текст <> "" Тогда
		Текст = Лев(Текст, СтрДлина(Текст) - 2);
	КонецЕсли; 
	
	Возврат Текст
	
КонецФункции

Процедура ПродукцияУпаковкиВыбор(ЭтотОбъект, ТекущиеДанные = Неопределено, ИдентификаторСтроки = "", ТабЧасть = "СписокФизическихУпаковок", ТолькоПросмотр = Неопределено) Экспорт
	
	Объект = ЭтотОбъект.Объект;
	
	АдресХранения = ОбщегоНазначенияУВСВызовСервера.ПоместитьТаблицуУпаковокВоВременноеХранилище(Объект, ИдентификаторСтроки, ТабЧасть, ЭтотОбъект.УникальныйИдентификатор);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресХранения",  АдресХранения);
	Если ТолькоПросмотр = Неопределено Тогда
		Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОбъединениеЗаписейСкладскогоЖурнала") Тогда
			ПараметрыФормы.Вставить("ТолькоПросмотр", Истина);
		Иначе
			ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтотОбъект.ТолькоПросмотр);
		КонецЕсли;
	Иначе
		ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЭтотОбъект",    ЭтотОбъект);
	ДополнительныеПараметры.Вставить("ТабЧасть",      ТабЧасть);
	ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборУпаковокЗавершение", ОбщегоНазначенияУВСКлиент, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ВводДанныхПоУпаковкам.Форма", ПараметрыФормы,,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ВыборУпаковокЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные   = ДополнительныеПараметры.ТекущиеДанные;
	мЭтотОбъект     = ДополнительныеПараметры.ЭтотОбъект;
	ТабЧасть        = ДополнительныеПараметры.ТабЧасть;
	
	Если ТекущиеДанные = Неопределено Тогда
		мЭтотОбъект.Объект[ТабЧасть].Очистить();
	Иначе
		НайденныеСтроки = мЭтотОбъект.Объект[ТабЧасть].НайтиСтроки(Новый Структура("GUIDСтроки", ТекущиеДанные.GUIDСтроки));
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			мЭтотОбъект.Объект[ТабЧасть].Удалить(ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
	Если Результат.Количество() = 0 Тогда
		ТекстУпаковок = НСтр("ru = 'Без упаковок'");
	Иначе
		Для Каждого ТекДанные Из Результат Цикл
			НоваяСтрока = мЭтотОбъект.Объект[ТабЧасть].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекДанные);
			Если ТекущиеДанные <> Неопределено Тогда
				НоваяСтрока.GUIDСтроки = ТекущиеДанные.GUIDСтроки;
			КонецЕсли;
		КонецЦикла;
		ТекстУпаковок = НСтр("ru = 'Введены данные по упаковкам'");
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.Упаковки = ТекстУпаковок;
	Иначе
		мЭтотОбъект.Элементы.ГиперссылкаПерейтиУпаковкиЗаписейСкладскогоЖурнала.Заголовок = Новый ФорматированнаяСтрока(ТекстУпаковок,,,,"СвойстваЗаписейСкладскогоЖурнала");
	КонецЕсли;
	
	мЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

Процедура ОткрытьФормуЖурналаСостоянияЗаявок(ЭтотОбъект, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ЗначениеОтбора  = Новый Структура("ДокументСсылка", ЭтотОбъект.Объект.Ссылка);
	ПараметрыОтбора = Новый Структура("Отбор"		  , ЗначениеОтбора);
	
	ОткрытьФорму("РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ФормаСписка", ПараметрыОтбора, ЭтотОбъект);
	
КонецПроцедуры

Процедура УстановитьВидимостьДанныхПоТипуПеревозки(Форма) Экспорт
	
	ЭлементыФормы = Форма.Элементы;
	Объект        = Форма.Объект;
	
	ЭлементыФормы.ГруппаТранспортировка.Видимость = Объект.ПредприятиеОтправитель <> Объект.ПредприятиеПолучатель;
	
КонецПроцедуры

#КонецОбласти

#Область СервисныеПроцедуры

// Обработка оповещения для документов ДокументСсылка.ПриходныеОперации, ДокументСсылка.ТранспортныеОперации, ДокументСсылка.ПроизводственныеОперации.
//
Процедура ОповеститьДокументы(ИмяСобытия, Параметр, Источник, Форма)  Экспорт

	Если ИмяСобытия = "ИзменениеСтатусаЗаявкиНаОформлениеОперации" Тогда
		
		// в этом случае параметр должен быть типа "Массив" из списка документов
		Если ТипЗнч(Параметр) = Тип("Массив") И Параметр.Найти(Форма.Объект.Ссылка) <> Неопределено Тогда
			ОбщегоНазначенияУВСКлиентСервер.ДополнительныеДействияСФормой(Форма);
			Форма.Прочитать();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#Область ОбработчикиСобытий_Предприятие

Процедура ПредприятиеПриИзменении(Контрагент, Предприятие) Экспорт
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Предприятие) Тогда
		Возврат
	КонецЕсли;
	
	Если Не ОбщегоНазначенияУВСВызовСервера.КонтрагентПредприятиеСвязаны(Контрагент, Предприятие) Тогда
		Контрагент = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПредприятиеНачалоВыбора(Элемент, СтандартнаяОбработка, Организация = Неопределено, Контрагент = Неопределено, ОбслуживаемыеТекущимПользователем = Истина, ВозможностьВыбораБезУчетаСвязи = Истина, УполномоченноеГашение = Ложь) Экспорт
	
	Если УполномоченноеГашение Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ОтборПоПредприятиям", ИнтеграцияВетисAPIВызовСервера.ПредприятияУполномоченногоГашения(Организация, Контрагент));
		ПараметрыФормы.Вставить("ВозможностьВыбораБезУчетаСвязи", Истина);
		
	ИначеЕсли ОбслуживаемыеТекущимПользователем Тогда
		
		ПараметрыФормы = Новый Структура("ОтборПоПредприятиям", ОбщегоНазначенияУВСВызовСервера.ПолучитьПредприятияОбслуживаемыеТекущимПользователем(Организация));
		
	Иначе
		
		Если Не ЗначениеЗаполнено(Контрагент) Тогда
			Возврат
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("ОтборПоПредприятиям, ВозможностьВыбораБезУчетаСвязи", ОбщегоНазначенияУВСВызовСервера.ПредприятияПоКонтрагенту(Контрагент), ВозможностьВыбораБезУчетаСвязи);
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("Справочник.Предприятия.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

Процедура ПредприятиеАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка, Организация = Неопределено, Контрагент = Неопределено, ОбслуживаемыеТекущимПользователем = Истина, УполномоченноеГашение = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		Если УполномоченноеГашение Тогда
			
			ДанныеВыбора = ИнтеграцияВетисAPIВызовСервера.ПредприятияУполномоченногоГашения(Организация, Контрагент, Текст);
			
		ИначеЕсли ОбслуживаемыеТекущимПользователем Тогда
			
			ДанныеВыбора = ОбщегоНазначенияУВСВызовСервера.ПолучитьПредприятияОбслуживаемыеТекущимПользователем(Организация, Истина, Текст);
			
		Иначе
			
			Если Не ЗначениеЗаполнено(Контрагент) Тогда
				Возврат;
			КонецЕсли;
			
			ДанныеВыбора = ОбщегоНазначенияУВСВызовСервера.ПредприятияПоКонтрагенту(Контрагент, Истина, Текст);
			
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПредприятиеОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка, Организация = Неопределено, Контрагент = Неопределено, ОбслуживаемыеТекущимПользователем = Истина, УполномоченноеГашение = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		Если УполномоченноеГашение Тогда
			
			ДанныеВыбора = ИнтеграцияВетисAPIВызовСервера.ПредприятияУполномоченногоГашения(Организация, Контрагент, Текст);
			
		ИначеЕсли ОбслуживаемыеТекущимПользователем Тогда
			
			ДанныеВыбора = ОбщегоНазначенияУВСВызовСервера.ПолучитьПредприятияОбслуживаемыеТекущимПользователем(Организация, Истина, Текст);
			
		Иначе
			
			Если Не ЗначениеЗаполнено(Контрагент) Тогда
				Возврат;
			КонецЕсли;
			
			ДанныеВыбора = ОбщегоНазначенияУВСВызовСервера.ПредприятияПоКонтрагенту(Контрагент, Истина, Текст);
			
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьЗначениеРеквизитовПоТипуПеревозки(Объект) Экспорт
	
	Если Объект.ПредприятиеОтправитель = Объект.ПредприятиеПолучатель Тогда//Смена владельца без перемещения
		
		Объект.ТипТТН    = Неопределено;
		Объект.НомерТТН  = "";
		Объект.ДатаТТН   = Неопределено;
		Объект.Транспорт = Неопределено;
		Объект.СпособХраненияПриПеревозке = Неопределено;
		Объект.ТаблицаМаршрутСледования.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_Контрагенты

Процедура КонтрагентПриИзменении(Контрагент, Предприятие) Экспорт
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Предприятие) Тогда
		Возврат
	КонецЕсли;
	
	Если Не ОбщегоНазначенияУВСВызовСервера.КонтрагентПредприятиеСвязаны(Контрагент, Предприятие) Тогда
		Предприятие = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура КонтрагентНачалоВыбора(Элемент, СтандартнаяОбработка, Организация = Неопределено, Предприятие, Основной = Ложь, УполномоченноеГашение = Ложь) Экспорт
	
	Если УполномоченноеГашение Тогда
		
		ПараметрыФормы = Новый Структура("ОтборПоКонтрагентам", ИнтеграцияВетисAPIВызовСервера.КонтрагентыУполномоченногоГашения(Организация, Предприятие));
		
	Иначе
		
		Если Не ЗначениеЗаполнено(Предприятие) Тогда
			Возврат
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("ОтборПоКонтрагентам, ВозможностьВыбораБезУчетаСвязи", ОбщегоНазначенияУВСВызовСервера.КонтрагентыПоПредприятию(Предприятие, , , Основной), Не Основной);
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

Процедура КонтрагентАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка, Организация = Неопределено, Предприятие, Основной = Ложь, УполномоченноеГашение = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		Если УполномоченноеГашение Тогда
			
			ДанныеВыбора = ИнтеграцияВетисAPIВызовСервера.КонтрагентыУполномоченногоГашения(Организация, Предприятие, Текст);
			
			
		Иначе
			
			Если Не ЗначениеЗаполнено(Предприятие) Тогда
				Возврат
			КонецЕсли;
			
			ДанныеВыбора = ОбщегоНазначенияУВСВызовСервера.КонтрагентыПоПредприятию(Предприятие, Истина, Текст, Основной);
			
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КонтрагентОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка, Организация = Неопределено, Предприятие, Основной = Ложь, УполномоченноеГашение = Ложь) Экспорт

	Если ЗначениеЗаполнено(Текст) Тогда
		
		Если УполномоченноеГашение Тогда
			
			ДанныеВыбора  = ИнтеграцияВетисAPIВызовСервера.КонтрагентыУполномоченногоГашения(Организация, Предприятие, Текст);
			
		Иначе
			
			Если Не ЗначениеЗаполнено(Предприятие) Тогда
				Возврат
			КонецЕсли;
			
			ДанныеВыбора = ОбщегоНазначенияУВСВызовСервера.КонтрагентыПоПредприятию(Предприятие, Истина, Текст, Основной);
			
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_НоменклатураУчетнойСистемы

Процедура НоменклатураУчетнойСистемыНачалоВыбора(Элемент, СтандартнаяОбработка, ЗаписьСкладскогоЖурнала) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("ОтборПоНоменклатуре", ОбщегоНазначенияУВСВызовСервера.НоменклатураУчетнойСистемыПоПродукции(ЗаписьСкладскогоЖурнала));
	
	ОткрытьФорму("Справочник.НоменклатураУчетнойСистемы.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

Процедура НоменклатураУчетнойСистемыАвтоПодбор(ДанныеВыбора, Текст, СтандартнаяОбработка, ЗаписьСкладскогоЖурнала) Экспорт
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОбщегоНазначенияУВСВызовСервера.НоменклатураУчетнойСистемыАвтоПодбор(ДанныеВыбора, Текст, ЗаписьСкладскогоЖурнала);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НоменклатураУчетнойСистемыОкончаниеВводаТекста(ДанныеВыбора, Текст, СтандартнаяОбработка, ЗаписьСкладскогоЖурнала) Экспорт
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОбщегоНазначенияУВСВызовСервера.НоменклатураУчетнойСистемыОкончаниеВводаТекста(ДанныеВыбора, Текст, ЗаписьСкладскогоЖурнала);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти