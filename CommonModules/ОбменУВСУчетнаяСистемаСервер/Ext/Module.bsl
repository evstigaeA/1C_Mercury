
#Область ЗагрузкаНСИУчетнойСистемы

Процедура ЗагрузкаНСИУчетнойСистемы() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ЗагрузкаНСИУчетнойСистемы);
	
	СоединениеСБазой = ВыполнитьПодключениеКИБУчетнойСистемы();
	
	Если СоединениеСБазой = Неопределено Тогда
		ЗаписьЖурналаРегистрации("Ошибка подключения к учетной системе", УровеньЖурналаРегистрации.Ошибка , , , );
		Возврат
	КонецЕсли;
	
	КонфигурацияУчетнойСистемы = ПолучитьЗначениеКонфигурацииУчетнойСистемы();
	
	ТЗВидыНоменклатуры = ПолучитьТЗВидыНоменклатуры(СоединениеСБазой, КонфигурацияУчетнойСистемы);
	ЗагрузитьВидыНоменклатуры(ТЗВидыНоменклатуры);
	
	СтруктруаРезультат = ПолучитьТЗГруппНоменклатурыИНоменклатуры(СоединениеСБазой);
	ЗагрузитьГруппыНоменклатуры(СтруктруаРезультат.ТЗГруппыНоменклатурыЗагрузка);
	ЗагрузитьНоменклатуру(СтруктруаРезультат.ТЗНоменклатураЗагрузка);
	
	ТЗОрганизации = ПолучитьТЗОрганизации(СоединениеСБазой);
	ЗагрузитьОрганизации(ТЗОрганизации);
	
	ТЗКонтрагенты = ПолучитьТЗКонтрагенты(СоединениеСБазой);
	ЗагрузитьКонтрагентов(ТЗКонтрагенты);
	
	ТЗСклады = ПолучитьТЗСклады(СоединениеСБазой);
	ЗагрузитьСклады(ТЗСклады);
	
КонецПроцедуры

Функция ПолучитьТЗВидыНоменклатуры(СоединениеСБазой, КонфигурацияУчетнойСистемы)
	Запрос = СоединениеСБазой.NewObject("Запрос");
	
	Если КонфигурацияУчетнойСистемы = "УТ10" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыНоменклатуры.Ссылка КАК Ссылка,
		|	ВидыНоменклатуры.Наименование КАК Наименование,
		|	ВидыНоменклатуры.ПометкаУдаления,
		|	""                                    "" КАК УИ
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры";
		
	ИначеЕсли КонфигурацияУчетнойСистемы = "УТ11" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыНоменклатуры.Ссылка КАК Ссылка,
		|	ВидыНоменклатуры.Наименование КАК Наименование,
		|	ВидыНоменклатуры.ПометкаУдаления,
		|	""                                    "" КАК УИ
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|ГДЕ
		|	НЕ ВидыНоменклатуры.ЭтоГруппа";
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗВидыНоменклатурыВыгрузка = РезультатЗапроса.Выгрузить();
	
	Для каждого СтрокаТЗВидыНоменклатурыВыгрузка Из ТЗВидыНоменклатурыВыгрузка Цикл
		СтрокаТЗВидыНоменклатурыВыгрузка.УИ = СоединениеСБазой.XMLСтрока(СтрокаТЗВидыНоменклатурыВыгрузка.Ссылка.УникальныйИдентификатор());	
	КонецЦикла;
	
	СтрокаРезультат = СоединениеСБазой.ЗначениеВСтрокуВнутр(ТЗВидыНоменклатурыВыгрузка); 
	ТЗВидыНоменклатурыЗагрузка = ЗначениеИзСтрокиВнутр(СтрокаРезультат);
	
	Возврат ТЗВидыНоменклатурыЗагрузка;
КонецФункции	

Процедура ЗагрузитьВидыНоменклатуры(ТЗВидыНоменклатуры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЗВидыНоменклатуры.Наименование,
	|	ТЗВидыНоменклатуры.УИ,
	|	ТЗВидыНоменклатуры.ПометкаУдаления
	|ПОМЕСТИТЬ ВТ_ТЗВидыНоменклатуры
	|ИЗ
	|	&ТЗВидыНоменклатуры КАК ТЗВидыНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЗВидыНоменклатуры.УИ КАК УИИсточника,
	|	ВТ_ТЗВидыНоменклатуры.Наименование КАК НаименованиеИсточника,
	|	ВТ_ТЗВидыНоменклатуры.ПометкаУдаления КАК ПометкаУдаленияИсточника,
	|	ВидНоменклатурыУчетнойСистемы.Ссылка КАК СсылкаПриемника,
	|	ВидНоменклатурыУчетнойСистемы.Наименование КАК НаименованиеПриемника,
	|	ВидНоменклатурыУчетнойСистемы.ПометкаУдаления КАК ПометкаУдаленияПриемника
	|ПОМЕСТИТЬ ВТ_СоответствиеВидовНоменклатур
	|ИЗ
	|	Справочник.ВидНоменклатурыУчетнойСистемы КАК ВидНоменклатурыУчетнойСистемы
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ТЗВидыНоменклатуры КАК ВТ_ТЗВидыНоменклатуры
	|		ПО ВидНоменклатурыУчетнойСистемы.УИ = ВТ_ТЗВидыНоменклатуры.УИ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СоответствиеВидовНоменклатур.НаименованиеИсточника КАК Наименование,
	|	ВТ_СоответствиеВидовНоменклатур.ПометкаУдаленияИсточника КАК ПометкаУдаления,
	|	ВТ_СоответствиеВидовНоменклатур.УИИсточника КАК УИ
	|ИЗ
	|	ВТ_СоответствиеВидовНоменклатур КАК ВТ_СоответствиеВидовНоменклатур
	|ГДЕ
	|	ВТ_СоответствиеВидовНоменклатур.СсылкаПриемника ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СоответствиеВидовНоменклатур.СсылкаПриемника
	|ИЗ
	|	ВТ_СоответствиеВидовНоменклатур КАК ВТ_СоответствиеВидовНоменклатур
	|ГДЕ
	|	ВТ_СоответствиеВидовНоменклатур.УИИсточника ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СоответствиеВидовНоменклатур.НаименованиеИсточника КАК Наименование,
	|	ВТ_СоответствиеВидовНоменклатур.ПометкаУдаленияИсточника КАК ПометкаУдаления,
	|	ВТ_СоответствиеВидовНоменклатур.СсылкаПриемника
	|ИЗ
	|	ВТ_СоответствиеВидовНоменклатур КАК ВТ_СоответствиеВидовНоменклатур
	|ГДЕ
	|	НЕ ВТ_СоответствиеВидовНоменклатур.СсылкаПриемника ЕСТЬ NULL 
	|	И НЕ ВТ_СоответствиеВидовНоменклатур.УИИсточника ЕСТЬ NULL 
	|	И (НЕ ВТ_СоответствиеВидовНоменклатур.НаименованиеИсточника = ВТ_СоответствиеВидовНоменклатур.НаименованиеПриемника
	|			ИЛИ НЕ ВТ_СоответствиеВидовНоменклатур.ПометкаУдаленияИсточника = ВТ_СоответствиеВидовНоменклатур.ПометкаУдаленияПриемника)";
	
	Запрос.УстановитьПараметр("ТЗВидыНоменклатуры", ТЗВидыНоменклатуры);	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДобавление = РезультатЗапроса[2].Выбрать();
	
	Пока ВыборкаДобавление.Следующий() Цикл
		ВидНоменклатурыОбъект = Справочники.ВидНоменклатурыУчетнойСистемы.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(ВидНоменклатурыОбъект, ВыборкаДобавление);
		ВидНоменклатурыОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			ВидНоменклатурыОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
			"Ошибка создания элемента справочника ВидНоменклатурыУчетнойСистемы",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ОписаниеОшибки(),
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		КонецПопытки;	
	КонецЦикла;
	
	ВыборкаУдаление = РезультатЗапроса[3].Выбрать();
	
	Пока ВыборкаУдаление.Следующий() Цикл
		ВидНоменклатурыОбъект = ВыборкаУдаление.СсылкаПриемника.ПолучитьОбъект();
		ВидНоменклатурыОбъект.ПометкаУдаления = Истина;
		ВидНоменклатурыОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			ВидНоменклатурыОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
			"Ошибка пометки удаления элемента справочника ВидНоменклатурыУчетнойСистемы",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ОписаниеОшибки(),
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		КонецПопытки;
	КонецЦикла;
	
	ВыборкаИзменение = РезультатЗапроса[4].Выбрать();
	
	Пока ВыборкаИзменение.Следующий() Цикл
		ВидНоменклатурыОбъект = ВыборкаИзменение.СсылкаПриемника.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ВидНоменклатурыОбъект, ВыборкаИзменение);
		ВидНоменклатурыОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			ВидНоменклатурыОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
			"Ошибка изменения элемента справочника ВидНоменклатурыУчетнойСистемы",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ОписаниеОшибки(),
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		КонецПопытки;	
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТЗГруппНоменклатурыИНоменклатуры(СоединениеСБазой)

	КвалификаторыЧисла10 	= СоединениеСБазой.NewObject("КвалификаторыЧисла", 10);
	КвалификаторыСтроки11 	= СоединениеСБазой.NewObject("КвалификаторыСтроки", 11);
	КвалификаторыСтроки100 	= СоединениеСБазой.NewObject("КвалификаторыСтроки", 100);
	КвалификаторыСтроки36 	= СоединениеСБазой.NewObject("КвалификаторыСтроки", 36);
	
	ОписаниеТиповЧисло10 	= СоединениеСБазой.NewObject("ОписаниеТипов", "Число", КвалификаторыЧисла10);
	ОписаниеТиповСтрока11 	= СоединениеСБазой.NewObject("ОписаниеТипов", "Строка", КвалификаторыСтроки11);
	ОписаниеТиповСтрока100 	= СоединениеСБазой.NewObject("ОписаниеТипов", "Строка", КвалификаторыСтроки100);
	ОписаниеТиповСтрока36 	= СоединениеСБазой.NewObject("ОписаниеТипов", "Строка", КвалификаторыСтроки36);
	ОписаниеТиповБулево 	= СоединениеСБазой.NewObject("ОписаниеТипов", "Булево");
	
	ТЗГруппыНоменклатурыЗагрузка = СоединениеСБазой.NewObject("ТаблицаЗначений");
	ТЗГруппыНоменклатурыЗагрузка.Колонки.Добавить("Код", 				ОписаниеТиповСтрока11);
	ТЗГруппыНоменклатурыЗагрузка.Колонки.Добавить("Наименование", 		ОписаниеТиповСтрока100);
	ТЗГруппыНоменклатурыЗагрузка.Колонки.Добавить("ПометкаУдаления", 	ОписаниеТиповБулево);
	ТЗГруппыНоменклатурыЗагрузка.Колонки.Добавить("УИ", 				ОписаниеТиповСтрока36);
	ТЗГруппыНоменклатурыЗагрузка.Колонки.Добавить("УИРодитель", 		ОписаниеТиповСтрока36);
	
	ТЗНоменклатураВыгрузка = СоединениеСБазой.NewObject("ТаблицаЗначений");
	ТЗНоменклатураВыгрузка.Колонки.Добавить("Код", 					ОписаниеТиповСтрока11);
	ТЗНоменклатураВыгрузка.Колонки.Добавить("Наименование", 		ОписаниеТиповСтрока100);
	ТЗНоменклатураВыгрузка.Колонки.Добавить("ПометкаУдаления", 		ОписаниеТиповБулево);
	ТЗНоменклатураВыгрузка.Колонки.Добавить("УИ", 					ОписаниеТиповСтрока36);
	ТЗНоменклатураВыгрузка.Колонки.Добавить("УИРодитель", 			ОписаниеТиповСтрока36);
	ТЗНоменклатураВыгрузка.Колонки.Добавить("УИВидНоменклатуры", 	ОписаниеТиповСтрока36);
	
	Запрос = СоединениеСБазой.NewObject("Запрос");
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.Наименование КАК Наименование,
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.Родитель КАК СсылкаРодитель,
	|	Номенклатура.ВидНоменклатуры КАК СсылкаВидНоменклатуры,
	|	Номенклатура.ЭтоГруппа КАК ЭтоГруппа,
	|	Номенклатура.ПометкаУдаления КАК ПометкаУдаления
	|ПОМЕСТИТЬ ВТ_Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Номенклатура.Код КАК Код,
	|	ВТ_Номенклатура.Наименование КАК Наименование,
	|	ВТ_Номенклатура.Ссылка КАК Ссылка,
	|	ВТ_Номенклатура.СсылкаРодитель КАК СсылкаРодитель,
	|	ВТ_Номенклатура.СсылкаВидНоменклатуры КАК СсылкаВидНоменклатуры,
	|	ВТ_Номенклатура.ЭтоГруппа КАК ЭтоГруппа,
	|	ВТ_Номенклатура.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	ВТ_Номенклатура КАК ВТ_Номенклатура
	|ГДЕ
	|	ВТ_Номенклатура.ЭтоГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка ИЕРАРХИЯ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Номенклатура.Код КАК Код,
	|	ВТ_Номенклатура.Наименование КАК Наименование,
	|	ВТ_Номенклатура.Ссылка КАК Ссылка,
	|	ВТ_Номенклатура.СсылкаРодитель КАК СсылкаРодитель,
	|	ВТ_Номенклатура.СсылкаВидНоменклатуры КАК СсылкаВидНоменклатуры,
	|	ВТ_Номенклатура.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	ВТ_Номенклатура КАК ВТ_Номенклатура
	|ГДЕ
	|	НЕ ВТ_Номенклатура.ЭтоГруппа
	|ИТОГИ ПО
	|	СсылкаВидНоменклатуры";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ИндексПакета = 0;
	Для каждого Пакет Из РезультатЗапроса Цикл
		
		Если ИндексПакета = 0 Тогда
			ИндексПакета = ИндексПакета + 1;
			Продолжить;
		КонецЕсли;
		
		Если ИндексПакета = 1 Тогда
			ВыборкаГруппы = Пакет.Выбрать(СоединениеСБазой.ОбходРезультатаЗапроса.ПоГруппировкам);
			
			НоменклатураПустаяССылка = СоединениеСБазой.Справочники.Номенклатура.ПустаяСсылка();
			Пока ВыборкаГруппы.Следующий() Цикл
				СтрокаТЗ 					= ТЗГруппыНоменклатурыЗагрузка.Добавить();
				СтрокаТЗ.Код 				= ВыборкаГруппы.Код;
				СтрокаТЗ.Наименование 		= ВыборкаГруппы.Наименование;
				СтрокаТЗ.ПометкаУдаления 	= ВыборкаГруппы.ПометкаУдаления;
				
				Ссылка = ВыборкаГруппы.Ссылка;
				Если Ссылка = НоменклатураПустаяССылка Тогда
					СтрокаТЗ.УИ = "";
					СтрокаТЗ.УИРодитель = "";
				Иначе
					СтрокаТЗ.УИ = СоединениеСБазой.XMLСтрока(Ссылка.УникальныйИдентификатор());
					СсылкаРодитель = ВыборкаГруппы.СсылкаРодитель;
					СтрокаТЗ.УИРодитель = ?(СсылкаРодитель = НоменклатураПустаяССылка, "", СоединениеСБазой.XMLСтрока(СсылкаРодитель.УникальныйИдентификатор()));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ИндексПакета = 2 Тогда
			
			ВыборкаВидНоменклатуры = Пакет.Выбрать(СоединениеСБазой.ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаВидНоменклатуры.Следующий() Цикл
				
				СсылкаВидНоменклатуры = ВыборкаВидНоменклатуры.СсылкаВидНоменклатуры;
				УИВидНоменклатуры = ?(СсылкаВидНоменклатуры = СоединениеСБазой.Справочники.ВидыНоменклатуры.ПустаяСсылка(), "", СоединениеСБазой.XMLСтрока(СсылкаВидНоменклатуры.УникальныйИдентификатор()));
				
				ВыборкаДетальныеЗаписи = ВыборкаВидНоменклатуры.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					СтрокаТЗ 					= ТЗНоменклатураВыгрузка.Добавить();
					СтрокаТЗ.Код 				= ВыборкаДетальныеЗаписи.Код;
					СтрокаТЗ.Наименование 		= ВыборкаДетальныеЗаписи.Наименование;
					СтрокаТЗ.ПометкаУдаления 	= ВыборкаДетальныеЗаписи.ПометкаУдаления;
					СтрокаТЗ.УИ					= СоединениеСБазой.XMLСтрока(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор());
					СсылкаРодитель				= ВыборкаДетальныеЗаписи.СсылкаРодитель;
					СтрокаТЗ.УИРодитель 		= ?(СсылкаРодитель = НоменклатураПустаяССылка, "", СоединениеСБазой.XMLСтрока(СсылкаРодитель.УникальныйИдентификатор()));
					СтрокаТЗ.УИВидНоменклатуры	= УИВидНоменклатуры;
					
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		ИндексПакета = ИндексПакета + 1;
		
	КонецЦикла;
	
	СтрокаРезультат = СоединениеСБазой.ЗначениеВСтрокуВнутр(ТЗГруппыНоменклатурыЗагрузка); 
	ТЗГруппыНоменклатурыЗагрузка = ЗначениеИзСтрокиВнутр(СтрокаРезультат);
	
	СтрокаРезультат = СоединениеСБазой.ЗначениеВСтрокуВнутр(ТЗНоменклатураВыгрузка); 
	ТЗНоменклатураЗагрузка = ЗначениеИзСтрокиВнутр(СтрокаРезультат);
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("ТЗГруппыНоменклатурыЗагрузка", ТЗГруппыНоменклатурыЗагрузка);
	СтруктураРезультат.Вставить("ТЗНоменклатураЗагрузка", ТЗНоменклатураЗагрузка);
	
	Возврат СтруктураРезультат;
	
КонецФункции

Процедура ЗагрузитьГруппыНоменклатуры(ТЗГруппыНоменклатуры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЗГруппыНоменклатуры.Код,
	|	ТЗГруппыНоменклатуры.Наименование,
	|	ТЗГруппыНоменклатуры.ПометкаУдаления,
	|	ТЗГруппыНоменклатуры.УИ,
	|	ТЗГруппыНоменклатуры.УИРодитель
	|ПОМЕСТИТЬ ВТ_ТЗГруппыНоменклатуры
	|ИЗ
	|	&ТЗГруппыНоменклатуры КАК ТЗГруппыНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураУчетнойСистемы.Ссылка,
	|	НоменклатураУчетнойСистемы.ПометкаУдаления,
	|	НоменклатураУчетнойСистемы.Код,
	|	НоменклатураУчетнойСистемы.Наименование,
	|	НоменклатураУчетнойСистемы.УИ
	|ПОМЕСТИТЬ ВТ_ГруппыНоменклатуры
	|ИЗ
	|	Справочник.НоменклатураУчетнойСистемы КАК НоменклатураУчетнойСистемы
	|ГДЕ
	|	НоменклатураУчетнойСистемы.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЗГруппыНоменклатуры.УИ КАК УИИсточника,
	|	ВТ_ТЗГруппыНоменклатуры.Код КАК КодИсточника,
	|	ВТ_ТЗГруппыНоменклатуры.ПометкаУдаления КАК ПометкаУдаленияИсточника,
	|	ВТ_ТЗГруппыНоменклатуры.Наименование КАК НаименованиеИсточника,
	|	ВТ_ТЗГруппыНоменклатуры.УИРодитель КАК УИРодительИсточника,
	|	ВТ_ГруппыНоменклатуры.Ссылка КАК СсылкаПриемника,
	|	ВТ_ГруппыНоменклатуры.ПометкаУдаления КАК ПометкаУдаленияПрименика,
	|	ВТ_ГруппыНоменклатуры.Код КАК КодПриемника,
	|	ВТ_ГруппыНоменклатуры.Наименование КАК НаименованиеПрименика
	|ПОМЕСТИТЬ ВТ_СоответствиеГруппИсточникаГруппамПрименика
	|ИЗ
	|	ВТ_ТЗГруппыНоменклатуры КАК ВТ_ТЗГруппыНоменклатуры
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ГруппыНоменклатуры КАК ВТ_ГруппыНоменклатуры
	|		ПО ВТ_ТЗГруппыНоменклатуры.УИ = ВТ_ГруппыНоменклатуры.УИ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СоответствиеГруппИсточникаГруппамПрименика.УИИсточника КАК УИ,
	|	ВТ_СоответствиеГруппИсточникаГруппамПрименика.КодИсточника КАК Код,
	|	ВТ_СоответствиеГруппИсточникаГруппамПрименика.ПометкаУдаленияИсточника КАК ПометкаУдаления,
	|	ВТ_СоответствиеГруппИсточникаГруппамПрименика.НаименованиеИсточника КАК Наименование,
	|	ВТ_СоответствиеГруппИсточникаГруппамПрименика.УИРодительИсточника
	|ИЗ
	|	ВТ_СоответствиеГруппИсточникаГруппамПрименика КАК ВТ_СоответствиеГруппИсточникаГруппамПрименика
	|ГДЕ
	|	ВТ_СоответствиеГруппИсточникаГруппамПрименика.СсылкаПриемника ЕСТЬ NULL 
	|	И НЕ ВТ_СоответствиеГруппИсточникаГруппамПрименика.УИИсточника = """"
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СоответствиеГруппИсточникаГруппамПрименика.СсылкаПриемника
	|ИЗ
	|	ВТ_СоответствиеГруппИсточникаГруппамПрименика КАК ВТ_СоответствиеГруппИсточникаГруппамПрименика
	|ГДЕ
	|	ВТ_СоответствиеГруппИсточникаГруппамПрименика.УИИсточника ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СоответствиеГруппИсточникаГруппамПрименика.КодИсточника КАК Код,
	|	ВТ_СоответствиеГруппИсточникаГруппамПрименика.НаименованиеИсточника КАК Наименование,
	|	ВТ_СоответствиеГруппИсточникаГруппамПрименика.ПометкаУдаленияИсточника КАК ПометкаУдаления,
	|	ВТ_СоответствиеГруппИсточникаГруппамПрименика.УИРодительИсточника,
	|	ВТ_СоответствиеГруппИсточникаГруппамПрименика.СсылкаПриемника
	|ИЗ
	|	ВТ_СоответствиеГруппИсточникаГруппамПрименика КАК ВТ_СоответствиеГруппИсточникаГруппамПрименика
	|ГДЕ
	|	НЕ ВТ_СоответствиеГруппИсточникаГруппамПрименика.УИИсточника ЕСТЬ NULL 
	|	И НЕ ВТ_СоответствиеГруппИсточникаГруппамПрименика.СсылкаПриемника ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ТЗГруппыНоменклатуры", ТЗГруппыНоменклатуры);	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДобавление = РезультатЗапроса[3].Выбрать();
	
	Пока ВыборкаДобавление.Следующий() Цикл
		ГруппыНоменклатурыОбъект = Справочники.НоменклатураУчетнойСистемы.СоздатьГруппу();
		ЗаполнитьЗначенияСвойств(ГруппыНоменклатурыОбъект, ВыборкаДобавление);
		ГруппыНоменклатурыОбъект.Родитель = ПолучитьНоменклатураУчетнойСистемыПоУИ(ВыборкаДобавление.УИРодительИсточника);
		ГруппыНоменклатурыОбъект.ОбменДанными.Загрузка = Истина;
		
		Попытка
			ГруппыНоменклатурыОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
			"Ошибка создания группы справочника НоменклатураУчетнойСистемы",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ОписаниеОшибки(),
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		КонецПопытки;	
		
	КонецЦикла;
	
	ВыборкаУдаление = РезультатЗапроса[4].Выбрать();
	
	Пока ВыборкаУдаление.Следующий() Цикл
		ГруппыНоменклатурыОбъект = ВыборкаУдаление.СсылкаПриемника.ПолучитьОбъект();
		ГруппыНоменклатурыОбъект.ПометкаУдаления = Истина;
		ГруппыНоменклатурыОбъект.ОбменДанными.Загрузка = Истина;
		
		Попытка
			ГруппыНоменклатурыОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
			"Ошибка пометки удаления группы справочника НоменклатураУчетнойСистемы",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ОписаниеОшибки(),
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		КонецПопытки;	
		
	КонецЦикла;
	
	ВыборкаИзменение = РезультатЗапроса[5].Выбрать();
	
	Пока ВыборкаИзменение.Следующий() Цикл
		ГруппыНоменклатурыОбъект = ВыборкаИзменение.СсылкаПриемника.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ГруппыНоменклатурыОбъект, ВыборкаИзменение);
		ГруппыНоменклатурыОбъект.Родитель = ПолучитьНоменклатураУчетнойСистемыПоУИ(ВыборкаИзменение.УИРодительИсточника);
		ГруппыНоменклатурыОбъект.ОбменДанными.Загрузка = Истина;
		
		Попытка
			ГруппыНоменклатурыОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
			"Ошибка изменения группы справочника НоменклатураУчетнойСистемы",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ОписаниеОшибки(),
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		КонецПопытки;	
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьНоменклатуру(ТЗНоменклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЗНоменклатура.Код,
	|	ТЗНоменклатура.Наименование,
	|	ТЗНоменклатура.ПометкаУдаления,
	|	ТЗНоменклатура.УИ,
	|	ТЗНоменклатура.УИРодитель,
	|	ТЗНоменклатура.УИВидНоменклатуры
	|ПОМЕСТИТЬ ВТ_ТЗНоменклатура
	|ИЗ
	|	&ТЗНоменклатура КАК ТЗНоменклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураУчетнойСистемы.Ссылка,
	|	НоменклатураУчетнойСистемы.ПометкаУдаления,
	|	НоменклатураУчетнойСистемы.Код,
	|	НоменклатураУчетнойСистемы.Наименование,
	|	НоменклатураУчетнойСистемы.УИ
	|ПОМЕСТИТЬ ВТ_Номенклатура
	|ИЗ
	|	Справочник.НоменклатураУчетнойСистемы КАК НоменклатураУчетнойСистемы
	|ГДЕ
	|	НЕ НоменклатураУчетнойСистемы.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЗНоменклатура.УИ КАК УИИсточника,
	|	ВТ_ТЗНоменклатура.Код КАК КодИсточника,
	|	ВТ_ТЗНоменклатура.ПометкаУдаления КАК ПометкаУдаленияИсточника,
	|	ВТ_ТЗНоменклатура.Наименование КАК НаименованиеИсточника,
	|	ВТ_ТЗНоменклатура.УИРодитель КАК УИРодительИсточника,
	|	ВТ_ТЗНоменклатура.УИВидНоменклатуры КАК УИВидНоменклатурыИсточника,
	|	ВТ_Номенклатура.Ссылка КАК СсылкаПриемника,
	|	ВТ_Номенклатура.ПометкаУдаления КАК ПометкаУдаленияПрименика,
	|	ВТ_Номенклатура.Код КАК КодПриемника,
	|	ВТ_Номенклатура.Наименование КАК НаименованиеПрименика
	|ПОМЕСТИТЬ ВТ_СоответствиеНоменклатурыИсточникаНоменклатуреПрименика
	|ИЗ
	|	ВТ_ТЗНоменклатура КАК ВТ_ТЗНоменклатура
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
	|		ПО ВТ_ТЗНоменклатура.УИ = ВТ_Номенклатура.УИ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СоответствиеНоменклатурыИсточникаНоменклатуреПрименика.УИИсточника КАК УИ,
	|	ВТ_СоответствиеНоменклатурыИсточникаНоменклатуреПрименика.КодИсточника КАК Код,
	|	ВТ_СоответствиеНоменклатурыИсточникаНоменклатуреПрименика.ПометкаУдаленияИсточника КАК ПометкаУдаления,
	|	ВТ_СоответствиеНоменклатурыИсточникаНоменклатуреПрименика.НаименованиеИсточника КАК Наименование,
	|	ВТ_СоответствиеНоменклатурыИсточникаНоменклатуреПрименика.УИРодительИсточника,
	|	ВТ_СоответствиеНоменклатурыИсточникаНоменклатуреПрименика.УИВидНоменклатурыИсточника
	|ИЗ
	|	ВТ_СоответствиеНоменклатурыИсточникаНоменклатуреПрименика КАК ВТ_СоответствиеНоменклатурыИсточникаНоменклатуреПрименика
	|ГДЕ
	|	ВТ_СоответствиеНоменклатурыИсточникаНоменклатуреПрименика.СсылкаПриемника ЕСТЬ NULL 
	|	И НЕ ВТ_СоответствиеНоменклатурыИсточникаНоменклатуреПрименика.УИИсточника = """"
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СоответствиеНоменклатурыИсточникаНоменклатуреПрименика.СсылкаПриемника
	|ИЗ
	|	ВТ_СоответствиеНоменклатурыИсточникаНоменклатуреПрименика КАК ВТ_СоответствиеНоменклатурыИсточникаНоменклатуреПрименика
	|ГДЕ
	|	ВТ_СоответствиеНоменклатурыИсточникаНоменклатуреПрименика.УИИсточника ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СоответствиеНоменклатурыИсточникаНоменклатуреПрименика.КодИсточника КАК Код,
	|	ВТ_СоответствиеНоменклатурыИсточникаНоменклатуреПрименика.НаименованиеИсточника КАК Наименование,
	|	ВТ_СоответствиеНоменклатурыИсточникаНоменклатуреПрименика.ПометкаУдаленияИсточника КАК ПометкаУдаления,
	|	ВТ_СоответствиеНоменклатурыИсточникаНоменклатуреПрименика.УИРодительИсточника,
	|	ВТ_СоответствиеНоменклатурыИсточникаНоменклатуреПрименика.УИВидНоменклатурыИсточника,
	|	ВТ_СоответствиеНоменклатурыИсточникаНоменклатуреПрименика.СсылкаПриемника
	|ИЗ
	|	ВТ_СоответствиеНоменклатурыИсточникаНоменклатуреПрименика КАК ВТ_СоответствиеНоменклатурыИсточникаНоменклатуреПрименика
	|ГДЕ
	|	НЕ ВТ_СоответствиеНоменклатурыИсточникаНоменклатуреПрименика.УИИсточника ЕСТЬ NULL 
	|	И НЕ ВТ_СоответствиеНоменклатурыИсточникаНоменклатуреПрименика.СсылкаПриемника ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ТЗНоменклатура", ТЗНоменклатура);	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДобавление = РезультатЗапроса[3].Выбрать();
	
	Пока ВыборкаДобавление.Следующий() Цикл
		НоменклатураОбъект = Справочники.НоменклатураУчетнойСистемы.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(НоменклатураОбъект, ВыборкаДобавление);
		НоменклатураОбъект.Родитель = ПолучитьНоменклатураУчетнойСистемыПоУИ(ВыборкаДобавление.УИРодительИсточника);
		НоменклатураОбъект.ВидНоменклатуры = ПолучитьВидНоменклатурыУчетнойСистемыПоУИ(ВыборкаДобавление.УИВидНоменклатурыИсточника);
		НоменклатураОбъект.ОбменДанными.Загрузка = Истина;
		
		Попытка
			НоменклатураОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
			"Ошибка создания элемента справочника НоменклатураУчетнойСистемы",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ОписаниеОшибки(),
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		КонецПопытки;	
		
	КонецЦикла;
	
	ВыборкаУдаление = РезультатЗапроса[4].Выбрать();
	
	Пока ВыборкаУдаление.Следующий() Цикл
		НоменклатураОбъект = ВыборкаУдаление.СсылкаПриемника.ПолучитьОбъект();
		НоменклатураОбъект.ПометкаУдаления = Истина;
		НоменклатураОбъект.ОбменДанными.Загрузка = Истина;
		
		Попытка
			НоменклатураОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
			"Ошибка пометки удаления элемента справочника НоменклатураУчетнойСистемы",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ОписаниеОшибки(),
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		КонецПопытки;	
		
	КонецЦикла;
	
	ВыборкаИзменение = РезультатЗапроса[5].Выбрать();
	
	Пока ВыборкаИзменение.Следующий() Цикл
		НоменклатураОбъект = ВыборкаИзменение.СсылкаПриемника.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(НоменклатураОбъект, ВыборкаИзменение);
		НоменклатураОбъект.Родитель = ПолучитьНоменклатураУчетнойСистемыПоУИ(ВыборкаИзменение.УИРодительИсточника);
		НоменклатураОбъект.ВидНоменклатуры = ПолучитьВидНоменклатурыУчетнойСистемыПоУИ(ВыборкаИзменение.УИВидНоменклатурыИсточника);
		НоменклатураОбъект.ОбменДанными.Загрузка = Истина;
		
		Попытка
			НоменклатураОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
			"Ошибка изменения элемента справочника НоменклатураУчетнойСистемы",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ОписаниеОшибки(),
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		КонецПопытки;	
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьНоменклатураУчетнойСистемыПоУИ(УИ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатураУчетнойСистемы.Ссылка
	|ИЗ
	|	Справочник.НоменклатураУчетнойСистемы КАК НоменклатураУчетнойСистемы
	|ГДЕ
	|	НоменклатураУчетнойСистемы.УИ = &УИ
	|	И НоменклатураУчетнойСистемы.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("УИ", УИ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		НоменклатураУчетнойСистемыСсылка = ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		НоменклатураУчетнойСистемыСсылка = Справочники.НоменклатураУчетнойСистемы.ПустаяСсылка();
	КонецЕсли;
	
	Возврат НоменклатураУчетнойСистемыСсылка;
КонецФункции	

Функция ПолучитьВидНоменклатурыУчетнойСистемыПоУИ(УИ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидНоменклатурыУчетнойСистемы.Ссылка
	|ИЗ
	|	Справочник.ВидНоменклатурыУчетнойСистемы КАК ВидНоменклатурыУчетнойСистемы
	|ГДЕ
	|	ВидНоменклатурыУчетнойСистемы.УИ = &УИ";
	
	Запрос.УстановитьПараметр("УИ", УИ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		ВидНоменклатурыУчетнойСистемыСсылка = ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		ВидНоменклатурыУчетнойСистемыСсылка = Справочники.ВидНоменклатурыУчетнойСистемы.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ВидНоменклатурыУчетнойСистемыСсылка;
КонецФункции	

Функция ПолучитьТЗОрганизации(СоединениеСБазой)
	Запрос = СоединениеСБазой.NewObject("Запрос");
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.Наименование КАК Наименование,
	|	Организации.ИНН КАК ИНН,
	|	Организации.ПометкаУдаления КАК ПометкаУдаления,
	|	""                                    "" КАК УИ
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗОрганизацииВыгрузка = РезультатЗапроса.Выгрузить();
	
	Для каждого СтрокаТЗОрганизацииВыгрузка Из ТЗОрганизацииВыгрузка Цикл
		СтрокаТЗОрганизацииВыгрузка.УИ = СоединениеСБазой.XMLСтрока(СтрокаТЗОрганизацииВыгрузка.Ссылка.УникальныйИдентификатор());	
	КонецЦикла;
	
	СтрокаРезультат = СоединениеСБазой.ЗначениеВСтрокуВнутр(ТЗОрганизацииВыгрузка); 
	ТЗОрганизацииЗагрузка = ЗначениеИзСтрокиВнутр(СтрокаРезультат);
	
	Возврат ТЗОрганизацииЗагрузка;
КонецФункции

Процедура ЗагрузитьОрганизации(ТЗОрганизации)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЗОрганизации.Наименование,
	|	ТЗОрганизации.УИ,
	|	ТЗОрганизации.ИНН,
	|	ТЗОрганизации.ПометкаУдаления
	|ПОМЕСТИТЬ ВТ_ТЗОрганизации
	|ИЗ
	|	&ТЗОрганизации КАК ТЗОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЗОрганизации.УИ КАК УИИсточника,
	|	ВТ_ТЗОрганизации.Наименование КАК НаименованиеИсточника,
	|	ВТ_ТЗОрганизации.ПометкаУдаления КАК ПометкаУдаленияИсточника,
	|	ВТ_ТЗОрганизации.ИНН КАК ИННИсточника,
	|	ОрганизацииУчетнойСистемы.Ссылка КАК СсылкаПриемника,
	|	ОрганизацииУчетнойСистемы.Наименование КАК НаименованиеПриемника,
	|	ОрганизацииУчетнойСистемы.ПометкаУдаления КАК ПометкаУдаленияПриемника
	|ПОМЕСТИТЬ ВТ_СоответствиеОрганизаций
	|ИЗ
	|	Справочник.ОрганизацииУчетнойСистемы КАК ОрганизацииУчетнойСистемы
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ТЗОрганизации КАК ВТ_ТЗОрганизации
	|		ПО ОрганизацииУчетнойСистемы.УИ = ВТ_ТЗОрганизации.УИ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СоответствиеОрганизаций.НаименованиеИсточника КАК Наименование,
	|	ВТ_СоответствиеОрганизаций.ПометкаУдаленияИсточника КАК ПометкаУдаления,
	|	ВТ_СоответствиеОрганизаций.УИИсточника КАК УИ,
	|	ВТ_СоответствиеОрганизаций.ИННИсточника КАК ИНН
	|ИЗ
	|	ВТ_СоответствиеОрганизаций КАК ВТ_СоответствиеОрганизаций
	|ГДЕ
	|	ВТ_СоответствиеОрганизаций.СсылкаПриемника ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СоответствиеОрганизаций.СсылкаПриемника
	|ИЗ
	|	ВТ_СоответствиеОрганизаций КАК ВТ_СоответствиеОрганизаций
	|ГДЕ
	|	ВТ_СоответствиеОрганизаций.УИИсточника ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СоответствиеОрганизаций.НаименованиеИсточника КАК Наименование,
	|	ВТ_СоответствиеОрганизаций.ПометкаУдаленияИсточника КАК ПометкаУдаления,
	|	ВТ_СоответствиеОрганизаций.СсылкаПриемника
	|ИЗ
	|	ВТ_СоответствиеОрганизаций КАК ВТ_СоответствиеОрганизаций
	|ГДЕ
	|	НЕ ВТ_СоответствиеОрганизаций.СсылкаПриемника ЕСТЬ NULL 
	|	И НЕ ВТ_СоответствиеОрганизаций.УИИсточника ЕСТЬ NULL 
	|	И (НЕ ВТ_СоответствиеОрганизаций.НаименованиеИсточника = ВТ_СоответствиеОрганизаций.НаименованиеПриемника
	|			ИЛИ НЕ ВТ_СоответствиеОрганизаций.ПометкаУдаленияИсточника = ВТ_СоответствиеОрганизаций.ПометкаУдаленияПриемника)";
	
	Запрос.УстановитьПараметр("ТЗОрганизации", ТЗОрганизации);	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДобавление = РезультатЗапроса[2].Выбрать();
	
	Пока ВыборкаДобавление.Следующий() Цикл
		ОрганизацияОбъект = Справочники.ОрганизацииУчетнойСистемы.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(ОрганизацияОбъект, ВыборкаДобавление);
		ОрганизацияОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			ОрганизацияОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
			"Ошибка создания элемента справочника ОрганизацииУчетнойСистемы",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ОписаниеОшибки(),
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		КонецПопытки;	
	КонецЦикла;
	
	ВыборкаУдаление = РезультатЗапроса[3].Выбрать();
	
	Пока ВыборкаУдаление.Следующий() Цикл
		ОрганизацияОбъект = ВыборкаУдаление.СсылкаПриемника.ПолучитьОбъект();
		ОрганизацияОбъект.ПометкаУдаления = Истина;
		ОрганизацияОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			ОрганизацияОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
			"Ошибка пометки удаления элемента справочника ОрганизацииУчетнойСистемы",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ОписаниеОшибки(),
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		КонецПопытки;
	КонецЦикла;
	
	ВыборкаИзменение = РезультатЗапроса[4].Выбрать();
	
	Пока ВыборкаИзменение.Следующий() Цикл
		ОрганизацияОбъект = ВыборкаИзменение.СсылкаПриемника.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ОрганизацияОбъект, ВыборкаИзменение);
		ОрганизацияОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			ОрганизацияОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
			"Ошибка изменения элемента справочника ОрганизацииУчетнойСистемы",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ОписаниеОшибки(),
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		КонецПопытки;	
	КонецЦикла;	
КонецПроцедуры	

Функция ПолучитьТЗКонтрагенты(СоединениеСБазой)
	Запрос = СоединениеСБазой.NewObject("Запрос");
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.Наименование КАК Наименование,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.ПометкаУдаления КАК ПометкаУдаления,
	|	""                                    "" КАК УИ
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗКонтрагентыВыгрузка = РезультатЗапроса.Выгрузить();
	
	Для каждого СтрокаТЗКонтрагентыВыгрузка Из ТЗКонтрагентыВыгрузка Цикл
		СтрокаТЗКонтрагентыВыгрузка.УИ = СоединениеСБазой.XMLСтрока(СтрокаТЗКонтрагентыВыгрузка.Ссылка.УникальныйИдентификатор());	
	КонецЦикла;
	
	СтрокаРезультат = СоединениеСБазой.ЗначениеВСтрокуВнутр(ТЗКонтрагентыВыгрузка); 
	ТЗКонтрагентыЗагрузка = ЗначениеИзСтрокиВнутр(СтрокаРезультат);
	
	Возврат ТЗКонтрагентыЗагрузка;
КонецФункции

Процедура ЗагрузитьКонтрагентов(ТЗКонтрагенты)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЗКонтрагенты.Наименование,
	|	ТЗКонтрагенты.УИ,
	|	ТЗКонтрагенты.ИНН,
	|	ТЗКонтрагенты.ПометкаУдаления
	|ПОМЕСТИТЬ ВТ_ТЗКонтрагенты
	|ИЗ
	|	&ТЗКонтрагенты КАК ТЗКонтрагенты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЗКонтрагенты.УИ КАК УИИсточника,
	|	ВТ_ТЗКонтрагенты.Наименование КАК НаименованиеИсточника,
	|	ВТ_ТЗКонтрагенты.ПометкаУдаления КАК ПометкаУдаленияИсточника,
	|	ВТ_ТЗКонтрагенты.ИНН КАК ИННИсточника,
	|	КонтрагентыУчетнойСистемы.Ссылка КАК СсылкаПриемника,
	|	КонтрагентыУчетнойСистемы.Наименование КАК НаименованиеПриемника,
	|	КонтрагентыУчетнойСистемы.ПометкаУдаления КАК ПометкаУдаленияПриемника
	|ПОМЕСТИТЬ ВТ_СоответствиеКонтрагентов
	|ИЗ
	|	Справочник.КонтрагентыУчетнойСистемы КАК КонтрагентыУчетнойСистемы
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ТЗКонтрагенты КАК ВТ_ТЗКонтрагенты
	|		ПО КонтрагентыУчетнойСистемы.УИ = ВТ_ТЗКонтрагенты.УИ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СоответствиеКонтрагентов.НаименованиеИсточника КАК Наименование,
	|	ВТ_СоответствиеКонтрагентов.ПометкаУдаленияИсточника КАК ПометкаУдаления,
	|	ВТ_СоответствиеКонтрагентов.УИИсточника КАК УИ,
	|	ВТ_СоответствиеКонтрагентов.ИННИсточника КАК ИНН
	|ИЗ
	|	ВТ_СоответствиеКонтрагентов КАК ВТ_СоответствиеКонтрагентов
	|ГДЕ
	|	ВТ_СоответствиеКонтрагентов.СсылкаПриемника ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СоответствиеКонтрагентов.СсылкаПриемника
	|ИЗ
	|	ВТ_СоответствиеКонтрагентов КАК ВТ_СоответствиеКонтрагентов
	|ГДЕ
	|	ВТ_СоответствиеКонтрагентов.УИИсточника ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СоответствиеКонтрагентов.НаименованиеИсточника КАК Наименование,
	|	ВТ_СоответствиеКонтрагентов.ПометкаУдаленияИсточника КАК ПометкаУдаления,
	|	ВТ_СоответствиеКонтрагентов.СсылкаПриемника
	|ИЗ
	|	ВТ_СоответствиеКонтрагентов КАК ВТ_СоответствиеКонтрагентов
	|ГДЕ
	|	НЕ ВТ_СоответствиеКонтрагентов.СсылкаПриемника ЕСТЬ NULL 
	|	И НЕ ВТ_СоответствиеКонтрагентов.УИИсточника ЕСТЬ NULL 
	|	И (НЕ ВТ_СоответствиеКонтрагентов.НаименованиеИсточника = ВТ_СоответствиеКонтрагентов.НаименованиеПриемника
	|			ИЛИ НЕ ВТ_СоответствиеКонтрагентов.ПометкаУдаленияИсточника = ВТ_СоответствиеКонтрагентов.ПометкаУдаленияПриемника)";
	
	Запрос.УстановитьПараметр("ТЗКонтрагенты", ТЗКонтрагенты);	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДобавление = РезультатЗапроса[2].Выбрать();
	
	Пока ВыборкаДобавление.Следующий() Цикл
		КонтрагентОбъект = Справочники.КонтрагентыУчетнойСистемы.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(КонтрагентОбъект, ВыборкаДобавление);
		КонтрагентОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			КонтрагентОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
			"Ошибка создания элемента справочника КонтрагентыУчетнойСистемы",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ОписаниеОшибки(),
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		КонецПопытки;	
	КонецЦикла;
	
	ВыборкаУдаление = РезультатЗапроса[3].Выбрать();
	
	Пока ВыборкаУдаление.Следующий() Цикл
		КонтрагентОбъект = ВыборкаУдаление.СсылкаПриемника.ПолучитьОбъект();
		КонтрагентОбъект.ПометкаУдаления = Истина;
		КонтрагентОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			КонтрагентОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
			"Ошибка пометки удаления элемента справочника КонтрагентыУчетнойСистемы",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ОписаниеОшибки(),
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		КонецПопытки;
	КонецЦикла;
	
	ВыборкаИзменение = РезультатЗапроса[4].Выбрать();
	
	Пока ВыборкаИзменение.Следующий() Цикл
		КонтрагентОбъект = ВыборкаИзменение.СсылкаПриемника.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(КонтрагентОбъект, ВыборкаИзменение);
		КонтрагентОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			КонтрагентОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
			"Ошибка изменения элемента справочника КонтрагентыУчетнойСистемы",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ОписаниеОшибки(),
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		КонецПопытки;	
	КонецЦикла;	
КонецПроцедуры	

Функция ПолучитьТЗСклады(СоединениеСБазой)
	Запрос = СоединениеСБазой.NewObject("Запрос");
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Склады.Ссылка КАК Ссылка,
	|	Склады.Наименование КАК Наименование,
	|	Склады.ПометкаУдаления КАК ПометкаУдаления,
	|	""                                    "" КАК УИ
	|ИЗ
	|	Справочник.Склады КАК Склады";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗСкладыВыгрузка = РезультатЗапроса.Выгрузить();
	
	Для каждого СтрокаТЗСкладыВыгрузка Из ТЗСкладыВыгрузка Цикл
		СтрокаТЗСкладыВыгрузка.УИ = СоединениеСБазой.XMLСтрока(СтрокаТЗСкладыВыгрузка.Ссылка.УникальныйИдентификатор());	
	КонецЦикла;
	
	СтрокаРезультат = СоединениеСБазой.ЗначениеВСтрокуВнутр(ТЗСкладыВыгрузка); 
	ТЗСкладыЗагрузка = ЗначениеИзСтрокиВнутр(СтрокаРезультат);
	
	Возврат ТЗСкладыЗагрузка;
КонецФункции

Процедура ЗагрузитьСклады(ТЗСклады)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЗСклады.Наименование,
	|	ТЗСклады.УИ,
	|	ТЗСклады.ПометкаУдаления
	|ПОМЕСТИТЬ ВТ_ТЗСклады
	|ИЗ
	|	&ТЗСклады КАК ТЗСклады
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЗСклады.УИ КАК УИИсточника,
	|	ВТ_ТЗСклады.Наименование КАК НаименованиеИсточника,
	|	ВТ_ТЗСклады.ПометкаУдаления КАК ПометкаУдаленияИсточника,
	|	СкладыУчетнойСистемы.Ссылка КАК СсылкаПриемника,
	|	СкладыУчетнойСистемы.Наименование КАК НаименованиеПриемника,
	|	СкладыУчетнойСистемы.ПометкаУдаления КАК ПометкаУдаленияПриемника
	|ПОМЕСТИТЬ ВТ_СоответствиеСкладов
	|ИЗ
	|	Справочник.СкладыУчетнойСистемы КАК СкладыУчетнойСистемы
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ТЗСклады КАК ВТ_ТЗСклады
	|		ПО СкладыУчетнойСистемы.УИ = ВТ_ТЗСклады.УИ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СоответствиеСкладов.НаименованиеИсточника КАК Наименование,
	|	ВТ_СоответствиеСкладов.ПометкаУдаленияИсточника КАК ПометкаУдаления,
	|	ВТ_СоответствиеСкладов.УИИсточника КАК УИ
	|ИЗ
	|	ВТ_СоответствиеСкладов КАК ВТ_СоответствиеСкладов
	|ГДЕ
	|	ВТ_СоответствиеСкладов.СсылкаПриемника ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СоответствиеСкладов.СсылкаПриемника
	|ИЗ
	|	ВТ_СоответствиеСкладов КАК ВТ_СоответствиеСкладов
	|ГДЕ
	|	ВТ_СоответствиеСкладов.УИИсточника ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СоответствиеСкладов.НаименованиеИсточника КАК Наименование,
	|	ВТ_СоответствиеСкладов.ПометкаУдаленияИсточника КАК ПометкаУдаления,
	|	ВТ_СоответствиеСкладов.СсылкаПриемника
	|ИЗ
	|	ВТ_СоответствиеСкладов КАК ВТ_СоответствиеСкладов
	|ГДЕ
	|	НЕ ВТ_СоответствиеСкладов.СсылкаПриемника ЕСТЬ NULL 
	|	И НЕ ВТ_СоответствиеСкладов.УИИсточника ЕСТЬ NULL 
	|	И (НЕ ВТ_СоответствиеСкладов.НаименованиеИсточника = ВТ_СоответствиеСкладов.НаименованиеПриемника
	|			ИЛИ НЕ ВТ_СоответствиеСкладов.ПометкаУдаленияИсточника = ВТ_СоответствиеСкладов.ПометкаУдаленияПриемника)";
	
	Запрос.УстановитьПараметр("ТЗСклады", ТЗСклады);	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДобавление = РезультатЗапроса[2].Выбрать();
	
	Пока ВыборкаДобавление.Следующий() Цикл
		СкладыОбъект = Справочники.СкладыУчетнойСистемы.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(СкладыОбъект, ВыборкаДобавление);
		СкладыОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			СкладыОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
			"Ошибка создания элемента справочника СкладыУчетнойСистемы",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ОписаниеОшибки(),
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		КонецПопытки;	
	КонецЦикла;
	
	ВыборкаУдаление = РезультатЗапроса[3].Выбрать();
	
	Пока ВыборкаУдаление.Следующий() Цикл
		СкладыОбъект = ВыборкаУдаление.СсылкаПриемника.ПолучитьОбъект();
		СкладыОбъект.ПометкаУдаления = Истина;
		СкладыОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			СкладыОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
			"Ошибка пометки удаления элемента справочника СкладыУчетнойСистемы",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ОписаниеОшибки(),
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		КонецПопытки;
	КонецЦикла;
	
	ВыборкаИзменение = РезультатЗапроса[4].Выбрать();
	
	Пока ВыборкаИзменение.Следующий() Цикл
		СкладыОбъект = ВыборкаИзменение.СсылкаПриемника.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(СкладыОбъект, ВыборкаИзменение);
		СкладыОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			СкладыОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
			"Ошибка изменения элемента справочника СкладыУчетнойСистемы",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ОписаниеОшибки(),
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		КонецПопытки;	
	КонецЦикла;	
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВыполнитьПодключениеКИБУчетнойСистемы() Экспорт 
	
	НастройкаПодключения = Константы.УчетнаяСистемаНастройкаПодключения.Получить();
	
	СтруктураПодключения = Новый Структура();
	СтруктураПодключения.Вставить("ФайловыйРежим", НастройкаПодключения.ФайловыйРежим);
	СтруктураПодключения.Вставить("АутентификацияWindows", НастройкаПодключения.АутентификацияWindows);
	СтруктураПодключения.Вставить("КаталогИБ", НастройкаПодключения.КаталогИнформационнойБазы);
	СтруктураПодключения.Вставить("ИмяСервера", НастройкаПодключения.ИмяСервера);
	СтруктураПодключения.Вставить("ИмяИБНаСервере", НастройкаПодключения.ИмяИнформационнойБазыНаСервере);
	СтруктураПодключения.Вставить("Пользователь", НастройкаПодключения.Пользователь);
	СтруктураПодключения.Вставить("Пароль", НастройкаПодключения.Пароль);
	СтруктураПодключения.Вставить("ВерсияПлатформы", НастройкаПодключения.ВерсияПлатформы);
	
	ОбъектПодключения = ПодключитсяКИнформационнойБазе(СтруктураПодключения);
	
	Если ОбъектПодключения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбъектПодключения;
КонецФункции

Функция ПодключитсяКИнформационнойБазе(СтруктураПодключения, СтрокаСообщенияОбОшибке = "")
	
	Перем СтрокаПодключения;
	
	ПараметровДостаточно = ОпределитьДостаточностьПараметровДляПодключенияКИнформационнойБазе(СтруктураПодключения, СтрокаПодключения, СтрокаСообщенияОбОшибке);
	
	Если Не ПараметровДостаточно Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не СтруктураПодключения.АутентификацияWindows Тогда
		Если НЕ ПустаяСтрока(СтруктураПодключения.Пользователь) Тогда
			СтрокаПодключения = СтрокаПодключения + ";Usr = """ + СтруктураПодключения.Пользователь + """";
		КонецЕсли;
		Если НЕ ПустаяСтрока(СтруктураПодключения.Пароль) Тогда
			СтрокаПодключения = СтрокаПодключения + ";Pwd = """ + СтруктураПодключения.Пароль + """";
		КонецЕсли;
	КонецЕсли;
	
	// "V82" или "V83"
	ОбъектПодключения = СтруктураПодключения.ВерсияПлатформы;
	
	СтрокаПодключения = СтрокаПодключения + ";";
	
	Попытка
		
		ОбъектПодключения = ОбъектПодключения +".COMConnector";
		ТекCOMПодключение = Новый COMОбъект(ОбъектПодключения);
		ТекCOMОбъект = ТекCOMПодключение.Connect(СтрокаПодключения);
		
	Исключение
		
		СтрокаСообщенияОбОшибке = НСтр("ru = 'При попытке соединения с COM-сервером произошла следующая ошибка:
		|%1'");
		СтрокаСообщенияОбОшибке = ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке, ОписаниеОшибки());
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщенияОбОшибке);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат ТекCOMОбъект;
	
КонецФункции

Функция ОпределитьДостаточностьПараметровДляПодключенияКИнформационнойБазе(СтруктураПодключения, СтрокаПодключения = "", СтрокаСообщенияОбОшибке = "")
	
	НаличиеОшибок = Ложь;
	
	Если СтруктураПодключения.ФайловыйРежим  Тогда
		
		Если ПустаяСтрока(СтруктураПодключения.КаталогИБ) Тогда
			
			СтрокаСообщенияОбОшибке = НСтр("ru='Не задан каталог информационной базы-приемника'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщенияОбОшибке);
			
			НаличиеОшибок = Истина;
			
		КонецЕсли;
		
		СтрокаПодключения = "File=""" + СтруктураПодключения.КаталогИБ + """";
	Иначе
		
		Если ПустаяСтрока(СтруктураПодключения.ИмяСервера) Тогда
			
			СтрокаСообщенияОбОшибке = НСтр("ru='Не задано имя сервера 1С:Предприятия информационной базы-приемника'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщенияОбОшибке);
			
			НаличиеОшибок = Истина;
			
		КонецЕсли;
		
		Если ПустаяСтрока(СтруктураПодключения.ИмяИБНаСервере) Тогда
			
			СтрокаСообщенияОбОшибке = НСтр("ru='Не задано имя информационной базы-приемника на сервере 1С:Предприятия'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщенияОбОшибке);
			
			НаличиеОшибок = Истина;
			
		КонецЕсли;		
		
		СтрокаПодключения = "Srvr = """ + СтруктураПодключения.ИмяСервера + """; Ref = """ + СтруктураПодключения.ИмяИБНаСервере + """";		
		
	КонецЕсли;
	
	Возврат НЕ НаличиеОшибок;	
	
КонецФункции

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
// Пример:
//  ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк") = "Вася пошел в Зоопарк".
//
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено)
	
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
	
	Возврат СтрокаПодстановки;
	
КонецФункции

Функция ПолучитьЗначениеКонфигурацииУчетнойСистемы()
	
	Возврат Константы.УчетнаяСистемаНастройкаПодключения.Получить().КонфигурацииУчетнойСистемы;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаВУчетнуюСистему

Процедура ВыгрузитьПриходнуюОперацию(МассивДокументов) Экспорт
	
	КонфигурацияУчетнойСистемы = ПолучитьЗначениеКонфигурацииУчетнойСистемы();
	
	Если КонфигурацияУчетнойСистемы = "УТ10" Тогда
		ВыгрузитьПриходнуюОперациюУТ10(МассивДокументов);
	ИначеЕсли КонфигурацияУчетнойСистемы = "УТ11" Тогда
		ВыгрузитьПриходнуюОперациюУТ11(МассивДокументов);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСкладПоУИ(СоединениеСБазой, УИСклада)
	УИОбъекта = СоединениеСБазой.NewObject("УникальныйИдентификатор", УИСклада);
	СправочникМенеджер = СоединениеСБазой.Справочники.Склады;
	СкладСсылка = СправочникМенеджер.ПолучитьСсылку(УИОбъекта);
	СкладОбъект = СкладСсылка.ПолучитьОбъект();
	Если СкладОбъект = Неопределено Тогда 
		СкладСсылка = СправочникМенеджер.ПустаяСсылка();	
	КонецЕсли;	
	
	Возврат СкладСсылка;
КонецФункции

Функция ПолучитьКонтрагента(СоединениеСБазой, Контрагент, ИНН)
	КонтрагентСсылка = СоединениеСБазой.Справочники.Контрагенты.ПустаяСсылка();
	
	УИКонтрагента = ПолучитьУИКонтрагентаИзСоответствия(Контрагент);
	Если ЗначениеЗаполнено(УИКонтрагента) Тогда
		КонтрагентСсылка = ПолучитьКонтрагентаПоУИ(СоединениеСБазой, УИКонтрагента);
	КонецЕсли;
	Если Не СоединениеСБазой.ЗначениеЗаполнено(КонтрагентСсылка) Тогда
		КонтрагентСсылка = ПолучитьКонтрагентаПоИНН(СоединениеСБазой, ИНН);
	КонецЕсли;	
	
	Возврат КонтрагентСсылка;
КонецФункции

Функция ПолучитьУИКонтрагентаИзСоответствия(ХозяйствующийСубъект)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоответствиеХозяйствующихСубъектовКонтрагентамУчетнойСистемы.КонтрагентУчетнойСистемы
		|ИЗ
		|	РегистрСведений.СоответствиеХозяйствующихСубъектовКонтрагентамУчетнойСистемы КАК СоответствиеХозяйствующихСубъектовКонтрагентамУчетнойСистемы
		|ГДЕ
		|	СоответствиеХозяйствующихСубъектовКонтрагентамУчетнойСистемы.ХозяйствующийСубъект = &ХозяйствующийСубъект";
	
	Запрос.УстановитьПараметр("ХозяйствующийСубъект", ХозяйствующийСубъект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		УИКонтрагента = ВыборкаДетальныеЗаписи.КонтрагентУчетнойСистемы.УИ;
	Иначе
		УИКонтрагента = "";
	КонецЕсли;
	
	Возврат УИКонтрагента;	
КонецФункции	

Функция ПолучитьКонтрагентаПоУИ(СоединениеСБазой, УИКонтрагента)
	УИОбъекта = СоединениеСБазой.NewObject("УникальныйИдентификатор", УИКонтрагента);
	СправочникМенеджер = СоединениеСБазой.Справочники.Контрагенты;
	КонтрагентСсылка = СправочникМенеджер.ПолучитьСсылку(УИОбъекта);
	КонтрагентОбъект = КонтрагентСсылка.ПолучитьОбъект();
	Если КонтрагентОбъект = Неопределено Тогда 
		КонтрагентСсылка = СправочникМенеджер.ПустаяСсылка();	
	КонецЕсли;	
	
	Возврат КонтрагентСсылка;
КонецФункции

Функция ПолучитьКонтрагентаПоИНН(СоединениеСБазой, ИНН)
	СправочникМенеджер = СоединениеСБазой.Справочники.Контрагенты;
	КонтрагентСсылка = СправочникМенеджер.НайтиПоРеквизиту("ИНН", ИНН);
	
	Возврат КонтрагентСсылка;
КонецФункции

Функция ПолучитьОрганизацию(СоединениеСБазой, Организация, ИНН)
	ОрганизацияСсылка = СоединениеСБазой.Справочники.Организации.ПустаяСсылка();
	
	УИОрганизации = ПолучитьУИОрганизацииИзСоответствия(Организация);
	Если ЗначениеЗаполнено(УИОрганизации) Тогда
		ОрганизацияСсылка = ПолучитьОрганизациюПоУИ(СоединениеСБазой, УИОрганизации);
	КонецЕсли;
	Если Не СоединениеСБазой.ЗначениеЗаполнено(ОрганизацияСсылка) Тогда
		ОрганизацияСсылка = ПолучитьОрганизациюПоИНН(СоединениеСБазой, ИНН);
	КонецЕсли;	
	
	Возврат ОрганизацияСсылка;
КонецФункции

Функция ПолучитьУИОрганизацииИзСоответствия(ХозяйствующийСубъект)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоответствиеХозяйствующихСубъектовОрганизациямУчетнойСистемы.ОрганизацияУчетнойСистемы
		|ИЗ
		|	РегистрСведений.СоответствиеХозяйствующихСубъектовОрганизациямУчетнойСистемы КАК СоответствиеХозяйствующихСубъектовОрганизациямУчетнойСистемы
		|ГДЕ
		|	СоответствиеХозяйствующихСубъектовОрганизациямУчетнойСистемы.ХозяйствующийСубъект = &ХозяйствующийСубъект";
	
	Запрос.УстановитьПараметр("ХозяйствующийСубъект", ХозяйствующийСубъект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		УИОрганизации = ВыборкаДетальныеЗаписи.ОрганизацияУчетнойСистемы.УИ;
	Иначе
		УИОрганизации = "";
	КонецЕсли;
	
	Возврат УИОрганизации;	
КонецФункции	

Функция ПолучитьОрганизациюПоУИ(СоединениеСБазой, УИОрганизации)
	УИОбъекта = СоединениеСБазой.NewObject("УникальныйИдентификатор", УИОрганизации);
	СправочникМенеджер = СоединениеСБазой.Справочники.Организации;
	ОрганизацияСсылка = СправочникМенеджер.ПолучитьСсылку(УИОбъекта);
	ОрганизацияОбъект = ОрганизацияСсылка.ПолучитьОбъект();
	Если ОрганизацияОбъект = Неопределено Тогда 
		ОрганизацияСсылка = СправочникМенеджер.ПустаяСсылка();	
	КонецЕсли;	
	
	Возврат ОрганизацияСсылка;
КонецФункции

Функция ПолучитьОрганизациюПоИНН(СоединениеСБазой, ИНН)
	СправочникМенеджер = СоединениеСБазой.Справочники.Организации;
	ОрганизацияСсылка = СправочникМенеджер.НайтиПоРеквизиту("ИНН", ИНН);
	
	Возврат ОрганизацияСсылка;
КонецФункции

Функция ПолучитьВидНоменклатурыПоУИ(СоединениеСБазой, УИВидаНоменклатуры)
	УИОбъекта = СоединениеСБазой.NewObject("УникальныйИдентификатор", УИВидаНоменклатуры);
	СправочникМенеджер = СоединениеСБазой.Справочники.ВидыНоменклатуры;
	ВидНоменклатурыСсылка = СправочникМенеджер.ПолучитьСсылку(УИОбъекта);
	ВидНоменклатурыОбъект = ВидНоменклатурыСсылка.ПолучитьОбъект();
	Если ВидНоменклатурыОбъект = Неопределено Тогда 
		ВидНоменклатурыСсылка = СправочникМенеджер.ПустаяСсылка();	
	КонецЕсли;	
	
	Возврат ВидНоменклатурыСсылка;
КонецФункции

Процедура ОбновитьСоответствиеПродукцииНоменклатуреУчетнойСистемы(НоменклатураУчетнойСистемы, Продукция)
	СтруктураЗаписи = Новый Структура();
	
	СтруктураЗаписи.Вставить("Продукция"					,Продукция);
	СтруктураЗаписи.Вставить("НоменклатураУчетнойСистемы"	,НоменклатураУчетнойСистемы);
	
	РегистрыСведений.СоответствиеПродукцииНоменклатуреУчетнойСистемы.ДобавитьЗапись(СтруктураЗаписи);
КонецПроцедуры	

Процедура ОбновитьСоответствиеЗаписейСкладскогоЖурналаНоменклатуреУчетнойСистемы(НоменклатураУчетнойСистемы, ЗаписьСкладскогоЖурнала)
	СтруктураЗаписи = Новый Структура();
	
	СтруктураЗаписи.Вставить("ЗаписьСкладскогоЖурнала"		,ЗаписьСкладскогоЖурнала);
	СтруктураЗаписи.Вставить("НоменклатураУчетнойСистемы"	,НоменклатураУчетнойСистемы);
	
	РегистрыСведений.СоответствиеЗаписейСкладскогоЖурналаНоменклатуреУчетнойСистемы.ДобавитьЗапись(СтруктураЗаписи);
КонецПроцедуры

/////////////////////////////////////////
//////// УПРАВЛЕНИЕ ТОРГОВЛЕЙ 11.х////////
/////////////////////////////////////////
#Область УправлениеТорговлей_11_х_Выгрузка

Процедура ВыгрузитьПриходнуюОперациюУТ11(МассивДокументов)
	
	СоединениеСБазой = ОбменУВСУчетнаяСистемаСервер.ВыполнитьПодключениеКИБУчетнойСистемы();
	
	Если СоединениеСБазой = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходныеОперацииСводноТаблицаДанных.ПриходнаяОперация.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
	|	ПриходныеОперацииСводноТаблицаДанных.ПриходнаяОперация.Продукция КАК Продукция,
	|	ПриходныеОперацииСводноТаблицаДанных.ПриходнаяОперация.Продукция.Наименование КАК НаименованиеПродукции,
	|	ПриходныеОперацииСводноТаблицаДанных.ПриходнаяОперация.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПриходныеОперацииСводноТаблицаДанных.ПриходнаяОперация.Количество КАК Количество,
	|	ПриходныеОперацииСводноТаблицаДанных.ПриходнаяОперация.ЗаписьСкладскогоЖурнала.ДатаОкончанияСрокаГодностиНачало КАК ДатаОкончанияСрокаГодностиНачало,
	|	ПриходныеОперацииСводноТаблицаДанных.ПриходнаяОперация.ЗаписьСкладскогоЖурнала.ДатаОкончанияСрокаГодностиОкончание КАК ДатаОкончанияСрокаГодностиОкончание,
	|	ПриходныеОперацииСводноТаблицаДанных.ПриходнаяОперация.НоменклатураУчетнойСистемы КАК НоменклатураУчетнойСистемы,
	|	ПриходныеОперацииСводноТаблицаДанных.ПриходнаяОперация.НоменклатураУчетнойСистемы = ЗНАЧЕНИЕ(Справочник.НоменклатураУчетнойСистемы.ПустаяСсылка) КАК НоменклатураУчетнойСистемыНеВыбрана,
	|	ЕСТЬNULL(ПриходныеОперацииСводноТаблицаДанных.ПриходнаяОперация.НоменклатураУчетнойСистемы.УИ, """") КАК УИНоменклатуры,
	|	ЕСТЬNULL(ПриходныеОперацииСводноТаблицаДанных.ПриходнаяОперация.НоменклатураУчетнойСистемы.ВидНоменклатуры.УИ, """") КАК УИВидаНоменклатуры,
	|	ПриходныеОперацииСводноТаблицаДанных.Ссылка КАК ПриходнаяОперацияСводно,
	|	ЕСТЬNULL(ПриходныеОперацииСводноТаблицаДанных.ПриходнаяОперация, ЗНАЧЕНИЕ(Документ.ПриходныеОперации.ПустаяСсылка)) КАК ПриходнаяОперация,
	|	ЕСТЬNULL(ПриходныеОперацииСводноТаблицаДанных.ПриходнаяОперация.Проведен, ЛОЖЬ) КАК ВыгружатьДанныеПоДокументу,
	|	ПриходныеОперацииСводноТаблицаДанных.Ссылка.УИДокументаУчетнойСистемы КАК УИДокументаУчетнойСистемы,
	|	ПриходныеОперацииСводноТаблицаДанных.Ссылка.КонтрагентОтправитель.ИНН,
	|	ПриходныеОперацииСводноТаблицаДанных.Ссылка.КонтрагентПолучатель.ИНН,
	|	ПриходныеОперацииСводноТаблицаДанных.Ссылка.КонтрагентОтправитель,
	|	ПриходныеОперацииСводноТаблицаДанных.Ссылка.КонтрагентПолучатель
	|ИЗ
	|	Документ.ПриходныеОперацииСводно.ТаблицаДанных КАК ПриходныеОперацииСводноТаблицаДанных
	|ГДЕ
	|	ПриходныеОперацииСводноТаблицаДанных.Ссылка В(&МассивДокументов)
	|	И НЕ ПриходныеОперацииСводноТаблицаДанных.Ссылка.УполномоченноеГашение
	|ИТОГИ
	|	МИНИМУМ(ВыгружатьДанныеПоДокументу),
	|	МАКСИМУМ(УИДокументаУчетнойСистемы)
	|ПО
	|	ПриходнаяОперацияСводно";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат
	КонецЕсли;
	
	ВыборкаПриходнаяОперацияСводно = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВидНоменклатурыПоУмолчанию 		= Константы.УчетнаяСистемаВидНоменклатурыПоУмолчанию.Получить();
	УИВидаНоменклатурыПоУмолчанию 	= ВидНоменклатурыПоУмолчанию.УИ;
	СкладПоУмолчанию				= Константы.УчетнаяСистемаСкладПоУмолчанию.Получить();
	Склад 							= ПолучитьСкладПоУИ(СоединениеСБазой, СкладПоУмолчанию.УИ);
		
	Пока ВыборкаПриходнаяОперацияСводно.Следующий() Цикл
		
		Если Не ВыборкаПриходнаяОперацияСводно.ВыгружатьДанныеПоДокументу Тогда
			Продолжить;
		КонецЕсли;
			
		Отказ = Ложь;
		
		ПриходнаяОперацияСводноСсылка 	= ВыборкаПриходнаяОперацияСводно.ПриходнаяОперацияСводно;
		УИДокументаУчетнойСистемы 		= ВыборкаПриходнаяОперацияСводно.УИДокументаУчетнойСистемы;
		
		Контрагент						= ПолучитьКонтрагента(СоединениеСБазой, ВыборкаПриходнаяОперацияСводно.КонтрагентОтправитель, ВыборкаПриходнаяОперацияСводно.КонтрагентОтправительИНН);
		Организация						= ПолучитьОрганизацию(СоединениеСБазой, ВыборкаПриходнаяОперацияСводно.КонтрагентПолучатель, ВыборкаПриходнаяОперацияСводно.КонтрагентПолучательИНН);
		
		Если Не СоединениеСБазой.Метаданные.Документы.Найти("ПоступлениеТоваровУслуг") = Неопределено Тогда
			ИмяДокументаПоступление = "ПоступлениеТоваровУслуг";
		ИначеЕсли Не СоединениеСБазой.Метаданные.Документы.Найти("ПриобретениеТоваровУслуг") = Неопределено Тогда
			ИмяДокументаПоступление = "ПриобретениеТоваровУслуг";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(УИДокументаУчетнойСистемы) Тогда 
			ДокументПоступлениеСсылка = СоединениеСБазой.Документы[ИмяДокументаПоступление].ПолучитьСсылку(СоединениеСБазой.NewObject("УникальныйИдентификатор", УИДокументаУчетнойСистемы));
			ДокументПоступлениеОбъект = ДокументПоступлениеСсылка.ПолучитьОбъект();
			Если ДокументПоступлениеОбъект = Неопределено Тогда
				ДокументПоступлениеОбъект = СоединениеСБазой.Документы[ИмяДокументаПоступление].СоздатьДокумент();
			КонецЕсли;
		Иначе
			ДокументПоступлениеОбъект = СоединениеСБазой.Документы[ИмяДокументаПоступление].СоздатьДокумент();
		КонецЕсли;
		ДокументПоступлениеОбъект.ОбменДанными.Загрузка = Истина;
		ДокументПоступлениеОбъект.Дата 					= ПриходнаяОперацияСводноСсылка.Дата;
		ДокументПоступлениеОбъект.Склад 				= Склад;
		ДокументПоступлениеОбъект.ХозяйственнаяОперация = СоединениеСБазой.Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
		ДокументПоступлениеОбъект.Контрагент 			= Контрагент;
		ДокументПоступлениеОбъект.Партнер 				= Контрагент.Партнер;
		ДокументПоступлениеОбъект.Организация 			= Организация;
		ДокументПоступлениеОбъект.УстановитьНовыйНомер();
		
		ВыборкаДетальныеЗаписи = ВыборкаПриходнаяОперацияСводно.Выбрать();
		
		ТЧТовары = ДокументПоступлениеОбъект.Товары;
		ТЧСерии = ДокументПоступлениеОбъект.Серии;
		
		ТЧТовары.Очистить();
		ТЧСерии.Очистить();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПриходнаяОперация) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВыборкаДетальныеЗаписи.НоменклатураУчетнойСистемыНеВыбрана Тогда
				УИВидаНоменклатуры 					= УИВидаНоменклатурыПоУмолчанию; 
				НоменклатураУчетнойСистемыСсылка 	= Справочники.НоменклатураУчетнойСистемы.ПустаяСсылка();
				//ЕдиницаИзмерения
			Иначе
				УИВидаНоменклатуры 					= ВыборкаДетальныеЗаписи.УИВидаНоменклатуры; 
				НоменклатураУчетнойСистемыСсылка 	= ВыборкаДетальныеЗаписи.НоменклатураУчетнойСистемы;
				//Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Упаковка) Тогда
				//	ЕдиницаИзмерения = 	
				//Иначе	
				//	ЕдиницаИзмерения = 
				//КонецЕсли;
			КонецЕсли;
			
			Номенклатура = ПолучитьНоменклатуруУТ11(СоединениеСБазой, УИВидаНоменклатуры, ВыборкаДетальныеЗаписи.УИНоменклатуры, ВыборкаДетальныеЗаписи.НаименованиеПродукции, НоменклатураУчетнойСистемыСсылка, ВидНоменклатурыПоУмолчанию, ВыборкаДетальныеЗаписи.Продукция, ВыборкаДетальныеЗаписи.ЗаписьСкладскогоЖурнала, ВыборкаДетальныеЗаписи.ПриходнаяОперация);
			
			Если Не СоединениеСБазой.ЗначениеЗаполнено(Номенклатура) Тогда
				Отказ = Истина;	
			КонецЕсли;
			
			Серия = ПолучитьСериюНоменклатурыУТ11(СоединениеСБазой, ВыборкаДетальныеЗаписи.ЗаписьСкладскогоЖурнала, УИВидаНоменклатурыПоУмолчанию);
						
			СтрокаТЧТовары 						= ТЧТовары.Добавить();
			СтрокаТЧТовары.Номенклатура 		= Номенклатура;
			СтрокаТЧТовары.СтавкаНДС 			= Номенклатура.СтавкаНДС;
			СтрокаТЧТовары.Серия 				= Серия;
			СтрокаТЧТовары.СтатусУказанияСерий  = 4;
			СтрокаТЧТовары.Склад		 		= Склад;
			//СтрокаТЧТовары.Упаковка 			= "";
			//СтрокаТЧТовары.КоличествоУпаковок 	= ?(ВыборкаДетальныеЗаписи.КоличествоУпаковок = 0, ВыборкаДетальныеЗаписи.Количество, ВыборкаДетальныеЗаписи.КоличествоУпаковок);
			СтрокаТЧТовары.Количество 			= ВыборкаДетальныеЗаписи.Количество;
			СтрокаТЧТовары.КоличествоУпаковок 	= ВыборкаДетальныеЗаписи.Количество;
			
			СтрокаТЧСерии 				= ТЧСерии.Добавить();
			СтрокаТЧСерии.Номенклатура 	= Номенклатура;
			СтрокаТЧСерии.Склад		 	= Склад;
			СтрокаТЧСерии.Серия 		= Серия;
			СтрокаТЧСерии.Количество 	= ВыборкаДетальныеЗаписи.Количество;
			
		КонецЦикла;
		
		Если Не Отказ Тогда 
			Попытка
				СоединениеСБазой.НачатьТранзакцию();
				ДокументПоступлениеОбъект.Записать();
				ДокументПоступлениеСылка 								= ДокументПоступлениеОбъект.Ссылка;
				ПриходнаяОперацияСводноОбъект 							= ПриходнаяОперацияСводноСсылка.ПолучитьОбъект();
				ПриходнаяОперацияСводноОбъект.УИДокументаУчетнойСистемы = СоединениеСБазой.XMLСтрока(ДокументПоступлениеСылка.УникальныйИдентификатор());
				ПриходнаяОперацияСводноОбъект.ОбменДанными.Загрузка 	= Истина;
				ПриходнаяОперацияСводноОбъект.Записать();
				СоединениеСБазой.ЗафиксироватьТранзакцию();
			Исключение
				СоединениеСБазой.ОтменитьТранзакцию();
			КонецПопытки;
			
		КонецЕсли;
	КонецЦикла;
	
	СоединениеСБазой = Неопределено;
КонецПроцедуры

Функция ПолучитьНоменклатуруУТ11(СоединениеСБазой, 
							УИВидаНоменклатуры, 
							УИНоменклатуры, 
							НаименованиеПродукции, 
							НоменклатураУчетнойСистемыСсылка, 
							ВидНоменклатурыПоУмолчанию, 
							Продукция,
							ЗаписьСкладскогоЖурнала,
							ПриходнаяОперацияСсылка)
							
	ВидНоменклатуры = ПолучитьВидНоменклатурыПоУИ(СоединениеСБазой, УИВидаНоменклатуры);
	
	СправочникМенеджер = СоединениеСБазой.Справочники.Номенклатура;
	НоменклатураСсылка = СправочникМенеджер.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(УИНоменклатуры) Тогда 
		УИОбъекта = СоединениеСБазой.NewObject("УникальныйИдентификатор", УИНоменклатуры);
		НоменклатураСсылка = СправочникМенеджер.ПолучитьСсылку(УИОбъекта);
		НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
	Иначе
		НоменклатураОбъект = Неопределено;
	КонецЕсли;
	Если НоменклатураОбъект = Неопределено Тогда 
		// Создание номенклатуры
		НоменклатураОбъект 								= СправочникМенеджер.СоздатьЭлемент();
		НоменклатураОбъект.УстановитьНовыйКод();
		НоменклатураОбъект.Артикул						= НоменклатураОбъект.Код;
		НоменклатураОбъект.Наименование 				= НаименованиеПродукции;
		НоменклатураОбъект.НаименованиеПолное 			= НаименованиеПродукции;
		НоменклатураОбъект.ВариантОформленияПродажи 	= СоединениеСБазой.Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
		НоменклатураОбъект.ИспользованиеХарактеристик 	= СоединениеСБазой.Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать;
		НоменклатураОбъект.Качество						= СоединениеСБазой.Перечисления.ГрадацииКачества.Новый;
		НоменклатураОбъект.СтавкаНДС					= СоединениеСБазой.Перечисления.СтавкиНДС.БезНДС;
		НоменклатураОбъект.ВидНоменклатуры				= ВидНоменклатуры;
		НоменклатураОбъект.ТипНоменклатуры				= ВидНоменклатуры.ТипНоменклатуры;
		НоменклатураОбъект.ГруппаДоступа				= ВидНоменклатуры.ГруппаДоступа;
	КонецЕсли;
	НоменклатураОбъект.ОбменДанными.Загрузка 		= Истина;
	
	// Создание номенклатуры учетной системы
	Если ЗначениеЗаполнено(НоменклатураУчетнойСистемыСсылка) Тогда
		НоменклатураУчетнойСистемыОбъект = НоменклатураУчетнойСистемыСсылка.ПолучитьОбъект();
	Иначе
		НоменклатураУчетнойСистемыОбъект 					= Справочники.НоменклатураУчетнойСистемы.СоздатьЭлемент();
		НоменклатураУчетнойСистемыОбъект.Наименование 		= НаименованиеПродукции;
		НоменклатураУчетнойСистемыОбъект.Код 				= НоменклатураОбъект.Код;
		НоменклатураУчетнойСистемыОбъект.ВидНоменклатуры 	= ВидНоменклатурыПоУмолчанию;
	КонецЕсли;
	НоменклатураОбъект.ОбменДанными.Загрузка = Истина;
	
	Попытка
		СоединениеСБазой.НачатьТранзакцию();
		
		НоменклатураОбъект.Записать();
		НоменклатураСсылка = НоменклатураОбъект.Ссылка;
		
		//
		//ЕдиницаИзмерения = ПолучитьЕдиницуИзмерения(СоединениеСБазой, НоменклатураСсылка);
		
		//НоменклатураОбъект.ЕдиницаИзмерения = ЕдиницаИзмерения;
		//НоменклатураОбъект.Записать();
		//НоменклатураСсылка = НоменклатураОбъект.Ссылка;
		
		НоменклатураУчетнойСистемыОбъект.УИ = СоединениеСБазой.XMLСтрока(НоменклатураСсылка.УникальныйИдентификатор());
		НоменклатураУчетнойСистемыОбъект.Записать();
		НоменклатураУчетнойСистемыСсылка = НоменклатураУчетнойСистемыОбъект.Ссылка;
		
		
		// Обновление соответствия продукции номенклатуре учетной системы
		ОбновитьСоответствиеПродукцииНоменклатуреУчетнойСистемы(НоменклатураУчетнойСистемыОбъект.Ссылка, Продукция);
		
		// Обновление соответствия записей складского журнала номенклатуре учетной системы
		ОбновитьСоответствиеЗаписейСкладскогоЖурналаНоменклатуреУчетнойСистемы(НоменклатураУчетнойСистемыОбъект.Ссылка, ЗаписьСкладскогоЖурнала);
		
		ПриходнаяОперацияОбъект = ПриходнаяОперацияСсылка.ПолучитьОбъект();
		ПриходнаяОперацияОбъект.НоменклатураУчетнойСистемы = НоменклатураУчетнойСистемыСсылка;
		ПриходнаяОперацияОбъект.ОбменДанными.Загрузка = Истина;
		ПриходнаяОперацияОбъект.Записать();
		
		СоединениеСБазой.ЗафиксироватьТранзакцию();
	Исключение
		// Запись в журнал
		СоединениеСБазой.ОтменитьТранзакцию();
	КонецПопытки;
	
	Возврат НоменклатураСсылка;
КонецФункции

Функция ПолучитьСериюНоменклатурыУТ11(СоединениеСБазой, ЗаписьСкладскогоЖурнала, УИВидаНоменклатурыПоУмолчанию)
	ВидНоменклатуры = ПолучитьВидНоменклатурыПоУИ(СоединениеСБазой, УИВидаНоменклатурыПоУмолчанию);
	
	СправочникМенеджер = СоединениеСБазой.Справочники.СерииНоменклатуры;
	СерияНоменклатурыСсылка = СправочникМенеджер.НайтиПоРеквизиту("Номер", ЗаписьСкладскогоЖурнала.GUID_Меркурий);
	
	Если Не СоединениеСБазой.ЗначениеЗаполнено(СерияНоменклатурыСсылка) Тогда
		СерияНоменклатурыОбъект 						= СправочникМенеджер.СоздатьЭлемент();
		СерияНоменклатурыОбъект.ОбменДанными.Загрузка 	= Истина;
		СерияНоменклатурыОбъект.Номер 					= ЗаписьСкладскогоЖурнала.GUID_Меркурий;
		СерияНоменклатурыОбъект.ГоденДо 				= ЗаписьСкладскогоЖурнала.ДатаОкончанияСрокаГодностиОкончание;
		СерияНоменклатурыОбъект.ВидНоменклатуры 		= ВидНоменклатуры;
		СерияНоменклатурыОбъект.Наименование 			= ЗаписьСкладскогоЖурнала.НаименованиеПродукции;
		Попытка
			СоединениеСБазой.НачатьТранзакцию();
			СерияНоменклатурыОбъект.Записать();
			СоединениеСБазой.ЗафиксироватьТранзакцию();
			СерияНоменклатурыСсылка = СерияНоменклатурыОбъект.Ссылка;
		Исключение
			СоединениеСБазой.ОтменитьТранзакцию();
		КонецПопытки;
	КонецЕсли;
	
	Возврат СерияНоменклатурыСсылка;
КонецФункции

#КонецОбласти

/////////////////////////////////////////
//////// УПРАВЛЕНИЕ ТОРГОВЛЕЙ 10.х////////
/////////////////////////////////////////
#Область УправлениеТорговлей_10_х_Выгрузка

Процедура ВыгрузитьПриходнуюОперациюУТ10(МассивДокументов)
	
	СоединениеСБазой = ОбменУВСУчетнаяСистемаСервер.ВыполнитьПодключениеКИБУчетнойСистемы();
	
	Если СоединениеСБазой = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходныеОперацииСводноТаблицаДанных.ПриходнаяОперация.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
	|	ПриходныеОперацииСводноТаблицаДанных.ПриходнаяОперация.Продукция КАК Продукция,
	|	ПриходныеОперацииСводноТаблицаДанных.ПриходнаяОперация.Продукция.Наименование КАК НаименованиеПродукции,
	|	ПриходныеОперацииСводноТаблицаДанных.ПриходнаяОперация.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПриходныеОперацииСводноТаблицаДанных.ПриходнаяОперация.Количество КАК Количество,
	|	ПриходныеОперацииСводноТаблицаДанных.ПриходнаяОперация.ЗаписьСкладскогоЖурнала.ДатаОкончанияСрокаГодностиНачало КАК ДатаОкончанияСрокаГодностиНачало,
	|	ПриходныеОперацииСводноТаблицаДанных.ПриходнаяОперация.ЗаписьСкладскогоЖурнала.ДатаОкончанияСрокаГодностиОкончание КАК ДатаОкончанияСрокаГодностиОкончание,
	|	ПриходныеОперацииСводноТаблицаДанных.ПриходнаяОперация.НоменклатураУчетнойСистемы КАК НоменклатураУчетнойСистемы,
	|	ПриходныеОперацииСводноТаблицаДанных.ПриходнаяОперация.НоменклатураУчетнойСистемы = ЗНАЧЕНИЕ(Справочник.НоменклатураУчетнойСистемы.ПустаяСсылка) КАК НоменклатураУчетнойСистемыНеВыбрана,
	|	ЕСТЬNULL(ПриходныеОперацииСводноТаблицаДанных.ПриходнаяОперация.НоменклатураУчетнойСистемы.УИ, """") КАК УИНоменклатуры,
	|	ЕСТЬNULL(ПриходныеОперацииСводноТаблицаДанных.ПриходнаяОперация.НоменклатураУчетнойСистемы.ВидНоменклатуры.УИ, """") КАК УИВидаНоменклатуры,
	|	ПриходныеОперацииСводноТаблицаДанных.Ссылка КАК ПриходнаяОперацияСводно,
	|	ЕСТЬNULL(ПриходныеОперацииСводноТаблицаДанных.ПриходнаяОперация, ЗНАЧЕНИЕ(Документ.ПриходныеОперации.ПустаяСсылка)) КАК ПриходнаяОперация,
	|	ЕСТЬNULL(ПриходныеОперацииСводноТаблицаДанных.ПриходнаяОперация.Проведен, ЛОЖЬ) КАК ВыгружатьДанныеПоДокументу,
	|	ПриходныеОперацииСводноТаблицаДанных.Ссылка.УИДокументаУчетнойСистемы КАК УИДокументаУчетнойСистемы,
	|	ПриходныеОперацииСводноТаблицаДанных.Ссылка.КонтрагентОтправитель.ИНН,
	|	ПриходныеОперацииСводноТаблицаДанных.Ссылка.КонтрагентПолучатель.ИНН,
	|	ПриходныеОперацииСводноТаблицаДанных.Ссылка.КонтрагентОтправитель,
	|	ПриходныеОперацииСводноТаблицаДанных.Ссылка.КонтрагентПолучатель
	|ИЗ
	|	Документ.ПриходныеОперацииСводно.ТаблицаДанных КАК ПриходныеОперацииСводноТаблицаДанных
	|ГДЕ
	|	ПриходныеОперацииСводноТаблицаДанных.Ссылка В(&МассивДокументов)
	|	И НЕ ПриходныеОперацииСводноТаблицаДанных.Ссылка.УполномоченноеГашение
	|ИТОГИ
	|	МИНИМУМ(ВыгружатьДанныеПоДокументу),
	|	МАКСИМУМ(УИДокументаУчетнойСистемы)
	|ПО
	|	ПриходнаяОперацияСводно";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат
	КонецЕсли;
	
	ВыборкаПриходнаяОперацияСводно = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВидНоменклатурыПоУмолчанию 		= Константы.УчетнаяСистемаВидНоменклатурыПоУмолчанию.Получить();
	УИВидаНоменклатурыПоУмолчанию 	= ВидНоменклатурыПоУмолчанию.УИ;
	СкладПоУмолчанию				= Константы.УчетнаяСистемаСкладПоУмолчанию.Получить();
	Склад 							= ПолучитьСкладПоУИ(СоединениеСБазой, СкладПоУмолчанию.УИ);
		
	Пока ВыборкаПриходнаяОперацияСводно.Следующий() Цикл
		
		Если Не ВыборкаПриходнаяОперацияСводно.ВыгружатьДанныеПоДокументу Тогда
			Продолжить;
		КонецЕсли;
			
		Отказ = Ложь;
		
		ПриходнаяОперацияСводноСсылка 	= ВыборкаПриходнаяОперацияСводно.ПриходнаяОперацияСводно;
		УИДокументаУчетнойСистемы 		= ВыборкаПриходнаяОперацияСводно.УИДокументаУчетнойСистемы;
		
		Контрагент						= ПолучитьКонтрагента(СоединениеСБазой, ВыборкаПриходнаяОперацияСводно.КонтрагентОтправитель, ВыборкаПриходнаяОперацияСводно.КонтрагентОтправительИНН);
		Организация						= ПолучитьОрганизацию(СоединениеСБазой, ВыборкаПриходнаяОперацияСводно.КонтрагентПолучатель, ВыборкаПриходнаяОперацияСводно.КонтрагентПолучательИНН);
		
		Если ЗначениеЗаполнено(УИДокументаУчетнойСистемы) Тогда 
			ДокументПоступлениеСсылка = СоединениеСБазой.Документы.ПоступлениеТоваровУслуг.ПолучитьСсылку(СоединениеСБазой.NewObject("УникальныйИдентификатор", УИДокументаУчетнойСистемы));	
			ДокументПоступлениеОбъект = ДокументПоступлениеСсылка.ПолучитьОбъект();
			Если ДокументПоступлениеОбъект = Неопределено Тогда
				ДокументПоступлениеОбъект = СоединениеСБазой.Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
			КонецЕсли;
		Иначе
			ДокументПоступлениеОбъект = СоединениеСБазой.Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		КонецЕсли;
		ДокументПоступлениеОбъект.ОбменДанными.Загрузка = Истина;
		ДокументПоступлениеОбъект.Дата 					= ПриходнаяОперацияСводноСсылка.Дата;
		ДокументПоступлениеОбъект.СкладОрдер			= Склад;
		ДокументПоступлениеОбъект.Контрагент 			= Контрагент;
		ДокументПоступлениеОбъект.Организация 			= Организация;
		ДокументПоступлениеОбъект.УстановитьНовыйНомер();
		
		ВыборкаДетальныеЗаписи = ВыборкаПриходнаяОперацияСводно.Выбрать();
		
		ТЧТовары = ДокументПоступлениеОбъект.Товары;
		
		ТЧТовары.Очистить();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПриходнаяОперация) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВыборкаДетальныеЗаписи.НоменклатураУчетнойСистемыНеВыбрана Тогда
				УИВидаНоменклатуры 					= УИВидаНоменклатурыПоУмолчанию; 
				НоменклатураУчетнойСистемыСсылка 	= Справочники.НоменклатураУчетнойСистемы.ПустаяСсылка();
				//ЕдиницаИзмерения
			Иначе
				УИВидаНоменклатуры 					= ВыборкаДетальныеЗаписи.УИВидаНоменклатуры; 
				НоменклатураУчетнойСистемыСсылка 	= ВыборкаДетальныеЗаписи.НоменклатураУчетнойСистемы;
				//Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Упаковка) Тогда
				//	ЕдиницаИзмерения = 	
				//Иначе	
				//	ЕдиницаИзмерения = 
				//КонецЕсли;
			КонецЕсли;
			
			Номенклатура = ПолучитьНоменклатуруУТ10(СоединениеСБазой, УИВидаНоменклатуры, ВыборкаДетальныеЗаписи.УИНоменклатуры, ВыборкаДетальныеЗаписи.НаименованиеПродукции, НоменклатураУчетнойСистемыСсылка, ВидНоменклатурыПоУмолчанию, ВыборкаДетальныеЗаписи.Продукция, ВыборкаДетальныеЗаписи.ЗаписьСкладскогоЖурнала, ВыборкаДетальныеЗаписи.ПриходнаяОперация);
			
			Если Не СоединениеСБазой.ЗначениеЗаполнено(Номенклатура) Тогда
				Отказ = Истина;	
			КонецЕсли;
			
			Серия = ПолучитьСериюНоменклатурыУТ10(СоединениеСБазой, ВыборкаДетальныеЗаписи.ЗаписьСкладскогоЖурнала, Номенклатура);
						
			СтрокаТЧТовары 						= ТЧТовары.Добавить();
			СтрокаТЧТовары.Номенклатура 		= Номенклатура;
			СтрокаТЧТовары.СтавкаНДС 			= Номенклатура.СтавкаНДС;
			СтрокаТЧТовары.СерияНоменклатуры	= Серия;
			СтрокаТЧТовары.Склад		 		= Склад;
			СтрокаТЧТовары.Количество 			= ВыборкаДетальныеЗаписи.Количество;
			
		КонецЦикла;
		
		Если Не Отказ Тогда 
			Попытка
				СоединениеСБазой.НачатьТранзакцию();
				ДокументПоступлениеОбъект.Записать();
				ДокументПоступлениеСылка 								= ДокументПоступлениеОбъект.Ссылка;
				ПриходнаяОперацияСводноОбъект 							= ПриходнаяОперацияСводноСсылка.ПолучитьОбъект();
				ПриходнаяОперацияСводноОбъект.УИДокументаУчетнойСистемы = СоединениеСБазой.XMLСтрока(ДокументПоступлениеСылка.УникальныйИдентификатор());
				ПриходнаяОперацияСводноОбъект.ОбменДанными.Загрузка 	= Истина;
				ПриходнаяОперацияСводноОбъект.Записать();
				СоединениеСБазой.ЗафиксироватьТранзакцию();
			Исключение
				СоединениеСБазой.ОтменитьТранзакцию();
			КонецПопытки;
			
		КонецЕсли;
	КонецЦикла;
	
	СоединениеСБазой = Неопределено;
КонецПроцедуры

Функция ПолучитьНоменклатуруУТ10(СоединениеСБазой, 
							УИВидаНоменклатуры, 
							УИНоменклатуры, 
							НаименованиеПродукции, 
							НоменклатураУчетнойСистемыСсылка, 
							ВидНоменклатурыПоУмолчанию, 
							Продукция,
							ЗаписьСкладскогоЖурнала,
							ПриходнаяОперацияСсылка)
							
	ВидНоменклатуры = ПолучитьВидНоменклатурыПоУИ(СоединениеСБазой, УИВидаНоменклатуры);
	
	СправочникМенеджер = СоединениеСБазой.Справочники.Номенклатура;
	НоменклатураСсылка = СправочникМенеджер.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(УИНоменклатуры) Тогда 
		УИОбъекта = СоединениеСБазой.NewObject("УникальныйИдентификатор", УИНоменклатуры);
		НоменклатураСсылка = СправочникМенеджер.ПолучитьСсылку(УИОбъекта);
		НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
	Иначе
		НоменклатураОбъект = Неопределено;
	КонецЕсли;
	Если НоменклатураОбъект = Неопределено Тогда 
		// Создание номенклатуры
		НоменклатураОбъект 								= СправочникМенеджер.СоздатьЭлемент();
		НоменклатураОбъект.УстановитьНовыйКод();
		НоменклатураОбъект.Артикул						= НоменклатураОбъект.Код;
		НоменклатураОбъект.Наименование 				= НаименованиеПродукции;
		НоменклатураОбъект.НаименованиеПолное 			= НаименованиеПродукции;
		НоменклатураОбъект.ВестиУчетПоХарактеристикам 	= Ложь;
		НоменклатураОбъект.ВестиУчетПоСериям			= Истина;
		НоменклатураОбъект.СтавкаНДС					= СоединениеСБазой.Перечисления.СтавкиНДС.БезНДС;
		НоменклатураОбъект.ВидНоменклатуры				= ВидНоменклатуры;
	КонецЕсли;
	НоменклатураОбъект.ОбменДанными.Загрузка 		= Истина;
	
	// Создание номенклатуры учетной системы
	Если ЗначениеЗаполнено(НоменклатураУчетнойСистемыСсылка) Тогда
		НоменклатураУчетнойСистемыОбъект = НоменклатураУчетнойСистемыСсылка.ПолучитьОбъект();
	Иначе
		НоменклатураУчетнойСистемыОбъект 					= Справочники.НоменклатураУчетнойСистемы.СоздатьЭлемент();
		НоменклатураУчетнойСистемыОбъект.Наименование 		= НаименованиеПродукции;
		НоменклатураУчетнойСистемыОбъект.Код 				= НоменклатураОбъект.Код;
		НоменклатураУчетнойСистемыОбъект.ВидНоменклатуры 	= ВидНоменклатурыПоУмолчанию;
	КонецЕсли;
	НоменклатураОбъект.ОбменДанными.Загрузка = Истина;
	
	Попытка
		СоединениеСБазой.НачатьТранзакцию();
		
		НоменклатураОбъект.Записать();
		НоменклатураСсылка = НоменклатураОбъект.Ссылка;
		
		//
		//ЕдиницаИзмерения = ПолучитьЕдиницуИзмерения(СоединениеСБазой, НоменклатураСсылка);
		
		//НоменклатураОбъект.ЕдиницаИзмерения = ЕдиницаИзмерения;
		//НоменклатураОбъект.Записать();
		//НоменклатураСсылка = НоменклатураОбъект.Ссылка;
		
		НоменклатураУчетнойСистемыОбъект.УИ = СоединениеСБазой.XMLСтрока(НоменклатураСсылка.УникальныйИдентификатор());
		НоменклатураУчетнойСистемыОбъект.Записать();
		НоменклатураУчетнойСистемыСсылка = НоменклатураУчетнойСистемыОбъект.Ссылка;
		
		
		// Обновление соответствия продукции номенклатуре учетной системы
		ОбновитьСоответствиеПродукцииНоменклатуреУчетнойСистемы(НоменклатураУчетнойСистемыОбъект.Ссылка, Продукция);
		
		// Обновление соответствия записей складского журнала номенклатуре учетной системы
		ОбновитьСоответствиеЗаписейСкладскогоЖурналаНоменклатуреУчетнойСистемы(НоменклатураУчетнойСистемыОбъект.Ссылка, ЗаписьСкладскогоЖурнала);
		
		ПриходнаяОперацияОбъект = ПриходнаяОперацияСсылка.ПолучитьОбъект();
		ПриходнаяОперацияОбъект.НоменклатураУчетнойСистемы = НоменклатураУчетнойСистемыСсылка;
		ПриходнаяОперацияОбъект.ОбменДанными.Загрузка = Истина;
		ПриходнаяОперацияОбъект.Записать();
		
		СоединениеСБазой.ЗафиксироватьТранзакцию();
	Исключение
		// Запись в журнал
		СоединениеСБазой.ОтменитьТранзакцию();
	КонецПопытки;
	
	Возврат НоменклатураСсылка;
КонецФункции

Функция ПолучитьСериюНоменклатурыУТ10(СоединениеСБазой, ЗаписьСкладскогоЖурнала, Номенклатура)
		
	СправочникМенеджер = СоединениеСБазой.Справочники.СерииНоменклатуры;
	
	ГУИДСерии = СоединениеСБазой.NewObject("УникальныйИдентификатор", ЗаписьСкладскогоЖурнала.GUID_Меркурий);//в базе приемнике создаем уникальный идентификатор на основании ГУИДа записи складского журнала
	СерияНоменклатурыСсылка = СправочникМенеджер.ПолучитьСсылку(ГУИДСерии);//в базе приемнике получаем ссылку по уникальному идентификатору
	
	Если СерияНоменклатурыСсылка.ПолучитьОбъект() = Неопределено Тогда
		СерияНоменклатурыОбъект = СправочникМенеджер.СоздатьЭлемент();//создаем элемент справочника
		СерияНоменклатурыОбъект.УстановитьСсылкуНового(СерияНоменклатурыСсылка);//устанавливаем объекту новую ссылку
		СерияНоменклатурыОбъект.УстановитьНовыйКод();
		СерияНоменклатурыОбъект.ОбменДанными.Загрузка 	= Истина;
		СерияНоменклатурыОбъект.Владелец				= Номенклатура;
		СерияНоменклатурыОбъект.СрокГодности			= ЗаписьСкладскогоЖурнала.ДатаОкончанияСрокаГодностиОкончание;
		СерияНоменклатурыОбъект.Наименование 			= ЗаписьСкладскогоЖурнала.НаименованиеПродукции;	
		
		Попытка
			СоединениеСБазой.НачатьТранзакцию();
			СерияНоменклатурыОбъект.Записать();
			СоединениеСБазой.ЗафиксироватьТранзакцию();
			СерияНоменклатурыСсылка = СерияНоменклатурыОбъект.Ссылка;
		Исключение
			СоединениеСБазой.ОтменитьТранзакцию();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
		
	Возврат СерияНоменклатурыСсылка;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЗагрузкаИзУчетнойСистемы

Функция ЗагрузитьДанныеДляТранспортнойОперацииИзУчетнойСистемы(ТранспортнаяОперацияСсылка) Экспорт
	
	КонфигурацияУчетнойСистемы = ПолучитьЗначениеКонфигурацииУчетнойСистемы();
	
	Если КонфигурацияУчетнойСистемы = "УТ10" Тогда
		Возврат ЗагрузитьДанныеДляТранспортнойОперацииИзУчетнойСистемыУТ10(ТранспортнаяОперацияСсылка);
	ИначеЕсли КонфигурацияУчетнойСистемы = "УТ11" Тогда
		Возврат ЗагрузитьДанныеДляТранспортнойОперацииИзУчетнойСистемыУТ11(ТранспортнаяОперацияСсылка);
	КонецЕсли;	
	
КонецФункции

Функция ПолучитьЗаписьСкладскогоЖурналаПоУИ(УИЗаписиСкладскогоУчета)
	СправочникМенеджер = Справочники.СвойстваЗаписейСкладскогоЖурнала;
	ЗаписьСкладскогоЖурналаСсылка = СправочникМенеджер.НайтиПоРеквизиту("GUID_Меркурий", УИЗаписиСкладскогоУчета);
	Если ЗначениеЗаполнено(ЗаписьСкладскогоЖурналаСсылка) Тогда
		ЗаписьСкладскогоЖурналаОбъект = ЗаписьСкладскогоЖурналаСсылка.ПолучитьОбъект();
		Если ЗаписьСкладскогоЖурналаОбъект = Неопределено Тогда 
			ЗаписьСкладскогоЖурналаСсылка = СправочникМенеджер.ПустаяСсылка();	
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗаписьСкладскогоЖурналаСсылка;
КонецФункции

Функция ПолучитьНоменклатуруУчетнойСистемыПоЗаписиСкладскогоЖурнала(ЗаписьСкладскогоЖурнала)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоответствиеЗаписейСкладскогоЖурналаНоменклатуреУчетнойСистемы.НоменклатураУчетнойСистемы КАК НоменклатураУчетнойСистемы
		|ИЗ
		|	РегистрСведений.СоответствиеЗаписейСкладскогоЖурналаНоменклатуреУчетнойСистемы КАК СоответствиеЗаписейСкладскогоЖурналаНоменклатуреУчетнойСистемы
		|ГДЕ
		|	СоответствиеЗаписейСкладскогоЖурналаНоменклатуреУчетнойСистемы.ЗаписьСкладскогоЖурнала = &ЗаписьСкладскогоЖурнала";
	
	Запрос.УстановитьПараметр("ЗаписьСкладскогоЖурнала", ЗаписьСкладскогоЖурнала);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда 
		НоменклатураУчетнойСистемыСсылка = ВыборкаДетальныеЗаписи.НоменклатураУчетнойСистемы;
	Иначе 
		НоменклатураУчетнойСистемыСсылка = Справочники.СвойстваЗаписейСкладскогоЖурнала.ПустаяСсылка();
	КонецЕсли;
	
	Возврат НоменклатураУчетнойСистемыСсылка;
КонецФункции	

/////////////////////////////////////////
//////// УПРАВЛЕНИЕ ТОРГОВЛЕЙ 11.х////////
/////////////////////////////////////////
#Область УправлениеТорговлей_11_х_Загрузка

Функция ЗагрузитьДанныеДляТранспортнойОперацииИзУчетнойСистемыУТ11(ТранспортнаяОперацияСсылка) Экспорт
	
	НачалоПериода 				= НачалоДня(ТранспортнаяОперацияСсылка.ДатаТТН);
	КонецПериода 				= КонецДня(ТранспортнаяОперацияСсылка.ДатаТТН);
	НомерТТН 					= ТранспортнаяОперацияСсылка.НомерТТН;
	КонтрагентПолучатель 		= ТранспортнаяОперацияСсылка.КонтрагентПолучатель;
	КонтрагентОтправитель 		= ТранспортнаяОперацияСсылка.КонтрагентОтправитель;
	КонтрагентПолучательИНН  	= ТранспортнаяОперацияСсылка.КонтрагентПолучатель.ИНН;
	КонтрагентОтправительИНН	= ТранспортнаяОперацияСсылка.КонтрагентОтправитель.ИНН;
	
	СоединениеСБазой = ОбменУВСУчетнаяСистемаСервер.ВыполнитьПодключениеКИБУчетнойСистемы();
	
	Если СоединениеСБазой = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Контрагент	= ПолучитьКонтрагента(СоединениеСБазой, КонтрагентПолучатель, КонтрагентПолучательИНН);
	Организация	= ПолучитьОрганизацию(СоединениеСБазой, КонтрагентОтправитель, КонтрагентОтправительИНН);
	
	Запрос = СоединениеСБазой.NewObject("Запрос");
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугСерии.Ссылка КАК Ссылка,
		|	РеализацияТоваровУслугСерии.Количество КАК Количество,
		|	РеализацияТоваровУслугСерии.Серия.Номер КАК УИЗаписиСкладскогоУчета,
		|	РеализацияТоваровУслугСерии.Номенклатура КАК НоменклатураСсылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Серии КАК РеализацияТоваровУслугСерии
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|		ПО РеализацияТоваровУслугСерии.Ссылка = РеализацияТоваровУслугТовары.Ссылка
		|			И РеализацияТоваровУслугСерии.Серия = РеализацияТоваровУслугТовары.Серия
		|			И РеализацияТоваровУслугСерии.Номенклатура = РеализацияТоваровУслугТовары.Номенклатура
		|			И РеализацияТоваровУслугСерии.Склад = РеализацияТоваровУслугТовары.Склад
		|ГДЕ
		|	РеализацияТоваровУслугСерии.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И РеализацияТоваровУслугСерии.Ссылка.Организация = &Организация
		|	И РеализацияТоваровУслугСерии.Ссылка.Контрагент = &Контрагент
		|	И РеализацияТоваровУслугСерии.Ссылка.Номер = &Номер";
	
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
		Запрос.УстановитьПараметр("Номер", НомерТТН);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗДанныеДляЗагрузкиВыгрузка = РезультатЗапроса.Выгрузить();
	СтрокаРезультат = СоединениеСБазой.ЗначениеВСтрокуВнутр(ТЗДанныеДляЗагрузкиВыгрузка); 
	ТЗДанныеДляЗагрузкиЗагрузка = ЗначениеИзСтрокиВнутр(СтрокаРезультат);
	
	СоединениеСБазой = Неопределено;
	
	ТЗДанныеДляЗагрузкиЗагрузка.Колонки.Добавить("ЗаписьСкладскогоЖурнала");
	ТЗДанныеДляЗагрузкиЗагрузка.Колонки.Добавить("НоменклатураУчетнойСистемы");
	
	Для каждого СтрокаТЗ Из ТЗДанныеДляЗагрузкиЗагрузка Цикл
		СтрокаТЗ.ЗаписьСкладскогоЖурнала    = ПолучитьЗаписьСкладскогоЖурналаПоУИ(СтрокаТЗ.УИЗаписиСкладскогоУчета);
		СтрокаТЗ.НоменклатураУчетнойСистемы = ПолучитьНоменклатуруУчетнойСистемыПоЗаписиСкладскогоЖурнала(СтрокаТЗ.ЗаписьСкладскогоЖурнала);
	КонецЦикла;
	
	 Возврат ТЗДанныеДляЗагрузкиЗагрузка;
	 
КонецФункции

#КонецОбласти
/////////////////////////////////////////
//////// УПРАВЛЕНИЕ ТОРГОВЛЕЙ 10.х////////
/////////////////////////////////////////
#Область УправлениеТорговлей_10_х_Загрузка

Функция ЗагрузитьДанныеДляТранспортнойОперацииИзУчетнойСистемыУТ10(ТранспортнаяОперацияСсылка) Экспорт
	
	НачалоПериода 				= НачалоДня(ТранспортнаяОперацияСсылка.ДатаТТН);
	КонецПериода 				= КонецДня(ТранспортнаяОперацияСсылка.ДатаТТН);
	НомерТТН 					= ТранспортнаяОперацияСсылка.НомерТТН;
	КонтрагентПолучатель 		= ТранспортнаяОперацияСсылка.КонтрагентПолучатель;
	КонтрагентОтправитель 		= ТранспортнаяОперацияСсылка.КонтрагентОтправитель;
	КонтрагентПолучательИНН  	= ТранспортнаяОперацияСсылка.КонтрагентПолучатель.ИНН;
	КонтрагентОтправительИНН	= ТранспортнаяОперацияСсылка.КонтрагентОтправитель.ИНН;
	
	СоединениеСБазой = ОбменУВСУчетнаяСистемаСервер.ВыполнитьПодключениеКИБУчетнойСистемы();
	
	Если СоединениеСБазой = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Контрагент	= ПолучитьКонтрагента(СоединениеСБазой, КонтрагентПолучатель, КонтрагентПолучательИНН);
	Организация	= ПолучитьОрганизацию(СоединениеСБазой, КонтрагентОтправитель, КонтрагентОтправительИНН);
	
	Запрос = СоединениеСБазой.NewObject("Запрос");
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Ссылка,
		|	РеализацияТоваровУслугТовары.Количество,
		|	РеализацияТоваровУслугТовары.СерияНоменклатуры,
		|	РеализацияТоваровУслугТовары.Номенклатура КАК НоменклатураСсылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И РеализацияТоваровУслугТовары.Ссылка.Организация = &Организация
		|	И РеализацияТоваровУслугТовары.Ссылка.Контрагент = &Контрагент
		|	И РеализацияТоваровУслугТовары.Ссылка.Номер = &Номер";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("Номер", НомерТТН);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗДанныеДляЗагрузкиЗагрузка = Новый ТаблицаЗначений;
	ТЗДанныеДляЗагрузкиЗагрузка.Колонки.Добавить("ЗаписьСкладскогоЖурнала");
	ТЗДанныеДляЗагрузкиЗагрузка.Колонки.Добавить("НоменклатураУчетнойСистемы");
	ТЗДанныеДляЗагрузкиЗагрузка.Колонки.Добавить("Количество");
	
	СправочникМенеджер = СоединениеСБазой.Справочники.СерииНоменклатуры;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ГУИДЖурнала = ЗначениеИзСтрокиВнутр(СоединениеСБазой.ЗначениеВСтрокуВнутр(Выборка.СерияНоменклатуры.УникальныйИдентификатор()));
		НоваяСтрока = ТЗДанныеДляЗагрузкиЗагрузка.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ЗаписьСкладскогоЖурнала    = ПолучитьЗаписьСкладскогоЖурналаПоУИ(Строка(ГУИДЖурнала));
		НоваяСтрока.НоменклатураУчетнойСистемы = ПолучитьНоменклатуруУчетнойСистемыПоЗаписиСкладскогоЖурнала(НоваяСтрока.ЗаписьСкладскогоЖурнала);
	КонецЦикла;
		
	Возврат ТЗДанныеДляЗагрузкиЗагрузка;
	
КонецФункции
 
#КонецОбласти

#КонецОбласти