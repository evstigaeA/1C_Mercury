Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = "ДанонМеркурий";
	//Описание.Версия = Метаданные.Версия;
	Описание.Версия = "2.0.7.1.1";
	
	// Требуется библиотека стандартных подсистем.
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	Описание.ТребуемыеПодсистемы.Добавить(Метаданные.Имя);
	
КонецПроцедуры

Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Обработчики, выполняемые при каждом обновлении ИБ.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДМ.ВыполнятьВсегдаПриСменеВерсии";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	// Обработчики, выполняемые при заполнении пустой ИБ и при переходе на новую версию.
	//
	
	//тестирование обновления версии
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия              = "2.0.4.1.3";
	//Обработчик.Процедура           = "ОбновлениеИнформационнойБазыДМ.Пустышка";
	//Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыДМ.ПервыйЗапуск";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.2.1.6";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыДМ.ЗаполнитьПредопределенныеГруппыДоступа";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.4.1.4";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыУВС.УстановкаЗначенийСлужебныхКонстант";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.4.1.4";
	Обработчик.Процедура           = "РегистрыСведений.ЗначениеРеквизитовПоУмолчанию.ЗаполнитьЗначенияПоУмолчанию";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.4.1.4";
	Обработчик.Процедура           = "РегистрыСведений.НастройкиВеденияЖурналовЗагрузкиДанных.ЗаполнитьНастройкиВеденияЖурналовЗагрузкиДанных";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.8.2.6";
	Обработчик.Процедура           = "РегистрыСведений.ЗначениеРеквизитовПоУмолчанию.ЗаполнитьЗначенияПоУмолчанию";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	
КонецПроцедуры

Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
	Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
	
КонецПроцедуры

Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
КонецПроцедуры

Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры 

Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
КонецПроцедуры

Процедура ПервыйЗапуск() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
		// В подчиненных узлах РИБ не выполняется
		// здесь вызываем процедуры, которые могут выполняться только в центральном узле
		
		
	КонецЕсли;
	
	ЗаполнитьПредопределенныеГруппыДоступа();
	//ЗаполнитьКонстанты();
	//ОбновитьПредопределенныеВидыКонтактнойИнформации();

	//РегистрыСведений.ЗначениеРеквизитовПоУмолчанию.ЗаполнитьЗначенияПоУмолчанию();
	
КонецПроцедуры

#Область СлужебныеФункции

// К типовому макету описания изменений системы добавляет снизу дополнительный макет ОписаниеИзмененийСистемыДМ
//
// Параметры:
//  пМакетОписаниеОбновлений  - ТабличныйДокумент - типовой макет описания изменений системы,
//                 к которому нужно "пришить" дополнительный макет ДМ
//
// Возвращаемое значение:
//   ТабличныйДокумент   - подготовленный сводный макет описания изменений системы
//
Функция ПолучитьМакетОписаниеОбновлений( пМакетОписаниеОбновлений ) Экспорт

	Если ТипЗнч( пМакетОписаниеОбновлений ) = Тип("ТабличныйДокумент") Тогда
		лМакетОписаниеОбновлений = пМакетОписаниеОбновлений;
	Иначе
		лМакетОписаниеОбновлений = ПолучитьОбщийМакет(пМакетОписаниеОбновлений);
	КонецЕсли;
	лДопМакет = ПолучитьОбщийМакет(Метаданные.ОбщиеМакеты.ОписаниеИзмененийСистемыДМ);
	лМакетОписаниеОбновлений.Вывести( лДопМакет );
	Возврат лМакетОписаниеОбновлений;

КонецФункции // ПолучитьМакетОписаниеОбновлений()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ИзменитьРазрядностьНомеровВерсийДляОбработчиков( пОбработчики ) Экспорт

	Для каждого лОбработчик Из пОбработчики Цикл
	
		Если Не ПустаяСтрока( лОбработчик.Версия )
			И Не лОбработчик.Версия = "*"
			И СтрЧислоВхождений( лОбработчик.Версия, "." ) = 3
			Тогда
		
			лОбработчик.Версия = лОбработчик.Версия + ".0";
		
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры // ИзменитьРазрядностьНомеровВерсийДляОбработчиков()


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Обновление ИБ

Процедура Пустышка() Экспорт
	
	//а=1
	
КонецПроцедуры

Процедура ЗаполнитьКонстанты() Экспорт
	
	//Константы.ТаймаутОпросаСервера.Установить(10);
	//Константы.ИсточникДанныхАдресногоКлассификатора.Установить("Меркурий");
	//Константы.ВидСервераВетисAPI.Установить(Перечисления.ВидыСерверовВетисAPI.Тестовый);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции
Процедура ОбновитьПредопределенныеВидыКонтактнойИнформации() Экспорт
	
	//Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	//
	//// Справочник "Контрагенты"
	//ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	//ПараметрыВида.Вид = "ЮрАдресКонтрагента";
	//ПараметрыВида.МожноИзменятьСпособРедактирования = Ложь;
	//ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	//ПараметрыВида.РедактированиеТолькоВДиалоге      = Истина;
	//ПараметрыВида.Порядок = 3;
	//МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	//
	//// Справочник "Предприятия"
	//ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	//ПараметрыВида.Вид = "АдресПредприятия";
	//ПараметрыВида.МожноИзменятьСпособРедактирования = Ложь;
	//ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	//ПараметрыВида.РедактированиеТолькоВДиалоге      = Истина;
	//ПараметрыВида.Порядок = 4;
	//МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	//
	//// Справочник "ПунктыПерегрузки"
	//ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	//ПараметрыВида.Вид = "АдресПунктаПерегрузки";
	//ПараметрыВида.МожноИзменятьСпособРедактирования = Ложь;
	//ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	//ПараметрыВида.РедактированиеТолькоВДиалоге      = Истина;
	//ПараметрыВида.Порядок = 5;
	//МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	//
	//// Справочник "ПользователиСистемыМеркурий"
	//ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	//ПараметрыВида.Вид = "ТелефонПользователяСистемыМеркурий";
	//ПараметрыВида.МожноИзменятьСпособРедактирования = Ложь;
	//ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	//ПараметрыВида.Порядок = 6;
	//МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	//
	//ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	//ПараметрыВида.Вид = "РабочийТелефонПользователяСистемыМеркурий";
	//ПараметрыВида.МожноИзменятьСпособРедактирования = Ложь;
	//ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	//ПараметрыВида.Порядок = 7;
	//МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	//
	//ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
	//ПараметрыВида.Вид = "EmailПользователяСистемыМеркурий";
	//ПараметрыВида.МожноИзменятьСпособРедактирования = Ложь;
	//ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	//ПараметрыВида.Порядок = 8;
	//МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	//
	//ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
	//ПараметрыВида.Вид = "РабочийEmailПользователяСистемыМеркурий";
	//ПараметрыВида.МожноИзменятьСпособРедактирования = Ложь;
	//ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	//ПараметрыВида.Порядок = 9;
	//МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

// Выполняет первоначальное заполнение предопределенных групп и профилей доступа
//
Процедура ЗаполнитьПредопределенныеГруппыДоступа() Экспорт

	#Область Пользователи
	Объект = Справочники.ГруппыДоступа.Пользователи.ПолучитьОбъект();
	
	НачатьТранзакцию();
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка, Объект.ВерсияДанных);
		Если Объект.Профиль.Пустая() Тогда
			Объект.Профиль = УправлениеДоступом.ПоставляемыйПрофильПоИдентификатору( УправлениеДоступомДМ.ИдентификаторПрофиляПользователь() );
			Объект.ОсновнаяГруппаДоступаПоставляемогоПрофиля = Истина;
			Объект.Комментарий = НСтр("ru = 'Группа доступа обычных пользователей'",
			     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		КонецЕсли;
		РазблокироватьДанныеДляРедактирования(Объект.Ссылка);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	#КонецОбласти
	
	#Область HelpDesk
	Объект = Справочники.ГруппыДоступа.HelpDesk.ПолучитьОбъект();
	
	НачатьТранзакцию();
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка, Объект.ВерсияДанных);
		Если Объект.Профиль.Пустая() Тогда
			Объект.Профиль = УправлениеДоступом.ПоставляемыйПрофильПоИдентификатору( НРег("503AB5DA-E409-4C90-960E-A77190995CF5") );
			Объект.ОсновнаяГруппаДоступаПоставляемогоПрофиля = Истина;
			Объект.Комментарий = НСтр("ru = 'Группа доступа пользователей с расширенными правами'",
			     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		КонецЕсли;
		РазблокироватьДанныеДляРедактирования(Объект.Ссылка);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	#КонецОбласти
	

КонецПроцедуры // ЗаполнитьПредопределенныеГруппыДоступа()

// Процедура-обработчик обновления данных ИБ, 
// которая выполняется каждый раз при смене версии конфигурации.
//
Процедура ВыполнятьВсегдаПриСменеВерсии(Параметры = Неопределено) Экспорт
	
	//Если Параметры <> Неопределено И НЕ Параметры.МонопольныйРежим Тогда
	//	Параметры.МонопольныйРежим = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОбновлениеИБ", "ВыполнятьМонопольноеОбновление", Ложь);
	//КонецЕсли;
	
	Справочники["ПрофилиГруппДоступа"].ОбновитьСоставПредопределенныхПрофилей();
	Справочники["ПрофилиГруппДоступа"].ОбновитьПоставляемыеПрофили();
	РегистрыСведений["ПраваРолей"].ОбновитьДанныеРегистра();
	РегистрыСведений["ЗависимостиПравДоступа"].ОбновитьДанныеРегистра();
	РегистрыСведений["НастройкиПравОбъектов"].ОбновитьВозможныеПраваДляНастройкиПравОбъектов();
	
	МодульУправлениеДоступомСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебный");
	МодульУправлениеДоступомСлужебный.ОбновитьРолиПользователей(, , );
	РегистрыСведений["ТаблицыГруппДоступа"].ОбновитьДанныеРегистра( , , );
	
КонецПроцедуры

