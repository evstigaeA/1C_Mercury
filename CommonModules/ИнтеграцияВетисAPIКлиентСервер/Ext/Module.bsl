#Область РаботаСДатамиВыработкиИСроковГодности

Функция ИспользуетсяИнтервалДат(ФорматЗаданияДаты, ДатаОкончанияПериода) Экспорт
	
	ИспользуетсяИнтервал = 
		(ФорматЗаданияДаты = ПредопределенноеЗначение("Перечисление.СпособыЗаданияДаты.Дата")
			ИЛИ ФорматЗаданияДаты = ПредопределенноеЗначение("Перечисление.СпособыЗаданияДаты.Месяц"))
			И ЗначениеЗаполнено(ДатаОкончанияПериода);
			
	Возврат ИспользуетсяИнтервал;
КонецФункции

Функция ФорматДат(ФорматЗаданияДаты, СкоропортящаясяПродукция = Ложь) Экспорт
	
	СкоропортящаясяПродукция = ?(СкоропортящаясяПродукция = "", Ложь, СкоропортящаясяПродукция);
	
	СтрокаФормата = "ДФ='dd.MM.yyyy'";
	
	Если СкоропортящаясяПродукция Тогда
		
		СтрокаФормата = "ДФ='dd.MM.yyyy HH'";
		
	ИначеЕсли ФорматЗаданияДаты = ПредопределенноеЗначение("Перечисление.СпособыЗаданияДаты.Год") Тогда
		
		СтрокаФормата = "ДФ='yyyy'";
		
	ИначеЕсли ФорматЗаданияДаты = ПредопределенноеЗначение("Перечисление.СпособыЗаданияДаты.Месяц") Тогда
		
		СтрокаФормата = "ДФ='MMMM yyyy'";
		
	КонецЕсли;
	
	Возврат СтрокаФормата;
КонецФункции

Функция СформироватьПредставлениеДатыВыработки(Данные) Экспорт
	
	ДатаВыработкиСтрокой = Неопределено;
	
	Если ТипЗнч(Данные) = Тип("УправляемаяФорма") Тогда
		Если Данные.Элементы.Найти("ДатаВыработкиСтрокой") <> Неопределено Тогда
			ДатаВыработкиСтрокой = Данные.ДатаВыработкиСтрокой;
		КонецЕсли;
	Иначе
		Если Данные.Свойство("ДатаВыработкиСтрокой") Тогда
			ДатаВыработкиСтрокой = Данные.ДатаВыработкиСтрокой;
		КонецЕсли;
	КонецЕсли;
	
	ПредставлениеДаты = ПредставлениеДаты(Данные.ФорматДатыВыработки,
			Данные.СкоропортящаясяПродукция,
			Данные.ДатаВыработкиНачало,
			Данные.ДатаВыработкиОкончание,
			ДатаВыработкиСтрокой);

	Возврат ПредставлениеДаты;
КонецФункции

Функция СформироватьПредставлениеСрокаГодности(Данные) Экспорт
	
	ДатаСрокаГодностиСтрокой = Неопределено;
	
	Если ТипЗнч(Данные) = Тип("УправляемаяФорма") Тогда
		Если Данные.Элементы.Найти("ДатаСрокаГодностиСтрокой") <> Неопределено Тогда
			ДатаСрокаГодностиСтрокой = Данные.ДатаСрокаГодностиСтрокой;
		КонецЕсли;
	Иначе
		Если Данные.Свойство("ДатаВыработкиСтрокой") Тогда
			ДатаСрокаГодностиСтрокой = Данные.ДатаСрокаГодностиСтрокой;
		КонецЕсли;
	КонецЕсли;
	
	ПредставлениеДаты = ПредставлениеДаты(Данные.ФорматСрокаГодности,
			Данные.СкоропортящаясяПродукция,
			Данные.ДатаОкончанияСрокаГодностиНачало,
			Данные.ДатаОкончанияСрокаГодностиОкончание,
			ДатаСрокаГодностиСтрокой);

	Возврат ПредставлениеДаты;
КонецФункции

Функция ПредставлениеДатыПоУмолчанию() Экспорт
	
	Возврат НСтр("ru = 'Требуется указать'");
	
КонецФункции

Функция ПредставлениеДаты(ФорматЗаданияДаты,
				СкоропортящаясяПродукция,
				ДатаНачала,
				ДатаОкончания,
				ДатаСтрокой = Неопределено)
	
	СтрокаФормата = ФорматДат(ФорматЗаданияДаты, СкоропортящаясяПродукция);
	
	ПредставлениеДаты = "";
	
	ИспользуетсяИнтервал = ИспользуетсяИнтервалДат(ФорматЗаданияДаты, ДатаОкончания);
		
	Если ФорматЗаданияДаты = ПредопределенноеЗначение("Перечисление.СпособыЗаданияДаты.Неизвестно") Тогда
		
		ПредставлениеДаты = НСтр("ru = 'Неизвестно'");
		
	ИначеЕсли ФорматЗаданияДаты = ПредопределенноеЗначение("Перечисление.СпособыЗаданияДаты.НеОграничен") Тогда
	
		ПредставлениеДаты = НСтр("ru = 'Срок годности не ограничен'");
		
	ИначеЕсли ФорматЗаданияДаты = ПредопределенноеЗначение("Перечисление.СпособыЗаданияДаты.Строка") Тогда
		
		ПредставлениеДаты = ДатаСтрокой;
		
	ИначеЕсли ФорматЗаданияДаты = ПредопределенноеЗначение("Перечисление.СпособыЗаданияДаты.БезСрокаГодности") Тогда
		
		ПредставлениеДаты = НСтр("ru = 'Без срока годности'");

	ИначеЕсли ИспользуетсяИнтервал Тогда
		
		ПредставлениеДаты = Формат(ДатаНачала, СтрокаФормата) + " - " + Формат(ДатаОкончания, СтрокаФормата);
		
	ИначеЕсли ЗначениеЗаполнено(ДатаНачала) Тогда
		
		ПредставлениеДаты = Формат(ДатаНачала, СтрокаФормата);
		
	Иначе
		
		ПредставлениеДаты = ПредставлениеДатыПоУмолчанию();
		
	КонецЕсли;
	
	Возврат ПредставлениеДаты;
КонецФункции

Функция ПроверитьДанныеПоФорматуДат(Данные, ДопустимыеФорматыДат, ФорматДаты, ПроверитьДатуВыработки, ТекстОшибки) Экспорт
	
	Если ЗначениеЗаполнено(Данные.Продукция) Тогда
		Если ДопустимыеФорматыДат.НайтиПоЗначению(ФорматДаты) = Неопределено Тогда
			ШаблонСообщения = НСтр("ru='Для продукции ""%1"" указан не допустимый формат даты ""%2"".'");
			ТекстОшибки     = СтрШаблон(ШаблонСообщения, Данные.Продукция, ФорматДаты);
			//Возврат Ложь;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	ФорматыВВидеДат = ФорматыВВидеДат();
	Если ФорматыВВидеДат.Найти(ФорматДаты) <> Неопределено Тогда
		
		ИмяРеквизита = ?(ПроверитьДатуВыработки, "ДатаВыработкиНачало", "ДатаОкончанияСрокаГодностиНачало");
		ПредставлениеРеквизита = ?(ПроверитьДатуВыработки, "Дата выработки", "Срок годности");
		//Возврат ПроверитьЗаполнениеРеквизита(Данные, ИмяРеквизита, ПредставлениеРеквизита, ТекстОшибки);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция ПроверитьЗаполнениеРеквизита(Данные, ИмяРеквизита, ПредставлениеРеквизита, ТекстОшибки = "") Экспорт
	
	Если Не ЗначениеЗаполнено(Данные[ИмяРеквизита]) Тогда
		
		ШаблонСообщения = НСтр("ru='Реквизит ""%1"" не заполнен'");
		ТекстОшибки     = СтрШаблон(ШаблонСообщения, ПредставлениеРеквизита);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ФорматыВВидеДат() Экспорт
	
	ФорматыВВидеДат = Новый Массив;
	ФорматыВВидеДат.Добавить(ПредопределенноеЗначение("Перечисление.СпособыЗаданияДаты.Дата"));
	ФорматыВВидеДат.Добавить(ПредопределенноеЗначение("Перечисление.СпособыЗаданияДаты.Месяц"));
	ФорматыВВидеДат.Добавить(ПредопределенноеЗначение("Перечисление.СпособыЗаданияДаты.Год"));
	
	Возврат ФорматыВВидеДат;

КонецФункции

#КонецОбласти