//Процедура, выполняющая последовательную загрузку входных файлов SAP в служебные документы 
//
// Параметры:
//
// 	пВходнойКаталог - СправочникСсылка.ДМ_КаталогиДляРаботыСФайлами - предопределенный элемент
//						с данными о каталоге для чтения файлов  
//	пИмяДокумента   - Строка - вид служебного документа для загрузки файлов
//						(префикс идентификаторов этих документов "ФайлыОбменаDanone") 
//
Процедура ЗагрузкаФайловSAP(пВходнойКаталог,пИмяДокумента) Экспорт
	
	УстановитьПривилегированныйРежим( Истина );
	
	мВДПров = Новый Массив;
	мВДПров.Добавить("ДМ_ФайлыОбменаDanoneКлиент");
	мВДПров.Добавить("ДМ_ФайлыОбменаDanoneВнутреннееПеремещение");
	
	Если мВДПров.Найти(пИмяДокумента) <> Неопределено Тогда
		
		ЗапрКВП = Новый Запрос;
		ЗапрКВП.Текст = "ВЫБРАТЬ
		|	ДМ_КонтрагентыВнутреннееПеремещение.Контрагент КАК Контрагент,
		|	Контрагенты.ДМ_ГлобальныйНомер КАК GLNПолучателя
		|ИЗ
		|	РегистрСведений.ДМ_КонтрагентыВнутреннееПеремещение КАК ДМ_КонтрагентыВнутреннееПеремещение
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО ДМ_КонтрагентыВнутреннееПеремещение.Контрагент = Контрагенты.Ссылка";
		
		мКодовGLNВнутрПолучателей = ЗапрКВП.Выполнить().Выгрузить().ВыгрузитьКолонку("GLNПолучателя");
		
		Если мКодовGLNВнутрПолучателей.Количество() = 0  Тогда
			
			
			лСтрокаСообщения = НСтр("ru = 'Регистр <Контрагенты-получатели при внутреннем перемещении> ПУСТОЙ.
			|Нельзя выполнить проверку файла отгрузки по признаку ВНУТРЕННИЙ или КЛИЕНТ'");
			
			//Регистрируем ошибку
			лОписаниеСобытия = лСтрокаСообщения;
			
			ДМ_СлужебныйПривилегированный.ЗарегистрироватьСобытие( 
			пВходнойКаталог,
			Справочники.ДМ_СобытияЖурналаРегистрации.ЗагрузкаФайловEDIЗагрузкаФайлаВБазу,
			Перечисления.ДМ_УровниЖурнала.Ошибка,
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных( ТипЗнч(пВходнойКаталог) ),
			Строка( пВходнойКаталог ),
			лОписаниеСобытия
			);
			
			//Прерываем работу
			ВызватьИсключение( лСтрокаСообщения );
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	//получаем выборку файлов по маске в каталоге
	лВходнойКаталог = пВходнойКаталог.ПолучитьОбъект();
	Если ПустаяСтрока( лВходнойКаталог.КаталогФайловДляОбработки ) Тогда
		лСтрокаСообщения = НСтр("ru = 'Не задан путь к каталогу с файлами для загрузки.
		|Тип файлов: %1
		|Имя вида документов: %2'");
		лСтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( лСтрокаСообщения, пВходнойКаталог, пИмяДокумента );
		
		//Регистрируем ошибку
		лОписаниеСобытия = лСтрокаСообщения;
		
		ДМ_СлужебныйПривилегированный.ЗарегистрироватьСобытие( 
		лВходнойКаталог.Ссылка,
		Справочники.ДМ_СобытияЖурналаРегистрации.ЗагрузкаФайловEDIЗагрузкаФайлаВБазу,
		Перечисления.ДМ_УровниЖурнала.Ошибка,
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных( ТипЗнч(лВходнойКаталог.Ссылка) ),
		Строка( лВходнойКаталог.Ссылка ),
		лОписаниеСобытия
		);
		
		//Прерываем работу
		ВызватьИсключение( лСтрокаСообщения );
	КонецЕсли;
	
	лСтрокаСообщения = "";
	Если Не Справочники.ДМ_КаталогиДляРаботыСФайлами.КаталогОбрабатываемыхФайловДоступен( лВходнойКаталог.КаталогФайловДляОбработки, лСтрокаСообщения ) Тогда
		ДМ_СлужебныйПривилегированный.ЗарегистрироватьСобытие( 
		лВходнойКаталог.Ссылка,
		Справочники.ДМ_СобытияЖурналаРегистрации.ЗагрузкаФайловEDIЗагрузкаФайлаВБазу,
		Перечисления.ДМ_УровниЖурнала.Ошибка,
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных( ТипЗнч(лВходнойКаталог.Ссылка) ),
		Строка( лВходнойКаталог.Ссылка ),
		лСтрокаСообщения
		);
		
		//Прерываем работу
		ВызватьИсключение( лСтрокаСообщения );
	КонецЕсли;
	
	лВыборкаФайлов = НайтиФайлы( СокрЛП(лВходнойКаталог.КаталогФайловДляОбработки), СокрЛП(лВходнойКаталог.МаскаФайла), Ложь );
	Если лВыборкаФайлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//загружаем файлы в базу
	Для каждого лФайл Из лВыборкаФайлов Цикл
		
		Если лФайл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		
		//проверяем: есть ли такой документ в базе данных
		#Область ПроверкаHash
		
		//0000000008840760.4600605999721.4607053479690.DESADV.001592408   4607053479690=кодполучателя
		Если мВДПров.Найти(пИмяДокумента) <> Неопределено Тогда
			пИмяДокументаНач = "ДМ_ФайлыОбменаDanoneКлиент";
			ИмяФайлаПров = лФайл.Имя;
			GLNПолучателя = "";
			нПозDESADV = Найти(ВРЕГ(ИмяФайлаПров),".DESADV");
			Если нПозDESADV > 3 Тогда
				нПозDESADV = нПозDESADV - 1;
				Пока нПозDESADV > 1 Цикл
					ДопСимвол = Сред(ИмяФайлаПров,нПозDESADV,1);
					Если ДопСимвол = "." Тогда
						Прервать;
					КонецЕсли;	
					GLNПолучателя = ДопСимвол + GLNПолучателя;
					нПозDESADV = нПозDESADV - 1;
				КонецЦикла;
				Если НЕ ПустаяСтрока(GLNПолучателя) И мКодовGLNВнутрПолучателей.Найти(GLNПолучателя) <> Неопределено Тогда
					пИмяДокументаНач = "ДМ_ФайлыОбменаDanoneВнутреннееПеремещение";
				КонецЕсли;	
			КонецЕсли;
			пИмяДокумента =  пИмяДокументаНач;
			
		Иначе
			
			мВДПров2 = Новый Массив;
			мВДПров2.Добавить("ДМ_ФайлыОбменаDanoneГашениеВСД");
			мВДПров2.Добавить("ДМ_ФайлыОбменаDanoneПроизводство");
			
			Если мВДПров2.Найти(пИмяДокумента) <> Неопределено Тогда
				лТекстовыйДокументПров = Новый ТекстовыйДокумент;
				Если ПустаяСтрока( пВходнойКаталог.Кодировка ) Тогда
					лТекстовыйДокументПров.Прочитать( лФайл.ПолноеИмя );
				Иначе
					лТекстовыйДокументПров.Прочитать( лФайл.ПолноеИмя, пВходнойКаталог.Кодировка );
				КонецЕсли;
				//Проверка типа файла, читаем 4 строку
				Если лТекстовыйДокументПров.КоличествоСтрок() > 3 Тогда
					ТС = СокрЛП(лТекстовыйДокументПров.ПолучитьСтроку(4));
					Если Лев(ТС,8) = "BGM+632+" Тогда
						пИмяДокумента = "ДМ_ФайлыОбменаDanoneГашениеВСД";
					ИначеЕсли Лев(ТС,8) = "BGM+105+" Тогда
						пИмяДокумента = "ДМ_ФайлыОбменаDanoneПроизводство";
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
			
		КонецЕсли;	
		
		лХешированиеДанных = Новый ХешированиеДанных( ХешФункция.MD5 );
		лХешированиеДанных.ДобавитьФайл( лФайл.ПолноеИмя );
		ХешСтроки = СтрЗаменить( НРег( Строка(лХешированиеДанных.ХешСумма) ), " ", "" );
		
		лЗапрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДМ_ФайлыОбменаDanoneКлиент.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ДМ_ФайлыОбменаDanoneКлиент КАК ДМ_ФайлыОбменаDanoneКлиент
		|ГДЕ
		|	ДМ_ФайлыОбменаDanoneКлиент.Hash = &Hash
		|	И ДМ_ФайлыОбменаDanoneКлиент.ИмяФайла = &ИмяФайла"
		);
		Если пИмяДокумента <> "ДМ_ФайлыОбменаDanoneКлиент" Тогда
			лЗапрос.Текст = СтрЗаменить( лЗапрос.Текст, "ДМ_ФайлыОбменаDanoneКлиент", пИмяДокумента );
		КонецЕсли;
		лЗапрос.УстановитьПараметр( "Hash", ХешСтроки );
		лЗапрос.УстановитьПараметр( "ИмяФайла", лФайл.Имя );
		лРезультат = лЗапрос.Выполнить();
		лЗагружатьФайл = лРезультат.Пустой();
		
		#КонецОбласти
		
		#Область ЗагрузкаФайлаВБазу
		
		Если лЗагружатьФайл Тогда
			
			лДокумент = Документы[пИмяДокумента].СоздатьДокумент();
			лСтруктура = Новый Структура( "Файл,Хеш,Кодировка", лФайл, ХешСтроки, лВходнойКаталог.Кодировка );
			лДокумент.Заполнить(лСтруктура);
			
			НачатьТранзакцию();
			
			лДокумент.Записать();
			
			ДМ_СлужебныйПривилегированный.ЗарегистрироватьСобытие( 
			лДокумент.Ссылка, 
			Справочники.ДМ_СобытияЖурналаРегистрации.ЗагрузкаФайловEDIЗагрузкаФайлаВБазу, 
			Перечисления.ДМ_УровниЖурнала.Информация,
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных( ТипЗнч(лДокумент.Ссылка) ),
			лДокумент.ИмяФайла,
			"Успешно загружен файл " + лДокумент.ИмяФайла
			);
			
			ДМ_СлужебныйПривилегированный.ЗарегистрироватьСобытие( 
			пВходнойКаталог, 
			Справочники.ДМ_СобытияЖурналаРегистрации.ЗагрузкаФайловEDIЗагрузкаФайлаВБазу, 
			Перечисления.ДМ_УровниЖурнала.Информация,
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных( ТипЗнч(пВходнойКаталог) ),
			лДокумент.ИмяФайла,
			"Успешно загружен файл " + лДокумент.ИмяФайла
			);
			
			ЗафиксироватьТранзакцию();
			
		КонецЕсли;
		
		#КонецОбласти
		
		#Область ПеремещениеВАрхив
		
		Если Не ПустаяСтрока( лВходнойКаталог.КаталогАрхиваОбработанныхФайлов ) Тогда
			
			Если Справочники.ДМ_КаталогиДляРаботыСФайлами.КаталогАрхиваОбработанныхФайловДоступен( лВходнойКаталог.КаталогАрхиваОбработанныхФайлов, лСтрокаСообщения ) Тогда
				лФайлНазначение = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла( СокрЛП(лВходнойКаталог.КаталогАрхиваОбработанныхФайлов), лФайл.Имя );
				Попытка
					ПереместитьФайл( лФайл.ПолноеИмя, лФайлНазначение );
				Исключение
					лОписаниеОшибки = ОписаниеОшибки();
					лОписаниеСобытия = НСтр("ru = 'Ошибка перемещения загружаемого файла:
					|   %1
					|назначение:
					|   %2
					|Описание ошибки:
					|%3'");
					лОписаниеСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( лОписаниеСобытия, лФайл.ПолноеИмя, лФайлНазначение, лОписаниеОшибки );
					
					ДМ_СлужебныйПривилегированный.ЗарегистрироватьСобытие( 
					лВходнойКаталог.Ссылка,
					Справочники.ДМ_СобытияЖурналаРегистрации.ЗагрузкаФайловEDIПеремещениеВАрхив,
					Перечисления.ДМ_УровниЖурнала.Ошибка,
					ОбщегоНазначения.ИдентификаторОбъектаМетаданных( ТипЗнч(лВходнойКаталог.Ссылка) ),
					Строка( лВходнойКаталог.Ссылка ),
					лОписаниеСобытия
					);
				КонецПопытки;
				
			Иначе
				
				лОписаниеОшибки = лСтрокаСообщения;
				лОписаниеСобытия = НСтр("ru = 'Ошибка перемещения загружаемого файла:
				|   %1
				|назначение:
				|   %2
				|Описание ошибки:
				|%3'");
				лОписаниеСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( лОписаниеСобытия, лФайл.ПолноеИмя, лФайлНазначение, лОписаниеОшибки );
				
				ДМ_СлужебныйПривилегированный.ЗарегистрироватьСобытие( 
				лВходнойКаталог.Ссылка,
				Справочники.ДМ_СобытияЖурналаРегистрации.ЗагрузкаФайловEDIПеремещениеВАрхив,
				Перечисления.ДМ_УровниЖурнала.Ошибка,
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных( ТипЗнч(лВходнойКаталог.Ссылка) ),
				Строка( лВходнойКаталог.Ссылка ),
				лОписаниеСобытия
				);
				
			КонецЕсли;
			
		КонецЕсли;
		
		#КонецОбласти
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим( Ложь );
	
КонецПроцедуры	

Процедура ВыполнитьЗадержку(ЗадержкаВСекундах)
	
	WshShell = Новый COMОбъект("WScript.Shell");
	WshShell.Run("TIMEOUT /t "+ЗадержкаВСекундах+" /NOBREAK",0,True);
	
КонецПроцедуры

Процедура ДМ_ЗагрузкаФайловSAPКлиент() Экспорт
	
	Попытка
		ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ДМ_ЗагрузкаФайловSAPКлиент);
		ЗагрузкаФайловSAP(Справочники.ДМ_КаталогиДляРаботыСФайлами.Клиент, "ДМ_ФайлыОбменаDanoneКлиент");
		ДМ_СлужебныйПривилегированный.ЗарегистрироватьУспешноеВыполнениеРегЗадания( "ДМ_ЗагрузкаФайловSAPКлиент" );
	Исключение
		лОписаниеОшибки = ОписаниеОшибки();
		ДМ_СлужебныйПривилегированный.ЗарегистрироватьОшибкуВыполненияРегЗадания( "ДМ_ЗагрузкаФайловSAPКлиент", лОписаниеОшибки );
		ВызватьИсключение;
	КонецПопытки
	
КонецПроцедуры

Процедура ДМ_ЗагрузкаФайловSAPВнутреннееПеремещение() Экспорт
	
	Попытка
		ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ДМ_ЗагрузкаФайловSAPВнутреннееПеремещение);
		ЗагрузкаФайловSAP(Справочники.ДМ_КаталогиДляРаботыСФайлами.ВнутреннееПеремещение, "ДМ_ФайлыОбменаDanoneВнутреннееПеремещение");
		ДМ_СлужебныйПривилегированный.ЗарегистрироватьУспешноеВыполнениеРегЗадания( "ДМ_ЗагрузкаФайловSAPВнутреннееПеремещение" );
	Исключение
		лОписаниеОшибки = ОписаниеОшибки();
		ДМ_СлужебныйПривилегированный.ЗарегистрироватьОшибкуВыполненияРегЗадания( "ДМ_ЗагрузкаФайловSAPВнутреннееПеремещение", лОписаниеОшибки );
		ВызватьИсключение;
	КонецПопытки
	
КонецПроцедуры

Процедура ДМ_ЗагрузкаФайловSAPГашениеВСД() Экспорт
	
	Попытка
		ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ДМ_ЗагрузкаФайловSAPГашениеВСД);
		ЗагрузкаФайловSAP(Справочники.ДМ_КаталогиДляРаботыСФайлами.ГашениеВСД, "ДМ_ФайлыОбменаDanoneГашениеВСД");
		ДМ_СлужебныйПривилегированный.ЗарегистрироватьУспешноеВыполнениеРегЗадания( "ДМ_ЗагрузкаФайловSAPГашениеВСД" );
	Исключение
		лОписаниеОшибки = ОписаниеОшибки();
		ДМ_СлужебныйПривилегированный.ЗарегистрироватьОшибкуВыполненияРегЗадания( "ДМ_ЗагрузкаФайловSAPГашениеВСД", лОписаниеОшибки );
		ВызватьИсключение;
	КонецПопытки
	
КонецПроцедуры

Процедура ДМ_ЗагрузкаФайловSAPСторнированиеОтгрузки() Экспорт
	
	Попытка
		ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ДМ_ЗагрузкаФайловSAPСторнированиеОтгрузки);
		ЗагрузкаФайловSAP(Справочники.ДМ_КаталогиДляРаботыСФайлами.СторнированиеОтгрузки, "ДМ_ФайлыОбменаDanoneСторнированиеОтгрузки");
		ДМ_СлужебныйПривилегированный.ЗарегистрироватьУспешноеВыполнениеРегЗадания( "ДМ_ЗагрузкаФайловSAPСторнированиеОтгрузки" );
	Исключение
		лОписаниеОшибки = ОписаниеОшибки();
		ДМ_СлужебныйПривилегированный.ЗарегистрироватьОшибкуВыполненияРегЗадания( "ДМ_ЗагрузкаФайловSAPСторнированиеОтгрузки", лОписаниеОшибки );
		ВызватьИсключение;
	КонецПопытки
	
КонецПроцедуры

Процедура ДМ_ЗагрузкаАктуальныхОстатков() Экспорт
	
	
	ТаблицаДляОбработки = ПолучитьСписокПлощадок();
	Для Каждого Настрока Из ТаблицаДляОбработки Цикл
		Попытка
			ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ДМ_ЗагрузкаАктуальныхОстатков);
		    ЗапускФоновогоЗаданияЗагрузкаАктуальныхОстатков(Настрока);
			ДМ_СлужебныйПривилегированный.ЗарегистрироватьУспешноеВыполнениеРегЗадания("ДМ_ЗагрузкаАктуальныхОстатков" );
		Исключение
			лОписаниеОшибки = ОписаниеОшибки();
			ДМ_СлужебныйПривилегированный.ЗарегистрироватьОшибкуВыполненияРегЗадания("ДМ_ЗагрузкаАктуальныхОстатков", лОписаниеОшибки );
		ВызватьИсключение;
	КонецПопытки

	КонецЦикла;
		
КонецПроцедуры

Функция ПолучитьСписокПлощадок()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПараметрыАктуальныхОстатков.Контрагент КАК Контрагент,
	|	ПараметрыАктуальныхОстатков.Организация КАК Организация,
	|	ПараметрыАктуальныхОстатков.Предприятие КАК Предприятие,
	|	ПараметрыАктуальныхОстатков.СмещениеВперед КАК СмещениеВперед,
	|	ПараметрыАктуальныхОстатков.ДатаЗагрузки КАК ДатаЗагрузки,
	|	ПараметрыАктуальныхОстатков.СмещениеНазад КАК СмещениеНазад
	|ИЗ
	|	РегистрСведений.ПараметрыАктуальныхОстатков КАК ПараметрыАктуальныхОстатков";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьСписокПлощадокДляВСД()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПараметрыАктуальныхВСД.Контрагент КАК Контрагент,
	|	ПараметрыАктуальныхВСД.Организация КАК Организация,
	|	ПараметрыАктуальныхВСД.Предприятие КАК Предприятие,
	|	ПараметрыАктуальныхВСД.СмещениеВперед КАК СмещениеВперед,
	|	ПараметрыАктуальныхВСД.ДатаЗагрузки КАК ДатаЗагрузки,
	|	ПараметрыАктуальныхВСД.СмещениеНазад КАК СмещениеНазад
	|ИЗ
	|	РегистрСведений.ПараметрыАктуальныхВСД КАК ПараметрыАктуальныхВСД";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ОбновитьЗаписьАктуальныхВСД(Настрока, ТекущаяДатаЗагрузки)
	ЗаписьПараметрыАктуальныхВСД = РегистрыСведений.ПараметрыАктуальныхВСД.СоздатьНаборЗаписей();
	ЗаписьПараметрыАктуальныхВСД.Отбор.Предприятие.Установить(Настрока.Предприятие);
	ЗаписьПараметрыАктуальныхВСД.Отбор.Контрагент.Установить(Настрока.Контрагент);
	ЗаписьПараметрыАктуальныхВСД.Отбор.Организация.Установить(Настрока.Организация);
	ЗаписьПараметрыАктуальныхВСД.Прочитать();
	
	Для Каждого ТекЗапись Из ЗаписьПараметрыАктуальныхВСД Цикл
		ТекЗапись.ДатаЗагрузки = ТекущаяДатаЗагрузки;
	КонецЦикла;
	
	ЗаписьПараметрыАктуальныхВСД.Записать();

КонецПроцедуры

Процедура ЗапускФоновогоЗаданияЗагрузкаАктуальныхОстатков(Настрока) 
	
	ТекущаяДатаЗагрузки = ТекущаяДата();
	
	Если ЗначениеЗаполнено(Настрока.ДатаЗагрузки) Тогда
		ПрошлаяДатаЗагрузки = Настрока.ДатаЗагрузки;
	Иначе
		ПрошлаяДатаЗагрузки = ТекущаяДатаЗагрузки - 60*60*24;
	КонецЕсли;
			  
	ПараметрыФильтра = Новый Структура;
	ПараметрыФильтра.Вставить("Организация",      Настрока.Организация);
	ПараметрыФильтра.Вставить("Контрагент",       Настрока.Контрагент);
	ПараметрыФильтра.Вставить("Предприятие",      Настрока.Предприятие);
	ПараметрыФильтра.Вставить("Ответственный",    Пользователи.АвторизованныйПользователь());
	ПараметрыФильтра.Вставить("ФильтрПоОстаткам", 1); 
	ПараметрыФильтра.Вставить("ДатаНачала"   , 	  ПрошлаяДатаЗагрузки - Настрока.СмещениеНазад);
	ПараметрыФильтра.Вставить("ДатаОкончания", 	  ТекущаяДатаЗагрузки + Настрока.СмещениеВперед);
	
	
	мОписание = Строка( Настрока.Предприятие) + ": <" + Строка(ПрошлаяДатаЗагрузки - Настрока.СмещениеНазад) + "> - <" + Строка(ТекущаяДатаЗагрузки + Настрока.СмещениеВперед)+ ">";
	УстановитьПривилегированныйРежим(Истина);
		ЗаписьЖурналаРегистрации("Загрузка актуальных остатков", УровеньЖурналаРегистрации.Предупреждение,,,мОписание);
		УстановитьПривилегированныйРежим(Ложь);

	
	ОжидатьЗавершение = Неопределено;
	Задание = ЗапуститьФоновуюЗагрузкуССайтаНаСервереОстатки(ПараметрыФильтра, Новый УникальныйИдентификатор, ОжидатьЗавершение);
	
	Если Задание = Неопределено Тогда
		ОшибкиДопПроц = "Ошибка процедуры загрузки актуальных остатков!";
		Возврат;
	ИначеЕсли Задание.Статус = "Ошибка" Тогда
		ОшибкиДопПроц = "Загрузка актуальных записей складского журнала не выполнена. Произошла ошибка:" + Символы.ПС + Задание.КраткоеПредставлениеОшибки;
		Возврат;
	ИначеЕсли Задание.Статус = "Выполнено" Тогда
		РезультатВыполненияОперации = ПолучитьИзВременногоХранилища(Задание.АдресРезультата);
		УдалитьИзВременногоХранилища(Задание.АдресРезультата);
		ТаблицаЗаписей = РезультатВыполненияОперации.Результат;
				
		Если ТаблицаЗаписей.Количество() > 0 Тогда
			ПараметрыПодключения = ИнтеграцияВетисAPIСлужебный.ПараметрыПодключенияКВетисAPI(ПараметрыФильтра.Организация, Пользователи.АвторизованныйПользователь(),, Справочники.ВидыОперацийОбменаAPI.ЗагрузкаДанныхПоЗаписямСкладскогоЖурнала);
			Для Каждого ТекЗапись Из ТаблицаЗаписей Цикл
								
				Если Не ПустаяСтрока(ТекЗапись.ОписаниеОбъекта) Тогда
										
					ЗаписьСкладскогоЖурналаXDTO = ОбщегоНазначения.ОбъектXDTOИзСтрокиXML(ТекЗапись.ОписаниеОбъекта);
					Если ЗаписьСкладскогоЖурналаXDTO.status = "100" И ЗаписьСкладскогоЖурналаXDTO.active = "true" Тогда 
						ДанныеЗаписиСкладскогоЖурналаСтруктура = ИнтеграцияВетисAPIОбработкаПартий.ЗаписьСкладскогоЖурналаПоДаннымXDTO(ПараметрыПодключения, ПараметрыФильтра.Предприятие, ЗаписьСкладскогоЖурналаXDTO, Истина);
						ОбновитьСозданныеЗаписейСкладскогоЖурнала(ДанныеЗаписиСкладскогоЖурналаСтруктура, ПриобразоватьДатуиВремяИзСтроки(ЗаписьСкладскогоЖурналаXDTO.createDate), ПриобразоватьДатуиВремяИзСтроки(ЗаписьСкладскогоЖурналаXDTO.updateDate));	
					КонецЕсли;
				КонецЕсли;				
			КонецЦикла;

		КонецЕсли;
		
		ОбновитьЗаписьАктуальныхОстатков(Настрока, ТекущаяДатаЗагрузки);
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбновитьЗаписьАктуальныхОстатков(Настрока, ТекущаяДатаЗагрузки)
	ЗаписьПараметрыАктуальныхОстатков = РегистрыСведений.ПараметрыАктуальныхОстатков.СоздатьНаборЗаписей();
	ЗаписьПараметрыАктуальныхОстатков.Отбор.Предприятие.Установить(Настрока.Предприятие);
	ЗаписьПараметрыАктуальныхОстатков.Отбор.Контрагент.Установить(Настрока.Контрагент);
	ЗаписьПараметрыАктуальныхОстатков.Отбор.Организация.Установить(Настрока.Организация);
	ЗаписьПараметрыАктуальныхОстатков.Прочитать();
	
	Для Каждого ТекЗапись Из ЗаписьПараметрыАктуальныхОстатков Цикл
		ТекЗапись.ДатаЗагрузки = ТекущаяДатаЗагрузки;
	КонецЦикла;
	
	ЗаписьПараметрыАктуальныхОстатков.Записать();

КонецПроцедуры

Процедура ОбновитьСозданныеЗаписейСкладскогоЖурнала(ДанныеЗаписиСкладскогоЖурнала, ДатаСоздания, ДатаОбновления)
	
	ТекущаяДата = ТекущаяДата();
	НЗСозданныеЗаписейСкладскогоЖурнала = РегистрыСведений.СозданныеЗаписейСкладскогоЖурнала.СоздатьНаборЗаписей();
	НЗСозданныеЗаписейСкладскогоЖурнала.Отбор.ЗаписьСкладскогоЖурнала.Установить(ДанныеЗаписиСкладскогоЖурнала.ЗаписьСкладскогоЖурнала);
	НЗСозданныеЗаписейСкладскогоЖурнала.Отбор.Период.Установить(ДатаСоздания);

	НЗСозданныеЗаписейСкладскогоЖурнала.Прочитать();
	
	Если НЗСозданныеЗаписейСкладскогоЖурнала.Количество() > 0 Тогда
		Для Каждого ТекЗапись Из НЗСозданныеЗаписейСкладскогоЖурнала Цикл
			ТекЗапись.СтатусВерсииЗаписиСкладскогоЖурнала = ДанныеЗаписиСкладскогоЖурнала.Статус;
			ТекЗапись.ДатаСоздания = ДатаСоздания;
			ТекЗапись.Количество = ДанныеЗаписиСкладскогоЖурнала.КоличествоПродукции;
		КонецЦикла; 
	Иначе
		НоваяЗапись  = НЗСозданныеЗаписейСкладскогоЖурнала.Добавить();
		НоваяЗапись.ЗаписьСкладскогоЖурнала = ДанныеЗаписиСкладскогоЖурнала.ЗаписьСкладскогоЖурнала;
		НоваяЗапись.СтатусВерсииЗаписиСкладскогоЖурнала = ДанныеЗаписиСкладскогоЖурнала.Статус;
		НоваяЗапись.Период = ДатаСоздания;
		НоваяЗапись.ДатаСоздания = ТекущаяДата;
		НоваяЗапись.Количество = ДанныеЗаписиСкладскогоЖурнала.КоличествоПродукции;
	КонецЕсли;
			
	НЗСозданныеЗаписейСкладскогоЖурнала.Записать();

КонецПроцедуры

Функция ПриобразоватьДатуиВремяИзСтроки(СтрокаДата)
	
	Возврат Дата(Сред(СтрокаДата, 1,4 ) + Сред(СтрокаДата, 6,2) + Сред(СтрокаДата, 9,2) + Сред(СтрокаДата, 12,2) + Сред(СтрокаДата, 15,2) + Сред(СтрокаДата, 18,2))
	
КонецФункции	

Процедура ДМ_ЗагрузкаДанныеВСД() Экспорт
	
	
	ТаблицаДляОбработки = ПолучитьСписокПлощадокДляВСД();
	ДатаЗагрузки  = Константы.ДатаЗагрузкаВСД.Получить(); 
	Для Каждого Настрока Из ТаблицаДляОбработки Цикл
		Попытка
		    ЗапускФоновогоЗаданияЗагрузкаАктуальныхДанныхВСД(Настрока, ДатаЗагрузки);
			ДМ_СлужебныйПривилегированный.ЗарегистрироватьУспешноеВыполнениеРегЗадания("ДМ_ЗагрузкаДанныеВСД" );
		Исключение
			лОписаниеОшибки = ОписаниеОшибки();
			ДМ_СлужебныйПривилегированный.ЗарегистрироватьОшибкуВыполненияРегЗадания("ДМ_ЗагрузкаДанныеВСД", лОписаниеОшибки );
		ВызватьИсключение;
		КонецПопытки

	КонецЦикла;
		
КонецПроцедуры

Процедура ЗапускФоновогоЗаданияЗагрузкаАктуальныхДанныхВСД(Настрока, КонстантаДатаЗагрузки)
	
	Если ЗначениеЗаполнено(КонстантаДатаЗагрузки) Тогда
		ДатаНачала = НачалоДня(КонстантаДатаЗагрузки);
		ДатаОкончания =  КонецДня(КонецМесяца(КонстантаДатаЗагрузки));
	Иначе
		мТекущаяДата        = ТекущаяДата();
		ТекущаяДатаЗагрузки = ?(Настрока.ДатаЗагрузки < мТекущаяДата, Настрока.ДатаЗагрузки, мТекущаяДата);
		ДатаНачала = НачалоДня(НачалоДня(ТекущаяДатаЗагрузки)-1);
		ДатаОкончания = мТекущаяДата + Настрока.СмещениеВперед;
	КонецЕсли;
				  
	ПараметрыФильтра = Новый Структура;
	ПараметрыФильтра.Вставить("Организация",      Настрока.Организация);
	ПараметрыФильтра.Вставить("Контрагент",       Настрока.Контрагент);
	ПараметрыФильтра.Вставить("Предприятие",      Настрока.Предприятие);
	ПараметрыФильтра.Вставить("Ответственный",    Пользователи.АвторизованныйПользователь());
	ПараметрыФильтра.Вставить("ТипВСД", 		  Справочники.ТипыВСД.Входящий); 
	//ПараметрыФильтра.Вставить("СтатусВСД", 		  Справочники.СтатусыВСД.Оформлен);
	ПараметрыФильтра.Вставить("ДатаНачала", 	  ДатаНачала);
	ПараметрыФильтра.Вставить("ДатаОкончания", 	  ДатаОкончания);

		
	мОписание = Строка( Настрока.Предприятие) + ": <" + Строка(ДатаНачала) + "> - <" + Строка(ДатаОкончания)+ ">";
	УстановитьПривилегированныйРежим(Истина);
	ЗаписьЖурналаРегистрации("Загрузка данных ВСД", УровеньЖурналаРегистрации.Предупреждение, Метаданные.РегламентныеЗадания.ДМ_ЗагрузкаАктуальныхДанныеВСД,,мОписание);
	УстановитьПривилегированныйРежим(Ложь);

	
	ОжидатьЗавершение = 4;
	Задание = ЗапуститьФоновуюЗагрузкуВСДССайтаНаСервере(ПараметрыФильтра, Новый УникальныйИдентификатор, ОжидатьЗавершение);
	
	Если Задание = Неопределено Тогда
		ОшибкиДопПроц = "Ошибка процедуры загрузки актуальных статусов ВСД!";
		Возврат;
	ИначеЕсли Задание.Статус = "Ошибка" Тогда
		ОшибкиДопПроц = "Загрузка актуальных статусов ВСД не выполнена. Произошла ошибка:" + Символы.ПС + Задание.КраткоеПредставлениеОшибки;
		Возврат;
	ИначеЕсли Задание.Статус = "Выполнено" Тогда	
		ОбновитьЗаписьАктуальныхВСД(Настрока, ДатаОкончания);
	КонецЕсли;

КонецПроцедуры

Функция ВыгрузитьДеревоЗначенийВТаблицуЗначений(Дерево, Таблица = Неопределено) Экспорт

    Если Таблица = Неопределено Тогда
        Таблица = Новый ТаблицаЗначений;
        Для Каждого Колонка Из Дерево.Колонки Цикл
            Таблица.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
        КонецЦикла;
    КонецЕсли;
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		Если СтрокаДерева.Родитель = Неопределено Тогда
        	ЗаполнитьЗначенияСвойств(Таблица.Добавить(), СтрокаДерева);
        	ВыгрузитьДеревоЗначенийВТаблицуЗначений(СтрокаДерева, Таблица);
		КонецЕсли;
    КонецЦикла;
    Возврат Таблица;
КонецФункции

Функция ЗапуститьФоновуюЗагрузкуВСДССайтаНаСервере(ПараметрыФильтра, УникальныйИдентификатор, ОжидатьЗавершение)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка актуальных статусов ВСД'");
	ПараметрыВыполнения.ОжидатьЗавершение = ОжидатьЗавершение;
	ПараметрыВыполнения.ЗапуститьНеВФоне = Истина;
	
	ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне("ИнтеграцияВетисAPIОтправкаЗаявокНаОформление.ЗагрузкаВСДЗаПериод",
	ПараметрыФильтра, ПараметрыВыполнения);
	
	Возврат ФоновоеЗадание;
	
КонецФункции

Процедура ДМ_ЗагрузкаФайловSAPПроизводство() Экспорт
	
	Попытка
		ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ДМ_ЗагрузкаФайловSAPПроизводство);
		ЗагрузкаФайловSAP(Справочники.ДМ_КаталогиДляРаботыСФайлами.Производство, "ДМ_ФайлыОбменаDanoneПроизводство");
		ДМ_СлужебныйПривилегированный.ЗарегистрироватьУспешноеВыполнениеРегЗадания( "ДМ_ЗагрузкаФайловSAPПроизводство" );
	Исключение
		лОписаниеОшибки = ОписаниеОшибки();
		ДМ_СлужебныйПривилегированный.ЗарегистрироватьОшибкуВыполненияРегЗадания( "ДМ_ЗагрузкаФайловSAPПроизводство", лОписаниеОшибки );
		ВызватьИсключение;
	КонецПопытки
	
КонецПроцедуры

Процедура ДМ_ЗагрузкаФайловSAPИнвентаризация() Экспорт
	
	Попытка
		ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ДМ_ЗагрузкаФайловSAPИнвентаризация);
		ЗагрузкаФайловSAP(Справочники.ДМ_КаталогиДляРаботыСФайлами.Инвентаризация, "ДМ_ФайлыОбменаDanoneИнвентаризация");
		ДМ_СлужебныйПривилегированный.ЗарегистрироватьУспешноеВыполнениеРегЗадания( "ДМ_ЗагрузкаФайловSAPИнвентаризация" );
	Исключение
		лОписаниеОшибки = ОписаниеОшибки();
		ДМ_СлужебныйПривилегированный.ЗарегистрироватьОшибкуВыполненияРегЗадания( "ДМ_ЗагрузкаФайловSAPИнвентаризация", лОписаниеОшибки );
		ВызватьИсключение;
	КонецПопытки
	
КонецПроцедуры

Процедура ДМ_ФайлыОбменаОбработкаЗаполненияОбработкаЗаполнения(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Источник.Ответственный = Пользователи.АвторизованныйПользователь();
	Источник.Дата = ТекущаяДатаСеанса();
	
	Если ТипЗнч( ДанныеЗаполнения ) = Тип("Структура") Тогда
		
		Источник.Hash		 = ДанныеЗаполнения.Хеш;
		Источник.ИмяФайла	 = ДанныеЗаполнения.Файл.Имя;
		Источник.ДатаЗагрузкиИсходногоФайла = ТекущаяДатаСеанса();
		лТекстовыйДокумент = Новый ТекстовыйДокумент;
		Если ПустаяСтрока( ДанныеЗаполнения.Кодировка ) Тогда
			лТекстовыйДокумент.Прочитать( ДанныеЗаполнения.Файл.ПолноеИмя );
		Иначе
			лТекстовыйДокумент.Прочитать( ДанныеЗаполнения.Файл.ПолноеИмя, ДанныеЗаполнения.Кодировка );
		КонецЕсли;
		лТекстовыйДокумент2 = Новый ТекстовыйДокумент;
		лТекстовыйДокумент2.УстановитьТекст( лТекстовыйДокумент.ПолучитьТекст() );
		
		Источник.ФайлИсходный = Новый ХранилищеЗначения( лТекстовыйДокумент2, Новый СжатиеДанных(9) );
		Источник.Кодировка = ДанныеЗаполнения.Кодировка;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСписокВСДДляГашения()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыВСДСрезПоследних.ВСД КАК ВСД
	|ИЗ
	|	РегистрСведений.СписокПлощадокДлаГашения КАК СписокПлощадокДлаГашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыВСД.СрезПоследних КАК СтатусыВСДСрезПоследних
	|		ПО СписокПлощадокДлаГашения.Организация = СтатусыВСДСрезПоследних.ВСД.Организация
	|			И СписокПлощадокДлаГашения.Контрагент = СтатусыВСДСрезПоследних.ВСД.КонтрагентПолучатель
	|			И СписокПлощадокДлаГашения.Предприятие = СтатусыВСДСрезПоследних.ВСД.ПредприятиеПолучатель
	|			И (СтатусыВСДСрезПоследних.Период <= ДОБАВИТЬКДАТЕ(&ТекущаяДата, ЧАС, -СписокПлощадокДлаГашения.Смещение))
	|			И (ВЫБОР
	|				КОГДА СписокПлощадокДлаГашения.КонтрагентОтправитель = &ПустойКонтрагент
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ СписокПлощадокДлаГашения.КонтрагентОтправитель = СтатусыВСДСрезПоследних.ВСД.КонтрагентОтправитель
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА СписокПлощадокДлаГашения.ПредприятиеОтправитель = &ПустойПредприятие
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ СписокПлощадокДлаГашения.ПредприятиеОтправитель = СтатусыВСДСрезПоследних.ВСД.ПредприятиеОтправитель
	|			КОНЕЦ)
	|ГДЕ
	|	СтатусыВСДСрезПоследних.СтатусВСД = &Оформлен
	|	И НЕ СтатусыВСДСрезПоследних.ВСД.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА СписокПлощадокДлаГашения.НекачественныйГруз
	|				ТОГДА СтатусыВСДСрезПоследних.ВСД.НекачественныйГруз
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И СтатусыВСДСрезПоследних.ВСД.КонтрагентОтправитель.ХСДанон";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Оформлен",  Справочники.СтатусыВСД.Оформлен);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойПредприятие", Справочники.Предприятия.ПустаяСсылка());

	Возврат  Запрос.Выполнить().Выгрузить();
КонецФункции

Функция СформироватьТаблицуДокументовПриходныхОпераций(СписокВСД) 
	Запрос = Новый Запрос;
	Запрос.Текст =
	 "ВЫБРАТЬ
	 |	ТаблицаВСД.ВСД КАК ВСД
	 |ПОМЕСТИТЬ ТаблицаВСД
	 |ИЗ
	 |	&ТаблицаВСД КАК ТаблицаВСД
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |ВЫБРАТЬ
	 |	ТаблицаВСД.ВСД КАК ВСД,
	 |	ДанныеДокументов.Приходная КАК Приходная,
	 |	ДанныеДокументов.Статус КАК Статус
	 |ИЗ
	 |	ТаблицаВСД КАК ТаблицаВСД
	 |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	 |			ПриходныеОперации.Ссылка КАК Приходная,
	 |			ПриходныеОперации.ВСД КАК ВСД,
	 |			ЕСТЬNULL(ЖурналРегистрацииСостоянийЗаявок.Статус, &ПустойСтатус) КАК Статус
	 |		ИЗ
	 |			Документ.ПриходныеОперации КАК ПриходныеОперации
	 |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.СрезПоследних(, ) КАК ЖурналРегистрацииСостоянийЗаявок
	 |				ПО ПриходныеОперации.Ссылка = ЖурналРегистрацииСостоянийЗаявок.ДокументСсылка
	 |		ГДЕ
	 |			НЕ ЖурналРегистрацииСостоянийЗаявок.Статус В (&СписокСтатусов)
	 |			И НЕ ПриходныеОперации.ПометкаУдаления
	 |			И ПриходныеОперации.ВСД В(&ТаблицаВСД)) КАК ДанныеДокументов
	 |		ПО ТаблицаВСД.ВСД = ДанныеДокументов.ВСД";
	
	Запрос.УстановитьПараметр("ТаблицаВСД", СписокВСД);
	Запрос.УстановитьПараметр("ПустойСтатус", Справочники.СтатусыЗаявок.ПустаяСсылка());
	 
	СписокСтатусов = Новый СписокЗначений();
	СписокСтатусов.Добавить(Справочники.СтатусыЗаявок.ПустаяСсылка());
	СписокСтатусов.Добавить(Справочники.СтатусыЗаявок.Черновик);
	СписокСтатусов.Добавить(Справочники.СтатусыЗаявок.Подготовлен);
	СписокСтатусов.Добавить(Справочники.СтатусыЗаявок.ЗаявкаОтмененаАдминистратором);
	СписокСтатусов.Добавить(Справочники.СтатусыЗаявок.Отклонена);
	СписокСтатусов.Добавить(Справочники.СтатусыЗаявок.ОшибкаОтправкиЗапроса);

	Запрос.УстановитьПараметр("СписокСтатусов", СписокСтатусов);   
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Процедура ВыписатьПриходныеОперации(СписокВСД)
	
	СписокДокументовВСД = СформироватьТаблицуДокументовПриходныхОпераций(СписокВСД);
	Для Каждого ДокументВСД Из СписокДокументовВСД Цикл
		Если ЗначениеЗаполнено(ДокументВСД.Приходная) Тогда 
			СсылкаПриходногоДокумента = ДокументВСД.Приходная;
		Иначе
			ДокументПриходнаяОперация = Документы.ПриходныеОперации.СоздатьДокумент();
			ДокументПриходнаяОперация.Заполнить(ДокументВСД.ВСД);
			ДокументПриходнаяОперация.Записать(РежимЗаписиДокумента.Проведение);
			СсылкаПриходногоДокумента = ДокументПриходнаяОперация.Ссылка;
		КонецЕсли;
		ИнтеграцияВетисAPIСлужебный.УстановитьТекущийСтатусСостоянийЗаявокНаОформлениеОпераций(СсылкаПриходногоДокумента, Справочники.СтатусыЗаявок.Новая);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСписокПлощадокДляГашения()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокПлощадокДлаГашения.Организация КАК Организация,
	|	СписокПлощадокДлаГашения.Контрагент КАК Контрагент,
	|	СписокПлощадокДлаГашения.Предприятие КАК Предприятие,
	|	&Смещение КАК Смещение,
	|	СписокПлощадокДлаГашения.НекачественныйГруз КАК НекачественныйГруз
	|ИЗ
	|	РегистрСведений.СписокПлощадокДлаГашения КАК СписокПлощадокДлаГашения";
	Запрос.УстановитьПараметр("Смещение", Константы.СмещениеДатыЗагрузкиВСДДляГашения.Получить());
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Процедура ЗагрузитьСписокВСДДляГашения()
	
	ТаблицаДляОбработки = ПолучитьСписокПлощадокДляГашения();
	
	Для Каждого Настрока Из ТаблицаДляОбработки Цикл
		Попытка
		    ЗапускФоновогоЗаданияДанныхВСДДляГашения(Настрока);
			ДМ_СлужебныйПривилегированный.ЗарегистрироватьУспешноеВыполнениеРегЗадания("ДМ_ЗагрузкаВСДДляГашения" );
		Исключение
			лОписаниеОшибки = ОписаниеОшибки();
			ДМ_СлужебныйПривилегированный.ЗарегистрироватьОшибкуВыполненияРегЗадания("ДМ_ЗагрузкаВСДДляГашения", лОписаниеОшибки );
		ВызватьИсключение;
		КонецПопытки
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗапускФоновогоЗаданияДанныхВСДДляГашения(Настрока)
		
	мТекущаяДата	= ТекущаяДата();
	ДатаНачала		= мТекущаяДата - Настрока.Смещение*60*60;
	ДатаОкончания	= мТекущаяДата;
				  
	ПараметрыФильтра = Новый Структура;
	ПараметрыФильтра.Вставить("Организация",      Настрока.Организация);
	ПараметрыФильтра.Вставить("Контрагент",       Настрока.Контрагент);
	ПараметрыФильтра.Вставить("Предприятие",      Настрока.Предприятие);
	ПараметрыФильтра.Вставить("Ответственный",    Пользователи.АвторизованныйПользователь());
	ПараметрыФильтра.Вставить("ТипВСД", 		  Справочники.ТипыВСД.Входящий); 
	ПараметрыФильтра.Вставить("ДатаНачала", 	  ДатаНачала);
	ПараметрыФильтра.Вставить("ДатаОкончания", 	  ДатаОкончания);
		
	мОписание = Строка( Настрока.Предприятие ) + ": <" + Строка(ДатаНачала) + "> - <" + Строка(ДатаОкончания)+ ">";
	УстановитьПривилегированныйРежим(Истина);
	ЗаписьЖурналаРегистрации("Загрузка ВСД для гашения", УровеньЖурналаРегистрации.Предупреждение, Метаданные.РегламентныеЗадания.ДМ_АвтоматическоеГашениеВСД, ,мОписание);
	УстановитьПривилегированныйРежим(Ложь);
	
	ОжидатьЗавершение = 4;
	Задание = ЗапуститьФоновуюЗагрузкуВСДССайтаНаСервере(ПараметрыФильтра, Новый УникальныйИдентификатор, ОжидатьЗавершение);
	
	Если Задание = Неопределено Тогда
		ОшибкиДопПроц = "Ошибка загрузки ВСД для гашения!";
		Возврат;
	ИначеЕсли Задание.Статус = "Ошибка" Тогда
		ОшибкиДопПроц = "Загрузка ВСД для гашения не выполнена. Произошла ошибка:" + Символы.ПС + Задание.КраткоеПредставлениеОшибки;
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура ПогаситьВСДДляАвгашения()
	
	 СписокВСД = ПолучитьСписокВСДДляГашения();
	 ВыписатьПриходныеОперации(СписокВСД);
	 
 КонецПроцедуры
 
Процедура СоздатьДокументИнвентаризации(Параметры)
	
	ЗаполнитьСписокПродукцииПродукцииВИнвентаризации(Параметры);
	 
КонецПроцедуры
 
Процедура ЗаполнитьСписокПродукцииПродукцииВИнвентаризации(Параметры)	
	
	Объект = Документы.Инвентаризации.СоздатьДокумент();
	Объект.Дата = ТекущаяДата();
	Объект.УстановитьНовыйНомер();	
	Объект.Организация   = Параметры.Организация;
	Объект.Контрагент    = Параметры.Контрагент;
	Объект.Предприятие   = Параметры.Предприятие;
	Объект.Ответственный = Пользователи.АвторизованныйПользователь();
	
	МассивИдентификаторов = ИнтеграцияВетисAPIСлужебныйПовтИсп.ПродукцияИсключениеИзТипаЖивыеЖивотные();
	ИспользоватьОбменЧерезУниверсальныйФормат = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЧерезУниверсальныйФормат");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыПродукции.Ссылка КАК ВидПродукции
	|ПОМЕСТИТЬ ВТ_ИсключенияИзЖивыхЖивотных
	|ИЗ
	|	Справочник.ВидыПродукции КАК ВидыПродукции
	|ГДЕ
	|	ВидыПродукции.GUID_Меркурий В(&МассивИдентификаторов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидПродукции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ТипПродукции КАК ТипПродукции,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ВидПродукции КАК ВидПродукции,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ПодвидПродукции КАК ПодвидПродукции,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.Продукция КАК Продукция,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ДатаВыработкиНачало КАК ДатаВыработкиНачало,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ДатаВыработкиОкончание КАК ДатаВыработкиОкончание,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ДатаВыработкиСтрокой КАК ДатаВыработкиСтрокой,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ДатаОкончанияСрокаГодностиНачало КАК ДатаОкончанияСрокаГодностиНачало,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ДатаОкончанияСрокаГодностиОкончание КАК ДатаОкончанияСрокаГодностиОкончание,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ДатаСрокаГодностиСтрокой КАК ДатаСрокаГодностиСтрокой,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.НекачественныйГруз КАК НекачественныйГруз,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.СкоропортящаясяПродукция КАК СкоропортящаясяПродукция,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ФорматДатыВыработки КАК ФорматДатыВыработки,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ФорматСрокаГодности КАК ФорматСрокаГодности,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.НомерПартии КАК НомерПартии,
	|	ВЫБОР
	|		КОГДА ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.НомерПартии <> """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьПартияВЗаписи,
	|	ВЫБОР
	|		КОГДА ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ТипПродукции = ЗНАЧЕНИЕ(Справочник.ТипыПродукции.ЖивыеЖивотные)
	|				И НЕ ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ВидПродукции В
	|						(ВЫБРАТЬ
	|							ВТ_ИсключенияИзЖивыхЖивотных.ВидПродукции КАК ВидПродукции
	|						ИЗ
	|							ВТ_ИсключенияИзЖивыхЖивотных КАК ВТ_ИсключенияИзЖивыхЖивотных)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТипПродукцииЖивыеЖивотные,
	|	ДвижениеПродукцииОстатки.КоличествоОстаток КАК КоличествоУчет,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.СписокФизическихУпаковок.(
	|		Ссылка КАК Поле1,
	|		НомерСтроки КАК Поле2,
	|		КоличествоУпаковок КАК Поле3,
	|		НаименованиеМаркировки КАК Поле4,
	|		ТипМаркировки КАК Поле5,
	|		Упаковка КАК Поле6,
	|		УровеньУпаковки КАК Поле7
	|	) КАК СписокФизическихУпаковок
	|ИЗ
	|	РегистрНакопления.ДвижениеПродукции.Остатки(
	|			,
	|			Организация = &Организация
	|				И Предприятие = &Предприятие
	|				И ЗаписьСкладскогоЖурнала.НекачественныйГруз = &НекачественныйГруз) КАК ДвижениеПродукцииОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаписьСкладскогоЖурнала";
	
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	Запрос.УстановитьПараметр("Предприятие", Параметры.Предприятие);
	Запрос.УстановитьПараметр("МассивИдентификаторов", МассивИдентификаторов);
	Запрос.УстановитьПараметр("НекачественныйГруз", Параметры.НекачественныйГруз);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЗапись = РезультатЗапроса.Выбрать();
	КоличествоСтрок = 0;
	
	Пока ВыборкаЗапись.Следующий() Цикл
		КоличествоСтрок = КоличествоСтрок + 1;
		
		Если КоличествоСтрок > 500 Тогда
			Объект.Записать(РежимЗаписиДокумента.Проведение);
		    ИнтеграцияВетисAPIСлужебный.УстановитьТекущийСтатусСостоянийЗаявокНаОформлениеОпераций(Объект.Ссылка, Справочники.СтатусыЗаявок.Новая);
			
			Объект = Документы.Инвентаризации.СоздатьДокумент();
			Объект.Дата = ТекущаяДата();
			Объект.УстановитьНовыйНомер();	
			Объект.Организация   = Параметры.Организация;
			Объект.Контрагент    = Параметры.Контрагент;
			Объект.Предприятие   = Параметры.Предприятие;
			Объект.Ответственный = Пользователи.АвторизованныйПользователь();
			
			КоличествоСтрок = 1;
		КонецЕсли;			
		
		СтрокаПродукции = Объект.ТаблицаПродукции.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаПродукции, ВыборкаЗапись);
		СтрокаПродукции.GUIDСтроки = Строка(Новый УникальныйИдентификатор());

		Если ИспользоватьОбменЧерезУниверсальныйФормат Тогда
			СтрокаПродукции.НоменклатураУчетнойСистемы = Справочники.НоменклатураУчетнойСистемы.ПолучитьНоменклатуруУчетнойСитсемы(ВыборкаЗапись.ЗаписьСкладскогоЖурнала);
		КонецЕсли;
		
		СтруктураДанныхВыработки = Новый Структура("ФорматДатыВыработки, СкоропортящаясяПродукция,
			|ДатаВыработкиНачало, ДатаВыработкиОкончание, ДатаВыработкиСтрокой");
		ЗаполнитьЗначенияСвойств(СтруктураДанныхВыработки, ВыборкаЗапись);
		
		СтруктураДанныхСрокаГодности = Новый Структура("ФорматСрокаГодности, СкоропортящаясяПродукция,
			|ДатаОкончанияСрокаГодностиНачало, ДатаОкончанияСрокаГодностиОкончание, ДатаСрокаГодностиСтрокой");
		ЗаполнитьЗначенияСвойств(СтруктураДанныхСрокаГодности, ВыборкаЗапись);
	КонецЦикла;
	Если Объект.ТаблицаПродукции.Количество() > 1 Тогда 
		Объект.Записать(РежимЗаписиДокумента.Проведение);
		ИнтеграцияВетисAPIСлужебный.УстановитьТекущийСтатусСостоянийЗаявокНаОформлениеОпераций(Объект.Ссылка, Справочники.СтатусыЗаявок.Новая);
	КонецЕсли;

КонецПроцедуры

Процедура СоздатьДокументКорректировкиОстатковВСДДляГашения(Параметры, ТаблицаЗаписей)
	
	ПараметрыПодключения = ИнтеграцияВетисAPIСлужебный.ПараметрыПодключенияКВетисAPI(Параметры.Организация, Параметры.Ответственный,, Справочники.ВидыОперацийОбменаAPI.ЗагрузкаДанныхПоЗаписямСкладскогоЖурнала);
	
	ИтоговаяТаблица = Новый ТаблицаЗначений;
	ИтоговаяТаблица.Колонки.Добавить("ЗаписьСкладскогоЖурнала", Новый ОписаниеТипов("СправочникСсылка.СвойстваЗаписейСкладскогоЖурнала"));
	ИтоговаяТаблица.Колонки.Добавить("Количество"             , ОбщегоНазначения.ОписаниеТипаЧисло(21, 6));
	ИтоговаяТаблица.Колонки.Добавить("КоличествоОстаток"      , ОбщегоНазначения.ОписаниеТипаЧисло(21, 6));
	
	Для Каждого ТекЗапись Из ТаблицаЗаписей Цикл
		
		// Если количество одинаковое, то нет смысла делать по данной записи корректировку
		Если ТекЗапись.Количество = ТекЗапись.КоличествоМеркурий Тогда
			Продолжить;
		КонецЕсли;
		
		МассивОшибокОбработки = Новый Массив;
		
		Если ПустаяСтрока(ТекЗапись.ОписаниеОбъекта) Тогда // Такой записи нет в Меркурии, либо она уже списана в ноль
			
			Если Параметры.НекачественныйГруз = ТекЗапись.ЗаписьСкладскогоЖурнала.НекачественныйГруз Тогда 
				НоваяСтрока = ИтоговаяТаблица.Добавить();
				НоваяСтрока.ЗаписьСкладскогоЖурнала = ТекЗапись.ЗаписьСкладскогоЖурнала;
				НоваяСтрока.Количество 				= ТекЗапись.КоличествоМеркурий;
				НоваяСтрока.КоличествоОстаток 		= ТекЗапись.Количество;
			КонецЕсли;
		Иначе                 		
			ЗаписьСкладскогоЖурналаXDTO = ОбщегоНазначения.ОбъектXDTOИзСтрокиXML(ТекЗапись.ОписаниеОбъекта);
			НекачественныйГруз = ?(ЗаписьСкладскогоЖурналаXDTO.batch.lowGradeCargo = "false", Ложь, Истина);
			
			Если Параметры.НекачественныйГруз = НекачественныйГруз Тогда 
				ДанныеЗаписиСкладскогоЖурналаСтруктура = ИнтеграцияВетисAPIОбработкаПартий.ЗаписьСкладскогоЖурналаПоДаннымXDTO(ПараметрыПодключения, Параметры.Предприятие, ЗаписьСкладскогоЖурналаXDTO, Истина);
			
				НоваяСтрока = ИтоговаяТаблица.Добавить();
				НоваяСтрока.ЗаписьСкладскогоЖурнала = ДанныеЗаписиСкладскогоЖурналаСтруктура.ЗаписьСкладскогоЖурнала;
				НоваяСтрока.Количество              = ДанныеЗаписиСкладскогоЖурналаСтруктура.КоличествоПродукции;
				НоваяСтрока.КоличествоОстаток 		= ТекЗапись.Количество;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИтоговаяТаблица.Количество() > 0 Тогда
		
		ДокументКорректировки = Документы.КорректировкаОстатковЗаписейСкладскогоЖурнала.СоздатьДокумент();
		ДокументКорректировки.Дата = ТекущаяДата();
		ДокументКорректировки.УстановитьНовыйНомер();	
		ДокументКорректировки.Организация   = Параметры.Организация;
		ДокументКорректировки.Контрагент    = Параметры.Контрагент;
		ДокументКорректировки.Предприятие   = Параметры.Предприятие;
		ДокументКорректировки.Ответственный = Параметры.Ответственный;	
		ДокументКорректировки.ТаблицаЗаписейСкладскогоЖурнала.Загрузить(ИтоговаяТаблица);	
		ДокументКорректировки.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЕсли
	
КонецПроцедуры
 
Процедура ЗапускФоновогоЗагрузкаОстатковВСДДляГашения(Настрока)
	 
	 
	мТекущаяДата	= ТекущаяДата();
	ДатаНачала		= мТекущаяДата - Настрока.Смещение*60*60*12;
	ДатаОкончания	= мТекущаяДата;
		  
	ПараметрыФильтра = Новый Структура;
	ПараметрыФильтра.Вставить("Организация",      Настрока.Организация);
	ПараметрыФильтра.Вставить("Контрагент",       Настрока.Контрагент);
	ПараметрыФильтра.Вставить("Предприятие",      Настрока.Предприятие);
	ПараметрыФильтра.Вставить("Ответственный",    Пользователи.АвторизованныйПользователь());
	ПараметрыФильтра.Вставить("ФильтрПоОстаткам", 1); 
	ПараметрыФильтра.Вставить("ДатаНачала"   , 	  ДатаНачала);
	ПараметрыФильтра.Вставить("ДатаОкончания", 	  ДатаОкончания);
	
	
	мОписание = Строка( Настрока.Предприятие) + ": <" + Строка(ДатаНачала) + "> - <" + Строка(ДатаОкончания)+ ">";
	УстановитьПривилегированныйРежим(Истина);
		ЗаписьЖурналаРегистрации("Загрузка остатков ВСД для гашения", УровеньЖурналаРегистрации.Предупреждение,,,мОписание);
		УстановитьПривилегированныйРежим(Ложь);

	
	ОжидатьЗавершение = Неопределено;
	Задание = ЗапуститьФоновуюЗагрузкуССайтаНаСервереОстатки(ПараметрыФильтра, Новый УникальныйИдентификатор, ОжидатьЗавершение);
	
	Если Задание = Неопределено Тогда
		ОшибкиДопПроц = "Ошибка процедуры загрузки остатков ВСД для гашения!";
		Возврат;
	ИначеЕсли Задание.Статус = "Ошибка" Тогда
		ОшибкиДопПроц = "Загрузка остатков ВСД для гашения не выполнена. Произошла ошибка:" + Символы.ПС + Задание.КраткоеПредставлениеОшибки;
		Возврат;
	ИначеЕсли Задание.Статус = "Выполнено" Тогда
		РезультатВыполненияОперации = ПолучитьИзВременногоХранилища(Задание.АдресРезультата);
		УдалитьИзВременногоХранилища(Задание.АдресРезультата);
		ТаблицаЗаписей = РезультатВыполненияОперации.Результат;
		
		//ТаблицаЗаписейЗаОбработки = ТаблицаЗаписей.Выгрузить(Новый Структура("СоздатьКорректировку", Истина));

		ПараметрыСоздания = Новый Структура;
		ПараметрыСоздания.Вставить("Организация",		Настрока.Организация);
		ПараметрыСоздания.Вставить("Контрагент",		Настрока.Контрагент);
		ПараметрыСоздания.Вставить("Предприятие",		Настрока.Предприятие);
		ПараметрыСоздания.Вставить("Ответственный",		Пользователи.АвторизованныйПользователь());
		ПараметрыСоздания.Вставить("СсылкаНаДокумент",	Документы.КорректировкаОстатковЗаписейСкладскогоЖурнала.ПустаяСсылка());
		ПараметрыСоздания.Вставить("НекачественныйГруз",Настрока.НекачественныйГруз);

		СоздатьДокументКорректировкиОстатковВСДДляГашения(ПараметрыСоздания, ТаблицаЗаписей);
		
	КонецЕсли;

 КонецПроцедуры
 
Процедура ПолучитьАктуальныеОстатки()
	 ТаблицаДляОбработки = ПолучитьСписокПлощадокДляГашения();
	 Для Каждого Настрока Из ТаблицаДляОбработки Цикл
		Попытка
		    ЗапускФоновогоЗагрузкаОстатковВСДДляГашения(Настрока);
			ДМ_СлужебныйПривилегированный.ЗарегистрироватьУспешноеВыполнениеРегЗадания("ДМ_ЗагрузкаОстатковВСДДляГашения" );
		Исключение
			лОписаниеОшибки = ОписаниеОшибки();
			ДМ_СлужебныйПривилегированный.ЗарегистрироватьОшибкуВыполненияРегЗадания("ДМ_ЗагрузкаОстатковВСДДляГашения", лОписаниеОшибки );
		ВызватьИсключение;
		КонецПопытки
	КонецЦикла;

КонецПроцедуры
 
Процедура УдалитьПродукциюВСДДляАвтогашения()
	 
	  ТаблицаДляОбработки = ПолучитьСписокПлощадокДляГашения();
	  Для Каждого Настрока Из ТаблицаДляОбработки Цикл
		  Попытка
			  СоздатьДокументИнвентаризации(Настрока);
			  ДМ_СлужебныйПривилегированный.ЗарегистрироватьУспешноеВыполнениеРегЗадания("ДМ_СозданиеИнвентаризацииВСДДляГашения" );
		  Исключение
			  лОписаниеОшибки = ОписаниеОшибки();
			  ДМ_СлужебныйПривилегированный.ЗарегистрироватьОшибкуВыполненияРегЗадания("ДМ_СозданиеИнвентаризацииВСДДляГашения", лОписаниеОшибки );
			  ВызватьИсключение;
		  КонецПопытки
	  КонецЦикла;

КонецПроцедуры

Процедура АвтоматическоеГашениеВСД() Экспорт
	
	 ЗагрузитьСписокВСДДляГашения();
	 ПогаситьВСДДляАвгашения();
	 	 
 КонецПроцедуры
 
 Процедура ДМ_АвтоматическоеСписание() Экспорт
	
	 ПолучитьАктуальныеОстатки();
	 УдалитьПродукциюВСДДляАвтогашения();
	 	 
КонецПроцедуры


// Поиск по GUID или создание (если не найден) объекта  
//
// Параметры:
//  GUIDОбъекта  - Текстовое поле с GUID элемента справочника
//  ВидОбъекта   - строка с видом справочника
//
Функция ПолучитьОбъектПоGUID(GUIDОбъекта,ВидОбъекта,НеСоздавать = Ложь,мСообщения,ТекстСообщения="") Экспорт
	
	ИскСпр = Справочники[ВидОбъекта].ПустаяСсылка();
	Если Не ПустаяСтрока(GUIDОбъекта) Тогда
		ИскСпр = Справочники[ВидОбъекта].НайтиПоРеквизиту("GUID_Меркурий",GUIDОбъекта);
		Если ИскСпр = Справочники[ВидОбъекта].ПустаяСсылка() И НеСоздавать = Ложь Тогда
			ИскСпр = Справочники[ВидОбъекта].СоздатьЭлемент();
			ИскСпр.GUID_Меркурий = GUIDОбъекта;
			ИскСпр.Наименование = "Создан по GUID " + GUIDОбъекта + " из EDI-файла";
			ИскСпр.Записать();
			мСообщения.Добавить(ТекстСообщения); 
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат ИскСпр.Ссылка;
	
КонецФункции	

Процедура ПолучитьСвязьПредприятияИКонтрагента(Контрагент,Предприятие)
	
	Если Не Контрагент = Справочники.Контрагенты.ПустаяСсылка() И Не Предприятие = Справочники.Предприятия.ПустаяСсылка() Тогда
		Запр = Новый Запрос;
		Запр.Текст = "ВЫБРАТЬ
		|	СвязиМеждуКонтрагентамиИПредприятиями.Контрагент КАК Контрагент,
		|	СвязиМеждуКонтрагентамиИПредприятиями.Предприятие КАК Предприятие,
		|	СвязиМеждуКонтрагентамиИПредприятиями.GLN КАК GLN
		|ИЗ
		|	РегистрСведений.СвязиМеждуКонтрагентамиИПредприятиями КАК СвязиМеждуКонтрагентамиИПредприятиями
		|ГДЕ
		|	СвязиМеждуКонтрагентамиИПредприятиями.Контрагент = &Контрагент
		|	И СвязиМеждуКонтрагентамиИПредприятиями.Предприятие = &Предприятие";
		
		Запр.Параметры.Вставить("Контрагент",Контрагент);
		Запр.Параметры.Вставить("Предприятие",Предприятие);
		
		ВыбЗапр = Запр.Выполнить().Выбрать();
		Если Не ВыбЗапр.Следующий() Тогда
			НЗ = РегистрыСведений.СвязиМеждуКонтрагентамиИПредприятиями.СоздатьНаборЗаписей();
			НЗ.Отбор.Контрагент.Значение = Контрагент;
			НЗ.Отбор.Контрагент.Использование = Истина;
			ЗаписьНЗ = НЗ.Добавить();
			ЗаписьНЗ.Контрагент = Контрагент;
			ЗаписьНЗ.Предприятие = Предприятие;
			НЗ.Записать();
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры	

// Возвращает текстовый документ с содержими исходного файла для обработки 
//
// Параметры:
//  пДокументСсылка  - ОпределяемыйТип.ФайлыОбменаDanone - ссылка на документ, в котором хранится файл
//
// Возвращаемое значение:
//   Структура   - данные исходного файла для обработки.
//					Элементы структуры:
//  			ФайлИсходный - ТекстовыйДокумент   - содержимое исходного файла для обработки
//  			ИмяФайла - Строка   - имя исходного файла
//  			Кодировка - Строка   - Кодировка файла
//
Функция ПолучитьФайлИсходный( пДокументСсылка ) Экспорт
	
	лДокумент = пДокументСсылка.ПолучитьОбъект();
	лТекстовыйДокумент = лДокумент.ФайлИсходный.Получить();
	Если Не ПустаяСтрока( лДокумент.Кодировка ) Тогда
		лТекстовыйДокумент2 = Новый ТекстовыйДокумент;
		лТекстовыйДокумент2.УстановитьТипФайла( лДокумент.Кодировка );
		лТекстовыйДокумент2.УстановитьТекст( лТекстовыйДокумент.ПолучитьТекст() );
		лТекстовыйДокумент = лТекстовыйДокумент2;
	КонецЕсли;
	
	лСтруктура = Новый Структура( "ФайлИсходный,ИмяФайла,Кодировка", лТекстовыйДокумент, лДокумент.ИмяФайла, лДокумент.Кодировка );
	
	Возврат лСтруктура;
	
КонецФункции // ПолучитьФайлИсходный()

Функция ПолучитьФайлОбработанный( пДокументСсылка ) Экспорт
	
	лДокумент = пДокументСсылка.ПолучитьОбъект();
	лТекстовыйДокумент = лДокумент.ФайлОбработанныйПоОбменуСМеркурием.Получить();
	Если лТекстовыйДокумент = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	
	Если Не ПустаяСтрока( лДокумент.Кодировка ) Тогда
		лТекстовыйДокумент2 = Новый ТекстовыйДокумент;
		лТекстовыйДокумент2.УстановитьТипФайла( лДокумент.Кодировка );
		лТекстовыйДокумент2.УстановитьТекст( лТекстовыйДокумент.ПолучитьТекст() );
		лТекстовыйДокумент = лТекстовыйДокумент2;
	КонецЕсли;
	
	лСтруктура = Новый Структура( "ФайлОбработанныйПоОбменуСМеркурием,ИмяФайла,Кодировка", лТекстовыйДокумент, лДокумент.ИмяФайла, лДокумент.Кодировка );
	
	Возврат лСтруктура;
	
КонецФункции // ПолучитьФайлИсходный()

Функция ПолучитьЗаписьСкладскогоЖурналаПоУИ(УИЗаписиСкладскогоУчета)
	СправочникМенеджер = Справочники.СвойстваЗаписейСкладскогоЖурнала;
	ЗаписьСкладскогоЖурналаСсылка = СправочникМенеджер.НайтиПоРеквизиту("GUID_Меркурий", УИЗаписиСкладскогоУчета);
	Если ЗначениеЗаполнено(ЗаписьСкладскогоЖурналаСсылка) Тогда
		ЗаписьСкладскогоЖурналаОбъект = ЗаписьСкладскогоЖурналаСсылка.ПолучитьОбъект();
		Если ЗаписьСкладскогоЖурналаОбъект = Неопределено Тогда 
			ЗаписьСкладскогоЖурналаСсылка = СправочникМенеджер.ПустаяСсылка();	
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗаписьСкладскогоЖурналаСсылка;
КонецФункции

Функция ПодобратьПродукциюПоАртикулу(Артикул, НомСтр)
	
	СтрПодбораПродукции = Новый Структура;
	ТекПрод = Справочники.Продукция.ПустаяСсылка();
	ОшибкиПодбораПродукции = "";
	СообщенияПодбораПродукции = "";
	КвоПродукции = 0;
	
	Запр = Новый Запрос;
	Запр.Текст = "ВЫБРАТЬ
	|	Продукция.Ссылка КАК Продукция,
	|	Продукция.GUID_Меркурий КАК GUID_Меркурий
	|ИЗ
	|	Справочник.Продукция КАК Продукция
	|ГДЕ
	|	Продукция.Артикул = &Артикул
	|	И Продукция.ПометкаУдаления = ЛОЖЬ
	|	И Продукция.НеИспользуется = ЛОЖЬ
	|	И Продукция.ПродукцияПолучателя = ЛОЖЬ";
	
	Запр.Параметры.Вставить("Артикул",Артикул);
	ВыбЗапр = Запр.Выполнить().Выбрать();
	Пока ВыбЗапр.Следующий() Цикл
		КвоПродукции = КвоПродукции + 1;
		Если Не ПустаяСтрока(ВыбЗапр.GUID_Меркурий) Тогда
			ТекПрод = ВыбЗапр.Продукция;
		КонецЕсли;	
	КонецЦикла;	
	
	Если ТекПрод = Справочники.Продукция.ПустаяСсылка() Тогда
		ОшибкиПодбораПродукции = ОшибкиПодбораПродукции + "
		|Продукция: не найден по артикулу " + Артикул + " (строка " + НомСтр + ")";
	ИначеЕсли КвоПродукции > 1 Тогда
		СообщенияПодбораПродукции = СообщенияПодбораПродукции + "
		|Продукция: есть " + КвоПродукции + " элементов с артикулом " + Артикул + " (строка " + НомСтр + ")";
	КонецЕсли;
	
	СтрПодбораПродукции.Вставить("ТекПрод",ТекПрод);
	СтрПодбораПродукции.Вставить("ОшибкиПодбораПродукции",ОшибкиПодбораПродукции);
	СтрПодбораПродукции.Вставить("СообщенияПодбораПродукции",СообщенияПодбораПродукции);
	
	Возврат СтрПодбораПродукции;
	
КонецФункции	

Функция ЗаполнитьТаблицуПродукцииПоОстаткам(ДокУВС,Предприятие) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ТипПродукции КАК ТипПродукции,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ВидПродукции КАК ВидПродукции,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ПодвидПродукции КАК ПодвидПродукции,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.Продукция КАК Продукция,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ДатаВыработкиНачало КАК ДатаВыработкиНачало,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ДатаВыработкиОкончание КАК ДатаВыработкиОкончание,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ДатаВыработкиСтрокой КАК ДатаВыработкиСтрокой,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ДатаОкончанияСрокаГодностиНачало КАК ДатаОкончанияСрокаГодностиНачало,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ДатаОкончанияСрокаГодностиОкончание КАК ДатаОкончанияСрокаГодностиОкончание,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ДатаСрокаГодностиСтрокой КАК ДатаСрокаГодностиСтрокой,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.НекачественныйГруз КАК НекачественныйГруз,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.СкоропортящаясяПродукция КАК СкоропортящаясяПродукция,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ФорматДатыВыработки КАК ФорматДатыВыработки,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ФорматСрокаГодности КАК ФорматСрокаГодности,
	|	ВЫБОР
	|		КОГДА ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.НомерПартии <> """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьПартияВЗаписи,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.НомерПартии КАК НомерПартии,
	|	ДвижениеПродукцииОстатки.КоличествоОстаток КАК Количество,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.СписокФизическихУпаковок.(
	|		Ссылка КАК Поле1,
	|		НомерСтроки КАК Поле2,
	|		КоличествоУпаковок КАК Поле3,
	|		НаименованиеМаркировки КАК Поле4,
	|		ТипМаркировки КАК Поле5,
	|		Упаковка КАК Поле6,
	|		УровеньУпаковки КАК Поле7
	|	) КАК СписокФизическихУпаковок
	|ИЗ
	|	РегистрНакопления.ДвижениеПродукции.Остатки(
	|			&ДатаОстатка,
	|			Организация = &Организация
	|				И Предприятие = &Предприятие) КАК ДвижениеПродукцииОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВерсииЗаписейСкладскогоЖурнала КАК ВерсииЗаписейСкладскогоЖурнала
	|		ПО ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала = ВерсииЗаписейСкладскогоЖурнала.ЗаписьСкладскогоЖурнала
	|ГДЕ
	|	ВерсииЗаписейСкладскогоЖурнала.СтатусВерсииЗаписиСкладскогоЖурнала В(&МассивРазрешенныхСтатусов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаписьСкладскогоЖурнала";
	
	Запрос.УстановитьПараметр("Организация", ДокУВС.Организация);
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	Запрос.УстановитьПараметр("ДатаОстатка", Новый Граница(ДокУВС.МоментВремени(), ВидГраницы.Исключая));
	МассивРазрешенныхСтатусов = ИнтеграцияВетисAPIСлужебныйПовтИсп.РазрешенныеСтатусыЗаписейСкладскогоЖурналаДляВыполненияОпераций();
	Запрос.УстановитьПараметр("МассивРазрешенныхСтатусов", МассивРазрешенныхСтатусов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	тзОст = РезультатЗапроса.Выгрузить();
	тзОст.Колонки.Добавить("Списано",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,6)));
	
	Возврат тзОст;
	
КонецФункции

Процедура ЗаполнитьПриходПоПеремещению(ДокDanoneГашение,ДокУВСТО)
	
	тзМатериалы = ДокУВСТО.ТаблицаПродукция.Выгрузить();
	тзСвязанныеДокументыУВС = ДокDanoneГашение.ДМ_СвязанныеДокументыУВС.Выгрузить();
	тзСвязанныеДокументыУВС.Колонки.Добавить("НомерТТН",Новый ОписаниеТипов("Строка"));
	Для Каждого ТектзСв Из тзСвязанныеДокументыУВС Цикл
		ТектзСв.НомерТТН = ТектзСв.Приемка.НомерТТН;
	КонецЦикла;	
	
	
	мОшибки = Новый Массив;
	мСообщения = Новый Массив;
	ош=0;
	НомСтр = 0;
	ДокDanoneГашениеСсылка = ДокDanoneГашение.Ссылка;
	НачДатаДокГашение = НачалоДня(ДокDanoneГашениеСсылка.Дата);
	Для Каждого ТекТ из тзМатериалы Цикл
		
		мОшибки1 = Новый Массив;
		ЕстьНесколькоВСД = 0; // 0 - нет ВСД, 1 есть 1 ВСД, 2 - есть несколько ВСД
		НомСтр = НомСтр + 1;
		ТекПродукция = ТекТ.ЗаписьСкладскогоЖурнала.Продукция;
		ТекНомерПартии = ТекТ.ЗаписьСкладскогоЖурнала.НомерПартии;
		ЕстьДокумент = Ложь;
		СтрОтб = Новый Структура;
		СтрОтб.Вставить("Продукция",ТекПродукция);
		СтрОтб.Вставить("НомерПартии",ТекНомерПартии);
		СтрОтб.Вставить("НомерТТН",ДокУВСТО.НомерТТН);
		мСтрДок = тзСвязанныеДокументыУВС.НайтиСтроки(СтрОтб);
		Если мСтрДок.Количество() > 0 Тогда
			ТекСтрДок = мСтрДок.Получить(0);
			Если Не ТекСтрДок.Приемка.Пустая() Тогда
				ДокУВС = ТекСтрДок.Приемка.ПолучитьОбъект();
				ЕстьДокумент = Истина;	
			КонецЕсли;	
		КонецЕсли;	
		
		Если ЕстьДокумент = Ложь Тогда
			ДокУВС = Документы.ПриходныеОперации.СоздатьДокумент();
			ДокУВС.Дата = ДокУВСТО.Дата;
			ДокУВС.УстановитьНовыйНомер();
		КонецЕсли;	
		
		ДатаТТН = ДокУВСТО.ДатаТТН;
		НомерТТН = ДокУВСТО.НомерТТН;
		
		ПредприятиеПолучатель = ДокУВСТО.ПредприятиеПолучатель;
		//Организация = ДМ_СлужебныйПривилегированный.ПолучитьОрганизациюПоПредприятию(ПредприятиеПолучатель);
		КонтрагентПолучатель = ДокУВСТО.КонтрагентПолучатель;
		НастройкиПодключения = ДМ_ВызовСервераПовтИсп.НастройкаПодключенияКВетисAPIПоКонтрагенту(КонтрагентПолучатель);
		Если НастройкиПодключения.Свойство("Организация") Тогда
			Организация = НастройкиПодключения.Организация;
		Иначе
			Организация = Справочники.Организации.ПустаяСсылка();
			мОшибки.Добавить("
			|Не найдена организация по хозсубъекту " + СокрЛП(КонтрагентПолучатель.Наименование));
		КонецЕсли;
		ПредприятиеОтправитель = ДокУВСТО.ПредприятиеОтправитель;
		КонтрагентОтправитель = ДокУВСТО.КонтрагентОтправитель;
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Организация"  , Организация);
		СтруктураОтбора.Вставить("КонтрагентПолучатель"  , КонтрагентПолучатель);
		СтруктураОтбора.Вставить("КонтрагентОтправитель" , КонтрагентОтправитель);
		СтруктураОтбора.Вставить("ПредприятиеОтправитель", ПредприятиеОтправитель);
		СтруктураОтбора.Вставить("ПредприятиеПолучатель" , ПредприятиеПолучатель);
		СтруктураОтбора.Вставить("НомерТТН"          , НомерТТН);
		СтруктураОтбора.Вставить("ДатаТТН"          , ДатаТТН);
		СтруктураОтбора.Вставить("НомерПартии"       , ТекНомерПартии);
		СтруктураОтбора.Вставить("Продукция"         , ТекПродукция);
		СтруктураОтбора.Вставить("ДатаДок"         , ДокУВС.Дата);
		СтруктураОтбора.Вставить("ДокУВС"         , ДокУВС.Ссылка);
		
		ЕстьВСД = Истина;
		Если Не ЗначениеЗаполнено(ДокУВС.ВСД) Тогда
			ЕстьВСД = Ложь;
			мИскВСД = ПодобратьВСДДляRECADV(СтруктураОтбора);
			Если мИскВСД.Количество() > 0 Тогда
				Для сс=0 по мИскВСД.Количество()-1 Цикл
					ИскВСД = мИскВСД.Получить(сс);
					Если НачалоДня(ИскВСД.Дата) = НачДатаДокГашение Тогда
						Прервать;
					КонецЕсли;	
				КонецЦикла;	
				ДокУВС.ЗаполнитьДокументПоВСД(ИскВСД);
				Если ИскВСД.Количество = ТекТ.Количество Тогда
					ЕстьВСД = Истина;
				Иначе	
					РазницаВеса = ИскВСД.Количество - ТекТ.Количество;
					КоэфРазницы = ?(РазницаВеса < 0,-РазницаВеса,РазницаВеса)*100/ИскВСД.Количество;
					Если КоэфРазницы > 5 Тогда
						ЕстьВСД = Ложь;
						ДокУВС.ВСД = Документы.ВСД.ПустаяСсылка();
						мОшибки1.Добавить("" + ДокУВС + " разница в весе с подходящим ВСД " + ИскВСД + " > 5%  (в ВСД = " + ИскВСД.Количество + ", в файле = " + ТекТ.Количество + ")");
					КонецЕсли;
				КонецЕсли;
				ЕстьНесколькоВСД = ?(мИскВСД.Количество()=1,1,2);
			КонецЕсли;
		Иначе
			ЕстьНесколькоВСД = 1;
		КонецЕсли;
		
		
		Если ЕстьВСД = Ложь Тогда
			
			ДокУВС.ДатаТТН = ДатаТТН;
			ДокУВС.НомерТТН = НомерТТН;
			ДокУВС.Ответственный = Пользователи.АвторизованныйПользователь();
			ДокУВС.ПредприятиеПолучатель = ПредприятиеПолучатель;
			ДокУВС.Организация = Организация;
			ДокУВС.КонтрагентПолучатель = КонтрагентПолучатель;
			ДокУВС.ПредприятиеОтправитель = ПредприятиеОтправитель;
			ДокУВС.КонтрагентОтправитель = КонтрагентОтправитель;
			РеквизитыПоУмолчанию = ЗаполнениеРеквизитовОбъектов.ПолучитьЗначенияРеквизитовЗаполнения("Документ.ТранспортныеОперации","ТаблицаПродукция");
			Если РеквизитыПоУмолчанию.Свойство("БлагополучиеМестности") Тогда
				ДокУВС.БлагополучиеМестности = РеквизитыПоУмолчанию.БлагополучиеМестности;
			КонецЕсли;	
			Если РеквизитыПоУмолчанию.Свойство("НазначениеГруза") Тогда
				ДокУВС.НазначениеГруза = РеквизитыПоУмолчанию.НазначениеГруза;
			КонецЕсли;	
			ДокУВС.ТипТТН = Справочники.ТипыТТН.ТТН;
			ДокУВС.Транспорт = ДокУВСТО.Транспорт;
			ДокУВС.СпособХраненияПриПеревозке = Справочники.СпособыХраненияПродукцииПриПеревозке.Охлаждаемый;
			ДокУВС.Продукция = ТекПродукция;
			ДокУВС.Количество = ТекТ.Количество;
			ДокУВС.НомерПартии = ТекНомерПартии;
			ТекЗаписьСкладскогоЖурнала = ТекТ.ЗаписьСкладскогоЖурнала;
			ДокУВС.ФорматДатыВыработки = ТекЗаписьСкладскогоЖурнала.ФорматДатыВыработки;
			ДокУВС.ФорматСрокаГодности = ТекЗаписьСкладскогоЖурнала.ФорматСрокаГодности;
			ДокУВС.ДатаВыработкиНачало = ТекЗаписьСкладскогоЖурнала.ДатаВыработкиНачало;
			ДокУВС.ДатаВыработкиОкончание = ТекЗаписьСкладскогоЖурнала.ДатаВыработкиОкончание;
			ДокУВС.ДатаОкончанияСрокаГодностиНачало = ТекЗаписьСкладскогоЖурнала.ДатаОкончанияСрокаГодностиНачало;
			ДокУВС.ДатаОкончанияСрокаГодностиОкончание = ТекЗаписьСкладскогоЖурнала.ДатаОкончанияСрокаГодностиОкончание;
			ДокУВС.ЕдиницаИзмерения = ТекЗаписьСкладскогоЖурнала.ЕдиницаИзмерения;
			
			СтруктураСвойств = ОбщегоНазначенияУВССервер.ПолучитьСвойстваПродукции(ТекПродукция);
			ЗаполнитьЗначенияСвойств(ДокУВС, СтруктураСвойств);
			
		Иначе
			
			ТекВСД = ДокУВС.ВСД;
			Если ДокУВС.ВСД_Возврат.Пустая() Тогда
				ТекВСДВозврат = ДокУВС.ВСД;
			Иначе
				ТекВСДВозврат = ДокУВС.ВСД_Возврат;
			КонецЕсли;	
			ДокУВС.ТипТТН_Возврат =  ТекВСДВозврат.ТипТТН;
			ДокУВС.ДатаВСД_Возврат =  ТекВСДВозврат.ДатаТТН;
			ДокУВС.НомерТТН_Возврат =  ТекВСДВозврат.НомерТТН;
			ДокУВС.НазначениеГруза = Справочники.НазначениеГрузов.НайтиПоРеквизиту("GUID_Меркурий","5b90da1b-e089-11e1-bcf3-b499babae7ea");
			ДокУВС.НазначениеГруза_Возврат = Справочники.НазначениеГрузов.НайтиПоРеквизиту("GUID_Меркурий","5b90da1b-e089-11e1-bcf3-b499babae7ea");
			
		КонецЕсли;
		
		Если ДокУВС.Организация <> Организация Тогда
			ДокУВС.Организация = Организация;
		КонецЕсли;
		
		ДокУВС.РезультатВетеринарногоКонтроля = Справочники.РезультатыКонтроляПоставки.ГрузСоответствует;
		ДокУВС.РезультатДокументарногоКонтроля = Справочники.РезультатыКонтроляПоставки.ГрузСоответствует;
		ДокУВС.РешениеОПриемеВходнойПартии = Справочники.РешенияОПриемеВходнойПартии.ПринятьВсюПоставку; 
		
		
		ДокУВС.Записать();
		
		НовтзСвязанныеДокументыУВС = тзСвязанныеДокументыУВС.Найти(ДокУВС.Ссылка,"Приемка");
		Если НовтзСвязанныеДокументыУВС = Неопределено Тогда
			НовтзСвязанныеДокументыУВС = тзСвязанныеДокументыУВС.Добавить();
			НовтзСвязанныеДокументыУВС.Приемка = ДокУВС.Ссылка;
			НовтзСвязанныеДокументыУВС.Продукция = ТекПродукция;
			НовтзСвязанныеДокументыУВС.Артикул = ТекПродукция.Артикул;
			НовтзСвязанныеДокументыУВС.НомерПартии = ТекНомерПартии;
		КонецЕсли;	
		Если ЕстьНесколькоВСД = 0 Тогда
			НовтзСвязанныеДокументыУВС.СтатусПоВСД = Перечисления.ДМ_СтатусПриходнойОперацииПоВСД.ВСДНеНайден;
		Иначе
			НовтзСвязанныеДокументыУВС.СтатусПоВСД = Перечисления.ДМ_СтатусПриходнойОперацииПоВСД.ВСДНайден;
		КонецЕсли;
		
		
		Если Не ДокУВС.ПроверитьЗаполнение() Тогда
			Сообщения =  ПолучитьСообщенияПользователю(Истина);
			Для Каждого Сообщение Из Сообщения Цикл
				мОшибки1.Добавить(Сообщение.Текст);
			КонецЦикла;
		КонецЕсли;	
		
		Если мОшибки1.Количество() > 0  Тогда
			Для мм=0 по мОшибки1.Количество()-1 Цикл
				мОшибки.Добавить(мОшибки1.Получить(мм));
			КонецЦикла;	
		КонецЕсли;	
		
		
		ЗаписатьОшибкиСозданияДокументаУВС(ДокУВС,ДокDanoneГашениеСсылка,"ГашениеВП",ДокУВС.Организация,ДокУВС.ПредприятиеПолучатель,мОшибки1,мСообщения,Истина);
		
	КонецЦикла;
	
	ДокDanoneГашение = ДокDanoneГашениеСсылка.ПолучитьОбъект();
	ДокDanoneГашение.ДМ_СвязанныеДокументыУВС.Загрузить(тзСвязанныеДокументыУВС);
	
	Если мОшибки.Количество() = 0 Тогда 
		ДокDanoneГашение.СтатусДокумента = Перечисления.СтатусДокументаСФайламиSAP.УспешноОбработан;
		//ОбновитьСводныйПриход(ДокDanoneГашение,тзСвязанныеДокументыУВС,СтруктураОтбора);
	Иначе
		ДокDanoneГашение.СтатусДокумента = Перечисления.СтатусДокументаСФайламиSAP.ОшибкаПриОбработке;
	КонецЕсли;	
	
	ДокDanoneГашение.Записать();
	
	
КонецПроцедуры	

Процедура ЗаписатьОшибкиСозданияДокументаУВС(ДокУВС,ДокDanoneСсылка,ВидОперации,Организация,Предприятие,мОшибки,мСообщения,ЭтоГашение = Ложь,ЗапросСразуНаГашение = Ложь)
	
	Если мОшибки.Количество() = 0 Тогда 
		
		Если ЭтоГашение Тогда
			
			Если Не ДокУВС.ПроверитьЗаполнение() Тогда
				
				ДокУВС.Записать(РежимЗаписиДокумента.Запись);
				
				Сообщения =  ПолучитьСообщенияПользователю(Истина);
				
				СообщенияДоп = "";
				//Если Не ЗначениеЗаполнено(ДокУВС.ВСД) И Не ЗначениеЗаполнено(ДокУВС.ВСД_Возврат) Тогда
				//	СообщенияДоп = СообщенияДоп + "
				//	| *** Не найден входящий ВСД ***";
				//КонецЕсли;	
				
				лСтрокаСообщения = НСтр("ru = 'Ошибки при создании документа УВС.
				|Тип операции: %1
				|Документ УВС: %2
				|Ответственный: %3'");
				
				лСтрокаСообщения = лСтрокаСообщения + СообщенияДоп;
				Для Каждого Сообщение Из Сообщения Цикл
					лСтрокаСообщения = лСтрокаСообщения + "
					|" + Сообщение.Текст + ",";
				КонецЦикла;
				лСтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( лСтрокаСообщения, ВидОперации, "" + ДокУВС, ДокУВС.Ответственный );
				
				//Регистрируем ошибку
				лОписаниеСобытия = лСтрокаСообщения;
				
				ДМ_СлужебныйПривилегированный.ЗарегистрироватьСобытие( 
				ДокDanoneСсылка,
				"Обработка файлов EDI.",
				Перечисления.ДМ_УровниЖурнала.Ошибка,
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных( ТипЗнч(ДокDanoneСсылка) ),
				Строка( ДокDanoneСсылка ),
				лОписаниеСобытия);
				
				
				ДокDanone = ДокDanoneСсылка.ПолучитьОбъект();
				ДокDanone.Организация = Организация;
				ДокDanone.Предприятие = Предприятие;
				ДокDanone.Записать();
				
				мОшибки.Добавить(""); 
				
			Иначе
				
				ДокDanone = ДокDanoneСсылка.ПолучитьОбъект();
				ДокDanone.Организация = Организация;
				ДокDanone.Предприятие = Предприятие;
				ДокDanone.Записать();
				
				мДокДляЗаявок = Новый Массив;
				мДокДляЗаявок.Добавить(ДокУВС.Ссылка);
				ДМ_СлужебныйПривилегированный.СформироватьЗаявкиДляВетисAPI(мДокДляЗаявок);
				
			КонецЕсли;
			
		ИначеЕсли ЗапросСразуНаГашение Тогда
			
			//внутреннее перемещение с запросом сразу на гашение, создание прихода по цепочке ГашениеВП
			Если Не ДокУВС.ПроверитьЗаполнение() Тогда
				
				ДокУВС.Записать(РежимЗаписиДокумента.Запись);
				
				Сообщения = ПолучитьСообщенияПользователю(Истина);
				
				лСтрокаСообщения = НСтр("ru = 'Ошибки при создании документа УВС.
				|Тип операции: %1
				|Документ Danone: %2
				|Ответственный: %3'");
				
				Для Каждого Сообщение Из Сообщения Цикл
					лСтрокаСообщения = лСтрокаСообщения + "
					|" + Сообщение.Текст + ",";
				КонецЦикла;
				лСтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( лСтрокаСообщения, ВидОперации, "" + ДокDanoneСсылка, ДокУВС.Ответственный );
				
				//Регистрируем ошибку
				лОписаниеСобытия = лСтрокаСообщения;
				
				ДМ_СлужебныйПривилегированный.ЗарегистрироватьСобытие( 
				ДокDanoneСсылка,
				"Обработка файлов EDI.",
				Перечисления.ДМ_УровниЖурнала.Ошибка,
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных( ТипЗнч(ДокDanoneСсылка) ),
				Строка( ДокDanoneСсылка ),
				лОписаниеСобытия);
				
				
				ДокDanone = ДокDanoneСсылка.ПолучитьОбъект();
				ДокDanone.Организация = ДокУВС.Организация;
				ДокDanone.Предприятие = Предприятие;
				Если ДокDanone.ДМ_СвязанныеДокументыУВС.Найти(ДокУВС.Ссылка) = Неопределено Тогда
					НовДокУВС = ДокDanone.ДМ_СвязанныеДокументыУВС.Добавить();
					НовДокУВС.ДМ_СвязанныйДокументУВС = ДокУВС.Ссылка;
					//НовДокУВС.Автогашение = ЗапросСразуНаГашение;
				КонецЕсли;	
				ДокDanone.СтатусДокумента = Перечисления.СтатусДокументаСФайламиSAP.ОшибкаПриОбработке;
				ДокDanone.Записать();
				
				мОшибки.Добавить("");
				
				
			Иначе
				
				ДокУВС.Записать(РежимЗаписиДокумента.Запись);
				
				ДокDanone = ДокDanoneСсылка.ПолучитьОбъект();
				ДокDanone.Организация = Организация;
				ДокDanone.Предприятие = Предприятие;
				Если ДокDanone.ДМ_СвязанныеДокументыУВС.Найти(ДокУВС.Ссылка) = Неопределено Тогда
					НовДокУВС = ДокDanone.ДМ_СвязанныеДокументыУВС.Добавить();
					НовДокУВС.ДМ_СвязанныйДокументУВС = ДокУВС.Ссылка;
					//НовДокУВС.Автогашение = ЗапросСразуНаГашение;
				КонецЕсли;
				Если ДокDanone.СтатусДокумента = Перечисления.СтатусДокументаСФайламиSAP.ПустаяСсылка() Тогда
					ДокDanone.СтатусДокумента = Перечисления.СтатусДокументаСФайламиSAP.УспешноОбработан;
				ИначеЕсли ДокDanone.ДМ_СвязанныеДокументыУВС.Количество() = 1 Тогда
					//статус не меняем, если есть более одного документа УВС
					ДокDanone.СтатусДокумента = Перечисления.СтатусДокументаСФайламиSAP.УспешноОбработан;
				КонецЕсли;	
				
				//ДокDanone.ДМ_СвязанныйДокументУВС = ДокУВС.Ссылка;
				ДокDanone.Записать();
				
				мДокДляЗаявок = Новый Массив;
				мДокДляЗаявок.Добавить(ДокУВС.Ссылка);
				ДМ_СлужебныйПривилегированный.СформироватьЗаявкиДляВетисAPI(мДокДляЗаявок);
				
				//в ДМ_ФайлыОбменаDanoneГашениеВСД поле ДМ_ФайлыОбменаПеремещениеИсходный для записи текущего ДокУВС
				//данные о файле будут скопированы с ДокDanoneСсылка
				//обработка документа по признаку заполнения ДМ_ФайлыОбменаПеремещениеИсходный по данным перемещения
				
				Запр = Новый Запрос;
				Запр.Текст = "ВЫБРАТЬ
				|	ДМ_ФайлыОбменаDanoneГашениеВСД.Ссылка КАК Ссылка
				|ИЗ
				|	Документ.ДМ_ФайлыОбменаDanoneГашениеВСД КАК ДМ_ФайлыОбменаDanoneГашениеВСД
				|ГДЕ
				|	ДМ_ФайлыОбменаDanoneГашениеВСД.ДМ_ФайлыОбменаПеремещениеИсходный = &ДМ_ФайлыОбменаПеремещениеИсходный
				|";
				
				Запр.Параметры.Вставить("ДМ_ФайлыОбменаПеремещениеИсходный",ДокDanoneСсылка);
				ВыбЗапр = Запр.Выполнить().Выбрать();
				ИсхНомер = "";
				Если ВыбЗапр.Следующий() Тогда
					ДокDanoneГашение = ВыбЗапр.Ссылка.ПолучитьОбъект();
					ИсхНомер = ДокDanoneГашение.Номер;
				Иначе
					ДокDanoneГашение = Документы.ДМ_ФайлыОбменаDanoneГашениеВСД.СоздатьДокумент();
				КонецЕсли;	
				
				ТекСтатусДокDanoneГашение = ДокDanoneГашение.СтатусДокумента; 
				
				ЗаполнитьЗначенияСвойств(ДокDanoneГашение,ДокDanoneСсылка);
				Если ИсхНомер = "" Тогда
					ДокDanoneГашение.УстановитьНовыйНомер();
				Иначе
					ДокDanoneГашение.Номер = ИсхНомер;
				КонецЕсли;	
				ДокDanoneГашение.ДМ_ФайлыОбменаПеремещениеИсходный = ДокDanoneСсылка;
				ДокDanoneГашение.СтатусДокумента = ТекСтатусДокDanoneГашение; 
				ДокDanoneГашение.Записать();
				
				Если ДокDanoneГашение.СтатусДокумента <> Перечисления.СтатусДокументаСФайламиSAP.УспешноОбработан Тогда
					ЗаполнитьПриходПоПеремещению(ДокDanoneГашение,ДокУВС.Ссылка);
				КонецЕсли;	
				
			КонецЕсли;	
			
			
		Иначе	
			
			Если Не ДокУВС.ПроверитьЗаполнение() Тогда
				
				ДокУВС.Записать(РежимЗаписиДокумента.Запись);
				
				Сообщения = ПолучитьСообщенияПользователю(Истина);
				
				лСтрокаСообщения = НСтр("ru = 'Ошибки при создании документа УВС.
				|Тип операции: %1
				|Документ Danone: %2
				|Документ УВС: %3
				|Ответственный: %4'");
				
				Для Каждого Сообщение Из Сообщения Цикл
					лСтрокаСообщения = лСтрокаСообщения + "
					|" + Сообщение.Текст + ",";
				КонецЦикла;
				лСтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( лСтрокаСообщения, ВидОперации, "" + ДокDanoneСсылка, ДокУВС, ДокУВС.Ответственный );
				
				//Регистрируем ошибку
				лОписаниеСобытия = лСтрокаСообщения;
				
				ДМ_СлужебныйПривилегированный.ЗарегистрироватьСобытие( 
				ДокDanoneСсылка,
				"Обработка файлов EDI.",
				Перечисления.ДМ_УровниЖурнала.Ошибка,
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных( ТипЗнч(ДокDanoneСсылка) ),
				Строка( ДокDanoneСсылка ),
				лОписаниеСобытия);
				
				
				ДокDanone = ДокDanoneСсылка.ПолучитьОбъект();
				
				Если ТипЗнч(ДокDanoneСсылка) = Тип("ДокументСсылка.ДМ_ФайлыОбменаDanoneКлиент") 
					ИЛИ ТипЗнч(ДокDanoneСсылка) = Тип("ДокументСсылка.ДМ_ФайлыОбменаDanoneВнутреннееПеремещение") 
					ИЛИ ТипЗнч(ДокDanoneСсылка) = Тип("ДокументСсылка.ДМ_ФайлыОбменаDanoneИнвентаризация")
					ИЛИ ТипЗнч(ДокDanoneСсылка) = Тип("ДокументСсылка.ДМ_ФайлыОбменаDanoneПроизводство") Тогда
					Если ДокDanone.ДМ_СвязанныеДокументыУВС.Найти(ДокУВС.Ссылка) = Неопределено Тогда
						НовДокУВС = ДокDanone.ДМ_СвязанныеДокументыУВС.Добавить();
						НовДокУВС.ДМ_СвязанныйДокументУВС = ДокУВС.Ссылка;
					КонецЕсли;	
				Иначе	
					ДокDanone.ДМ_СвязанныйДокументУВС = ДокУВС.Ссылка;
					ДокDanone.СтатусДокумента = Перечисления.СтатусДокументаСФайламиSAP.УспешноОбработан;
				КонецЕсли;	
				
				ДокDanone.Организация = Организация;
				ДокDanone.Предприятие = Предприятие;
				ДокDanone.СтатусДокумента = Перечисления.СтатусДокументаСФайламиSAP.ОшибкаПриОбработке;
				ДокDanone.Записать();
				
				мОшибки.Добавить("");
				
			Иначе
				
				ДокУВС.Записать(РежимЗаписиДокумента.Запись);
				
				Если ТипЗнч(ДокУВС) = Тип("ДокументОбъект.ПроизводственныеОперации") Тогда
					Если  СокрЛП(ДокУВС.Комментарий) = "#НезавершПроизвАЗ#" Тогда
						НЗ = РегистрыСведений.ДМ_ПроизводственныеОперацииСАвтоматическимЗакрытием.СоздатьНаборЗаписей();
						НЗ.Отбор.ПроизводственнаяОперация.Установить(ДокУВС.Ссылка);
						НЗ.Прочитать();
						Если НЗ.Количество() = 0 Тогда
							НовЗапись = НЗ.Добавить();
							НовЗапись.ПроизводственнаяОперация = ДокУВС.Ссылка;
							НовЗапись.ДатаСоздания = ТекущаяДатаСеанса();
							НЗ.Записать();
						КонецЕсли;
						ДокУВС.Комментарий = "";
						ДокУВС.Записать(РежимЗаписиДокумента.Запись);
					КонецЕсли;	
				КонецЕсли;	
				
				ДокDanone = ДокDanoneСсылка.ПолучитьОбъект();
				ДокDanone.Организация = Организация;
				ДокDanone.Предприятие = Предприятие;
				
				Если ТипЗнч(ДокDanoneСсылка) = Тип("ДокументСсылка.ДМ_ФайлыОбменаDanoneКлиент") 
					ИЛИ ТипЗнч(ДокDanoneСсылка) = Тип("ДокументСсылка.ДМ_ФайлыОбменаDanoneВнутреннееПеремещение") 
					ИЛИ ТипЗнч(ДокDanoneСсылка) = Тип("ДокументСсылка.ДМ_ФайлыОбменаDanoneИнвентаризация")
					ИЛИ ТипЗнч(ДокDanoneСсылка) = Тип("ДокументСсылка.ДМ_ФайлыОбменаDanoneПроизводство") Тогда
					Если ДокDanone.ДМ_СвязанныеДокументыУВС.Найти(ДокУВС.Ссылка) = Неопределено Тогда
						НовДокУВС = ДокDanone.ДМ_СвязанныеДокументыУВС.Добавить();
						НовДокУВС.ДМ_СвязанныйДокументУВС = ДокУВС.Ссылка;
					КонецЕсли;	
					Если ДокDanone.ДМ_СвязанныеДокументыУВС.Количество() = 1 Тогда
						//статус не меняем, если есть более одного документа УВС
						ДокDanone.СтатусДокумента = Перечисления.СтатусДокументаСФайламиSAP.УспешноОбработан;
					КонецЕсли;	
				Иначе	
					ДокDanone.ДМ_СвязанныйДокументУВС = ДокУВС.Ссылка;
					ДокDanone.СтатусДокумента = Перечисления.СтатусДокументаСФайламиSAP.УспешноОбработан;
				КонецЕсли;	
				ДокDanone.Записать();
				
				мДокДляЗаявок = Новый Массив;
				мДокДляЗаявок.Добавить(ДокУВС.Ссылка);
				ДМ_СлужебныйПривилегированный.СформироватьЗаявкиДляВетисAPI(мДокДляЗаявок);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ДокDanone = ДокDanoneСсылка.ПолучитьОбъект();
		ДокDanone.Организация = Организация;
		ДокDanone.Предприятие = Предприятие;
		
		Попытка
			ДокУВС.Записать(РежимЗаписиДокумента.Запись);
			Если ТипЗнч(ДокDanoneСсылка) = Тип("ДокументСсылка.ДМ_ФайлыОбменаDanoneКлиент") 
				ИЛИ ТипЗнч(ДокDanoneСсылка) = Тип("ДокументСсылка.ДМ_ФайлыОбменаDanoneВнутреннееПеремещение") 
				ИЛИ ТипЗнч(ДокDanoneСсылка) = Тип("ДокументСсылка.ДМ_ФайлыОбменаDanoneИнвентаризация")
				ИЛИ ТипЗнч(ДокDanoneСсылка) = Тип("ДокументСсылка.ДМ_ФайлыОбменаDanoneПроизводство") Тогда
				Если ДокDanone.ДМ_СвязанныеДокументыУВС.Найти(ДокУВС.Ссылка) = Неопределено Тогда
					НовДокУВС = ДокDanone.ДМ_СвязанныеДокументыУВС.Добавить();
					НовДокУВС.ДМ_СвязанныйДокументУВС = ДокУВС.Ссылка;
				КонецЕсли;	
			Иначе	
				ДокDanone.ДМ_СвязанныйДокументУВС = ДокУВС.Ссылка;
			КонецЕсли;	
		Исключение
		КонецПопытки;	
		
		ДокDanone.Записать();
		ДокDanone.СтатусДокумента = Перечисления.СтатусДокументаСФайламиSAP.ОшибкаПриОбработке;
		ДокDanone.Записать();
		
		
		Если ВидОперации = "ГашениеВП" Тогда
			лСтрокаСообщения = НСтр("ru = 'Ошибки при создании документа УВС.
			|Тип операции: %1
			|Документ Danone: %2
			|Документ УВС: %3'");
		Иначе
			лСтрокаСообщения = НСтр("ru = 'Ошибки при создании документа УВС.
			|Тип операции: %1
			|Документ Danone: %2'");
		КонецЕсли;	
		
		Для ош=0 по мОшибки.Количество()-1 Цикл
			лСтрокаСообщения = лСтрокаСообщения + "
			| " + мОшибки.Получить(ош);
		КонецЦикла;	
		
		Если ВидОперации = "ГашениеВП" Тогда
			лСтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( лСтрокаСообщения, ВидОперации, "" + ДокDanoneСсылка, "" + ДокУВС );
		Иначе
			лСтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( лСтрокаСообщения, ВидОперации, "" + ДокDanoneСсылка );
		КонецЕсли;	
		
		//Регистрируем сообщение
		лОписаниеСобытия = лСтрокаСообщения;
		
		ДМ_СлужебныйПривилегированный.ЗарегистрироватьСобытие( 
		ДокDanoneСсылка,
		"Обработка файлов EDI.",
		Перечисления.ДМ_УровниЖурнала.Ошибка,
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных( ТипЗнч(ДокDanoneСсылка) ),
		Строка( ДокDanoneСсылка ),
		лОписаниеСобытия);
		
	КонецЕсли;	
	
	Если мСообщения.Количество() > 0 Тогда
		
		лСтрокаСообщения = НСтр("ru = 'Сообщения при создании документа УВС.
		|Тип операции: %1
		|Документ Danone: %2'");
		
		Для ош=0 по мСообщения.Количество()-1 Цикл
			лСтрокаСообщения = лСтрокаСообщения + мСообщения.Получить(ош) + ",";
		КонецЦикла;	
		лСтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( лСтрокаСообщения, ВидОперации, "" + ДокDanoneСсылка );
		
		//Регистрируем ошибку
		лОписаниеСобытия = лСтрокаСообщения;
		
		ДМ_СлужебныйПривилегированный.ЗарегистрироватьСобытие( 
		ДокDanoneСсылка,
		"Обработка файлов EDI.",
		Перечисления.ДМ_УровниЖурнала.Информация,
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных( ТипЗнч(ДокDanoneСсылка) ),
		Строка( ДокDanoneСсылка ),
		лОписаниеСобытия);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодобратьВСДДляRECADV(СтруктураОтбора)
	
	ЗапрВСД = Новый Запрос;
	ЗапрВСД.Текст = "ВЫБРАТЬ
	|	ДокВСД.Ссылка КАК ДокВСД,
	|	ДокВСД.Дата КАК Дата,
	|	ЕСТЬNULL(СтатусыВСДСрезПоследних.СтатусВСД, &СтатусВСДПоУмолчанию) КАК СтатусВСД
	|ИЗ
	|	Документ.ВСД КАК ДокВСД
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыВСД.СрезПоследних(, ) КАК СтатусыВСДСрезПоследних
	|		ПО ДокВСД.Ссылка = СтатусыВСДСрезПоследних.ВСД
	|ГДЕ
	|	ДокВСД.ВидВСД В(&мВидыВСД)
	|	И (ДокВСД.НомерТТН = &НомерТТН
	|			ИЛИ &НомерТТН = &ПустаяСтрока)
	|	И ДокВСД.КонтрагентОтправитель = &КонтрагентОтправитель
	|	И ДокВСД.КонтрагентПолучатель = &КонтрагентПолучатель
	|	И ДокВСД.ПредприятиеОтправитель = &ПредприятиеОтправитель
	|	И ДокВСД.ПредприятиеПолучатель = &ПредприятиеПолучатель
	|	И ДокВСД.НомерПартии = &НомерПартии
	|	И ДокВСД.Продукция = &Продукция
	|	И ДокВСД.Проведен = ИСТИНА
	|	И СтатусыВСДСрезПоследних.СтатусВСД В(&мСтатусыВСД)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	ЗапрВСД.Параметры.Вставить("КонтрагентПолучатель",СтруктураОтбора.КонтрагентПолучатель);
	ЗапрВСД.Параметры.Вставить("КонтрагентОтправитель",СтруктураОтбора.КонтрагентОтправитель);
	ЗапрВСД.Параметры.Вставить("ПредприятиеПолучатель",СтруктураОтбора.ПредприятиеПолучатель);
	ЗапрВСД.Параметры.Вставить("ПредприятиеОтправитель",СтруктураОтбора.ПредприятиеОтправитель);
	ЗапрВСД.Параметры.Вставить("НомерТТН",СокрЛП(СтруктураОтбора.НомерТТН));
	ЗапрВСД.Параметры.Вставить("Продукция",СтруктураОтбора.Продукция);
	ЗапрВСД.Параметры.Вставить("НомерПартии",СтруктураОтбора.НомерПартии);
	ЗапрВСД.Параметры.Вставить("ПустаяСтрока","");
	ЗапрВСД.Параметры.Вставить("ДатаДок",СтруктураОтбора.ДатаДок);
	
	мВидыВСД = Новый Массив;
	мВидыВСД.Добавить(Перечисления.ВидыВСД.Входящий);
	мВидыВСД.Добавить(Перечисления.ВидыВСД.НаПеремещение);
	ЗапрВСД.Параметры.Вставить("мВидыВСД",мВидыВСД);
	
	мСтатусыВСД = Новый Массив;
	мСтатусыВСД.Добавить(Справочники.СтатусыВСД.Оформлен);
	мСтатусыВСД.Добавить(Справочники.СтатусыВСД.Создан);
	ЗапрВСД.Параметры.Вставить("мСтатусыВСД",мСтатусыВСД);
	ЗапрВСД.Параметры.Вставить("СтатусВСДПоУмолчанию",Справочники.СтатусыВСД.Создан);
	
	мИскВСД = ЗапрВСД.Выполнить().Выгрузить().ВыгрузитьКолонку("ДокВСД");
	
	ЗапрВСД2 = Новый Запрос;
	ЗапрВСД2.Текст = "ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПриходныеОперации.ВСД_Возврат = &ПустойВСД
	|			ТОГДА ПриходныеОперации.ВСД
	|		ИНАЧЕ ПриходныеОперации.ВСД_Возврат
	|	КОНЕЦ КАК ВСДДругойПриход
	|ИЗ
	|	Документ.ПриходныеОперации КАК ПриходныеОперации
	|ГДЕ
	|	ПриходныеОперации.Ссылка <> &НашПриход
	|	И ПриходныеОперации.ПометкаУдаления = ЛОЖЬ
	|	И (ПриходныеОперации.ВСД В (&мИскВСД)
	|			ИЛИ ПриходныеОперации.ВСД_Возврат В (&мИскВСД))";
	
	
	ЗапрВСД2.Параметры.Вставить("мИскВСД",мИскВСД);
	ЗапрВСД2.Параметры.Вставить("НашПриход",СтруктураОтбора.ДокУВС);
	ЗапрВСД2.Параметры.Вставить("ПустойВСД",Документы.ВСД.ПустаяСсылка());
	
	ВыбЗапрВСД2 = ЗапрВСД2.Выполнить().Выбрать();
	Пока ВыбЗапрВСД2.Следующий() Цикл
		мм = мИскВСД.Найти(ВыбЗапрВСД2.ВСДДругойПриход);
		Если мм <> Неопределено Тогда
			мИскВСД.Удалить(мм);
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат мИскВСД;
	
КонецФункции	

Функция ПолучитьПродукциюПолучателя(АртикулМатериалаВУСКлиента,ТекПродукция,КонтрагентПолучатель,мСообщения)
	
	ЗапрПП = Новый Запрос; 
	ЗапрПП.Текст = "ВЫБРАТЬ
	|	Продукция.Ссылка КАК ПродукцияПолучателя
	|ИЗ
	|	Справочник.Продукция КАК Продукция
	|ГДЕ
	|	Продукция.ПродукцияПолучателя = ИСТИНА
	|	И Продукция.Артикул = &АртикулМатериалаВУСКлиента
	|	И Продукция.КонтрагентПолучатель = &КонтрагентПолучатель
	|	И Продукция.ПометкаУдаления = ЛОЖЬ";
	
	ЗапрПП.Параметры.Вставить("АртикулМатериалаВУСКлиента",АртикулМатериалаВУСКлиента);
	ЗапрПП.Параметры.Вставить("КонтрагентПолучатель",КонтрагентПолучатель);
	
	ВыбЗапрПП = ЗапрПП.Выполнить().Выбрать();
	Если ВыбЗапрПП.Следующий() Тогда
		ИскПродукцияПолучателя = ВыбЗапрПП.ПродукцияПолучателя; 
	Иначе	
		ИскПП = Справочники.Продукция.СоздатьЭлемент();
		ТекП = ТекПродукция.ПолучитьОбъект();
		Для Каждого Реквизит Из ТекП.Метаданные().Реквизиты Цикл
			ИскПП[Реквизит.Имя] = ТекП[Реквизит.Имя];
		КонецЦикла;
		ИскПП.GUID_Меркурий = "";
		//GUID пустой, регистрацию в Меркурии не делаем 
		//************
		ИскПП.УстановитьНовыйКод();
		ИскПП.Владелец = ТекПродукция.Владелец;
		ИскПП.Артикул = АртикулМатериалаВУСКлиента;
		ИскПП.ПродукцияПолучателя = Истина;
		ИскПП.КонтрагентПолучатель = КонтрагентПолучатель;
		НовСП = ИскПП.СобственнаяПродукция.Добавить();
		НовСП.Продукция = ТекПродукция;
		ИскПП.Записать();
		ИскПродукцияПолучателя = ИскПП.Ссылка;
		мСообщения.Добавить("
		|Создана продукция получателя " + СокрЛП(ИскПродукцияПолучателя.Наименование) + ", получатель " + СокрЛП(КонтрагентПолучатель.Наименование) + ", артикул " + АртикулМатериалаВУСКлиента);
	КонецЕсли;	
	
	Возврат ИскПродукцияПолучателя;
	
КонецФункции	

Функция ПолучитьДатуИзСтроки(ИсхСтрДата) Экспорт
	
	Попытка
		ИскДата = Дата(ИсхСтрДата);
	Исключение
		ИскДата = Дата(1,1,1);
	КонецПопытки;	
	
	Возврат ИскДата;
	
КонецФункции	

Процедура ОбновитьСводныйПриход(ДокDanone,тзСвязанныеДокументыУВС,СтруктураОтбора)
	
	//отложено
	Если тзСвязанныеДокументыУВС.Количество() = 0 Тогда
		Возврат;
	Иначе
		ДатаСвПрих = Дата(1,1,1);
		Для Каждого ТекСтр из тзСвязанныеДокументыУВС Цикл
			ДатаСвПрих = Макс(ДатаСвПрих,ТекСтр.Приемка.Дата);
		КонецЦикла;	
	КонецЕсли;	
	
	//проверим наличие прихода по приходным операциям
	ЗапрСП = Новый Запрос;
	ЗапрСП.Текст = "ВЫБРАТЬ
	|	ПриходныеОперацииСводно.Ссылка КАК СводПрих
	|ИЗ
	|	Документ.ПриходныеОперацииСводно КАК ПриходныеОперацииСводно
	|ГДЕ
	|	ПриходныеОперацииСводно.ПометкаУдаления = ЛОЖЬ
	|	И ПриходныеОперацииСводно.ТаблицаДанных.ПриходнаяОперация В(&мПрих)";
	
	
	мПрих = тзСвязанныеДокументыУВС.ВыгрузитьКолонку("Приемка"); 
	ЗапрСП.Параметры.Вставить("мПрих",мПрих);
	ЗапрСП.Параметры.Вставить("СводПрих",ДокDanone.ДМ_СвязанныйДокументУВС);
	ЗапрСП.Параметры.Вставить("ПустойСводПрих",Документы.ПриходныеОперацииСводно.ПустаяСсылка());
	
	ВыбЗапрСП = ЗапрСП.Выполнить().Выбрать();
	Если ВыбЗапрСП.Следующий() Тогда
		СводПрих = ВыбЗапрСП.СводПрих.ПолучитьОбъект();
	Иначе
		СводПрих = Документы.ПриходныеОперацииСводно.СоздатьДокумент();
		СводПрих.Статус = Перечисления.СтатусыСводныхДокументов.Новая;
		СводПрих.Дата = ДатаСвПрих;
		СводПрих.Организация = СтруктураОтбора.Организация;
		СводПрих.КонтрагентПолучатель = СтруктураОтбора.КонтрагентПолучатель;
		СводПрих.КонтрагентОтправитель = СтруктураОтбора.КонтрагентОтправитель;
		СводПрих.ПредприятиеОтправитель = СтруктураОтбора.ПредприятиеОтправитель;
		СводПрих.ПредприятиеПолучатель = СтруктураОтбора.ПредприятиеПолучатель;
		СводПрих.НомерТТН = СтруктураОтбора.НомерТТН;
		СводПрих.ДатаТТН = СтруктураОтбора.ДатаТТН;
		СводПрих.Ответственный = Пользователи.АвторизованныйПользователь();	 
	КонецЕсли;	
	
	СводПрих.ТаблицаДанных.Очистить();
	СводПрих.СписокФизическихУпаковок.Очистить();
	МассивВСД = Новый Массив;
	Для Каждого ТекП Из тзСвязанныеДокументыУВС Цикл
		ТекПрих = ТекП.Приемка;
		Если ЗначениеЗаполнено(ТекПрих.ВСД_Возврат) Тогда
			МассивВСД.Добавить(ТекПрих.ВСД_Возврат);
		Иначе
			МассивВСД.Добавить(ТекПрих.ВСД);
		КонецЕсли;	
	КонецЦикла;	
	
	Документы.ПриходныеОперацииСводно.ЗаполнитьТаблицуВСДПриходныхОпераций(СводПрих, МассивВСД);
	
	
	СводПрих.Записать();
	ДокDanone.ДМ_СвязанныйДокументУВС = СводПрих.Ссылка;
	ДокDanone.Записать();
	
КонецПроцедуры	

Функция ПроверитьGUID(GUIDОбъекта,мОшибки,ИмяРеквизита="",НомерСтроки=0)
	
	Если СтрДлина(GUIDОбъекта) <> 36 Тогда
		Если СтрДлина(GUIDОбъекта) > 0 Тогда 
			мОшибки.Добавить("
			|Длина GUID " + GUIDОбъекта + " для подбора значения " + ИмяРеквизита + ?(НомерСтроки > 0,", № строки " + НомерСтроки, "") + " не равна 36 знаков");
		КонецЕсли;	
		Возврат 0;	
	Иначе
		Возврат 1;
	КонецЕсли;
	
КонецФункции

Функция СтрокаБезЛидирующихНулей(ИсхСтрока) Экспорт
	
	ИсхСтрока2 = СокрЛП(ИсхСтрока);
	ДлСтр = СтрДлина(ИсхСтрока2);
	Если ДлСтр > 0 Тогда 
		Для сс=1 по ДлСтр Цикл
			Если Сред(ИсхСтрока2,сс,1) <> "0" Тогда
				ИсхСтрока2 = Сред(ИсхСтрока2,сс);
				Прервать;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;	
	
	Возврат ИсхСтрока2;
	
КонецФункции	

Процедура ЗаполнитьДокументИнвентаризацииПоОстаткам(Объект) Экспорт
	
	Объект.ТаблицаПродукции.Очистить();
	Объект.СписокФизическихУпаковокПродукция.Очистить();
	
	МассивИдентификаторов = ИнтеграцияВетисAPIСлужебныйПовтИсп.ПродукцияИсключениеИзТипаЖивыеЖивотные();
	ИспользоватьОбменЧерезУниверсальныйФормат = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЧерезУниверсальныйФормат");
	МассивРазрешенныхСтатусов = ИнтеграцияВетисAPIСлужебныйПовтИсп.РазрешенныеСтатусыЗаписейСкладскогоЖурналаДляВыполненияОпераций();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыПродукции.Ссылка КАК ВидПродукции
	|ПОМЕСТИТЬ ВТ_ИсключенияИзЖивыхЖивотных
	|ИЗ
	|	Справочник.ВидыПродукции КАК ВидыПродукции
	|ГДЕ
	|	ВидыПродукции.GUID_Меркурий В(&МассивИдентификаторов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидПродукции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ТипПродукции КАК ТипПродукции,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ВидПродукции КАК ВидПродукции,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ПодвидПродукции КАК ПодвидПродукции,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.Продукция КАК Продукция,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ДатаВыработкиНачало КАК ДатаВыработкиНачало,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ДатаВыработкиОкончание КАК ДатаВыработкиОкончание,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ДатаВыработкиСтрокой КАК ДатаВыработкиСтрокой,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ДатаОкончанияСрокаГодностиНачало КАК ДатаОкончанияСрокаГодностиНачало,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ДатаОкончанияСрокаГодностиОкончание КАК ДатаОкончанияСрокаГодностиОкончание,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ДатаСрокаГодностиСтрокой КАК ДатаСрокаГодностиСтрокой,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.НекачественныйГруз КАК НекачественныйГруз,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.СкоропортящаясяПродукция КАК СкоропортящаясяПродукция,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ФорматДатыВыработки КАК ФорматДатыВыработки,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ФорматСрокаГодности КАК ФорматСрокаГодности,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.НомерПартии КАК НомерПартии,
	|	ВЫБОР
	|		КОГДА ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.НомерПартии <> """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьПартияВЗаписи,
	|	ВЫБОР
	|		КОГДА ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ТипПродукции = ЗНАЧЕНИЕ(Справочник.ТипыПродукции.ЖивыеЖивотные)
	|				И НЕ ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ВидПродукции В
	|						(ВЫБРАТЬ
	|							ВТ_ИсключенияИзЖивыхЖивотных.ВидПродукции КАК ВидПродукции
	|						ИЗ
	|							ВТ_ИсключенияИзЖивыхЖивотных КАК ВТ_ИсключенияИзЖивыхЖивотных)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТипПродукцииЖивыеЖивотные,
	|	ДвижениеПродукцииОстатки.КоличествоОстаток КАК КоличествоУчет,
	|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.СписокФизическихУпаковок.(
	|		Ссылка КАК Поле1,
	|		НомерСтроки КАК Поле2,
	|		КоличествоУпаковок КАК Поле3,
	|		НаименованиеМаркировки КАК Поле4,
	|		ТипМаркировки КАК Поле5,
	|		Упаковка КАК Поле6,
	|		УровеньУпаковки КАК Поле7
	|	) КАК СписокФизическихУпаковок
	|ИЗ
	|	РегистрНакопления.ДвижениеПродукции.Остатки(
	|			&ДатаОстатка,
	|			Организация = &Организация
	|				И Предприятие = &Предприятие) КАК ДвижениеПродукцииОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВерсииЗаписейСкладскогоЖурнала КАК ВерсииЗаписейСкладскогоЖурнала
	|		ПО ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала = ВерсииЗаписейСкладскогоЖурнала.ЗаписьСкладскогоЖурнала
	|ГДЕ
	|	ВерсииЗаписейСкладскогоЖурнала.СтатусВерсииЗаписиСкладскогоЖурнала В(&МассивРазрешенныхСтатусов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаписьСкладскогоЖурнала";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Предприятие", Объект.Предприятие);
	Запрос.УстановитьПараметр("МассивИдентификаторов", МассивИдентификаторов);
	Запрос.УстановитьПараметр("МассивРазрешенныхСтатусов", МассивРазрешенныхСтатусов);
	Запрос.УстановитьПараметр("ДатаОстатка", Новый Граница(Объект.МоментВремени(), ВидГраницы.Исключая));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЗапись = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаЗапись.Следующий() Цикл
		
		СтрокаПродукции = Объект.ТаблицаПродукции.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаПродукции, ВыборкаЗапись);
		СтрокаПродукции.GUIDСтроки = Строка(Новый УникальныйИдентификатор());
		//СтрокаПродукции.КоличествоОтклонение = СтрокаПродукции.Количество - СтрокаПродукции.КоличествоУчет;
		
		Если ИспользоватьОбменЧерезУниверсальныйФормат Тогда
			СтрокаПродукции.НоменклатураУчетнойСистемы = Справочники.НоменклатураУчетнойСистемы.ПолучитьНоменклатуруУчетнойСитсемы(ВыборкаЗапись.ЗаписьСкладскогоЖурнала);
		КонецЕсли;
		
		СтруктураДанныхВыработки = Новый Структура("ФорматДатыВыработки, СкоропортящаясяПродукция,
		|ДатаВыработкиНачало, ДатаВыработкиОкончание, ДатаВыработкиСтрокой");
		ЗаполнитьЗначенияСвойств(СтруктураДанныхВыработки, ВыборкаЗапись);
		
		//СтрокаПродукции.ПредставлениеДатыВыработки = ИнтеграцияВетисAPIКлиентСервер.СформироватьПредставлениеДатыВыработки(СтруктураДанныхВыработки);
		
		СтруктураДанныхСрокаГодности = Новый Структура("ФорматСрокаГодности, СкоропортящаясяПродукция,
		|ДатаОкончанияСрокаГодностиНачало, ДатаОкончанияСрокаГодностиОкончание, ДатаСрокаГодностиСтрокой");
		ЗаполнитьЗначенияСвойств(СтруктураДанныхСрокаГодности, ВыборкаЗапись);
		
		//СтрокаПродукции.ПредставлениеСрокаГодности = ИнтеграцияВетисAPIКлиентСервер.СформироватьПредставлениеСрокаГодности(СтруктураДанныхСрокаГодности);
		
		//УпаковкиВыборка = ВыборкаЗапись.СписокФизическихУпаковок.Выбрать();
		//Если УпаковкиВыборка.Количество() = 0 Тогда
		//	СтрокаПродукции.Упаковки = НСтр("ru = 'Без упаковок'");
		//Иначе
		//	СтрокаПродукции.Упаковки = НСтр("ru = 'Введены данные по упаковкам'");
		//	Пока УпаковкиВыборка.Следующий() Цикл
		//		СтрокаУпаковки = Объект.СписокФизическихУпаковокПродукция.Добавить();
		//		ЗаполнитьЗначенияСвойств(СтрокаУпаковки, УпаковкиВыборка);
		//		СтрокаУпаковки.GUIDСтроки = СтрокаПродукции.GUIDСтроки;
		//	КонецЦикла;
		//КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьСтатусЗаявки(ДокУВС)
	
	мСтатусОбр = Новый Массив;
	мСтатусОбр.Добавить(Справочники.СтатусыЗаявок.Отклонена);
	мСтатусОбр.Добавить(Справочники.СтатусыЗаявок.Подготовлен);
	мСтатусОбр.Добавить(Справочники.СтатусыЗаявок.Черновик);
	//мСтатусОбр.Добавить(Справочники.СтатусыЗаявок.ЗаявкаОтмененаАдминистратором);
	
	ТекСтатус = Справочники.СтатусыЗаявок.Черновик;
	
	Запр = Новый Запрос;
	Запр.Текст = "ВЫБРАТЬ
	|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.Статус КАК ТекСтатус
	|ИЗ
	|	РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.СрезПоследних КАК ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних
	|ГДЕ
	|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.ДокументСсылка = &ДокУВС";
	
	
	Запр.Параметры.Вставить("ДокУВС",ДокУВС);
	ВыбЗапр = Запр.Выполнить().Выбрать();
	Если ВыбЗапр.Следующий() Тогда
		ТекСтатус = ВыбЗапр.ТекСтатус;
	КонецЕсли;	
	
	Возврат ?(мСтатусОбр.Найти(ТекСтатус) = Неопределено,Истина,Ложь);  
	
КонецФункции	

Функция ЗапуститьФоновуюЗагрузкуССайтаНаСервереОстатки(ПараметрыФильтра, УникальныйИдентификатор, ОжидатьЗавершение)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка актуальных записей складского журнала'");
	ПараметрыВыполнения.ОжидатьЗавершение = ОжидатьЗавершение;
	ПараметрыВыполнения.ЗапуститьНеВФоне = Истина;
	
	ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне("ИнтеграцияВетисAPIОтправкаЗаявокНаОформление.ФоновоеЗаданиеЗагрузкаАктуальныхОстатков",
	ПараметрыФильтра, ПараметрыВыполнения);
	
	Возврат ФоновоеЗадание;
	
КонецФункции

Процедура ПредварительныеДействияПередЗаписьюДокументаИнвентаризации(ДокУВС, ОшибкиДопПроц = "", СоздаватьДокументыПредварительные = Ложь)
	
	МоментВремениОст = ДокУВС.Дата - 1;
	
	ПараметрыФильтра = Новый Структура;
	ПараметрыФильтра.Вставить("Организация",      ДокУВС.Организация);
	ПараметрыФильтра.Вставить("Контрагент",       ДокУВС.Контрагент);
	ПараметрыФильтра.Вставить("Предприятие",      ДокУВС.Предприятие);
	ПараметрыФильтра.Вставить("Ответственный",    Пользователи.АвторизованныйПользователь());
	ПараметрыФильтра.Вставить("ФильтрПоОстаткам", 1); //0 - отличающиеся по количеству, 1 - все с ненулевым остатком)
	ПараметрыФильтра.Вставить("ДатаНачала"   , Дата(1,1,1));
	ПараметрыФильтра.Вставить("ДатаОкончания", Дата(1,1,1));
	
	ОжидатьЗавершение = 0;
	Задание = ЗапуститьФоновуюЗагрузкуССайтаНаСервереОстатки(ПараметрыФильтра, Новый УникальныйИдентификатор, ОжидатьЗавершение);
	
	Если Задание = Неопределено Тогда
		ОшибкиДопПроц = "Ошибка процедуры загрузки актуальных остатков ";
		Возврат;
	ИначеЕсли Задание.Статус = "Ошибка" Тогда
		ОшибкиДопПроц = "Загрузка актуальных записей складского журнала не выполнена. Произошла ошибка:" + Символы.ПС + Задание.КраткоеПредставлениеОшибки;
		Возврат;
	ИначеЕсли Задание.Статус = "Выполнено" Тогда
		РезультатВыполненияОперации = ПолучитьИзВременногоХранилища(Задание.АдресРезультата);
		УдалитьИзВременногоХранилища(Задание.АдресРезультата);
		ТаблицаЗаписей = РезультатВыполненияОперации.Результат;
		
		Если Не СоздаватьДокументыПредварительные Тогда
			Возврат;
		КонецЕсли;
		
		мДокДляИнв = Новый Массив;
		
		Если ТаблицаЗаписей.Количество() > 0 Тогда
			
			ПараметрыПодключения = ИнтеграцияВетисAPIСлужебный.ПараметрыПодключенияКВетисAPI(ПараметрыФильтра.Организация, Пользователи.АвторизованныйПользователь(),, Справочники.ВидыОперацийОбменаAPI.ЗагрузкаДанныхПоЗаписямСкладскогоЖурнала);
			
			ИтоговаяТаблица = Новый ТаблицаЗначений;
			ИтоговаяТаблица.Колонки.Добавить("ЗаписьСкладскогоЖурнала", Новый ОписаниеТипов("СправочникСсылка.СвойстваЗаписейСкладскогоЖурнала"));
			ИтоговаяТаблица.Колонки.Добавить("Количество"             , ОбщегоНазначения.ОписаниеТипаЧисло(21, 6));
			ИтоговаяТаблица.Колонки.Добавить("КоличествоОстаток"      , ОбщегоНазначения.ОписаниеТипаЧисло(21, 6));
			
			Для Каждого ТекЗапись Из ТаблицаЗаписей Цикл
				
				// Если количество одинаковое, то нет смысла делать по данной записи корректировку
				Если ТекЗапись.Количество = ТекЗапись.КоличествоМеркурий Тогда
					Продолжить;
				КонецЕсли;
				
				Если ПустаяСтрока(ТекЗапись.ОписаниеОбъекта) Тогда // Такой записи нет в Меркурии, либо она уже списана в ноль
					
					НоваяСтрока = ИтоговаяТаблица.Добавить();
					НоваяСтрока.ЗаписьСкладскогоЖурнала = ТекЗапись.ЗаписьСкладскогоЖурнала;
					НоваяСтрока.Количество 				= ТекЗапись.КоличествоМеркурий;
					НоваяСтрока.КоличествоОстаток 		= ТекЗапись.Количество;
					
				Иначе
					
					ЗаписьСкладскогоЖурналаXDTO = ОбщегоНазначения.ОбъектXDTOИзСтрокиXML(ТекЗапись.ОписаниеОбъекта);
					ДанныеЗаписиСкладскогоЖурналаСтруктура = ИнтеграцияВетисAPIОбработкаПартий.ЗаписьСкладскогоЖурналаПоДаннымXDTO(ПараметрыПодключения, ПараметрыФильтра.Предприятие, ЗаписьСкладскогоЖурналаXDTO, Истина);
					
					НоваяСтрока = ИтоговаяТаблица.Добавить();
					НоваяСтрока.ЗаписьСкладскогоЖурнала = ДанныеЗаписиСкладскогоЖурналаСтруктура.ЗаписьСкладскогоЖурнала;
					НоваяСтрока.Количество              = ДанныеЗаписиСкладскогоЖурналаСтруктура.КоличествоПродукции;
					НоваяСтрока.КоличествоОстаток 		= ТекЗапись.Количество;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ИтоговаяТаблица.Количество() > 0 Тогда
				
				ЗапрДокКор = Новый Запрос;
				ЗапрДокКор.Текст = "ВЫБРАТЬ
				|	КорректировкаОстатковЗаписейСкладскогоЖурнала.Ссылка КАК ДокКор
				|ИЗ
				|	Документ.КорректировкаОстатковЗаписейСкладскогоЖурнала КАК КорректировкаОстатковЗаписейСкладскогоЖурнала
				|ГДЕ
				|	КорректировкаОстатковЗаписейСкладскогоЖурнала.Дата = &МоментВремени
				|	И КорректировкаОстатковЗаписейСкладскогоЖурнала.Организация = &Организация
				|	И КорректировкаОстатковЗаписейСкладскогоЖурнала.Контрагент = &Контрагент
				|	И КорректировкаОстатковЗаписейСкладскогоЖурнала.Предприятие = &Предприятие
				|	И КорректировкаОстатковЗаписейСкладскогоЖурнала.ПометкаУдаления = Ложь";
				
				ЗапрДокКор.Параметры.Вставить("Организация", ДокУВС.Организация);
				ЗапрДокКор.Параметры.Вставить("Контрагент", ДокУВС.Контрагент);
				ЗапрДокКор.Параметры.Вставить("Предприятие", ДокУВС.Предприятие);
				ЗапрДокКор.Параметры.Вставить("МоментВремени", МоментВремениОст);
				
				ВыбЗапрДокКор = ЗапрДокКор.Выполнить().Выбрать();
				Если ВыбЗапрДокКор.Следующий() Тогда
					ДокумКор = ВыбЗапрДокКор.ДокКор.ПолучитьОбъект();
				Иначе
					ДокумКор = Документы.КорректировкаОстатковЗаписейСкладскогоЖурнала.СоздатьДокумент();
					ДокумКор.Дата = МоментВремениОст;
					ДокумКор.Организация = ДокУВС.Организация;
					ДокумКор.УстановитьНовыйНомер();
					ДокумКор.Контрагент = ДокУВС.Контрагент;
					ДокумКор.Предприятие = ДокУВС.Предприятие;
					ДокумКор.Ответственный = Пользователи.АвторизованныйПользователь();
				КонецЕсли;	
				
				ДокумКор.Комментарий = "Для док-та " + ДокУВС;
				ДокумКор.ТаблицаЗаписейСкладскогоЖурнала.Загрузить(ИтоговаяТаблица);
				ДокумКор.Записать(РежимЗаписиДокумента.Проведение);
				
				мДокДляИнв.Добавить("" + ДокумКор);
				
			КонецЕсли;	
			
		КонецЕсли;	
		
		Если мДокДляИнв.Количество() > 0 Тогда
			ОшибкиДопПроц = "Созданы (перезаполнены) документы:
			|";
			Для мм=0 по мДокДляИнв.Количество()-1 Цикл
				ОшибкиДопПроц = ОшибкиДопПроц + мДокДляИнв.Получить(мм) + ",";
			КонецЦикла;	
		КонецЕсли;	
		
		//объединение записей скл.журнала выполняется после получения инвентаризацией успешного статуса
		
		
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры	

// Создает и заполняет типовой документ УВС на основе данных из EDI-файлов 
//
// Параметры:
//  ВидОперации  - Текстовое поле, определяющее вид запроса SAP
//  ДокDanoneСсылка  - ссылка на документ с файлов (ФайлыОбменаDanone)
//  тзЗаголовок  - таблица значений с данными заголовка документа
//  тзМатериалы  - таблица значений с данными про номенклатуру документа
//
//
Процедура ЗаполнитьДокументыУВС(ВидОперации,ДокDanoneСсылка,тзЗаголовок,тзМатериалы,ЗапросСразуНаГашение = Ложь) 
	
	мОшибки = Новый Массив;
	мСообщения = Новый Массив;
	
	Если ВидОперации = "ОтгрузкаКлиент" Тогда
		ТектзЗаголовок = тзЗаголовок.Получить(0);
		
		тзТО = Новый ТаблицаЗначений;
		тзТО.Колонки.Добавить("ТО",Новый ОписаниеТипов("ДокументСсылка.ТранспортныеОперации"));
		тзТО.Колонки.Добавить("НомерТТН",Новый ОписаниеТипов("Строка"));
		
		Если ДокDanoneСсылка.ДМ_СвязанныеДокументыУВС.Количество() > 0 Тогда
			Для Каждого ТекСвДокУВС из ДокDanoneСсылка.ДМ_СвязанныеДокументыУВС Цикл
				НовтзТО = тзТО.Добавить();
				НовтзТО.ТО = ТекСвДокУВС.ДМ_СвязанныйДокументУВС;
				НовтзТО.НомерТТН = ТекСвДокУВС.ДМ_СвязанныйДокументУВС.НомерТТН;
			КонецЦикла;
		ИначеЕсли Не ДокDanoneСсылка.ДМ_СвязанныйДокументУВС.Пустая() Тогда
			НовтзТО = тзТО.Добавить();
			НовтзТО.ТО = ДокDanoneСсылка.ДМ_СвязанныйДокументУВС;
			НовтзТО.НомерТТН = ДокDanoneСсылка.ДМ_СвязанныйДокументУВС.НомерТТН;
			Если ДокDanoneСсылка.ДМ_СвязанныеДокументыУВС.Найти(ДокDanoneСсылка.ДМ_СвязанныйДокументУВС) = Неопределено Тогда
				ДокDanone = ДокDanoneСсылка.ПолучитьОбъект();
				НовДокУВС = ДокDanone.ДМ_СвязанныеДокументыУВС.Добавить();
				НовДокУВС.ДМ_СвязанныйДокументУВС = ДокDanone.ДМ_СвязанныйДокументУВС;
				ДокDanone.Записать();
			КонецЕсли;
		КонецЕсли;	
		
		ИсктзТО = тзТО.Найти(ТектзЗаголовок.НомерТТН_ТН_ПоставкиВУСДанон,"НомерТТН");
		Если ИсктзТО <> Неопределено Тогда
			ДокУВС = ИсктзТО.ТО.ПолучитьОбъект();
			Если ПроверитьСтатусЗаявки(ДокУВС.Ссылка) Тогда
				Возврат;
			КонецЕсли;	
		Иначе	
			ДокУВС = Документы.ТранспортныеОперации.СоздатьДокумент();
			ДокУВС.Дата = ПолучитьДатуИзСтроки(ТектзЗаголовок.ДатаDESADV);
			ДокУВС.УстановитьНовыйНомер();
		КонецЕсли;
		
		ДокУВС.ДатаТТН = ПолучитьДатуИзСтроки(ТектзЗаголовок.ДатаТТН_ТН_ПоставкиВУСДанон);
		ДокУВС.НомерТТН = ТектзЗаголовок.НомерТТН_ТН_ПоставкиВУСДанон;
		ДокУВС.Ответственный = Пользователи.АвторизованныйПользователь();
		ДокУВС.ДМ_ДопНомерДокументаОтгрузки = ТектзЗаголовок.ДопНомерДокументаОтгрузкиДляТрекера;
		ДокУВС.ДМ_НомерДокументаВСистемеДанон = ТектзЗаголовок.НомерТТН_ТН_ПоставкиВУСДанон;
		ДокУВС.ДМ_ТипОперацииВМеркурии = "Desadv_Клиент";
		ДокУВС.ДМ_ТипЭлектронногоСообщения = "";
		Если ПроверитьGUID(ТектзЗаголовок.GUIDГрузоотправителя,мОшибки,"ПредприятиеОтправитель") = 1 Тогда
			ДокУВС.ПредприятиеОтправитель = ПолучитьОбъектПоGUID(ТектзЗаголовок.GUIDГрузоотправителя, "Предприятия",,мСообщения,"Предприятие-отправитель создан по GUIDГрузоотправителя");
		КонецЕсли;
		//ДокУВС.Организация = ДМ_СлужебныйПривилегированный.ПолучитьОрганизациюПоПредприятию(ДокУВС.ПредприятиеОтправитель);
		Если ПроверитьGUID(ТектзЗаголовок.GUIDГрузополучателя,мОшибки,"ПредприятиеПолучатель") = 1 Тогда
			ДокУВС.ПредприятиеПолучатель = ПолучитьОбъектПоGUID(ТектзЗаголовок.GUIDГрузополучателя, "Предприятия",,мСообщения,"Предприятие-получатель создан по GUIDГрузополучателя");
		КонецЕсли;	
		Если ПроверитьGUID(ТектзЗаголовок.GUIDПродавца,мОшибки,"КонтрагентОтправитель") = 1 Тогда
			ДокУВС.КонтрагентОтправитель = ПолучитьОбъектПоGUID(ТектзЗаголовок.GUIDПродавца,"Контрагенты",,мСообщения,"Контрагент-отправитель создан по GUIDПродавца");
			НастройкиПодключения = ДМ_ВызовСервераПовтИсп.НастройкаПодключенияКВетисAPIПоКонтрагенту(ДокУВС.КонтрагентОтправитель);
			Если НастройкиПодключения.Свойство("Организация") Тогда
				ДокУВС.Организация = НастройкиПодключения.Организация;
			Иначе
				мОшибки.Добавить("
				|Не найдена организация по хозсубъекту " + СокрЛП(ДокУВС.КонтрагентОтправитель.Наименование));
			КонецЕсли;		
		КонецЕсли;	
		Если ПроверитьGUID(ТектзЗаголовок.GUIDПокупателя_Клиента,мОшибки,"КонтрагентПолучатель") = 1 Тогда
			ДокУВС.КонтрагентПолучатель = ПолучитьОбъектПоGUID(ТектзЗаголовок.GUIDПокупателя_Клиента, "Контрагенты",,мСообщения,"Контрагент-отправитель создан по GUIDПокупателя_Клиента");
		КонецЕсли;	
		ПолучитьСвязьПредприятияИКонтрагента(ДокУВС.КонтрагентОтправитель,ДокУВС.ПредприятиеОтправитель);
		ПолучитьСвязьПредприятияИКонтрагента(ДокУВС.КонтрагентПолучатель,ДокУВС.ПредприятиеПолучатель);
		ДокУВС.ТипТТН = Справочники.ТипыТТН.ТТН;
		//транспорт
		ЗапрТр = Новый Запрос;
		Если ТектзЗаголовок.ТипТранспорта = "73" Тогда
			
			ЗапрТр.Текст = "ВЫБРАТЬ
			|	Транспорт.Ссылка КАК ИскТранспорт
			|ИЗ
			|	Справочник.Транспорт КАК Транспорт
			|ГДЕ
			|	Транспорт.ТипТС = &ТипТС
			|	И Транспорт.НомерВагона = &НомерВагона";
			
			ЗапрТр.Параметры.Вставить("ТипТС",Справочники.ТипыТранспортныхСредств.Железнодорожный);
			ЗапрТр.Параметры.Вставить("НомерВагона",СокрЛП(ТектзЗаголовок.ГосНомерАвтомобиля)); // номер вагона ??
			
			ВыбЗапр = ЗапрТр.Выполнить().Выбрать();
			Если ВыбЗапр.Следующий() Тогда
				ТекТранспорт = ВыбЗапр.ИскТранспорт;
			Иначе
				НовТранспорт = Справочники.Транспорт.СоздатьЭлемент();
				НовТранспорт.ТипТС = Справочники.ТипыТранспортныхСредств.Железнодорожный;
				НовТранспорт.Наименование = СокрЛП(ТектзЗаголовок.ГосНомерАвтомобиля) + " " + СокрЛП(Справочники.ТипыТранспортныхСредств.Железнодорожный.Наименование);
				НовТранспорт.НомерВагона = СокрЛП(ТектзЗаголовок.ГосНомерАвтомобиля);
				НовТранспорт.Записать();
				ТекТранспорт = НовТранспорт.Ссылка;
			КонецЕсли;	
			
		Иначе
			
			ЗапрТр.Текст = "ВЫБРАТЬ
			|	Транспорт.Ссылка КАК ИскТранспорт
			|ИЗ
			|	Справочник.Транспорт КАК Транспорт
			|ГДЕ
			|	Транспорт.ТипТС = &ТипТС
			|	И Транспорт.НомерАвтомобиля = &НомерАвтомобиля
			|	И Транспорт.НомерПП = &НомерПП";
			
			ЗапрТр.Параметры.Вставить("ТипТС",Справочники.ТипыТранспортныхСредств.Автомобильный);
			ЗапрТр.Параметры.Вставить("НомерАвтомобиля",СокрЛП(ТектзЗаголовок.ГосНомерАвтомобиля));
			ЗапрТр.Параметры.Вставить("НомерПП",СокрЛП(ТектзЗаголовок.ГосНомерПрицепа_Полуприцепа));
			
			ВыбЗапр = ЗапрТр.Выполнить().Выбрать();
			Если ВыбЗапр.Следующий() Тогда
				ТекТранспорт = ВыбЗапр.ИскТранспорт;
			Иначе
				НовТранспорт = Справочники.Транспорт.СоздатьЭлемент();
				НовТранспорт.ТипТС = Справочники.ТипыТранспортныхСредств.Автомобильный;
				НовТранспорт.Наименование = СокрЛП(ТектзЗаголовок.ГосНомерАвтомобиля) + " " + СокрЛП(ТектзЗаголовок.ГосНомерПрицепа_Полуприцепа) + " " + СокрЛП(Справочники.ТипыТранспортныхСредств.Автомобильный.Наименование);
				НовТранспорт.НомерАвтомобиля = СокрЛП(ТектзЗаголовок.ГосНомерАвтомобиля);
				НовТранспорт.НомерПП = СокрЛП(ТектзЗаголовок.ГосНомерПрицепа_Полуприцепа);
				НовТранспорт.Записать();
				ТекТранспорт = НовТранспорт.Ссылка;
			КонецЕсли;	
			
		КонецЕсли;
		
		ДокУВС.Транспорт = ТекТранспорт;
		ДокУВС.СпособХраненияПриПеревозке = Справочники.СпособыХраненияПродукцииПриПеревозке.Охлаждаемый;
		Если ПроверитьGUID(ТектзЗаголовок.GUIDКомпанииПеревозчика,мОшибки,"Посредник") = 1 Тогда
			ДокУВС.Посредник = ПолучитьОбъектПоGUID(ТектзЗаголовок.GUIDКомпанииПеревозчика, "Контрагенты",,мСообщения,"Посредник создан по GUIDКомпанииПеревозчика");
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТектзЗаголовок.ГосНомерВторогоАвтомобиля) ИЛИ Не ПустаяСтрока(ТектзЗаголовок.ГосНомерВторогоПрицепа_Полуприцепа) Тогда
			ДопСтрокаТР2 = ?(Не ПустаяСтрока(ТектзЗаголовок.ГосНомерВторогоАвтомобиля)," гос.номер 2-го автомобиля " + ТектзЗаголовок.ГосНомерВторогоАвтомобиля,"");
			Если Не ПустаяСтрока(ТектзЗаголовок.ГосНомерВторогоПрицепа_Полуприцепа) Тогда
				ДопСтрокаТР2 = ДопСтрокаТР2 + " " + " гос.номер 2-го прицепа " + ТектзЗаголовок.ГосНомерВторогоПрицепа_Полуприцепа;
			КонецЕсли;	
			ДокУВС.ТаблицаМаршрутСледования.Очистить();
			НовТМС = ДокУВС.ТаблицаМаршрутСледования.Добавить();
			НовТМС.ОсуществляетсяПерегрузка = Истина;
			
			Если Не ПустаяСтрока(ТектзЗаголовок.GUIDТочкиПерегрузкиПриМультимодальныхПеревозках) Тогда
				Если ПроверитьGUID(ТектзЗаголовок.GUIDТочкиПерегрузкиПриМультимодальныхПеревозках,мОшибки,"НазваниеПункта") = 1 Тогда
					НовТМС.НазваниеПункта = ПолучитьОбъектПоGUID(ТектзЗаголовок.GUIDТочкиПерегрузкиПриМультимодальныхПеревозках, "Предприятия",,мСообщения,"Предприятие-ПунктПерегрузки создан по GUIDТочкиПерегрузкиПриМультимодальныхПеревозках");
				КонецЕсли;
			Иначе
				мОшибки.Добавить("
				|Поставка мультимодальная, но не указана точка перегруза (" + ДопСтрокаТР2 + ")");	
			КонецЕсли;	
			
			ЗапрТр.Текст = "ВЫБРАТЬ
			|	Транспорт.Ссылка КАК ИскТранспорт
			|ИЗ
			|	Справочник.Транспорт КАК Транспорт
			|ГДЕ
			|	Транспорт.ТипТС = &ТипТС
			|	И Транспорт.НомерАвтомобиля = &НомерАвтомобиля
			|	И Транспорт.НомерПП = &НомерПП";
			
			ЗапрТр.Параметры.Вставить("ТипТС",Справочники.ТипыТранспортныхСредств.Автомобильный);
			ЗапрТр.Параметры.Вставить("НомерАвтомобиля",СокрЛП(ТектзЗаголовок.ГосНомерВторогоАвтомобиля));
			ЗапрТр.Параметры.Вставить("НомерПП",СокрЛП(ТектзЗаголовок.ГосНомерВторогоПрицепа_Полуприцепа));
			
			ВыбЗапр = ЗапрТр.Выполнить().Выбрать();
			Если ВыбЗапр.Следующий() Тогда
				ТекТранспорт = ВыбЗапр.ИскТранспорт;
			Иначе
				НовТранспорт = Справочники.Транспорт.СоздатьЭлемент();
				НовТранспорт.ТипТС = Справочники.ТипыТранспортныхСредств.Автомобильный;
				НовТранспорт.Наименование = СокрЛП(ТектзЗаголовок.ГосНомерВторогоАвтомобиля) + " " + СокрЛП(ТектзЗаголовок.ГосНомерВторогоПрицепа_Полуприцепа) + " " + СокрЛП(Справочники.ТипыТранспортныхСредств.Автомобильный.Наименование);
				НовТранспорт.НомерАвтомобиля = СокрЛП(ТектзЗаголовок.ГосНомерВторогоАвтомобиля);
				НовТранспорт.НомерПП = СокрЛП(ТектзЗаголовок.ГосНомерВторогоПрицепа_Полуприцепа);
				НовТранспорт.Записать();
				ТекТранспорт = НовТранспорт.Ссылка;
			КонецЕсли;	
			НовТМС.ИнформацияОСледующемТранспорте = ТекТранспорт;
		КонецЕсли;
		
		ДокУВС.ТаблицаПродукция.Очистить();
		
		тзОст = ЗаполнитьТаблицуПродукцииПоОстаткам(ДокУВС,ДокУВС.ПредприятиеОтправитель);
		
		ош=0;
		номСтр = 0;
		КвоОшибокОстатков = 0;
		Для Каждого ТекТ из тзМатериалы Цикл
			Если ВРЕГ(ТекТ.ИдентификаторПоднадзорностиПродукта) <> "RELEVANT FOR MERCURY" Тогда
				Продолжить;
			КонецЕсли;	
			номСтр = номСтр + 1;
			//поиск продукции пока по АртикулМатериалаВУСДанон
			//ТекПродукция = Справочники.Продукция.НайтиПоРеквизиту("Артикул",СтрокаБезЛидирующихНулей(ТекТ.АртикулМатериалаВУСДанон));
			СтрПодбораПродукции = ПодобратьПродукциюПоАртикулу(СтрокаБезЛидирующихНулей(ТекТ.АртикулМатериалаВУСДанон),НомСтр);
			ТекПродукция = СтрПодбораПродукции.ТекПрод;
			Если Не ПустаяСтрока(СтрПодбораПродукции.СообщенияПодбораПродукции) Тогда
				мСообщения.Добавить(СтрПодбораПродукции.СообщенияПодбораПродукции);
			КонецЕсли;	
			Если ТекПродукция = Справочники.Продукция.ПустаяСсылка() Тогда
				мОшибки.Добавить(СтрПодбораПродукции.ОшибкиПодбораПродукции);
				Продолжить;
			КонецЕсли;
			
			Если ПустаяСтрока(ТекТ.АртикулМатериалаВУСКлиента) Тогда
				ПродукцияПолучателя = Справочники.Продукция.ПустаяСсылка();
			Иначе	
				ПродукцияПолучателя = ПолучитьПродукциюПолучателя(ТекТ.АртикулМатериалаВУСКлиента,ТекПродукция,ДокУВС.КонтрагентПолучатель,мСообщения);
			КонецЕсли;	
			
			СтрОтбор = Новый Структура;
			СтрОтбор.Вставить("Продукция",ТекПродукция);
			СтрОтбор.Вставить("НомерПартии",ТекТ.НомерПартии);
			мСтрПрод = тзОст.НайтиСтроки(СтрОтбор);
			//отбор с номером партии
			КвоРеал = Число(ТекТ.Вес);
			Если мСтрПрод.Количество() > 0 Тогда
				Если КвоРеал > 0 Тогда
					Для сс=0 по мСтрПрод.Количество()-1 Цикл
						ТекСтр = мСтрПрод.Получить(сс);
						ТекОстаток = ТекСтр.Количество - ТекСтр.Списано;
						Если ТекОстаток > 0 Тогда
							КвоСписание = Мин(ТекОстаток,КвоРеал);
							Если КвоСписание > 0 Тогда
								СтрокаПродукции = ДокУВС.ТаблицаПродукция.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаПродукции, ТекСтр);
								СтрокаПродукции.Количество = КвоСписание;
								РеквизитыПоУмолчанию = ЗаполнениеРеквизитовОбъектов.ПолучитьЗначенияРеквизитовЗаполнения("Документ.ТранспортныеОперации","ТаблицаПродукция");
								Если РеквизитыПоУмолчанию.Свойство("БлагополучиеМестности") Тогда
									СтрокаПродукции.БлагополучиеМестности = РеквизитыПоУмолчанию.БлагополучиеМестности;
								КонецЕсли;	
								Если РеквизитыПоУмолчанию.Свойство("НазначениеГруза") Тогда
									СтрокаПродукции.НазначениеГруза = РеквизитыПоУмолчанию.НазначениеГруза;
								КонецЕсли;	
								СтрокаПродукции.ПродукцияПолучателя = ПродукцияПолучателя;
								СтрокаПродукции.ПроводиласьВетсанэкспертиза = Справочники.РезультатыЛабораторногоИсследования.НайтиПоКоду(ВРЕГ(ТекТ.РезультатВСЭ));
								КвоРеал = КвоРеал - КвоСписание;
								ТекСтр.Списано = ТекСтр.Списано + КвоСписание;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;	
				КонецЕсли;
			КонецЕсли;
			
			Если КвоРеал > 0 Тогда
				КвоОшибокОстатков = КвоОшибокОстатков + 1;
				Если КвоОшибокОстатков = 1 Тогда
					мОшибки.Добавить("
					|Предприятие - " + ?(ЗначениеЗаполнено(ДокУВС.ПредприятиеОтправитель),СокрЛП(ДокУВС.ПредприятиеОтправитель.Наименование),"*** не определено (GUID пустой)***"));
				КонецЕсли;
				мОшибки.Добавить("
				|Продукция " + СокрЛП(ТекПродукция.Наименование) + ", № партии " + ТекТ.НомерПартии + " на остатке не хватает " + КвоРеал + " " + ТекПродукция.ЕдиницаИзмерения);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаписатьОшибкиСозданияДокументаУВС(ДокУВС,ДокDanoneСсылка,"ОтгрузкаКлиент",ДокУВС.Организация,ДокУВС.ПредприятиеОтправитель,мОшибки,мСообщения);
		
	ИначеЕсли ВидОперации = "ОтгрузкаВнутренняя" Тогда
		
		
		ТектзЗаголовок = тзЗаголовок.Получить(0);
		
		тзТО = Новый ТаблицаЗначений;
		тзТО.Колонки.Добавить("ТО",Новый ОписаниеТипов("ДокументСсылка.ТранспортныеОперации"));
		тзТО.Колонки.Добавить("НомерТТН",Новый ОписаниеТипов("Строка"));
		
		Если ДокDanoneСсылка.ДМ_СвязанныеДокументыУВС.Количество() > 0 Тогда
			Для Каждого ТекСвДокУВС из ДокDanoneСсылка.ДМ_СвязанныеДокументыУВС Цикл
				НовтзТО = тзТО.Добавить();
				НовтзТО.ТО = ТекСвДокУВС.ДМ_СвязанныйДокументУВС;
				НовтзТО.НомерТТН = ТекСвДокУВС.ДМ_СвязанныйДокументУВС.НомерТТН;
			КонецЦикла;
		ИначеЕсли Не ДокDanoneСсылка.ДМ_СвязанныйДокументУВС.Пустая() Тогда
			НовтзТО = тзТО.Добавить();
			НовтзТО.ТО = ДокDanoneСсылка.ДМ_СвязанныйДокументУВС;
			НовтзТО.НомерТТН = ДокDanoneСсылка.ДМ_СвязанныйДокументУВС.НомерТТН;
			Если ДокDanoneСсылка.ДМ_СвязанныеДокументыУВС.Найти(ДокDanoneСсылка.ДМ_СвязанныйДокументУВС) = Неопределено Тогда
				ДокDanone = ДокDanoneСсылка.ПолучитьОбъект();
				НовДокУВС = ДокDanone.ДМ_СвязанныеДокументыУВС.Добавить();
				НовДокУВС.ДМ_СвязанныйДокументУВС = ДокDanone.ДМ_СвязанныйДокументУВС;
				ДокDanone.Записать();
			КонецЕсли;
		КонецЕсли;	
		
		ИсктзТО = тзТО.Найти(ТектзЗаголовок.НомерТТН_ТН_ПоставкиВУСДанон,"НомерТТН");
		Если ИсктзТО <> Неопределено Тогда
			ДокУВС = ИсктзТО.ТО.ПолучитьОбъект();
			Если ПроверитьСтатусЗаявки(ДокУВС.Ссылка) Тогда
				Возврат;
			КонецЕсли;	
		Иначе	
			ДокУВС = Документы.ТранспортныеОперации.СоздатьДокумент();
			ДокУВС.Дата = ПолучитьДатуИзСтроки(ТектзЗаголовок.ДатаDESADV);
			ДокУВС.УстановитьНовыйНомер();
		КонецЕсли;
		
		ДокУВС.ДатаТТН = ПолучитьДатуИзСтроки(ТектзЗаголовок.ДатаТТН_ТН_ПоставкиВУСДанон);
		ДокУВС.НомерТТН = ТектзЗаголовок.НомерТТН_ТН_ПоставкиВУСДанон;
		ДокУВС.Ответственный = Пользователи.АвторизованныйПользователь();
		ДокУВС.ДМ_ДопНомерДокументаОтгрузки = ТектзЗаголовок.ДопНомерДокументаОтгрузкиДляТрекера;
		ДокУВС.ДМ_НомерДокументаВСистемеДанон = ТектзЗаголовок.НомерТТН_ТН_ПоставкиВУСДанон;
		ДокУВС.ДМ_ТипОперацииВМеркурии = "Desadv_Внутренний";
		ДокУВС.ДМ_ТипЭлектронногоСообщения = "";
		
		ПризнакВозврата = ?(ВРЕГ(ТектзЗаголовок.ПризнакВозврата) = "ВОЗВРАТНАЯ ПОСТАВКА",Истина,Ложь);
		
		Если Не ПризнакВозврата Тогда
			Если ПроверитьGUID(ТектзЗаголовок.GUIDГрузоотправителя,мОшибки,"ПредприятиеОтправитель") = 1 Тогда
				ДокУВС.ПредприятиеОтправитель = ПолучитьОбъектПоGUID(ТектзЗаголовок.GUIDГрузоотправителя, "Предприятия",,мСообщения,"Предприятие-отправитель создан по GUIDГрузоотправителя");
			КонецЕсли;
			Если ПроверитьGUID(ТектзЗаголовок.GUIDГрузополучателя,мОшибки,"ПредприятиеПолучатель") = 1 Тогда
				ДокУВС.ПредприятиеПолучатель = ПолучитьОбъектПоGUID(ТектзЗаголовок.GUIDГрузополучателя, "Предприятия",,мСообщения,"Предприятие-получатель создан по GUIDГрузополучателя");
			КонецЕсли;
			ДокУВС.КонтрагентОтправитель = ДМ_СлужебныйПривилегированный.ПолучитьКонтрагентаПоПредприятию(ДокУВС.ПредприятиеОтправитель);
			ДокУВС.КонтрагентПолучатель = ДМ_СлужебныйПривилегированный.ПолучитьКонтрагентаПоПредприятию(ДокУВС.ПредприятиеПолучатель);
		Иначе
			Если ПроверитьGUID(ТектзЗаголовок.GUIDГрузоотправителя,мОшибки,"ПредприятиеПолучатель") = 1 Тогда
				ДокУВС.ПредприятиеПолучатель = ПолучитьОбъектПоGUID(ТектзЗаголовок.GUIDГрузоотправителя, "Предприятия",,мСообщения,"Предприятие-получатель создан по GUIDГрузоотправителя");
			КонецЕсли;
			Если ПроверитьGUID(ТектзЗаголовок.GUIDГрузополучателя,мОшибки,"ПредприятиеОтправитель") = 1 Тогда
				ДокУВС.ПредприятиеОтправитель = ПолучитьОбъектПоGUID(ТектзЗаголовок.GUIDГрузополучателя, "Предприятия",,мСообщения,"Предприятие-отправитель создан по GUIDГрузополучателя");
			КонецЕсли;
			ДокУВС.КонтрагентПолучатель = ДМ_СлужебныйПривилегированный.ПолучитьКонтрагентаПоПредприятию(ДокУВС.ПредприятиеПолучатель);
			ДокУВС.КонтрагентОтправитель = ДМ_СлужебныйПривилегированный.ПолучитьКонтрагентаПоПредприятию(ДокУВС.ПредприятиеОтправитель);
		КонецЕсли;
		
		//ДокУВС.Организация = ДМ_СлужебныйПривилегированный.ПолучитьОрганизациюПоПредприятию(ДокУВС.ПредприятиеОтправитель);
		НастройкиПодключения = ДМ_ВызовСервераПовтИсп.НастройкаПодключенияКВетисAPIПоКонтрагенту(ДокУВС.КонтрагентОтправитель);
		Если НастройкиПодключения.Свойство("Организация") Тогда
			ДокУВС.Организация = НастройкиПодключения.Организация;
		Иначе
			мОшибки.Добавить("
			|Не найдена организация по хозсубъекту " + СокрЛП(ДокУВС.КонтрагентОтправитель.Наименование));
		КонецЕсли;
		ПолучитьСвязьПредприятияИКонтрагента(ДокУВС.КонтрагентОтправитель,ДокУВС.ПредприятиеОтправитель);
		ПолучитьСвязьПредприятияИКонтрагента(ДокУВС.КонтрагентПолучатель,ДокУВС.ПредприятиеПолучатель);
		
		ДокУВС.ТипТТН = Справочники.ТипыТТН.ТТН;
		//транспорт
		ЗапрТр = Новый Запрос;
		Если ТектзЗаголовок.ТипТранспорта = "73" Тогда
			
			ЗапрТр.Текст = "ВЫБРАТЬ
			|	Транспорт.Ссылка КАК ИскТранспорт
			|ИЗ
			|	Справочник.Транспорт КАК Транспорт
			|ГДЕ
			|	Транспорт.ТипТС = &ТипТС
			|	И Транспорт.НомерВагона = &НомерВагона";
			
			ЗапрТр.Параметры.Вставить("ТипТС",Справочники.ТипыТранспортныхСредств.Железнодорожный);
			ЗапрТр.Параметры.Вставить("НомерВагона",СокрЛП(ТектзЗаголовок.ГосНомерАвтомобиля)); // номер вагона ??
			
			ВыбЗапр = ЗапрТр.Выполнить().Выбрать();
			Если ВыбЗапр.Следующий() Тогда
				ТекТранспорт = ВыбЗапр.ИскТранспорт;
			Иначе
				НовТранспорт = Справочники.Транспорт.СоздатьЭлемент();
				НовТранспорт.ТипТС = Справочники.ТипыТранспортныхСредств.Железнодорожный;
				НовТранспорт.Наименование = СокрЛП(ТектзЗаголовок.ГосНомерАвтомобиля) + " " + СокрЛП(Справочники.ТипыТранспортныхСредств.Железнодорожный.Наименование);
				НовТранспорт.НомерВагона = СокрЛП(ТектзЗаголовок.ГосНомерАвтомобиля);
				НовТранспорт.Записать();
				ТекТранспорт = НовТранспорт.Ссылка;
			КонецЕсли;	
			
		Иначе
			
			ЗапрТр.Текст = "ВЫБРАТЬ
			|	Транспорт.Ссылка КАК ИскТранспорт
			|ИЗ
			|	Справочник.Транспорт КАК Транспорт
			|ГДЕ
			|	Транспорт.ТипТС = &ТипТС
			|	И Транспорт.НомерАвтомобиля = &НомерАвтомобиля
			|	И Транспорт.НомерПП = &НомерПП";
			
			ЗапрТр.Параметры.Вставить("ТипТС",Справочники.ТипыТранспортныхСредств.Автомобильный);
			ЗапрТр.Параметры.Вставить("НомерАвтомобиля",СокрЛП(ТектзЗаголовок.ГосНомерАвтомобиля));
			ЗапрТр.Параметры.Вставить("НомерПП",СокрЛП(ТектзЗаголовок.ГосНомерПрицепа_Полуприцепа));
			
			ВыбЗапр = ЗапрТр.Выполнить().Выбрать();
			Если ВыбЗапр.Следующий() Тогда
				ТекТранспорт = ВыбЗапр.ИскТранспорт;
			Иначе
				НовТранспорт = Справочники.Транспорт.СоздатьЭлемент();
				НовТранспорт.ТипТС = Справочники.ТипыТранспортныхСредств.Автомобильный;
				НовТранспорт.Наименование = СокрЛП(ТектзЗаголовок.ГосНомерАвтомобиля) + " " + СокрЛП(ТектзЗаголовок.ГосНомерПрицепа_Полуприцепа) + " " + СокрЛП(Справочники.ТипыТранспортныхСредств.Автомобильный.Наименование);
				НовТранспорт.НомерАвтомобиля = СокрЛП(ТектзЗаголовок.ГосНомерАвтомобиля);
				НовТранспорт.НомерПП = СокрЛП(ТектзЗаголовок.ГосНомерПрицепа_Полуприцепа);
				НовТранспорт.Записать();
				ТекТранспорт = НовТранспорт.Ссылка;
			КонецЕсли;	
			
			
		КонецЕсли;
		
		ДокУВС.Транспорт = ТекТранспорт;
		ДокУВС.СпособХраненияПриПеревозке = Справочники.СпособыХраненияПродукцииПриПеревозке.Охлаждаемый;
		Если ПроверитьGUID(ТектзЗаголовок.GUIDКомпанииПеревозчика,мОшибки,"Посредник") = 1 Тогда
			ДокУВС.Посредник = ПолучитьОбъектПоGUID(ТектзЗаголовок.GUIDКомпанииПеревозчика, "Контрагенты",,мСообщения,"Посредник создан по GUIDКомпанииПеревозчика");
		КонецЕсли;	
		
		ДокУВС.ТаблицаПродукция.Очистить();
		
		тзОст = ЗаполнитьТаблицуПродукцииПоОстаткам(ДокУВС,ДокУВС.ПредприятиеОтправитель);
		
		ош=0;
		КвоОшибокОстатков = 0;
		НомСтр = 0;
		//ЗапросСразуНаГашение = Ложь;
		Для Каждого ТекТ из тзМатериалы Цикл
			Если ВРЕГ(ТекТ.ИдентификаторПоднадзорностиПродукта) <> "RELEVANT FOR MERCURY" Тогда
				Продолжить;
			КонецЕсли;	
			номСтр = номСтр + 1;
			//поиск продукции по АртикулМатериалаВУСДанон
			//ТекПродукция = Справочники.Продукция.НайтиПоРеквизиту("Артикул",СтрокаБезЛидирующихНулей(ТекТ.АртикулМатериалаВУСДанон));
			СтрПодбораПродукции = ПодобратьПродукциюПоАртикулу(СтрокаБезЛидирующихНулей(ТекТ.АртикулМатериалаВУСДанон),НомСтр);
			ТекПродукция = СтрПодбораПродукции.ТекПрод;
			Если Не ПустаяСтрока(СтрПодбораПродукции.СообщенияПодбораПродукции) Тогда
				мСообщения.Добавить(СтрПодбораПродукции.СообщенияПодбораПродукции);
			КонецЕсли;	
			Если ТекПродукция = Справочники.Продукция.ПустаяСсылка() Тогда
				мОшибки.Добавить(СтрПодбораПродукции.ОшибкиПодбораПродукции);
				Продолжить;
			КонецЕсли;
			
			Если ПустаяСтрока(ТекТ.АртикулМатериалаВУСКлиента) Тогда
				ПродукцияПолучателя = Справочники.Продукция.ПустаяСсылка();
			ИначеЕсли ТекТ.АртикулМатериалаВУСКлиента = ТекТ.АртикулМатериалаВУСДанон Тогда
				ПродукцияПолучателя = Справочники.Продукция.ПустаяСсылка();
			Иначе
				ПродукцияПолучателя = ПолучитьПродукциюПолучателя(ТекТ.АртикулМатериалаВУСКлиента,ТекПродукция,ДокУВС.КонтрагентПолучатель,мСообщения);
			КонецЕсли;	
			
			СтрОтбор = Новый Структура;
			СтрОтбор.Вставить("Продукция",ТекПродукция);
			СтрОтбор.Вставить("НомерПартии",ТекТ.НомерПартии);
			мСтрПрод = тзОст.НайтиСтроки(СтрОтбор);
			//отбор с номером партии
			КвоРеал = Число(ТекТ.Вес);
			Если мСтрПрод.Количество() > 0 Тогда
				Если КвоРеал > 0 Тогда
					Для сс=0 по мСтрПрод.Количество()-1 Цикл
						ТекСтр = мСтрПрод.Получить(сс);
						ТекОстаток = ТекСтр.Количество - ТекСтр.Списано;
						Если ТекОстаток > 0 Тогда
							КвоСписание = Мин(ТекОстаток,КвоРеал);
							Если КвоСписание > 0 Тогда
								СтрокаПродукции = ДокУВС.ТаблицаПродукция.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаПродукции, ТекСтр);
								СтрокаПродукции.Количество = КвоСписание;
								РеквизитыПоУмолчанию = ЗаполнениеРеквизитовОбъектов.ПолучитьЗначенияРеквизитовЗаполнения("Документ.ТранспортныеОперации","ТаблицаПродукция");
								Если РеквизитыПоУмолчанию.Свойство("БлагополучиеМестности") Тогда
									СтрокаПродукции.БлагополучиеМестности = РеквизитыПоУмолчанию.БлагополучиеМестности;
								КонецЕсли;	
								Если РеквизитыПоУмолчанию.Свойство("НазначениеГруза") Тогда
									СтрокаПродукции.НазначениеГруза = РеквизитыПоУмолчанию.НазначениеГруза;
								КонецЕсли;
								СтрокаПродукции.ПродукцияПолучателя = ПродукцияПолучателя;
								СтрокаПродукции.ПроводиласьВетсанэкспертиза = Справочники.РезультатыЛабораторногоИсследования.НайтиПоКоду(ВРЕГ(ТекТ.РезультатВСЭ));
								КвоРеал = КвоРеал - КвоСписание;
								ТекСтр.Списано = ТекСтр.Списано + КвоСписание;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;	
				КонецЕсли;
			КонецЕсли;
			
			Если КвоРеал > 0 Тогда
				КвоОшибокОстатков = КвоОшибокОстатков + 1;
				Если КвоОшибокОстатков = 1 Тогда
					мОшибки.Добавить("
					|Предприятие - " + ?(ЗначениеЗаполнено(ДокУВС.ПредприятиеОтправитель),СокрЛП(ДокУВС.ПредприятиеОтправитель.Наименование),"*** не определено (GUID пустой)***"));
				КонецЕсли;
				мОшибки.Добавить("
				|Продукция " + СокрЛП(ТекПродукция.Наименование) + ", № партии " + ТекТ.НомерПартии + " на остатке не хватает " + КвоРеал + " " + ТекПродукция.ЕдиницаИзмерения);
			КонецЕсли;
			
		КонецЦикла;	
		
		ЗаписатьОшибкиСозданияДокументаУВС(ДокУВС,ДокDanoneСсылка,"ОтгрузкаВнутренняя",ДокУВС.Организация,ДокУВС.ПредприятиеОтправитель,мОшибки,мСообщения,,ЗапросСразуНаГашение);
		
	ИначеЕсли ВидОперации = "ГашениеВП" Тогда
		
		Если ЗначениеЗаполнено(ДокDanoneСсылка.ДМ_ФайлыОбменаПеремещениеИсходный) Тогда
			Если ДокDanoneСсылка.ДМ_ФайлыОбменаПеремещениеИсходный.ДМ_СвязанныеДокументыУВС.Количество() > 0 Тогда
				ДокDanoneГашение = ДокDanoneСсылка.ПолучитьОбъект();
				Для Каждого ТекДокИсх Из ДокDanoneСсылка.ДМ_ФайлыОбменаПеремещениеИсходный.ДМ_СвязанныеДокументыУВС Цикл
					ЗаполнитьПриходПоПеремещению(ДокDanoneГашение,ТекДокИсх.ДМ_СвязанныйДокументУВС);
				КонецЦикла;	
				Возврат;
			КонецЕсли;	
		КонецЕсли;	
		
		ТектзЗаголовок = тзЗаголовок.Получить(0);
		тзСвязанныеДокументыУВС = ДокDanoneСсылка.ДМ_СвязанныеДокументыУВС.Выгрузить();
		Если тзСвязанныеДокументыУВС.Найти(Документы.ПриходныеОперации.ПустаяСсылка(),"Приемка") <> Неопределено Тогда 
			тзСвязанныеДокументыУВС.Очистить();
			Для каждого ТекСтр из ДокDanoneСсылка.ДМ_СвязанныеДокументыУВС Цикл
				Если ЗначениеЗаполнено (ТекСтр.Приемка) Тогда
					НовСтр = тзСвязанныеДокументыУВС.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр,ТекСтр);
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;
		
		ош=0;
		НомСтр = 0;
		НачДатаДокГашение = НачалоДня(ДокDanoneСсылка.Дата);
		Для Каждого ТекТ из тзМатериалы Цикл
			ЕстьНесколькоВСД = 0; // 0 - нет ВСД, 1 есть 1 ВСД, 2 - есть несколько ВСД
			мОшибки1 = Новый Массив;
			мСообщения1 = Новый Массив;
			НомСтр = НомСтр + 1;
			//поиск продукции по полю ДМ_КодSAP (артикул Данон)
			//ТекПродукция = Справочники.Продукция.НайтиПоРеквизиту("Артикул",СтрокаБезЛидирующихНулей(ТекТ.КодSAP));
			СтрПодбораПродукции = ПодобратьПродукциюПоАртикулу(СтрокаБезЛидирующихНулей(ТекТ.КодSAP),НомСтр);
			ТекПродукция = СтрПодбораПродукции.ТекПрод;
			Если Не ПустаяСтрока(СтрПодбораПродукции.СообщенияПодбораПродукции) Тогда
				мСообщения1.Добавить(СтрПодбораПродукции.СообщенияПодбораПродукции);
			КонецЕсли;	
			Если ТекПродукция = Справочники.Продукция.ПустаяСсылка() Тогда
				мОшибки1.Добавить(СтрПодбораПродукции.ОшибкиПодбораПродукции);
				Продолжить;
			КонецЕсли;	
			
			ЕстьДокумент = Ложь;
			СтрОтб = Новый Структура;
			СтрОтб.Вставить("Артикул",ТекТ.КодSAP);
			СтрОтб.Вставить("НомерПартии",ТекТ.ИдентификаторПартии);
			мСтрДок = тзСвязанныеДокументыУВС.НайтиСтроки(СтрОтб);
			Если мСтрДок.Количество() > 0 Тогда
				ТекСтрДок = мСтрДок.Получить(0);
				Если ЗначениеЗаполнено(ТекСтрДок.Приемка) Тогда
					ДокУВС = ТекСтрДок.Приемка.ПолучитьОбъект();
					Если ТекСтрДок.Продукция <> ТекПродукция Тогда
						ТекСтрДок.Продукция = ТекПродукция;
					КонецЕсли;	
					ЕстьДокумент = Истина;	
				КонецЕсли;	
			КонецЕсли;	
			
			Если ЕстьДокумент = Ложь Тогда
				ДокУВС = Документы.ПриходныеОперации.СоздатьДокумент();
				ДокУВС.Дата = ПолучитьДатуИзСтроки(ТектзЗаголовок.ДатаДокумента);
				ДокУВС.УстановитьНовыйНомер();
			КонецЕсли;	
			
			ДокУВС.ДМ_НомерДокументаВСистемеДанон = СокрЛП(ТектзЗаголовок.НомерСообщения);
			
			//ДатаТТН = ПолучитьДатуИзСтроки(ТектзЗаголовок.ДатаПолучения);
			ДатаТТН = Дата(1,1,1);
			НомерТТН = ТектзЗаголовок.НомерДоставки;
			ПредприятиеПолучатель = Справочники.Предприятия.ПустаяСсылка();
			Если ПроверитьGUID(ТектзЗаголовок.GUIDТочкиДоставки,мОшибки,"ПредприятиеПолучатель",НомСтр) = 1 Тогда
				ПредприятиеПолучатель = ПолучитьОбъектПоGUID(ТектзЗаголовок.GUIDТочкиДоставки, "Предприятия",,мСообщения,"Предприятие-получатель создан по GUIDТочкиДоставки");
			КонецЕсли;
			//Организация = ДМ_СлужебныйПривилегированный.ПолучитьОрганизациюПоПредприятию(ПредприятиеПолучатель);
			КонтрагентПолучатель = ДМ_СлужебныйПривилегированный.ПолучитьКонтрагентаПоПредприятию(ПредприятиеПолучатель);
			НастройкиПодключения = ДМ_ВызовСервераПовтИсп.НастройкаПодключенияКВетисAPIПоКонтрагенту(КонтрагентПолучатель);
			Если НастройкиПодключения.Свойство("Организация") Тогда
				Организация = НастройкиПодключения.Организация;
			Иначе
				Организация = Справочники.Организации.ПустаяСсылка();
				мОшибки.Добавить("
				|Не найдена организация по хозсубъекту " + СокрЛП(КонтрагентПолучатель.Наименование));
			КонецЕсли;
			
			Если ПроверитьGUID(ТектзЗаголовок.GUIDГрузоотправителя,мОшибки,"ПредприятиеОтправитель",НомСтр) = 1 Тогда
				ПредприятиеОтправитель = ПолучитьОбъектПоGUID(ТектзЗаголовок.GUIDГрузоотправителя, "Предприятия",,мСообщения,"Предприятие-отправитель создан по GUIDГрузоотправителя");
			КонецЕсли;
			КонтрагентОтправитель = ДМ_СлужебныйПривилегированный.ПолучитьКонтрагентаПоПредприятию(ПредприятиеОтправитель);
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Организация"  , Организация);
			СтруктураОтбора.Вставить("КонтрагентПолучатель"  , КонтрагентПолучатель);
			СтруктураОтбора.Вставить("КонтрагентОтправитель" , КонтрагентОтправитель);
			СтруктураОтбора.Вставить("ПредприятиеОтправитель", ПредприятиеОтправитель);
			СтруктураОтбора.Вставить("ПредприятиеПолучатель" , ПредприятиеПолучатель);
			СтруктураОтбора.Вставить("НомерТТН"          , НомерТТН);
			СтруктураОтбора.Вставить("ДатаТТН"          , ДатаТТН);
			СтруктураОтбора.Вставить("НомерПартии"       , ТекТ.ИдентификаторПартии);
			СтруктураОтбора.Вставить("Продукция"         , ТекПродукция);
			СтруктураОтбора.Вставить("ДатаДок"         , ДокУВС.Дата);
			СтруктураОтбора.Вставить("ДокУВС"         , ДокУВС.Ссылка);
			
			
			ЕстьВСД = Истина;
			Если Не ЗначениеЗаполнено(ДокУВС.ВСД) Тогда
				ЕстьВСД = Ложь;
				мИскВСД = ПодобратьВСДДляRECADV(СтруктураОтбора);
				Если мИскВСД.Количество() > 0 Тогда
					Для сс=0 по мИскВСД.Количество()-1 Цикл
						ИскВСД = мИскВСД.Получить(сс);
						Если НачалоДня(ИскВСД.Дата) = НачДатаДокГашение Тогда
							Прервать;
						КонецЕсли;	
					КонецЦикла;	
					ДокУВС.ЗаполнитьДокументПоВСД(ИскВСД);
					Если ИскВСД.Количество = ТекТ.Вес Тогда
						ЕстьВСД = Истина;
					Иначе	
						РазницаВеса = ИскВСД.Количество - ТекТ.Вес;
						КоэфРазницы = ?(РазницаВеса < 0,-РазницаВеса,РазницаВеса)*100/ИскВСД.Количество;
						Если КоэфРазницы > 5 Тогда
							ЕстьВСД = Ложь;
							ДокУВС.ВСД = Документы.ВСД.ПустаяСсылка();
							мОшибки1.Добавить("" + ДокУВС + " разница в весе с подходящим ВСД " + ИскВСД + " > 5%  (в ВСД = " + ИскВСД.Количество + ", в файле = " + ТекТ.Вес + ")");
						КонецЕсли;
					КонецЕсли;	
					ЕстьНесколькоВСД = ?(мИскВСД.Количество()=1,1,2);
				КонецЕсли;
			Иначе
				ЕстьНесколькоВСД = 1;
			КонецЕсли;	
			
			Если ЕстьВСД = Ложь Тогда
				//ДокУВС.ДатаТТН = ДатаТТН; берем из ВСД, иначе нет ее
				ДокУВС.НомерТТН = НомерТТН;
				ДокУВС.Ответственный = Пользователи.АвторизованныйПользователь();
				ДокУВС.ПредприятиеПолучатель = ПредприятиеПолучатель;
				ДокУВС.Организация = Организация;
				ДокУВС.КонтрагентПолучатель = КонтрагентПолучатель;
				ДокУВС.ПредприятиеОтправитель = ПредприятиеОтправитель;
				ДокУВС.КонтрагентОтправитель = КонтрагентОтправитель;
				РеквизитыПоУмолчанию = ЗаполнениеРеквизитовОбъектов.ПолучитьЗначенияРеквизитовЗаполнения("Документ.ТранспортныеОперации","ТаблицаПродукция");
				Если РеквизитыПоУмолчанию.Свойство("БлагополучиеМестности") Тогда
					ДокУВС.БлагополучиеМестности = РеквизитыПоУмолчанию.БлагополучиеМестности;
				КонецЕсли;	
				Если РеквизитыПоУмолчанию.Свойство("НазначениеГруза") Тогда
					ДокУВС.НазначениеГруза = РеквизитыПоУмолчанию.НазначениеГруза;
				КонецЕсли;
				ДокУВС.ТипТТН = Справочники.ТипыТТН.ТТН;
				ДокУВС.СпособХраненияПриПеревозке = Справочники.СпособыХраненияПродукцииПриПеревозке.Охлаждаемый;
				ДокУВС.Продукция = ТекПродукция;
				ДокУВС.Количество = ТекТ.Вес;
				ДокУВС.НомерПартии = ТекТ.ИдентификаторПартии;
				ДокУВС.ФорматДатыВыработки = Перечисления.СпособыЗаданияДаты.Дата;
				ДокУВС.ФорматСрокаГодности = Перечисления.СпособыЗаданияДаты.Дата;
				Если НЕ ПустаяСтрока(ТекТ.ДатаПроизводства) Тогда
					ДокУВС.ДатаВыработкиНачало = ПолучитьДатуИзСтроки(ТекТ.ДатаПроизводства);
				КонецЕсли;	
				Если НЕ ПустаяСтрока(ТекТ.СрокГодности) Тогда
					ДокУВС.ДатаОкончанияСрокаГодностиНачало = ПолучитьДатуИзСтроки(ТекТ.СрокГодности);
				КонецЕсли;
				Если ДокУВС.ЕдиницаИзмерения.Пустая() Тогда
					ДокУВС.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоРеквизиту("GUID_Меркурий","21ed96c9-337b-4a27-8761-c6e6ad3c9f5b");
				КонецЕсли;	
				Если ДокУВС.ЕдиницаИзмерения.Пустая() Тогда
					ДокУВС.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("кг",Истина);
				КонецЕсли;
				
				СтруктураСвойств = ОбщегоНазначенияУВССервер.ПолучитьСвойстваПродукции(ТекПродукция);
				ЗаполнитьЗначенияСвойств(ДокУВС, СтруктураСвойств);
				
			Иначе
				
				ТекВСД = ДокУВС.ВСД;
				Если ДокУВС.ВСД_Возврат.Пустая() Тогда
					ТекВСДВозврат = ДокУВС.ВСД;
				Иначе
					ТекВСДВозврат = ДокУВС.ВСД_Возврат;
				КонецЕсли;	
				ДокУВС.ТипТТН_Возврат =  ТекВСДВозврат.ТипТТН;
				ДокУВС.ДатаВСД_Возврат =  ТекВСДВозврат.ДатаТТН;
				ДокУВС.НомерТТН_Возврат =  ТекВСДВозврат.НомерТТН;
				ДокУВС.НазначениеГруза = Справочники.НазначениеГрузов.НайтиПоРеквизиту("GUID_Меркурий","5b90da1b-e089-11e1-bcf3-b499babae7ea");
				ДокУВС.НазначениеГруза_Возврат = Справочники.НазначениеГрузов.НайтиПоРеквизиту("GUID_Меркурий","5b90da1b-e089-11e1-bcf3-b499babae7ea");
				
			КонецЕсли;
			
			Если ДокУВС.Организация <> Организация Тогда
				ДокУВС.Организация = Организация;
			КонецЕсли;
			
			ДокУВС.РезультатВетеринарногоКонтроля = Справочники.РезультатыКонтроляПоставки.ГрузСоответствует;
			ДокУВС.РезультатДокументарногоКонтроля = Справочники.РезультатыКонтроляПоставки.ГрузСоответствует;
			ДокУВС.РешениеОПриемеВходнойПартии = Справочники.РешенияОПриемеВходнойПартии.ПринятьВсюПоставку; 
			
			ДокУВС.Записать();
			
			
			НовтзСвязанныеДокументыУВС = тзСвязанныеДокументыУВС.Найти(ДокУВС.Ссылка,"Приемка");
			Если НовтзСвязанныеДокументыУВС = Неопределено Тогда
				НовтзСвязанныеДокументыУВС = тзСвязанныеДокументыУВС.Добавить();
				НовтзСвязанныеДокументыУВС.Приемка = ДокУВС.Ссылка;
				НовтзСвязанныеДокументыУВС.Продукция = ТекПродукция;
				НовтзСвязанныеДокументыУВС.Артикул = ТекПродукция.Артикул;
				НовтзСвязанныеДокументыУВС.НомерПартии = ТекТ.ИдентификаторПартии;
			КонецЕсли;	
			
			Если ЕстьНесколькоВСД = 0 Тогда
				НовтзСвязанныеДокументыУВС.СтатусПоВСД = Перечисления.ДМ_СтатусПриходнойОперацииПоВСД.ВСДНеНайден;
			Иначе
				НовтзСвязанныеДокументыУВС.СтатусПоВСД = Перечисления.ДМ_СтатусПриходнойОперацииПоВСД.ВСДНайден;
			КонецЕсли;
			
			
			Если Не ДокУВС.ПроверитьЗаполнение() Тогда
				Сообщения =  ПолучитьСообщенияПользователю(Истина);
				Для Каждого Сообщение Из Сообщения Цикл
					мОшибки1.Добавить(Сообщение.Текст);
				КонецЦикла;
			КонецЕсли;
			
			
			Если мОшибки1.Количество() > 0  Тогда
				Для мм=0 по мОшибки1.Количество()-1 Цикл
					мОшибки.Добавить(мОшибки1.Получить(мм));
				КонецЦикла;	
			КонецЕсли;	
			
			ЗаписатьОшибкиСозданияДокументаУВС(ДокУВС,ДокDanoneСсылка,ВидОперации,ДокУВС.Организация,ДокУВС.ПредприятиеПолучатель,мОшибки1,мСообщения1,Истина);
			
			
		КонецЦикла;
		
		ДокDanone = ДокDanoneСсылка.ПолучитьОбъект();
		ДокDanone.ДМ_СвязанныеДокументыУВС.Загрузить(тзСвязанныеДокументыУВС);
		
		Если мОшибки.Количество() = 0 Тогда 
			ДокDanone.СтатусДокумента = Перечисления.СтатусДокументаСФайламиSAP.УспешноОбработан;
			//ОбновитьСводныйПриход(ДокDanone,тзСвязанныеДокументыУВС,СтруктураОтбора);
		Иначе
			ДокDanone.СтатусДокумента = Перечисления.СтатусДокументаСФайламиSAP.ОшибкаПриОбработке;
		КонецЕсли;	
		
		ДокDanone.Записать();
		
	ИначеЕсли ВидОперации = "Инвентаризация" Тогда
		
		ТектзЗаголовок = тзЗаголовок.Получить(0);
		
		тзТО = Новый ТаблицаЗначений;
		тзТО.Колонки.Добавить("ТО",Новый ОписаниеТипов("ДокументСсылка.Инвентаризации"));
		тзТО.Колонки.Добавить("ДМ_НомерДокументаВСистемеДанон",Новый ОписаниеТипов("Строка"));
		
		Если ДокDanoneСсылка.ДМ_СвязанныеДокументыУВС.Количество() > 0 Тогда
			Для Каждого ТекСвДокУВС из ДокDanoneСсылка.ДМ_СвязанныеДокументыУВС Цикл
				НовтзТО = тзТО.Добавить();
				НовтзТО.ТО = ТекСвДокУВС.ДМ_СвязанныйДокументУВС;
				НовтзТО.ДМ_НомерДокументаВСистемеДанон = ТекСвДокУВС.ДМ_СвязанныйДокументУВС.ДМ_НомерДокументаВСистемеДанон;
			КонецЦикла;
		ИначеЕсли Не ДокDanoneСсылка.ДМ_СвязанныйДокументУВС.Пустая() Тогда
			НовтзТО = тзТО.Добавить();
			НовтзТО.ТО = ДокDanoneСсылка.ДМ_СвязанныйДокументУВС;
			НовтзТО.ДМ_НомерДокументаВСистемеДанон = ДокDanoneСсылка.ДМ_СвязанныйДокументУВС.ДМ_НомерДокументаВСистемеДанон;
			Если ДокDanoneСсылка.ДМ_СвязанныеДокументыУВС.Найти(ДокDanoneСсылка.ДМ_СвязанныйДокументУВС) = Неопределено Тогда
				ДокDanone = ДокDanoneСсылка.ПолучитьОбъект();
				НовДокУВС = ДокDanone.ДМ_СвязанныеДокументыУВС.Добавить();
				НовДокУВС.ДМ_СвязанныйДокументУВС = ДокDanone.ДМ_СвязанныйДокументУВС;
				ДокDanone.Записать();
			КонецЕсли;
		КонецЕсли;	
		
		ИсктзТО = тзТО.Найти(ТектзЗаголовок.НомерСообщения,"ДМ_НомерДокументаВСистемеДанон");
		Если ИсктзТО <> Неопределено Тогда
			ДокУВС = ИсктзТО.ТО.ПолучитьОбъект();
			Если ПроверитьСтатусЗаявки(ДокУВС.Ссылка) Тогда
				Возврат;
			КонецЕсли;	
		Иначе	
			ДокУВС = Документы.Инвентаризации.СоздатьДокумент();
			ДокУВС.Дата = ПолучитьДатуИзСтроки(ТектзЗаголовок.ДатаИВремяИнвентаризации);
			ДокУВС.УстановитьНовыйНомер();
		КонецЕсли;
		
		ДокУВС.Ответственный = Пользователи.АвторизованныйПользователь();
		Если ПроверитьGUID(ТектзЗаголовок.GUIDПоднадзорногоОбъекта,мОшибки,"Предприятие") = 1 Тогда
			ДокУВС.Предприятие = ПолучитьОбъектПоGUID(ТектзЗаголовок.GUIDПоднадзорногоОбъекта, "Предприятия",,мСообщения,"Предприятие создан по GUIDПоднадзорногоОбъекта");
		КонецЕсли;	
		//ДокУВС.Организация = ДМ_СлужебныйПривилегированный.ПолучитьОрганизациюПоПредприятию(ДокУВС.Предприятие);
		ДокУВС.Контрагент = ДМ_СлужебныйПривилегированный.ПолучитьКонтрагентаПоПредприятию(ДокУВС.Предприятие);
		НастройкиПодключения = ДМ_ВызовСервераПовтИсп.НастройкаПодключенияКВетисAPIПоКонтрагенту(ДокУВС.Контрагент);
		Если НастройкиПодключения.Свойство("Организация") Тогда
			ДокУВС.Организация = НастройкиПодключения.Организация;
		Иначе
			мОшибки.Добавить("
			|Не найдена организация по хозсубъекту " + СокрЛП(ДокУВС.Контрагент.Наименование));
		КонецЕсли;
		ДокУВС.ДМ_НомерДокументаВСистемеДанон = СокрЛП(ТектзЗаголовок.НомерСообщения);
		
		//тзОст = ЗаполнитьТаблицуПродукцииПоОстаткам(ДокУВС,ДокУВС.Предприятие);
		
		ДокУВС.ТаблицаПродукции.Очистить();
		ДокУВС.ТаблицаНовойПродукции.Очистить();
		ДокУВС.ТаблицаПроизводителей.Очистить();
		
		
		//При поступлении на загрузку файла инвентаризации необходимо перед его обработкой выполнить            
		//по предприятию, указанному в файле INVRPT, получение актуальных остатков из ФГИС 
		//Меркурий, корректировку остатков (объединение записей складского журнала делается после получения успешного статуса инвентаризацией
		
		ОшибкиДопПроц = "";
		
		Если ДокУВС.Дата = Дата(1,1,1) Тогда
			
			лСтрокаСообщения = НСтр("ru = 'Не удалось определить дату с временем из исходного файла 
			|Тип файлов: %1
			|ДокDanone: %2'");
			лСтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( лСтрокаСообщения, "Инвентаризация", ДокDanoneСсылка);
			
			//Регистрируем ошибку
			лОписаниеСобытия = лСтрокаСообщения + " 
			|";
			
			ДМ_СлужебныйПривилегированный.ЗарегистрироватьСобытие( 
			ДокDanoneСсылка,
			"Инвентаризация",
			Перечисления.ДМ_УровниЖурнала.Ошибка,
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных( ТипЗнч(ДокDanoneСсылка) ),
			Строка( ДокDanoneСсылка ),
			лОписаниеСобытия);
			
			Возврат;
			
		КонецЕсли;	
		
		ПредварительныеДействияПередЗаписьюДокументаИнвентаризации(ДокУВС,ОшибкиДопПроц,Истина);
		
		лСтрокаСообщения = НСтр("ru = 'Получение актуальных остатков перед записью инвентаризации
		|Тип операции: %1
		|Получение актуальных остатков : %2
		|Документ Danone: %3
		|Документ УВС: %4'");
		
		лСтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( лСтрокаСообщения, ВидОперации, ОшибкиДопПроц, "" + ДокDanoneСсылка, "" + ДокУВС );
		
		лОписаниеСобытия = лСтрокаСообщения;
		
		ДМ_СлужебныйПривилегированный.ЗарегистрироватьСобытие( 
		ДокDanoneСсылка,
		"Обработка файлов EDI.",
		Перечисления.ДМ_УровниЖурнала.Информация,
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных( ТипЗнч(ДокDanoneСсылка) ),
		Строка( ДокDanoneСсылка ),
		лОписаниеСобытия);
		
		ЗаполнитьДокументИнвентаризацииПоОстаткам(ДокУВС);
		
		ош=0;
		НомСтр = 0;
		Для Каждого ТекТ из тзМатериалы Цикл
			НомСтр = НомСтр + 1;
			Если ВРЕГ(ТекТ.ИдентификаторНеобходимостиОтображенияОперацииВМеркурий) <> "RELEVANT FOR MERCURY" Тогда
				Продолжить;
			КонецЕсли;
			//ТекПродукция = Справочники.Продукция.НайтиПоРеквизиту("Артикул",СтрокаБезЛидирующихНулей(ТекТ.АртикулМатериалаВУСДанон));
			СтрПодбораПродукции = ПодобратьПродукциюПоАртикулу(СтрокаБезЛидирующихНулей(ТекТ.АртикулМатериалаВУСДанон),НомСтр);
			ТекПродукция = СтрПодбораПродукции.ТекПрод;
			Если Не ПустаяСтрока(СтрПодбораПродукции.СообщенияПодбораПродукции) Тогда
				мСообщения.Добавить(СтрПодбораПродукции.СообщенияПодбораПродукции);
			КонецЕсли;	
			Если ТекПродукция = Справочники.Продукция.ПустаяСсылка() Тогда
				мОшибки.Добавить(СтрПодбораПродукции.ОшибкиПодбораПродукции);
				Продолжить;
			КонецЕсли;
			
			СтрОтбор = Новый Структура;
			СтрОтбор.Вставить("Продукция",ТекПродукция);
			мСтрПрод = ДокУВС.ТаблицаПродукции.НайтиСтроки(СтрОтбор);
			ЕстьСтрока = Ложь;
			Если мСтрПрод.Количество() > 0 Тогда
				Для сс=0 по мСтрПрод.Количество()-1 Цикл
					СтрокаПродукции = мСтрПрод.Получить(сс);
					Если ВРЕГ(СтрокаПродукции.НомерПартии) = ВРЕГ(ТекТ.НомерПартии) Тогда
						ЕстьСтрока = Истина;
						Прервать;
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;	
			
			Если Не ПустаяСтрока(ТекТ.ПричинаИнвентаризации) Тогда
				ДокУВС.ДатаАктаНесоответствия = ПолучитьДатуИзСтроки(ТектзЗаголовок.ДатаИВремяИнвентаризации);
				ДокУВС.ПричинаСоставленияАктаНесоответствия = ТекТ.ПричинаИнвентаризации;
			КонецЕсли;	
			
			Если ЕстьСтрока = Ложь Тогда
				//добавляем в новую продукцию
				СтрокаПродукции = ДокУВС.ТаблицаНовойПродукции.Добавить();
				СтрокаПродукции.Продукция = ТекПродукция;
				СтрокаПродукции.Количество = ТекТ.ВесВКГ;
				СтруктураСвойств = ОбщегоНазначенияУВССервер.ПолучитьСвойстваПродукции(ТекПродукция);
				ЗаполнитьЗначенияСвойств(СтрокаПродукции, СтруктураСвойств);
				//по-умолчанию кг (в файле нет)
				Если СтрокаПродукции.ЕдиницаИзмерения.Пустая() Тогда
					СтрокаПродукции.ЕдиницаИзмерения = СтрокаПродукции.Продукция.ЕдиницаИзмерения;
				КонецЕсли;
				Если СтрокаПродукции.ЕдиницаИзмерения.Пустая() Тогда
					СтрокаПродукции.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоРеквизиту("GUID_Меркурий","21ed96c9-337b-4a27-8761-c6e6ad3c9f5b");
				КонецЕсли;
				Если СтрокаПродукции.ЕдиницаИзмерения.Пустая() Тогда
					СтрокаПродукции.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("кг",Истина);
				КонецЕсли;
				
				СтрокаПродукции.СтранаПроисхождения = Справочники.СтраныМира.НайтиПоРеквизиту("КодАльфа2",ТекТ.КодСтраныПроисхождения);
				СтрокаПродукции.ФорматДатыВыработки = Перечисления.СпособыЗаданияДаты.Дата;
				СтрокаПродукции.ФорматСрокаГодности = Перечисления.СпособыЗаданияДаты.Дата;
				Если НЕ ПустаяСтрока(ТекТ.ДатаПроизводства) Тогда
					СтрокаПродукции.ДатаВыработкиНачало = ПолучитьДатуИзСтроки(ТекТ.ДатаПроизводства);
				КонецЕсли;	
				Если НЕ ПустаяСтрока(ТекТ.СрокГодности) Тогда
					СтрокаПродукции.ДатаОкончанияСрокаГодностиНачало = ПолучитьДатуИзСтроки(ТекТ.СрокГодности);
				КонецЕсли;
				СтрокаПродукции.НомерПартии = ТекТ.НомерПартии;
				Если ПустаяСтрока(СтрокаПродукции.GUIDСтроки) Тогда
					СтрокаПродукции.GUIDСтроки = Строка(Новый УникальныйИдентификатор());
				КонецЕсли;
				Если ПроверитьGUID(ТекТ.GUIDПроизводителя,мОшибки,"Производитель",НомСтр) = 1 Тогда
					ТекПроизводитель = ПолучитьОбъектПоGUID(ТекТ.GUIDПроизводителя, "Предприятия",,мСообщения,"Предприятие создан по GUIDПроизводителя");
					СтрокаПродукции.Производитель = СокрЛП(ТекПроизводитель.Наименование);	
					НовПроизв = ДокУВС.ТаблицаПроизводителей.Добавить();
					НовПроизв.GUIDСтроки = СтрокаПродукции.GUIDСтроки;
					НовПроизв.Производитель = ТекПроизводитель;
					НовПроизв.РольПроизводителя = Справочники.РолиПредприятий.ЯвляетсяПроизводителемПродукции;	
				КонецЕсли;	
			Иначе
				СтрокаПродукции.Количество = ТекТ.ВесВКГ;
			КонецЕсли;	
			
		КонецЦикла;
		
		ЗаписатьОшибкиСозданияДокументаУВС(ДокУВС,ДокDanoneСсылка,"Инвентаризация",ДокУВС.Организация,ДокУВС.Предприятие,мОшибки,мСообщения);
		
	ИначеЕсли ВидОперации = "Производство" Тогда
		ТектзЗаголовок = тзЗаголовок.Получить(0);
		
		тзТО = Новый ТаблицаЗначений;
		тзТО.Колонки.Добавить("ТО",Новый ОписаниеТипов("ДокументСсылка.ПроизводственныеОперации"));
		тзТО.Колонки.Добавить("ДМ_НомерДокументаВСистемеДанон_ДМ_ДопНомерДокументаОтгрузки",Новый ОписаниеТипов("Строка"));
		
		Если ДокDanoneСсылка.ДМ_СвязанныеДокументыУВС.Количество() > 0 Тогда
			Для Каждого ТекСвДокУВС из ДокDanoneСсылка.ДМ_СвязанныеДокументыУВС Цикл
				НовтзТО = тзТО.Добавить();
				НовтзТО.ТО = ТекСвДокУВС.ДМ_СвязанныйДокументУВС;
				НовтзТО.ДМ_НомерДокументаВСистемеДанон_ДМ_ДопНомерДокументаОтгрузки = СокрЛП(ТекСвДокУВС.ДМ_СвязанныйДокументУВС.ДМ_НомерДокументаВСистемеДанон) + СокрЛП(ТекСвДокУВС.ДМ_СвязанныйДокументУВС.ДМ_ДопНомерДокументаОтгрузки);
			КонецЦикла;
		ИначеЕсли Не ДокDanoneСсылка.ДМ_СвязанныйДокументУВС.Пустая() Тогда
			НовтзТО = тзТО.Добавить();
			НовтзТО.ТО = ДокDanoneСсылка.ДМ_СвязанныйДокументУВС;
			НовтзТО.ДМ_НомерДокументаВСистемеДанон_ДМ_ДопНомерДокументаОтгрузки = СокрЛП(ДокDanoneСсылка.ДМ_СвязанныйДокументУВС.ДМ_НомерДокументаВСистемеДанон) + СокрЛП(ДокDanoneСсылка.ДМ_СвязанныйДокументУВС.ДМ_ДопНомерДокументаОтгрузки);
			Если ДокDanoneСсылка.ДМ_СвязанныеДокументыУВС.Найти(ДокDanoneСсылка.ДМ_СвязанныйДокументУВС) = Неопределено Тогда
				ДокDanone = ДокDanoneСсылка.ПолучитьОбъект();
				НовДокУВС = ДокDanone.ДМ_СвязанныеДокументыУВС.Добавить();
				НовДокУВС.ДМ_СвязанныйДокументУВС = ДокDanone.ДМ_СвязанныйДокументУВС;
				ДокDanone.Записать();
			КонецЕсли;
		КонецЕсли;	
		
		//ищем по связанной строке IDОперации (Поставка) + НомерРО (Номер транспортировки)
		ИсктзТО = тзТО.Найти(ТектзЗаголовок.IDОперации + ТектзЗаголовок.НомерРО,"ДМ_НомерДокументаВСистемеДанон_ДМ_ДопНомерДокументаОтгрузки");
		Если ИсктзТО <> Неопределено Тогда
			ДокУВС = ИсктзТО.ТО.ПолучитьОбъект();
			Если ПроверитьСтатусЗаявки(ДокУВС.Ссылка) Тогда
				Возврат;
			КонецЕсли;	
		Иначе	
			ДокУВС = Документы.ПроизводственныеОперации.СоздатьДокумент();
			ДокУВС.Дата = ПолучитьДатуИзСтроки(ТектзЗаголовок.ДатаИВремяОперации);
			ДокУВС.УстановитьНовыйНомер();
		КонецЕсли;
		
		ДокУВС.Ответственный = Пользователи.АвторизованныйПользователь();
		Если ПроверитьGUID(ТектзЗаголовок.GUIDПлощадки,мОшибки,"Предприятие") = 1 Тогда
			ДокУВС.Предприятие = ПолучитьОбъектПоGUID(ТектзЗаголовок.GUIDПлощадки, "Предприятия",,мСообщения,"Предприятие создан по GUIDПлощадки");
		КонецЕсли;
		тз = Новый ТаблицаЗначений;
		Если тзЗаголовок.Колонки.Найти("НомерРО_ТолькоДляНП") = Неопределено Тогда
			//незавершенка с автозакрытием
			IDОперации = ТектзЗаголовок.IDОперации;
			ДокУВС.Комментарий = "#НезавершПроизвАЗ#";
		Иначе
			ДокУВС.Комментарий = "";
			IDОперации = ТектзЗаголовок.НомерРО_ТолькоДляНП;
		КонецЕсли;	
		ДокУВС.ДМ_НомерДокументаВСистемеДанон = СокрЛП(ТектзЗаголовок.IDОперации);
		ДокУВС.ДМ_ДопНомерДокументаОтгрузки = СокрЛП(ТектзЗаголовок.НомерРО);
		
		//ДокУВС.Организация = ДМ_СлужебныйПривилегированный.ПолучитьОрганизациюПоПредприятию(ДокУВС.Предприятие);
		ДокУВС.Контрагент = ДМ_СлужебныйПривилегированный.ПолучитьКонтрагентаПоПредприятию(ДокУВС.Предприятие);
		НастройкиПодключения = ДМ_ВызовСервераПовтИсп.НастройкаПодключенияКВетисAPIПоКонтрагенту(ДокУВС.Контрагент);
		Если НастройкиПодключения.Свойство("Организация") Тогда
			ДокУВС.Организация = НастройкиПодключения.Организация;
		Иначе
			мОшибки.Добавить("
			|Не найдена организация по хозсубъекту " + СокрЛП(ДокУВС.Контрагент.Наименование));
		КонецЕсли;
		ДокУВС.ТипПроизводственногоПроцесса = Справочники.ТипыПроизводственногоПроцесса.Производство;
		ДокУВС.ДатаНачалаПроцесса = НачалоДня(ДокУВС.Дата);
		ДокУВС.ДатаОкончанияПроцесса = КонецДня(ДокУВС.Дата);
		ИдентификаторТранзакции = Справочники.ИдентификаторыПроизводственныхТранзакций.НайтиПоНаименованию(IDОперации,Истина);
		Если ИдентификаторТранзакции = Справочники.ИдентификаторыПроизводственныхТранзакций.ПустаяСсылка() Тогда
			ИдентификаторТранзакции = Справочники.ИдентификаторыПроизводственныхТранзакций.СоздатьЭлемент();
			ИдентификаторТранзакции.Наименование = ТектзЗаголовок.IDОперации;
			ИдентификаторТранзакции.Записать();
		КонецЕсли;	
		ДокУВС.ИдентификаторТранзакции = ИдентификаторТранзакции.Ссылка;
		
		ДокУВС.ТаблицаПродукции.Очистить();
		ДокУВС.ТаблицаСырье.Очистить();
		
		ТекТ = тзМатериалы.Получить(0);
		
		ИдентификаторЗавершенияНП = ВРЕГ(ТекТ.ИдентификаторЗавершенияНП);
		//ДокУВС.НезавершенноеПроизводство = ?(ИдентификаторЗавершенияНП = "FALSE",Истина,Ложь);
		ДокУВС.НезавершенноеПроизводство = Истина;
		
		//ТекПродукция = Справочники.Продукция.НайтиПоРеквизиту("Артикул",СтрокаБезЛидирующихНулей(ТекТ.АртикулМатериалаВУСДанон));
		СтрПодбораПродукции = ПодобратьПродукциюПоАртикулу(СтрокаБезЛидирующихНулей(ТекТ.АртикулМатериалаВУСДанон),НомСтр);
		ТекПродукция = СтрПодбораПродукции.ТекПрод;
		Если Не ПустаяСтрока(СтрПодбораПродукции.СообщенияПодбораПродукции) Тогда
			мСообщения.Добавить(СтрПодбораПродукции.СообщенияПодбораПродукции);
		КонецЕсли;	
		Если ТекПродукция = Справочники.Продукция.ПустаяСсылка() Тогда
			мОшибки.Добавить(СтрПодбораПродукции.ОшибкиПодбораПродукции);
			Возврат;
		КонецЕсли;
		
		Если ТекТ.ГотоваяПродукция_Сырье = "1" Тогда
			//продукция
			СтрокаПродукции = ДокУВС.ТаблицаПродукции.Добавить();
			СтрокаПродукции.Количество = ТекТ.Вес;
			СтрокаПродукции.Продукция = ТекПродукция;
			СтруктураСвойств = ОбщегоНазначенияУВССервер.ПолучитьСвойстваПродукции(ТекПродукция);
			ЗаполнитьЗначенияСвойств(СтрокаПродукции, СтруктураСвойств);
			Если СтрокаПродукции.ЕдиницаИзмерения.Пустая() Тогда
				СтрокаПродукции.ЕдиницаИзмерения = СтрокаПродукции.Продукция.ЕдиницаИзмерения;
			КонецЕсли;
			Если СтрокаПродукции.ЕдиницаИзмерения.Пустая() Тогда
				СтрокаПродукции.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("кг");
			КонецЕсли;	
			СтрокаПродукции.ФорматДатыВыработки = Перечисления.СпособыЗаданияДаты.Дата;
			СтрокаПродукции.ФорматСрокаГодности = Перечисления.СпособыЗаданияДаты.Дата;
			Если НЕ ПустаяСтрока(ТекТ.ДатаПроизводства) Тогда
				СтрокаПродукции.ДатаВыработкиНачало = ПолучитьДатуИзСтроки(ТекТ.ДатаПроизводства);
			КонецЕсли;	
			Если НЕ ПустаяСтрока(ТекТ.СрокГодности) Тогда
				СтрокаПродукции.ДатаОкончанияСрокаГодностиНачало = ПолучитьДатуИзСтроки(ТекТ.СрокГодности);
			КонецЕсли;
			Если Не ПустаяСтрока(ТекТ.РезультатВСЭ) Тогда
				СтрокаПродукции.ПроводиласьВетсанэкспертиза = Справочники.РезультатыЛабораторногоИсследования.НайтиПоКоду(ВРЕГ(ТекТ.РезультатВСЭ));
			Иначе	
				СтрокаПродукции.ПроводиласьВетсанэкспертиза = Справочники.РезультатыЛабораторногоИсследования.ПодвергнутаПродукция;
			КонецЕсли;
			Если НЕ ПустаяСтрока(ТекТ.НомерПартии) Тогда
				ИскНПрПартии = Справочники.НомераПроизводственныхПартий.НайтиПоНаименованию(ТекТ.НомерПартии,Истина);
				Если ИскНПрПартии = Справочники.НомераПроизводственныхПартий.ПустаяСсылка() Тогда
					ИскНПрПартииОб = Справочники.НомераПроизводственныхПартий.СоздатьЭлемент();
					ИскНПрПартииОб.Наименование = ТекТ.НомерПартии;
					ИскНПрПартииОб.Записать();
					ИскНПрПартии = ИскНПрПартииОб.Ссылка;
				КонецЕсли;
				СтрокаПродукции.НомерПартии = ИскНПрПартии;
			КонецЕсли;
		Иначе
			//сырье
			тзОст = ЗаполнитьТаблицуПродукцииПоОстаткам(ДокУВС,ДокУВС.Предприятие);
			
			СтрОтбор = Новый Структура;
			СтрОтбор.Вставить("Продукция",ТекПродукция);
			мСтрПрод = тзОст.НайтиСтроки(СтрОтбор);
			ЕстьСтрока = Ложь;
			Если мСтрПрод.Количество() > 0 Тогда
				Для сс=0 по мСтрПрод.Количество()-1 Цикл
					ТекСтр = мСтрПрод.Получить(сс);
					Если ПустаяСтрока(ТекТ.СрокГодности) Тогда
						ЕстьСтрока = Истина;
						Прервать;
					Иначе	
						СрокГодности = ПолучитьДатуИзСтроки(ТекТ.СрокГодности);
						Если (ТекСтр.СпособЗаданияДатыСроковГодности = Перечисления.СпособыЗаданияДаты.Дата И ТекСтр.ДатаОкончанияСрокаГодностиНачало >= СрокГодности) 
							ИЛИ ТекСтр.ДатаОкончанияСрокаГодностиОкончание >= СрокГодности Тогда
							ЕстьСтрока = Истина;
							Прервать;
						КонецЕсли;
					КонецЕсли;	
				КонецЦикла;	
			Конецесли;	
			
			Если ЕстьСтрока = Истина Тогда
				СтрокаПродукции = ДокУВС.ТаблицаСырье.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПродукции, ТекСтр);
				СтрокаПродукции.Количество = ТекТ.Вес;
				СтруктураСвойств = ОбщегоНазначенияУВССервер.ПолучитьСвойстваПродукции(ТекПродукция);
				ЗаполнитьЗначенияСвойств(СтрокаПродукции, СтруктураСвойств);
			Иначе
				мОшибки.Добавить("Сырье " + СокрЛП(ТекПродукция.Наименование) + " пропущена при подборе по номеру партии и количеству");
			КонецЕсли;
			
		КонецЕсли;	
		
		ЗаписатьОшибкиСозданияДокументаУВС(ДокУВС,ДокDanoneСсылка,"Производство",ДокУВС.Организация,ДокУВС.Предприятие,мОшибки,мСообщения);
		
	ИначеЕсли ВидОперации = "Приемка" Тогда
		
		ТектзЗаголовок = тзЗаголовок.Получить(0);
		тзСвязанныеДокументыУВС = ДокDanoneСсылка.ДМ_СвязанныеДокументыУВС.Выгрузить();
		Если тзСвязанныеДокументыУВС.Найти(Документы.ПриходныеОперации.ПустаяСсылка(),"Приемка") <> Неопределено Тогда
			тзСвязанныеДокументыУВС.Очистить();
			Для каждого ТекСтр из ДокDanoneСсылка.ДМ_СвязанныеДокументыУВС Цикл
				Если ЗначениеЗаполнено (ТекСтр.Приемка) Тогда
					НовСтр = тзСвязанныеДокументыУВС.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр,ТекСтр);
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;
		
		ош=0;
		НомСтр = 0;
		НачДатаДокГашение = НачалоДня(ДокDanoneСсылка.Дата);
		Для Каждого ТекТ из тзМатериалы Цикл
			ЕстьНесколькоВСД = 0; // 0 - нет ВСД, 1 есть 1 ВСД, 2 - есть несколько ВСД
			мОшибки1 = Новый Массив;
			мСообщения1 = Новый Массив;
			НомСтр = НомСтр + 1;
			//поиск продукции по полю ДМ_КодSAP (артикул Данон)
			//ТекПродукция = Справочники.Продукция.НайтиПоРеквизиту("Артикул",СтрокаБезЛидирующихНулей(ТекТ.КодSAP));
			СтрПодбораПродукции = ПодобратьПродукциюПоАртикулу(СтрокаБезЛидирующихНулей(ТекТ.КодSAP),НомСтр);
			ТекПродукция = СтрПодбораПродукции.ТекПрод;
			Если Не ПустаяСтрока(СтрПодбораПродукции.СообщенияПодбораПродукции) Тогда
				мСообщения1.Добавить(СтрПодбораПродукции.СообщенияПодбораПродукции);
			КонецЕсли;	
			Если ТекПродукция = Справочники.Продукция.ПустаяСсылка() Тогда
				мОшибки1.Добавить(СтрПодбораПродукции.ОшибкиПодбораПродукции);
				Продолжить;
			КонецЕсли;
			
			ЕстьДокумент = Ложь;
			СтрОтб = Новый Структура;
			СтрОтб.Вставить("Артикул",ТекТ.КодSAP);
			СтрОтб.Вставить("НомерПартии",ТекТ.ИдентификаторПартии);
			мСтрДок = тзСвязанныеДокументыУВС.НайтиСтроки(СтрОтб);
			Если мСтрДок.Количество() > 0 Тогда
				ТекСтрДок = мСтрДок.Получить(0);
				Если ЗначениеЗаполнено(ТекСтрДок.Приемка) Тогда
					ДокУВС = ТекСтрДок.Приемка.ПолучитьОбъект();
					Если ТекСтрДок.Продукция <> ТекПродукция Тогда
						ТекСтрДок.Продукция = ТекПродукция;
					КонецЕсли;	
					ЕстьДокумент = Истина;	
				КонецЕсли;	
			КонецЕсли;
			
			Если ЕстьДокумент = Ложь Тогда
				ДокУВС = Документы.ПриходныеОперации.СоздатьДокумент();
				ДокУВС.Дата = ПолучитьДатуИзСтроки(ТектзЗаголовок.ДатаДокумента);
				ДокУВС.УстановитьНовыйНомер();
			КонецЕсли;	
			
			//ДатаТТН = ПолучитьДатуИзСтроки(ТектзЗаголовок.ДатаПолучения);
			ДатаТТН = Дата(1,1,1);
			НомерТТН = ТектзЗаголовок.НомерДоставки;
			Если ПроверитьGUID(ТектзЗаголовок.GUIDТочкиДоставки,мОшибки,"ПредприятиеПолучатель",НомСтр) = 1 Тогда
				ПредприятиеПолучатель = ПолучитьОбъектПоGUID(ТектзЗаголовок.GUIDТочкиДоставки, "Предприятия",,мСообщения,"Предприятие-получатель создан по GUIDТочкиДоставки");
			КонецЕсли;
			//Организация = ДМ_СлужебныйПривилегированный.ПолучитьОрганизациюПоПредприятию(ПредприятиеПолучатель);
			КонтрагентПолучатель = ДМ_СлужебныйПривилегированный.ПолучитьКонтрагентаПоПредприятию(ПредприятиеПолучатель);
			НастройкиПодключения = ДМ_ВызовСервераПовтИсп.НастройкаПодключенияКВетисAPIПоКонтрагенту(КонтрагентПолучатель);
			Если НастройкиПодключения.Свойство("Организация") Тогда
				Организация = НастройкиПодключения.Организация;
			Иначе
				Организация = Справочники.Организации.ПустаяСсылка();
				мОшибки.Добавить("
				|Не найдена организация по хозсубъекту " + СокрЛП(КонтрагентПолучатель.Наименование));
			КонецЕсли;
			Если ПроверитьGUID(ТектзЗаголовок.GUIDГрузоотправителя,мОшибки,"ПредприятиеОтправитель",НомСтр) = 1 Тогда
				ПредприятиеОтправитель = ПолучитьОбъектПоGUID(ТектзЗаголовок.GUIDГрузоотправителя, "Предприятия",,мСообщения,"Предприятие-отправитель создан по GUIDГрузоотправителя");
			КонецЕсли;
			КонтрагентОтправитель = ДМ_СлужебныйПривилегированный.ПолучитьКонтрагентаПоПредприятию(ПредприятиеОтправитель);
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Организация"  , Организация);
			СтруктураОтбора.Вставить("КонтрагентПолучатель"  , КонтрагентПолучатель);
			СтруктураОтбора.Вставить("КонтрагентОтправитель" , КонтрагентОтправитель);
			СтруктураОтбора.Вставить("ПредприятиеОтправитель", ПредприятиеОтправитель);
			СтруктураОтбора.Вставить("ПредприятиеПолучатель" , ПредприятиеПолучатель);
			СтруктураОтбора.Вставить("НомерТТН"          , НомерТТН);
			СтруктураОтбора.Вставить("ДатаТТН"          , ДатаТТН);
			СтруктураОтбора.Вставить("НомерПартии"       , ТекТ.ИдентификаторПартии);
			СтруктураОтбора.Вставить("Продукция"         , ТекПродукция);
			СтруктураОтбора.Вставить("ДатаДок"         , ДокУВС.Дата);
			СтруктураОтбора.Вставить("ДокУВС"         , ДокУВС.Ссылка);
			
			
			ЕстьВСД = Истина;
			Если Не ЗначениеЗаполнено(ДокУВС.ВСД) Тогда
				ЕстьВСД = Ложь;
				мИскВСД = ПодобратьВСДДляRECADV(СтруктураОтбора);
				Если мИскВСД.Количество() > 0 Тогда
					Для сс=0 по мИскВСД.Количество()-1 Цикл
						ИскВСД = мИскВСД.Получить(сс);
						Если НачалоДня(ИскВСД.Дата) = НачДатаДокГашение Тогда
							Прервать;
						КонецЕсли;	
					КонецЦикла;	
					ДокУВС.ЗаполнитьДокументПоВСД(ИскВСД);
					Если ИскВСД.Количество = ТекТ.Вес Тогда
						ЕстьВСД = Истина;
					Иначе	
						РазницаВеса = ИскВСД.Количество - ТекТ.Вес;
						КоэфРазницы = ?(РазницаВеса < 0,-РазницаВеса,РазницаВеса)*100/ИскВСД.Количество;
						Если КоэфРазницы > 5 Тогда
							ЕстьВСД = Ложь;
							ДокУВС.ВСД = Документы.ВСД.ПустаяСсылка();
							мОшибки1.Добавить("" + ДокУВС + " разница в весе с подходящим ВСД " + ИскВСД + " > 5%  (в ВСД = " + ИскВСД.Количество + ", в файле = " + ТекТ.Вес + ")");
						КонецЕсли;
					КонецЕсли;
					ЕстьНесколькоВСД = ?(мИскВСД.Количество()=1,1,2);
				КонецЕсли;
			Иначе
				ЕстьНесколькоВСД = 1;
			КонецЕсли;
			
			Если ЕстьВСД = Ложь Тогда
				//ДокУВС.ДатаТТН = ДатаТТН; берем из ВСД, иначе нет ее
				ДокУВС.НомерТТН = НомерТТН;
				ДокУВС.Ответственный = Пользователи.АвторизованныйПользователь();
				ДокУВС.ПредприятиеПолучатель = ПредприятиеПолучатель;
				ДокУВС.Организация = Организация;
				ДокУВС.КонтрагентПолучатель = КонтрагентПолучатель;
				ДокУВС.ПредприятиеОтправитель = ПредприятиеОтправитель;
				ДокУВС.КонтрагентОтправитель = КонтрагентОтправитель;
				РеквизитыПоУмолчанию = ЗаполнениеРеквизитовОбъектов.ПолучитьЗначенияРеквизитовЗаполнения("Документ.ТранспортныеОперации","ТаблицаПродукция");
				Если РеквизитыПоУмолчанию.Свойство("БлагополучиеМестности") Тогда
					ДокУВС.БлагополучиеМестности = РеквизитыПоУмолчанию.БлагополучиеМестности;
				КонецЕсли;	
				Если РеквизитыПоУмолчанию.Свойство("НазначениеГруза") Тогда
					ДокУВС.НазначениеГруза = РеквизитыПоУмолчанию.НазначениеГруза;
				КонецЕсли;
				ДокУВС.ТипТТН = Справочники.ТипыТТН.ТТН;
				ДокУВС.СпособХраненияПриПеревозке = Справочники.СпособыХраненияПродукцииПриПеревозке.Охлаждаемый;
				ДокУВС.Продукция = ТекПродукция;
				ДокУВС.Количество = ТекТ.Вес;
				ДокУВС.НомерПартии = ТекТ.ИдентификаторПартии;
				ДокУВС.ФорматДатыВыработки = Перечисления.СпособыЗаданияДаты.Дата;
				ДокУВС.ФорматСрокаГодности = Перечисления.СпособыЗаданияДаты.Дата;
				Если НЕ ПустаяСтрока(ТекТ.ДатаПроизводства) Тогда
					ДокУВС.ДатаВыработкиНачало = ПолучитьДатуИзСтроки(ТекТ.ДатаПроизводства);
				КонецЕсли;	
				Если НЕ ПустаяСтрока(ТекТ.СрокГодности) Тогда
					ДокУВС.ДатаОкончанияСрокаГодностиНачало = ПолучитьДатуИзСтроки(ТекТ.СрокГодности);
				КонецЕсли;
				Если ДокУВС.ЕдиницаИзмерения.Пустая() Тогда
					ДокУВС.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоРеквизиту("GUID_Меркурий","21ed96c9-337b-4a27-8761-c6e6ad3c9f5b");
				КонецЕсли;	
				Если ДокУВС.ЕдиницаИзмерения.Пустая() Тогда
					ДокУВС.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("кг",Истина);
				КонецЕсли;
				
				СтруктураСвойств = ОбщегоНазначенияУВССервер.ПолучитьСвойстваПродукции(ТекПродукция);
				ЗаполнитьЗначенияСвойств(ДокУВС, СтруктураСвойств);
				
			Иначе
				
				ТекВСД = ДокУВС.ВСД;
				Если ДокУВС.ВСД_Возврат.Пустая() Тогда
					ТекВСДВозврат = ДокУВС.ВСД;
				Иначе
					ТекВСДВозврат = ДокУВС.ВСД_Возврат;
				КонецЕсли;	
				ДокУВС.ТипТТН_Возврат =  ТекВСДВозврат.ТипТТН;
				ДокУВС.ДатаВСД_Возврат =  ТекВСДВозврат.ДатаТТН;
				ДокУВС.НомерТТН_Возврат =  ТекВСДВозврат.НомерТТН;
				ДокУВС.НазначениеГруза = Справочники.НазначениеГрузов.НайтиПоРеквизиту("GUID_Меркурий","5b90da1b-e089-11e1-bcf3-b499babae7ea");
				ДокУВС.НазначениеГруза_Возврат = Справочники.НазначениеГрузов.НайтиПоРеквизиту("GUID_Меркурий","5b90da1b-e089-11e1-bcf3-b499babae7ea");
				
			КонецЕсли;
			
			Если ДокУВС.Организация <> Организация Тогда
				ДокУВС.Организация = Организация;
			КонецЕсли;
			
			ДокУВС.РезультатВетеринарногоКонтроля = Справочники.РезультатыКонтроляПоставки.ГрузСоответствует;
			ДокУВС.РезультатДокументарногоКонтроля = Справочники.РезультатыКонтроляПоставки.ГрузСоответствует;
			ДокУВС.РешениеОПриемеВходнойПартии = Справочники.РешенияОПриемеВходнойПартии.ПринятьВсюПоставку; 
			
			
			ДокУВС.Записать();
			
			НовтзСвязанныеДокументыУВС = тзСвязанныеДокументыУВС.Найти(ДокУВС.Ссылка,"Приемка");
			Если НовтзСвязанныеДокументыУВС = Неопределено Тогда
				НовтзСвязанныеДокументыУВС = тзСвязанныеДокументыУВС.Добавить();
				НовтзСвязанныеДокументыУВС.Приемка = ДокУВС.Ссылка;
				НовтзСвязанныеДокументыУВС.Продукция = ТекПродукция;
				НовтзСвязанныеДокументыУВС.Артикул = ТекПродукция.Артикул;
				НовтзСвязанныеДокументыУВС.НомерПартии = ТекТ.ИдентификаторПартии;
			КонецЕсли;	
			Если ЕстьНесколькоВСД = 0 Тогда
				НовтзСвязанныеДокументыУВС.СтатусПоВСД = Перечисления.ДМ_СтатусПриходнойОперацииПоВСД.ВСДНеНайден;
			Иначе
				НовтзСвязанныеДокументыУВС.СтатусПоВСД = Перечисления.ДМ_СтатусПриходнойОперацииПоВСД.ВСДНайден;
			КонецЕсли;
			
			
			Если Не ДокУВС.ПроверитьЗаполнение() Тогда
				Сообщения =  ПолучитьСообщенияПользователю(Истина);
				Для Каждого Сообщение Из Сообщения Цикл
					мОшибки1.Добавить(Сообщение.Текст);
				КонецЦикла;
			КонецЕсли;
			
			Если мОшибки1.Количество() > 0  Тогда
				Для мм=0 по мОшибки1.Количество()-1 Цикл
					мОшибки.Добавить(мОшибки1.Получить(мм));
				КонецЦикла;	
			КонецЕсли;	
			
			
			ЗаписатьОшибкиСозданияДокументаУВС(ДокУВС,ДокDanoneСсылка,ВидОперации,ДокУВС.Организация,ДокУВС.ПредприятиеПолучатель,мОшибки1,мСообщения1,Истина);
			
		КонецЦикла;
		
		ДокDanone = ДокDanoneСсылка.ПолучитьОбъект();
		ДокDanone.ДМ_СвязанныеДокументыУВС.Загрузить(тзСвязанныеДокументыУВС);
		
		Если мОшибки.Количество() = 0 Тогда 
			ДокDanone.СтатусДокумента = Перечисления.СтатусДокументаСФайламиSAP.УспешноОбработан;
			Для Каждого ТекДокУВС Из ДокDanone.ДМ_СвязанныеДокументыУВС Цикл
				ТекДокУВС.СтатусПоВСД = Перечисления.ДМ_СтатусПриходнойОперацииПоВСД.ВСДНайден;
			КонецЦикла;	
			//ОбновитьСводныйПриход(ДокDanone,тзСвязанныеДокументыУВС,СтруктураОтбора);
		ИначеЕсли тзСвязанныеДокументыУВС.Найти(Перечисления.ДМ_СтатусПриходнойОперацииПоВСД.НесколькоВСД,"СтатусПоВСД") <> Неопределено Тогда 
			ДокDanone.СтатусДокумента = Перечисления.СтатусДокументаСФайламиSAP.НеВыбранВСДДляГашения;
		Иначе
			ДокDanone.СтатусДокумента = Перечисления.СтатусДокументаСФайламиSAP.ОшибкаПриОбработке;
		КонецЕсли;	
		
		ДокDanone.Записать();	
		
		
	ИначеЕсли ВидОперации = "Возврат" Тогда
		
		ТектзЗаголовок = тзЗаголовок.Получить(0);
		тзСвязанныеДокументыУВС = ДокDanoneСсылка.ДМ_СвязанныеДокументыУВС.Выгрузить();
		Если тзСвязанныеДокументыУВС.Найти(Документы.ПриходныеОперации.ПустаяСсылка(),"Приемка") <> Неопределено Тогда
			тзСвязанныеДокументыУВС.Очистить();
			Для каждого ТекСтр из ДокDanoneСсылка.ДМ_СвязанныеДокументыУВС Цикл
				Если ЗначениеЗаполнено (ТекСтр.Приемка) Тогда
					НовСтр = тзСвязанныеДокументыУВС.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр,ТекСтр);
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;
		
		ош=0;
		НомСтр = 0;
		НачДатаДокГашение = НачалоДня(ДокDanoneСсылка.Дата);
		Для Каждого ТекТ из тзМатериалы Цикл
			ЕстьНесколькоВСД = 0; // 0 - нет ВСД, 1 есть 1 ВСД, 2 - есть несколько ВСД
			мОшибки1 = Новый Массив;
			мСообщения1 = Новый Массив; 
			НомСтр = НомСтр + 1;
			//поиск продукции по полю ДМ_КодSAP (артикул Данон)
			//ТекПродукция = Справочники.Продукция.НайтиПоРеквизиту("Артикул",СтрокаБезЛидирующихНулей(ТекТ.КодSAP));
			СтрПодбораПродукции = ПодобратьПродукциюПоАртикулу(СтрокаБезЛидирующихНулей(ТекТ.КодSAP),НомСтр);
			ТекПродукция = СтрПодбораПродукции.ТекПрод;
			Если Не ПустаяСтрока(СтрПодбораПродукции.СообщенияПодбораПродукции) Тогда
				мСообщения1.Добавить(СтрПодбораПродукции.СообщенияПодбораПродукции);
			КонецЕсли;	
			Если ТекПродукция = Справочники.Продукция.ПустаяСсылка() Тогда
				мОшибки1.Добавить(СтрПодбораПродукции.ОшибкиПодбораПродукции);
				Продолжить;
			КонецЕсли;	
			
			ЕстьДокумент = Ложь;
			СтрОтб = Новый Структура;
			СтрОтб.Вставить("Артикул",ТекТ.КодSAP);
			СтрОтб.Вставить("НомерПартии",ТекТ.ИдентификаторПартии);
			мСтрДок = тзСвязанныеДокументыУВС.НайтиСтроки(СтрОтб);
			Если мСтрДок.Количество() > 0 Тогда
				ТекСтрДок = мСтрДок.Получить(0);
				Если ЗначениеЗаполнено(ТекСтрДок.Приемка) Тогда
					ДокУВС = ТекСтрДок.Приемка.ПолучитьОбъект();
					Если ТекСтрДок.Продукция <> ТекПродукция Тогда
						ТекСтрДок.Продукция = ТекПродукция;
					КонецЕсли;	
					ЕстьДокумент = Истина;	
				КонецЕсли;	
			КонецЕсли;
			
			Если ЕстьДокумент = Ложь Тогда
				ДокУВС = Документы.ПриходныеОперации.СоздатьДокумент();
				ДокУВС.Дата = ПолучитьДатуИзСтроки(ТектзЗаголовок.ДатаДокумента);
				ДокУВС.УстановитьНовыйНомер();
			КонецЕсли;	
			
			//ДатаТТН_Возврат = ПолучитьДатуИзСтроки(ТектзЗаголовок.ДатаПолучения);
			ДатаТТН_Возврат = Дата(1,1,1);
			НомерТТН_Возврат = ТектзЗаголовок.НомерДоставки;
			ПредприятиеПолучатель = ПолучитьОбъектПоGUID(ТектзЗаголовок.GUIDТочкиДоставки, "Предприятия",,мСообщения,"Предприятие-получатель создан по GUIDТочкиДоставки");
			//Организация = ДМ_СлужебныйПривилегированный.ПолучитьОрганизациюПоПредприятию(ПредприятиеПолучатель);
			КонтрагентПолучатель = ДМ_СлужебныйПривилегированный.ПолучитьКонтрагентаПоПредприятию(ПредприятиеПолучатель);
			НастройкиПодключения = ДМ_ВызовСервераПовтИсп.НастройкаПодключенияКВетисAPIПоКонтрагенту(КонтрагентПолучатель);
			Если НастройкиПодключения.Свойство("Организация") Тогда
				Организация = НастройкиПодключения.Организация;
			Иначе
				Организация = Справочники.Организации.ПустаяСсылка();
				мОшибки.Добавить("
				|Не найдена организация по хозсубъекту " + СокрЛП(КонтрагентПолучатель.Наименование));
			КонецЕсли;
			ПредприятиеОтправитель = ПолучитьОбъектПоGUID(ТектзЗаголовок.GUIDГрузоотправителя, "Предприятия",,мСообщения,"Предприятие-отправитель создан по GUIDГрузоотправителя");
			КонтрагентОтправитель = ДМ_СлужебныйПривилегированный.ПолучитьКонтрагентаПоПредприятию(ПредприятиеОтправитель);
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Организация"  , Организация);
			СтруктураОтбора.Вставить("КонтрагентПолучатель"  , КонтрагентПолучатель);
			СтруктураОтбора.Вставить("КонтрагентОтправитель" , КонтрагентОтправитель);
			СтруктураОтбора.Вставить("ПредприятиеОтправитель", ПредприятиеОтправитель);
			СтруктураОтбора.Вставить("ПредприятиеПолучатель" , ПредприятиеПолучатель);
			СтруктураОтбора.Вставить("НомерТТН"          , НомерТТН);
			СтруктураОтбора.Вставить("ДатаТТН"          , ДатаТТН);
			СтруктураОтбора.Вставить("НомерПартии"       , ТекТ.ИдентификаторПартии);
			СтруктураОтбора.Вставить("Продукция"         , ТекПродукция);
			СтруктураОтбора.Вставить("ДатаДок"         , ДокУВС.Дата);
			СтруктураОтбора.Вставить("ДокУВС"         , ДокУВС.Ссылка);
			
			ЕстьВСД = Истина;
			Если Не ЗначениеЗаполнено(ДокУВС.ВСД) Тогда
				ЕстьВСД = Ложь;
				мИскВСД = ПодобратьВСДДляRECADV(СтруктураОтбора);
				Если мИскВСД.Количество() > 0 Тогда
					Для сс=0 по мИскВСД.Количество()-1 Цикл
						ИскВСД = мИскВСД.Получить(сс);
						Если НачалоДня(ИскВСД.Дата) = НачДатаДокГашение Тогда
							Прервать;
						КонецЕсли;	
					КонецЦикла;	
					ДокУВС.ЗаполнитьДокументПоВСД(ИскВСД);
					Если ИскВСД.Количество = ТекТ.Вес Тогда
						ЕстьВСД = Истина;
					Иначе	
						РазницаВеса = ИскВСД.Количество - ТекТ.Вес;
						КоэфРазницы = ?(РазницаВеса < 0,-РазницаВеса,РазницаВеса)*100/ИскВСД.Количество;
						Если КоэфРазницы > 5 Тогда
							ЕстьВСД = Ложь;
							ДокУВС.ВСД = Документы.ВСД.ПустаяСсылка();
							мОшибки1.Добавить("" + ДокУВС + " разница в весе с подходящим ВСД " + ИскВСД + " > 5%  (в ВСД = " + ИскВСД.Количество + ", в файле = " + ТекТ.Вес + ")");
						КонецЕсли;
					КонецЕсли;
					ЕстьНесколькоВСД = ?(мИскВСД.Количество()=1,1,2);
				КонецЕсли;
			Иначе
				ЕстьНесколькоВСД = 1;
			КонецЕсли;
			
			Если ЕстьВСД = Ложь Тогда
				//ДокУВС.ДатаТТН_Возврат = ДатаТТН_Возврат; берем из ВСД, иначе нет ее
				ДокУВС.НомерТТН_Возврат = НомерТТН_Возврат;
				ДокУВС.Ответственный = Пользователи.АвторизованныйПользователь();
				ДокУВС.ПредприятиеПолучатель = ПредприятиеПолучатель;
				ДокУВС.Организация = Организация;
				ДокУВС.КонтрагентПолучатель = КонтрагентПолучатель;
				ДокУВС.ПредприятиеОтправитель = ПредприятиеОтправитель;
				ДокУВС.КонтрагентОтправитель = КонтрагентОтправитель;
				РеквизитыПоУмолчанию = ЗаполнениеРеквизитовОбъектов.ПолучитьЗначенияРеквизитовЗаполнения("Документ.ТранспортныеОперации","ТаблицаПродукция");
				Если РеквизитыПоУмолчанию.Свойство("БлагополучиеМестности") Тогда
					ДокУВС.БлагополучиеМестности = РеквизитыПоУмолчанию.БлагополучиеМестности;
				КонецЕсли;	
				Если РеквизитыПоУмолчанию.Свойство("НазначениеГруза") Тогда
					ДокУВС.НазначениеГруза = РеквизитыПоУмолчанию.НазначениеГруза;
				КонецЕсли;
				ДокУВС.ТипТТН = Справочники.ТипыТТН.ТТН;
				ДокУВС.СпособХраненияПриПеревозке = Справочники.СпособыХраненияПродукцииПриПеревозке.Охлаждаемый;
				ДокУВС.Продукция = ТекПродукция;
				ДокУВС.Количество = ТекТ.Вес;
				ДокУВС.НомерПартии = ТекТ.ИдентификаторПартии;
				ДокУВС.ФорматДатыВыработки = Перечисления.СпособыЗаданияДаты.Дата;
				ДокУВС.ФорматСрокаГодности = Перечисления.СпособыЗаданияДаты.Дата;
				Если НЕ ПустаяСтрока(ТекТ.ДатаПроизводства) Тогда
					ДокУВС.ДатаВыработкиНачало = ПолучитьДатуИзСтроки(ТекТ.ДатаПроизводства);
				КонецЕсли;	
				Если НЕ ПустаяСтрока(ТекТ.СрокГодности) Тогда
					ДокУВС.ДатаОкончанияСрокаГодностиНачало = ПолучитьДатуИзСтроки(ТекТ.СрокГодности);
				КонецЕсли;
				Если ДокУВС.ЕдиницаИзмерения.Пустая() Тогда
					ДокУВС.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоРеквизиту("GUID_Меркурий","21ed96c9-337b-4a27-8761-c6e6ad3c9f5b");
				КонецЕсли;	
				Если ДокУВС.ЕдиницаИзмерения.Пустая() Тогда
					ДокУВС.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("кг",Истина);
				КонецЕсли;
				
				СтруктураСвойств = ОбщегоНазначенияУВССервер.ПолучитьСвойстваПродукции(ТекПродукция);
				ЗаполнитьЗначенияСвойств(ДокУВС, СтруктураСвойств);
				
			Иначе
				
				ТекВСД = ДокУВС.ВСД;
				Если ДокУВС.ВСД_Возврат.Пустая() Тогда
					ТекВСДВозврат = ДокУВС.ВСД;
				Иначе
					ТекВСДВозврат = ДокУВС.ВСД_Возврат;
				КонецЕсли;	
				ДокУВС.ТипТТН_Возврат =  ТекВСДВозврат.ТипТТН;
				ДокУВС.ДатаВСД_Возврат =  ТекВСДВозврат.ДатаТТН;
				ДокУВС.НомерТТН_Возврат =  ТекВСДВозврат.НомерТТН;
				ДокУВС.НазначениеГруза = Справочники.НазначениеГрузов.НайтиПоРеквизиту("GUID_Меркурий","5b90da1b-e089-11e1-bcf3-b499babae7ea");
				ДокУВС.НазначениеГруза_Возврат = Справочники.НазначениеГрузов.НайтиПоРеквизиту("GUID_Меркурий","5b90da1b-e089-11e1-bcf3-b499babae7ea");
				
			КонецЕсли;
			
			Если ДокУВС.Организация <> Организация Тогда
				ДокУВС.Организация = Организация;
			КонецЕсли;
			
			ДокУВС.РезультатВетеринарногоКонтроля = Справочники.РезультатыКонтроляПоставки.ГрузСоответствует;
			ДокУВС.РезультатДокументарногоКонтроля = Справочники.РезультатыКонтроляПоставки.ГрузСоответствует;
			ДокУВС.РешениеОПриемеВходнойПартии = Справочники.РешенияОПриемеВходнойПартии.ПринятьВсюПоставку; 
			
			ДокУВС.Записать();
			
			НовтзСвязанныеДокументыУВС = тзСвязанныеДокументыУВС.Найти(ДокУВС.Ссылка,"Приемка");
			Если НовтзСвязанныеДокументыУВС = Неопределено Тогда
				НовтзСвязанныеДокументыУВС = тзСвязанныеДокументыУВС.Добавить();
				НовтзСвязанныеДокументыУВС.Приемка = ДокУВС.Ссылка;
				НовтзСвязанныеДокументыУВС.Продукция = ТекПродукция;
				НовтзСвязанныеДокументыУВС.Артикул = ТекПродукция.Артикул;
				НовтзСвязанныеДокументыУВС.НомерПартии = ТекТ.ИдентификаторПартии;
			КонецЕсли;	
			Если ЕстьНесколькоВСД = 0 Тогда
				НовтзСвязанныеДокументыУВС.СтатусПоВСД = Перечисления.ДМ_СтатусПриходнойОперацииПоВСД.ВСДНеНайден;
			Иначе
				НовтзСвязанныеДокументыУВС.СтатусПоВСД = Перечисления.ДМ_СтатусПриходнойОперацииПоВСД.ВСДНайден;
			КонецЕсли;
			
			
			Если Не ДокУВС.ПроверитьЗаполнение() Тогда
				Сообщения =  ПолучитьСообщенияПользователю(Истина);
				Для Каждого Сообщение Из Сообщения Цикл
					мОшибки1.Добавить(Сообщение.Текст);
				КонецЦикла;
			КонецЕсли;
			
			Если мОшибки1.Количество() > 0  Тогда
				Для мм=0 по мОшибки1.Количество()-1 Цикл
					мОшибки.Добавить(мОшибки1.Получить(мм));
				КонецЦикла;	
			КонецЕсли;	
			
			ЗаписатьОшибкиСозданияДокументаУВС(ДокУВС,ДокDanoneСсылка,"Возврат",ДокУВС.Организация,ДокУВС.ПредприятиеПолучатель,мОшибки,мСообщения,Истина);
			
		КонецЦикла;
		
		
		ДокDanone = ДокDanoneСсылка.ПолучитьОбъект();
		ДокDanone.ДМ_СвязанныеДокументыУВС.Загрузить(тзСвязанныеДокументыУВС);
		
		Если мОшибки.Количество() = 0 Тогда 
			ДокDanone.СтатусДокумента = Перечисления.СтатусДокументаСФайламиSAP.УспешноОбработан;
			//ОбновитьСводныйПриход(ДокDanone,тзСвязанныеДокументыУВС,СтруктураОтбора);
		Иначе
			ДокDanone.СтатусДокумента = Перечисления.СтатусДокументаСФайламиSAP.ОшибкаПриОбработке;
		КонецЕсли;	
		
		ДокDanone.Записать();
		
	КонецЕсли;	
	
КонецПроцедуры	

Функция ПолучитьШаблоныДляРазбораEDI()
	
	лСтруктураТзEDI = Новый Структура;
	
	//таблицы с данными по структуре строк
	//----- отгрузка клиенту
	тзEDIОтгрузкаК = Новый ТаблицаЗначений;
	тзEDIОтгрузкаК.Колонки.Добавить("ИмяПоля",Новый ОписаниеТипов("Строка"));
	тзEDIОтгрузкаК.Колонки.Добавить("НачКлюч",Новый ОписаниеТипов("Строка"));
	тзEDIОтгрузкаК.Колонки.Добавить("КонКлюч",Новый ОписаниеТипов("Строка"));
	тзEDIОтгрузкаК.Колонки.Добавить("ОсобыйТипСтроки",Новый ОписаниеТипов("Число"));  
	// 0 - обычная обработка по ограничителям полей, 1 = УсловияТранспортировки, 2 - Транспорт
	тзEDIОтгрузкаК.Колонки.Добавить("НС",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(5,0)));
	тзEDIОтгрузкаК.Колонки.Добавить("нп",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(3,0))); //номер поля в строке с нуля
	тзEDIОтгрузкаК.Колонки.Добавить("Обработано",Новый ОписаниеТипов("Булево"));
	тзEDIОтгрузкаК.Колонки.Добавить("ПроверитьСНачалаФайла",Новый ОписаниеТипов("Булево"));
	тзEDIОтгрузкаК.Колонки.Добавить("ГлавныйКлючДляПроверкиСНачалаФайла",Новый ОписаниеТипов("Строка"));
	тзEDIОтгрузкаК.Колонки.Добавить("НомСтр",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(5,0))); //номер строки в файле
	
	// например для строк 
	//RFF+ON:testmerc2'
	//DTM+171:20190304:102'
	//RFF+DQ:5000039423'
	//DTM+171:20190305:102'
	//RFF+DM:0400045785'
	// а такие как DTM+171: должны отбираться с привязкой к уже полученному базовому значению 
	//в строке RFF, тут порядок следования всегда RFF--->DTM 
	
	тзEDIОтгрузкаК.Колонки.Добавить("НесколькоЗначенийВСтроке",Новый ОписаниеТипов("Булево"));
	тзEDIОтгрузкаК.Колонки.Добавить("Необязательное",Новый ОписаниеТипов("Булево"));
	тзEDIОтгрузкаТаблицаМатериаловК = Новый ТаблицаЗначений;
	тзEDIОтгрузкаТаблицаМатериаловК.Колонки.Добавить("ИмяПоля",Новый ОписаниеТипов("Строка"));
	тзEDIОтгрузкаТаблицаМатериаловК.Колонки.Добавить("НачКлюч",Новый ОписаниеТипов("Строка"));
	тзEDIОтгрузкаТаблицаМатериаловК.Колонки.Добавить("КонКлюч",Новый ОписаниеТипов("Строка"));
	тзEDIОтгрузкаТаблицаМатериаловК.Колонки.Добавить("НС",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(5,0)));
	тзEDIОтгрузкаТаблицаМатериаловК.Колонки.Добавить("нп",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(3,0))); //номер поля в строке с нуля
	тзEDIОтгрузкаТаблицаМатериаловК.Колонки.Добавить("Обработано",Новый ОписаниеТипов("Булево"));
	тзEDIОтгрузкаТаблицаМатериаловК.Колонки.Добавить("НесколькоЗначенийВСтроке",Новый ОписаниеТипов("Булево"));
	тзEDIОтгрузкаТаблицаМатериаловК.Колонки.Добавить("Необязательное",Новый ОписаниеТипов("Булево"));
	
	//таблица с данными полей заголовка запроса SAP
	тзОтгрузкаК = Новый ТаблицаЗначений;
	
	//таблица с данными полей строк с материалами из запроса SAP
	тзОтгрузкаТаблицаМатериаловК = Новый ТаблицаЗначений;
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "НомерDESADV";
	НовСтр.НачКлюч = "BGM+351+";
	НовСтр.КонКлюч = "+9'";
	НовСтр.НС = 4;
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "ДатаDESADV"; //ГГГГММДД
	НовСтр.НачКлюч = "DTM+137:";
	НовСтр.КонКлюч = ":";
	НовСтр.НС = 5;
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "ДатаДоставки"; //ГГГГММДД
	НовСтр.НачКлюч = "DTM+17:";
	НовСтр.КонКлюч = ":";
	НовСтр.НС = 6;
	
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "СуммаСНДСПоДокументу"; //ХХХХ.ХХ
	НовСтр.НачКлюч = "MOA+86:";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 7;
	НовСтр.Необязательное = Истина;
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "СуммаБезСНДСПоДокументу"; //ХХХХ.ХХ
	НовСтр.НачКлюч = "MOA+125:";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 8;
	НовСтр.Необязательное = Истина;
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "СуммаНДСПоДокументу"; //ХХХХ.ХХ 
	НовСтр.НачКлюч = "MOA+124:";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 9;
	НовСтр.Необязательное = Истина;
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "НомерЗаказаВУСКлиент";
	НовСтр.НачКлюч = "RFF+ON:";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 10;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "ДатаЗаказаВУСКлиент"; //ГГГГММДД
	НовСтр.НачКлюч = "DTM+171:";
	НовСтр.КонКлюч = ":";
	НовСтр.НС = 11;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	НовСтр.ГлавныйКлючДляПроверкиСНачалаФайла = "RFF+ON:";
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "НомерЗаказаВУСДанон";
	НовСтр.НачКлюч = "RFF+DM:";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 12;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "ДатаЗаказаВУСДанон"; //ГГГГММДД
	НовСтр.НачКлюч = "DTM+171:";
	НовСтр.КонКлюч = ":";
	НовСтр.НС = 13;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	НовСтр.ГлавныйКлючДляПроверкиСНачалаФайла = "RFF+DM:";
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "НомерТТН_ТН_ПоставкиВУСДанон";
	НовСтр.НачКлюч = "RFF+DQ:";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 14;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "ДатаТТН_ТН_ПоставкиВУСДанон"; //ГГГГММДД
	НовСтр.НачКлюч = "DTM+171:";
	НовСтр.КонКлюч = ":";
	НовСтр.НС = 15;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	НовСтр.ГлавныйКлючДляПроверкиСНачалаФайла = "RFF+DQ:";
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "ДопНомерДокументаОтгрузкиДляТрекера";
	НовСтр.НачКлюч = "RFF+CU:";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 16;
	НовСтр.Необязательное = Истина;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "НомерУПД_СчетаФактуры";
	НовСтр.НачКлюч = "RFF+IV:";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 17;
	НовСтр.Необязательное = Истина;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "ДатаУПД_СчетаФактуры"; //ГГГГММДД
	НовСтр.НачКлюч = "DTM+171:";
	НовСтр.КонКлюч = ":";
	НовСтр.НС = 18;
	НовСтр.Необязательное = Истина;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	НовСтр.ГлавныйКлючДляПроверкиСНачалаФайла = "RFF+IV:";
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "НомерКонтракта";
	НовСтр.НачКлюч = "RFF+CT:";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 19;
	НовСтр.Необязательное = Истина;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "ДатаКонтракта"; //ГГГГММДД
	НовСтр.НачКлюч = "DTM+171:";
	НовСтр.КонКлюч = ":";
	НовСтр.НС = 20;
	НовСтр.Необязательное = Истина;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	НовСтр.ГлавныйКлючДляПроверкиСНачалаФайла = "RFF+CT:";
	
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "GLNПокупателя_Клиента";
	НовСтр.НачКлюч = "NAD+BY+";
	НовСтр.КонКлюч = "::9'";
	НовСтр.НС = 21;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "ИННПокупателя_Клиента";
	НовСтр.НачКлюч = "RFF+FC:";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 22;
	НовСтр.Необязательное = Истина;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	НовСтр.ГлавныйКлючДляПроверкиСНачалаФайла = "NAD+BY+";
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "КПППокупателя_Клиента";
	НовСтр.НачКлюч = "RFF+XA:";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 23;
	НовСтр.Необязательное = Истина;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	НовСтр.ГлавныйКлючДляПроверкиСНачалаФайла = "NAD+BY+";
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "GUIDПокупателя_Клиента";
	НовСтр.НачКлюч = "RFF+AES:";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 24;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	НовСтр.ГлавныйКлючДляПроверкиСНачалаФайла = "NAD+BY+";
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "GLNПродавца";
	НовСтр.НачКлюч = "NAD+SU+";
	НовСтр.КонКлюч = "::9'";
	НовСтр.НС = 25;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "КодПоставщикаВУСКлиента";
	НовСтр.НачКлюч = "RFF+YC1:";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 26;
	НовСтр.Необязательное = Истина;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	НовСтр.ГлавныйКлючДляПроверкиСНачалаФайла = "NAD+SU+";
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "ИННПродавца";
	НовСтр.НачКлюч = "RFF+FC:";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 27;
	НовСтр.Необязательное = Истина;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	НовСтр.ГлавныйКлючДляПроверкиСНачалаФайла = "NAD+SU+";
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "КПППродавца";
	НовСтр.НачКлюч = "RFF+XA:";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 28;
	НовСтр.Необязательное = Истина;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	НовСтр.ГлавныйКлючДляПроверкиСНачалаФайла = "NAD+SU+";
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "GUIDПродавца";
	НовСтр.НачКлюч = "RFF+AES:";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 29;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	НовСтр.ГлавныйКлючДляПроверкиСНачалаФайла = "NAD+SU+";
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "GLNПлательщика";
	НовСтр.НачКлюч = "NAD+IV+";
	НовСтр.КонКлюч = "::9'";
	НовСтр.НС = 30;
	НовСтр.Необязательное = Истина;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "GLNГрузополучателя";
	НовСтр.НачКлюч = "NAD+DP+";
	НовСтр.КонКлюч = "::9'";
	НовСтр.НС = 31;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "ИННГрузополучателя";
	НовСтр.НачКлюч = "RFF+FC:";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 32;
	НовСтр.Необязательное = Истина;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	НовСтр.ГлавныйКлючДляПроверкиСНачалаФайла = "NAD+DP+";
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "КППГрузополучателя";
	НовСтр.НачКлюч = "RFF+XA:";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 33;
	НовСтр.Необязательное = Истина;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	НовСтр.ГлавныйКлючДляПроверкиСНачалаФайла = "NAD+DP+";
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "GUIDГрузополучателя";
	НовСтр.НачКлюч = "RFF+AES:";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 34;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	НовСтр.ГлавныйКлючДляПроверкиСНачалаФайла = "NAD+DP+";
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "GLNПолучателяДенежныхСредств";
	НовСтр.НачКлюч = "NAD+PL+";
	НовСтр.КонКлюч = "::9'";
	НовСтр.НС = 35;
	НовСтр.Необязательное = Истина;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	НовСтр.ГлавныйКлючДляПроверкиСНачалаФайла = "NAD+DP+";
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "GLNГрузоотправителя";
	НовСтр.НачКлюч = "NAD+CZ+";
	НовСтр.КонКлюч = "::9'";
	НовСтр.НС = 36;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "ИННГрузоотправителя";
	НовСтр.НачКлюч = "RFF+FC:";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 37;
	НовСтр.Необязательное = Истина;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	НовСтр.ГлавныйКлючДляПроверкиСНачалаФайла = "NAD+CZ+";
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "КППГрузоотправителя";
	НовСтр.НачКлюч = "RFF+XA:";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 38;
	НовСтр.Необязательное = Истина;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	НовСтр.ГлавныйКлючДляПроверкиСНачалаФайла = "NAD+CZ+";
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "GUIDГрузоотправителя";
	НовСтр.НачКлюч = "RFF+AES:";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 39;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	НовСтр.ГлавныйКлючДляПроверкиСНачалаФайла = "NAD+CZ+";
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "ИдентификаторКомпанииПеревозчика";
	НовСтр.НачКлюч = "NAD+CA+";
	НовСтр.КонКлюч = "::88'";
	НовСтр.НС = 40;
	НовСтр.Необязательное = Истина;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "GUIDКомпанииПеревозчика";
	НовСтр.НачКлюч = "RFF+AES:";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 41;
	НовСтр.Необязательное = Истина;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	НовСтр.ГлавныйКлючДляПроверкиСНачалаФайла = "NAD+CA+";
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "УсловияТранспортировки";
	НовСтр.НачКлюч = "TOD+6++SD:::";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 42;
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "ТипТранспорта"; // 31 = truck ( = авто), 73 = train (= жд)
	НовСтр.НачКлюч = "TDT+1+++";
	НовСтр.КонКлюч = "+";
	НовСтр.ОсобыйТипСтроки = 2;
	НовСтр.НС = 43;
	НовСтр.нп = 1;
	НовСтр.НесколькоЗначенийВСтроке = Истина;
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "Водитель";
	НовСтр.НачКлюч = ":::";
	НовСтр.КонКлюч = "+";
	НовСтр.ОсобыйТипСтроки = 2;
	НовСтр.НС = 43;
	НовСтр.нп = 2;
	НовСтр.НесколькоЗначенийВСтроке = Истина;
	НовСтр.Необязательное = Истина;
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "ГосНомерПрицепа_Полуприцепа";
	НовСтр.НачКлюч = ":PR:";
	НовСтр.КонКлюч = "+";
	НовСтр.ОсобыйТипСтроки = 2;
	НовСтр.НС = 43;
	НовСтр.нп = 3;
	НовСтр.НесколькоЗначенийВСтроке = Истина;
	НовСтр.Необязательное = Истина;
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "ГосНомерАвтомобиля";
	НовСтр.НачКлюч = ":::";
	НовСтр.КонКлюч = "'";
	НовСтр.ОсобыйТипСтроки = 2;
	НовСтр.НС = 43;
	НовСтр.нп = 4;
	НовСтр.НесколькоЗначенийВСтроке = Истина;
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "ГосНомерВторогоПрицепа_Полуприцепа";
	НовСтр.НачКлюч = "TDT+30+1+60+";
	НовСтр.КонКлюч = "+";
	НовСтр.ОсобыйТипСтроки = 3;
	НовСтр.НС = 44;
	НовСтр.нп = 1;
	НовСтр.НесколькоЗначенийВСтроке = Истина;
	НовСтр.Необязательное = Истина;
	
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "ГосНомерВторогоАвтомобиля";
	НовСтр.НачКлюч = ":::";
	НовСтр.КонКлюч = "'";
	НовСтр.ОсобыйТипСтроки = 3;
	НовСтр.НС = 44;
	НовСтр.нп = 2;
	НовСтр.НесколькоЗначенийВСтроке = Истина;
	НовСтр.Необязательное = Истина;
	
	//LOC+11+1:::a1f45da2-4a08-492c-9fd1-5e04362ab6e1'
	
	НовСтр = тзEDIОтгрузкаК.Добавить();
	НовСтр.ИмяПоля = "GUIDТочкиПерегрузкиПриМультимодальныхПеревозках";
	НовСтр.НачКлюч = "LOC+11+1:::";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 45;
	НовСтр.Необязательное = Истина;
	//финиш заголовка
	
	Для Каждого Тектз из тзEDIОтгрузкаК Цикл
		тзОтгрузкаК.Колонки.Добавить(Тектз.ИмяПоля,Новый ОписаниеТипов("Строка"));
	КонецЦикла;	
	
	НовСтр = тзEDIОтгрузкаТаблицаМатериаловК.Добавить();
	НовСтр.ИмяПоля = "EANМатериала";
	НовСтр.НачКлюч = "++";
	НовСтр.КонКлюч = ":SRV'";
	НовСтр.НС = 1; //номер строки с начала секции с очередным материалом
	
	НовСтр = тзEDIОтгрузкаТаблицаМатериаловК.Добавить();
	НовСтр.ИмяПоля = "АртикулМатериалаВУСДанон";
	НовСтр.НачКлюч = "PIA+1+";
	НовСтр.КонКлюч = ":SA'";
	НовСтр.НС = 2;
	
	НовСтр = тзEDIОтгрузкаТаблицаМатериаловК.Добавить();
	НовСтр.ИмяПоля = "АртикулМатериалаВУСКлиента";
	НовСтр.НачКлюч = "PIA+1+";
	НовСтр.КонКлюч = ":IN'";
	НовСтр.НС = 3;
	НовСтр.Необязательное = Истина;
	
	НовСтр = тзEDIОтгрузкаТаблицаМатериаловК.Добавить();
	НовСтр.ИмяПоля = "НаименованиеМатериала";
	НовСтр.НачКлюч = "IMD+F++:::";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 4;
	
	НовСтр = тзEDIОтгрузкаТаблицаМатериаловК.Добавить();
	НовСтр.ИмяПоля = "ЕдиницаИзмерения";  // код ЕИ, обычно KGM (кг)
	НовСтр.НачКлюч = "MEA+PD+AAA+";
	НовСтр.КонКлюч = ":";
	НовСтр.НС = 5;
	НовСтр.НесколькоЗначенийВСтроке = Истина;
	
	НовСтр = тзEDIОтгрузкаТаблицаМатериаловК.Добавить();
	НовСтр.ИмяПоля = "Вес";  // Вес - ТВСД создаем всегда в КГ
	НовСтр.НачКлюч = ":";
	НовСтр.КонКлюч = "'"; //ХХХХ.ХХХ
	НовСтр.НС = 5;
	НовСтр.нп = 1;
	НовСтр.НесколькоЗначенийВСтроке = Истина;
	
	НовСтр = тзEDIОтгрузкаТаблицаМатериаловК.Добавить();
	НовСтр.ИмяПоля = "Количество";
	НовСтр.НачКлюч = "QTY+12:";
	НовСтр.КонКлюч = ":PCE'"; 
	НовСтр.НС = 6;
	
	НовСтр = тзEDIОтгрузкаТаблицаМатериаловК.Добавить();
	НовСтр.ИмяПоля = "ВложениеВКоробку";
	НовСтр.НачКлюч = "QTY+59:";
	НовСтр.КонКлюч = "'"; 
	НовСтр.НС = 7;
	НовСтр.Необязательное = Истина;
	
	НовСтр = тзEDIОтгрузкаТаблицаМатериаловК.Добавить();
	НовСтр.ИмяПоля = "СтранаПроисхождения";
	НовСтр.НачКлюч = "ALI+";
	НовСтр.КонКлюч = "'"; 
	НовСтр.НС = 8;
	НовСтр.Необязательное = Истина;
	
	НовСтр = тзEDIОтгрузкаТаблицаМатериаловК.Добавить();
	НовСтр.ИмяПоля = "СрокГодности"; //ГГГГДДММ
	НовСтр.НачКлюч = "DTM+36:";
	НовСтр.КонКлюч = ":"; 
	НовСтр.НС = 9;
	
	НовСтр = тзEDIОтгрузкаТаблицаМатериаловК.Добавить();
	НовСтр.ИмяПоля = "РезультатВСЭ";
	НовСтр.НачКлюч = "FTX+ACL+++";
	НовСтр.КонКлюч = "'"; 
	НовСтр.НС = 10;
	
	НовСтр = тзEDIОтгрузкаТаблицаМатериаловК.Добавить();
	НовСтр.ИмяПоля = "ИдентификаторПоднадзорностиПродукта";
	НовСтр.НачКлюч = "FTX+AAR+++";
	НовСтр.КонКлюч = "'"; 
	НовСтр.НС = 11;
	НовСтр.Необязательное = Истина;
	
	НовСтр = тзEDIОтгрузкаТаблицаМатериаловК.Добавить();
	НовСтр.ИмяПоля = "СтавкаНДС";
	НовСтр.НачКлюч = "FTX+ZZZ++";
	НовСтр.КонКлюч = "'"; 
	НовСтр.НС = 12;
	
	НовСтр = тзEDIОтгрузкаТаблицаМатериаловК.Добавить();
	НовСтр.ИмяПоля = "ЦенаБезНДС";
	НовСтр.НачКлюч = "MOA+146:";
	НовСтр.КонКлюч = ":RUR'"; 
	НовСтр.НС = 13;
	
	НовСтр = тзEDIОтгрузкаТаблицаМатериаловК.Добавить();
	НовСтр.ИмяПоля = "СуммаНДС";
	НовСтр.НачКлюч = "MOA+124:";
	НовСтр.КонКлюч = ":RUR'"; 
	НовСтр.НС = 14;
	
	НовСтр = тзEDIОтгрузкаТаблицаМатериаловК.Добавить();
	НовСтр.ИмяПоля = "СуммаБезНДС";
	НовСтр.НачКлюч = "MOA+203:";
	НовСтр.КонКлюч = ":RUR'"; 
	НовСтр.НС = 15;
	
	НовСтр = тзEDIОтгрузкаТаблицаМатериаловК.Добавить();
	НовСтр.ИмяПоля = "СуммаСНДС";
	НовСтр.НачКлюч = "MOA+79:";
	НовСтр.КонКлюч = ":RUR'"; 
	НовСтр.НС = 16;
	
	НовСтр = тзEDIОтгрузкаТаблицаМатериаловК.Добавить();
	НовСтр.ИмяПоля = "НомерГТД";
	НовСтр.НачКлюч = "RFF+ABT:";
	НовСтр.КонКлюч = "'"; 
	НовСтр.НС = 17;
	НовСтр.Необязательное = Истина;
	
	НовСтр = тзEDIОтгрузкаТаблицаМатериаловК.Добавить();
	НовСтр.ИмяПоля = "UUIDТВСД"; // UUID ТВСД - подстановка на стороне провайдера, если сеть запрашивает. Если DESADV содержит номер ТВСД, запрос в Меркурий не делать
	НовСтр.НачКлюч = "RFF+ACE:";
	НовСтр.КонКлюч = "'"; 
	НовСтр.НС = 18;
	НовСтр.Необязательное = Истина;
	
	НовСтр = тзEDIОтгрузкаТаблицаМатериаловК.Добавить();
	НовСтр.ИмяПоля = "НомерПартии";
	НовСтр.НачКлюч = "RFF+BT:";
	НовСтр.КонКлюч = "'"; 
	НовСтр.НС = 19;
	
	Для Каждого Тектз из тзEDIОтгрузкаТаблицаМатериаловК Цикл
		тзОтгрузкаТаблицаМатериаловК.Колонки.Добавить(Тектз.ИмяПоля,Новый ОписаниеТипов("Строка"));
	КонецЦикла;	
	
	//---------- перемещение Inter и Intra
	тзEDIОПеремещение = Новый ТаблицаЗначений;
	тзEDIОПеремещение.Колонки.Добавить("ИмяПоля",Новый ОписаниеТипов("Строка"));
	тзEDIОПеремещение.Колонки.Добавить("НачКлюч",Новый ОписаниеТипов("Строка"));
	тзEDIОПеремещение.Колонки.Добавить("КонКлюч",Новый ОписаниеТипов("Строка"));
	тзEDIОПеремещение.Колонки.Добавить("ОсобыйТипСтроки",Новый ОписаниеТипов("Число"));  
	// 0 - обычная обработка по ограничителям полей, 1 = УсловияТранспортировки, 2 - Транспорт
	тзEDIОПеремещение.Колонки.Добавить("НС",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(5,0)));
	тзEDIОПеремещение.Колонки.Добавить("нп",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(3,0))); //номер поля в строке с нуля
	тзEDIОПеремещение.Колонки.Добавить("Обработано",Новый ОписаниеТипов("Булево"));
	тзEDIОПеремещение.Колонки.Добавить("НесколькоЗначенийВСтроке",Новый ОписаниеТипов("Булево"));
	тзEDIОПеремещение.Колонки.Добавить("Необязательное",Новый ОписаниеТипов("Булево"));
	тзEDIОПеремещение.Колонки.Добавить("ПроверитьСНачалаФайла",Новый ОписаниеТипов("Булево"));
	тзEDIОПеремещение.Колонки.Добавить("ГлавныйКлючДляПроверкиСНачалаФайла",Новый ОписаниеТипов("Строка"));
	тзEDIОПеремещение.Колонки.Добавить("НомСтр",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(5,0))); //номер строки в файле
	
	// например для строк 
	//RFF+ON:testmerc2'
	//DTM+171:20190304:102'
	//RFF+DQ:5000039423'
	//DTM+171:20190305:102'
	//RFF+DM:0400045785'
	// а такие как DTM+171: должны отбираться с привязкой к уже полученному базовому значению 
	//в строке RFF, тут порядок следования всегда RFF--->DTM 
	
	тзEDIОПеремещениеТаблицаМатериалов = Новый ТаблицаЗначений;
	тзEDIОПеремещениеТаблицаМатериалов.Колонки.Добавить("ИмяПоля",Новый ОписаниеТипов("Строка"));
	тзEDIОПеремещениеТаблицаМатериалов.Колонки.Добавить("НачКлюч",Новый ОписаниеТипов("Строка"));
	тзEDIОПеремещениеТаблицаМатериалов.Колонки.Добавить("КонКлюч",Новый ОписаниеТипов("Строка"));
	тзEDIОПеремещениеТаблицаМатериалов.Колонки.Добавить("НС",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(5,0)));
	тзEDIОПеремещениеТаблицаМатериалов.Колонки.Добавить("нп",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(3,0))); //номер поля в строке с нуля
	тзEDIОПеремещениеТаблицаМатериалов.Колонки.Добавить("Обработано",Новый ОписаниеТипов("Булево"));
	тзEDIОПеремещениеТаблицаМатериалов.Колонки.Добавить("НесколькоЗначенийВСтроке",Новый ОписаниеТипов("Булево"));
	тзEDIОПеремещениеТаблицаМатериалов.Колонки.Добавить("Необязательное",Новый ОписаниеТипов("Булево"));
	
	
	//таблица с данными полей заголовка запроса SAP
	тзПеремещение = Новый ТаблицаЗначений;
	
	//таблица с данными полей строк с материалами из запроса SAP
	тзПеремещениеТаблицаМатериалов = Новый ТаблицаЗначений;
	
	НовСтр = тзEDIОПеремещение.Добавить();
	НовСтр.ИмяПоля = "НомерDESADV";
	НовСтр.НачКлюч = "BGM+351+";
	НовСтр.КонКлюч = "+9'";
	НовСтр.НС = 4;
	
	НовСтр = тзEDIОПеремещение.Добавить();
	НовСтр.ИмяПоля = "ДатаDESADV"; //ГГГГММДД
	НовСтр.НачКлюч = "DTM+137:";
	НовСтр.КонКлюч = ":";
	НовСтр.НС = 5;
	
	НовСтр = тзEDIОПеремещение.Добавить();
	НовСтр.ИмяПоля = "ДатаДоставки"; //ГГГГММДД
	НовСтр.НачКлюч = "DTM+17:";
	НовСтр.КонКлюч = ":";
	НовСтр.НС = 6;
	
	НовСтр = тзEDIОПеремещение.Добавить();
	НовСтр.ИмяПоля = "ПризнакВозвратнойПоставки";  // устарело, теперь поле ПризнакВозврата
	НовСтр.НачКлюч = "FTX+ZZZ+++";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 7;
	НовСтр.Необязательное = Истина;
	
	
	НовСтр = тзEDIОПеремещение.Добавить();
	НовСтр.ИмяПоля = "НомерЗаказаВУСКлиент";
	НовСтр.НачКлюч = "RFF+ON:";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 8;
	НовСтр.Необязательное = Истина;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	
	
	НовСтр = тзEDIОПеремещение.Добавить();
	НовСтр.ИмяПоля = "НомерТТН_ТН_ПоставкиВУСДанон"; 
	НовСтр.НачКлюч = "RFF+DQ:";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 9;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	
	НовСтр = тзEDIОПеремещение.Добавить();
	НовСтр.ИмяПоля = "ДатаТТН_ТН_ПоставкиВУСДанон";
	НовСтр.НачКлюч = "DTM+171:";
	НовСтр.КонКлюч = ":";
	НовСтр.НС = 10;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	НовСтр.ГлавныйКлючДляПроверкиСНачалаФайла = "RFF+DQ:";
	
	НовСтр = тзEDIОПеремещение.Добавить();
	НовСтр.ИмяПоля = "ДопНомерДокументаОтгрузкиДляТрекера";
	НовСтр.НачКлюч = "RFF+CU:";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 11;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	
	НовСтр = тзEDIОПеремещение.Добавить();
	НовСтр.ИмяПоля = "GLNПокупателя";
	НовСтр.НачКлюч = "NAD+BY+";
	НовСтр.КонКлюч = "::9'";
	НовСтр.НС = 12;
	НовСтр.Необязательное = Истина;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	
	НовСтр = тзEDIОПеремещение.Добавить();
	НовСтр.ИмяПоля = "GUIDПокупателя";
	НовСтр.НачКлюч = "RFF+AES:";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 13;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	НовСтр.ГлавныйКлючДляПроверкиСНачалаФайла = "NAD+BY+";
	
	НовСтр = тзEDIОПеремещение.Добавить();
	НовСтр.ИмяПоля = "GLNПродавца";
	НовСтр.НачКлюч = "NAD+SU+";
	НовСтр.КонКлюч = "::9'";
	НовСтр.НС = 14;
	НовСтр.Необязательное = Истина;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	
	НовСтр = тзEDIОПеремещение.Добавить();
	НовСтр.ИмяПоля = "GUIDПродавца";
	НовСтр.НачКлюч = "RFF+AES:";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 15;
	НовСтр.Необязательное = Истина;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	НовСтр.ГлавныйКлючДляПроверкиСНачалаФайла = "NAD+SU+";
	
	НовСтр = тзEDIОПеремещение.Добавить();
	НовСтр.ИмяПоля = "GLNГрузополучателя";
	НовСтр.НачКлюч = "NAD+DP+";
	НовСтр.КонКлюч = "::9'";
	НовСтр.НС = 16;
	НовСтр.Необязательное = Истина;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	
	НовСтр = тзEDIОПеремещение.Добавить();
	НовСтр.ИмяПоля = "GUIDГрузополучателя";
	НовСтр.НачКлюч = "RFF+AES:";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 17;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	НовСтр.ГлавныйКлючДляПроверкиСНачалаФайла = "NAD+DP+";
	
	НовСтр = тзEDIОПеремещение.Добавить();
	НовСтр.ИмяПоля = "GLNГрузоотправителя";
	НовСтр.НачКлюч = "NAD+CZ+";
	НовСтр.КонКлюч = "::9'";
	НовСтр.НС = 18;
	НовСтр.Необязательное = Истина;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	
	НовСтр = тзEDIОПеремещение.Добавить();
	НовСтр.ИмяПоля = "GUIDГрузоотправителя";
	НовСтр.НачКлюч = "RFF+AES:";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 19;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	НовСтр.ГлавныйКлючДляПроверкиСНачалаФайла = "NAD+CZ+";
	
	НовСтр = тзEDIОПеремещение.Добавить();
	НовСтр.ИмяПоля = "Пользователь"; //ПодстановкаНаСторонеПровайдераПоПравилу используя GLN в NAD+SU найти его пользователя
	НовСтр.НачКлюч = "CTA+CO+:";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 20;
	НовСтр.Необязательное = Истина;
	
	НовСтр = тзEDIОПеремещение.Добавить();
	НовСтр.ИмяПоля = "ИдентификаторКомпанииПеревозчика";
	НовСтр.НачКлюч = "NAD+CA+";
	НовСтр.КонКлюч = "::88'";
	НовСтр.НС = 21;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	
	НовСтр = тзEDIОПеремещение.Добавить();
	НовСтр.ИмяПоля = "GUIDКомпанииПеревозчика";
	НовСтр.НачКлюч = "RFF+AES:";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 22;
	НовСтр.ПроверитьСНачалаФайла = Истина;
	НовСтр.ГлавныйКлючДляПроверкиСНачалаФайла = "NAD+CA+";
	
	НовСтр = тзEDIОПеремещение.Добавить();
	НовСтр.ИмяПоля = "УсловияТранспортировки";
	НовСтр.НачКлюч = "TOD+6++SD:::";
	НовСтр.КонКлюч = "'";
	НовСтр.ОсобыйТипСтроки = 1;
	НовСтр.НС = 23;
	НовСтр.нп = 1;
	НовСтр.НесколькоЗначенийВСтроке = Истина;
	
	НовСтр = тзEDIОПеремещение.Добавить();
	НовСтр.ИмяПоля = "ПризнакВозврата";
	НовСтр.НачКлюч = ":";   
	НовСтр.КонКлюч = "'";
	НовСтр.ОсобыйТипСтроки = 1;
	НовСтр.НС = 23;
	НовСтр.нп = 2;
	НовСтр.НесколькоЗначенийВСтроке = Истина;
	НовСтр.Необязательное = Истина;
	
	НовСтр = тзEDIОПеремещение.Добавить();
	НовСтр.ИмяПоля = "ТипТранспорта"; // 31 = truck ( = авто), 73 = train (= жд)
	НовСтр.НачКлюч = "TDT+1+++";
	НовСтр.КонКлюч = "+";
	НовСтр.ОсобыйТипСтроки = 2;
	НовСтр.НС = 24;
	НовСтр.нп = 1;
	НовСтр.НесколькоЗначенийВСтроке = Истина;
	
	НовСтр = тзEDIОПеремещение.Добавить();
	НовСтр.ИмяПоля = "Водитель";
	НовСтр.НачКлюч = ":::";
	НовСтр.КонКлюч = "+";
	НовСтр.ОсобыйТипСтроки = 2;
	НовСтр.НС = 24;
	НовСтр.нп = 2;
	НовСтр.НесколькоЗначенийВСтроке = Истина;
	НовСтр.Необязательное = Истина;
	
	
	НовСтр = тзEDIОПеремещение.Добавить();
	НовСтр.ИмяПоля = "ГосНомерПрицепа_Полуприцепа";
	НовСтр.НачКлюч = ":PR:";
	НовСтр.КонКлюч = "+";
	НовСтр.ОсобыйТипСтроки = 2;
	НовСтр.НС = 24;
	НовСтр.нп = 3;
	НовСтр.НесколькоЗначенийВСтроке = Истина;
	НовСтр.Необязательное = Истина;
	
	НовСтр = тзEDIОПеремещение.Добавить();
	НовСтр.ИмяПоля = "ГосНомерАвтомобиля";
	НовСтр.НачКлюч = ":::";
	НовСтр.КонКлюч = "'";
	НовСтр.ОсобыйТипСтроки = 2;
	НовСтр.НС = 24;
	НовСтр.нп = 4;
	НовСтр.НесколькоЗначенийВСтроке = Истина;
	//финиш заголовка
	
	Для Каждого Тектз из тзEDIОПеремещение Цикл
		тзПеремещение.Колонки.Добавить(Тектз.ИмяПоля,Новый ОписаниеТипов("Строка"));
	КонецЦикла;	
	
	НовСтр = тзEDIОПеремещениеТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "EANМатериала";
	НовСтр.НачКлюч = "++";
	НовСтр.КонКлюч = ":SRV'";
	НовСтр.НС = 1; //номер строки с начала секции с очередным материалом
	
	НовСтр = тзEDIОПеремещениеТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "АртикулМатериалаВУСДанон";
	НовСтр.НачКлюч = "PIA+1+";
	НовСтр.КонКлюч = ":SA'";
	НовСтр.НС = 2;
	
	НовСтр = тзEDIОПеремещениеТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "АртикулМатериалаВУСКлиента";
	НовСтр.НачКлюч = "PIA+1+";
	НовСтр.КонКлюч = ":IN'";
	НовСтр.НС = 3;
	
	НовСтр = тзEDIОПеремещениеТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "НаименованиеМатериала";
	НовСтр.НачКлюч = "IMD+F++:::";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 4;
	
	НовСтр = тзEDIОПеремещениеТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "ЕдиницаИзмерения";  // код ЕИ, обычно KGM (кг)
	НовСтр.НачКлюч = "MEA+PD+AAA+";
	НовСтр.КонКлюч = ":";
	НовСтр.НС = 5;
	НовСтр.НесколькоЗначенийВСтроке = Истина;
	
	НовСтр = тзEDIОПеремещениеТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "Вес";  // Вес - ТВСД создаем всегда в КГ
	НовСтр.НачКлюч = ":";
	НовСтр.КонКлюч = "'"; //ХХХХ.ХХХ
	НовСтр.НС = 5;
	НовСтр.нп = 1;
	НовСтр.НесколькоЗначенийВСтроке = Истина;
	
	НовСтр = тзEDIОПеремещениеТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "Количество";
	НовСтр.НачКлюч = "QTY+12:";
	НовСтр.КонКлюч = ":PCE'"; 
	НовСтр.НС = 6;
	НовСтр.Необязательное = Истина;
	
	НовСтр = тзEDIОПеремещениеТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "ВложениеВКоробку";
	НовСтр.НачКлюч = "QTY+59:";
	НовСтр.КонКлюч = "'"; 
	НовСтр.НС = 7;
	НовСтр.Необязательное = Истина;
	
	НовСтр = тзEDIОПеремещениеТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "СрокГодности"; //ГГГГДДММ
	НовСтр.НачКлюч = "DTM+36:";
	НовСтр.КонКлюч = ":"; 
	НовСтр.НС = 8;
	НовСтр.Необязательное = Истина;
	
	
	НовСтр = тзEDIОПеремещениеТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "РезультатВСЭ";
	НовСтр.НачКлюч = "FTX+ACL+++";
	НовСтр.КонКлюч = "'"; 
	НовСтр.НС = 9;
	
	НовСтр = тзEDIОПеремещениеТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "ИдентификаторПоднадзорностиПродукта";
	НовСтр.НачКлюч = "FTX+AAR+++";
	НовСтр.КонКлюч = "'"; 
	НовСтр.НС = 10;
	
	НовСтр = тзEDIОПеремещениеТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "ПризнакНеобходимостиСразуПогаситьСозданныйТВСД";
	НовСтр.НачКлюч = "FTX+SPH+++";
	НовСтр.КонКлюч = "'"; 
	НовСтр.НС = 11;
	НовСтр.Необязательное = Истина;
	
	
	НовСтр = тзEDIОПеремещениеТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "UUIDТВСД"; // UUID ТВСД - подстановка на стороне провайдера, если сеть запрашивает. Если DESADV содержит номер ТВСД, запрос в Меркурий не делать
	НовСтр.НачКлюч = "RFF+ACE:";
	НовСтр.КонКлюч = "'"; 
	НовСтр.НС = 12;
	НовСтр.Необязательное = Истина;
	
	
	НовСтр = тзEDIОПеремещениеТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "НомерПартии";
	НовСтр.НачКлюч = "RFF+BT:";
	НовСтр.КонКлюч = "'"; 
	НовСтр.НС = 13;
	
	Для Каждого Тектз из тзEDIОПеремещениеТаблицаМатериалов Цикл
		тзПеремещениеТаблицаМатериалов.Колонки.Добавить(Тектз.ИмяПоля,Новый ОписаниеТипов("Строка"));
	КонецЦикла;	
	
	//---------- инвентаризация
	тзEDIИнвентаризация = Новый ТаблицаЗначений;
	тзEDIИнвентаризация.Колонки.Добавить("ИмяПоля",Новый ОписаниеТипов("Строка"));
	тзEDIИнвентаризация.Колонки.Добавить("НачКлюч",Новый ОписаниеТипов("Строка"));
	тзEDIИнвентаризация.Колонки.Добавить("КонКлюч",Новый ОписаниеТипов("Строка"));
	тзEDIИнвентаризация.Колонки.Добавить("НС",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(5,0)));
	тзEDIИнвентаризация.Колонки.Добавить("нп",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(3,0))); //номер поля в строке с нуля
	тзEDIИнвентаризация.Колонки.Добавить("Обработано",Новый ОписаниеТипов("Булево"));
	тзEDIИнвентаризация.Колонки.Добавить("НесколькоЗначенийВСтроке",Новый ОписаниеТипов("Булево"));
	тзEDIИнвентаризация.Колонки.Добавить("Необязательное",Новый ОписаниеТипов("Булево"));
	
	тзEDIИнвентаризацияТаблицаМатериалов = Новый ТаблицаЗначений;
	тзEDIИнвентаризацияТаблицаМатериалов.Колонки.Добавить("ИмяПоля",Новый ОписаниеТипов("Строка"));
	тзEDIИнвентаризацияТаблицаМатериалов.Колонки.Добавить("НачКлюч",Новый ОписаниеТипов("Строка"));
	тзEDIИнвентаризацияТаблицаМатериалов.Колонки.Добавить("КонКлюч",Новый ОписаниеТипов("Строка"));
	тзEDIИнвентаризацияТаблицаМатериалов.Колонки.Добавить("НС",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(5,0)));
	тзEDIИнвентаризацияТаблицаМатериалов.Колонки.Добавить("нп",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(3,0))); //номер поля в строке с нуля
	тзEDIИнвентаризацияТаблицаМатериалов.Колонки.Добавить("Обработано",Новый ОписаниеТипов("Булево"));
	тзEDIИнвентаризацияТаблицаМатериалов.Колонки.Добавить("НесколькоЗначенийВСтроке",Новый ОписаниеТипов("Булево"));
	тзEDIИнвентаризацияТаблицаМатериалов.Колонки.Добавить("Необязательное",Новый ОписаниеТипов("Булево"));
	
	
	//таблица с данными полей заголовка запроса SAP
	тзИнвентаризация = Новый ТаблицаЗначений;
	
	//таблица с данными полей строк с материалами из запроса SAP
	тзИнвентаризацияТаблицаМатериалов = Новый ТаблицаЗначений;
	
	НовСтр = тзEDIИнвентаризация.Добавить();
	НовСтр.ИмяПоля = "НомерСообщения";
	НовСтр.НачКлюч = "UNH+";
	НовСтр.КонКлюч = "+";
	НовСтр.НС = 4;
	
	НовСтр = тзEDIИнвентаризация.Добавить();
	НовСтр.ИмяПоля = "ДатаИВремяИнвентаризации"; //ГГГГММДДЧЧСС
	НовСтр.НачКлюч = "DTM+137:";
	НовСтр.КонКлюч = ":";
	НовСтр.НС = 5;
	
	НовСтр = тзEDIИнвентаризация.Добавить();
	НовСтр.ИмяПоля = "GLNПоднадзорногоОбъекта";
	НовСтр.НачКлюч = "NAD+WH+";
	НовСтр.КонКлюч = "::9++";
	НовСтр.НС = 6;
	НовСтр.НесколькоЗначенийВСтроке = Истина;
	НовСтр.Необязательное = Истина;
	
	НовСтр = тзEDIИнвентаризация.Добавить();
	НовСтр.ИмяПоля = "ВнутреннийНомерПоднадзорногоОбъекта"; 
	НовСтр.НачКлюч = "::9++";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 6;
	НовСтр.нп = 1;
	НовСтр.НесколькоЗначенийВСтроке = Истина;
	НовСтр.Необязательное = Истина;
	
	НовСтр = тзEDIИнвентаризация.Добавить();
	НовСтр.ИмяПоля = "GUIDПоднадзорногоОбъекта";
	НовСтр.НачКлюч = "RFF+AES:";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 7;
	
	Для Каждого Тектз из тзEDIИнвентаризация Цикл
		тзИнвентаризация.Колонки.Добавить(Тектз.ИмяПоля,Новый ОписаниеТипов("Строка"));
	КонецЦикла;	
	
	НовСтр = тзEDIИнвентаризацияТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "АртикулМатериалаВУСДанон";
	НовСтр.НачКлюч = "PIA+1+";
	НовСтр.КонКлюч = ":SA'";
	НовСтр.НС = 2;
	
	НовСтр = тзEDIИнвентаризацияТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "НомерПартии";
	НовСтр.НачКлюч = "PIA+1+";
	НовСтр.КонКлюч = ":NB'";
	НовСтр.НС = 3;
	
	НовСтр = тзEDIИнвентаризацияТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "Наименование";
	НовСтр.НачКлюч = "IMD+F++:::";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 4;
	НовСтр.Необязательное = Истина;
	
	НовСтр = тзEDIИнвентаризацияТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "КодСтраныПроисхождения";
	НовСтр.НачКлюч = "ALI+";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 5;
	
	НовСтр = тзEDIИнвентаризацияТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "INV";
	НовСтр.НачКлюч = "INV";
	НовСтр.КонКлюч = "+2'";
	НовСтр.НС = 6;
	НовСтр.Необязательное = Истина;
	
	НовСтр = тзEDIИнвентаризацияТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "ВесВКГ";
	НовСтр.НачКлюч = "QTY+145:";
	НовСтр.КонКлюч = ":KGM'"; //XXXX.XXX
	НовСтр.НС = 7;
	
	НовСтр = тзEDIИнвентаризацияТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "GUIDПроизводителя";
	НовСтр.НачКлюч = "LOC+19+:::";
	НовСтр.КонКлюч = "'"; 
	НовСтр.НС = 8;
	
	НовСтр = тзEDIИнвентаризацияТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "ДатаПроизводства"; //ГГГГДДММ
	НовСтр.НачКлюч = "DTM+94:";
	НовСтр.КонКлюч = ":"; 
	НовСтр.НС = 9;
	
	НовСтр = тзEDIИнвентаризацияТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "СрокГодности"; //ГГГГДДММ
	НовСтр.НачКлюч = "DTM+36:";
	НовСтр.КонКлюч = ":"; 
	НовСтр.НС = 10;
	
	НовСтр = тзEDIИнвентаризацияТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "ПричинаИнвентаризации";
	НовСтр.НачКлюч = "STS++50E:::";
	НовСтр.КонКлюч = "+61E:::"; 
	НовСтр.НС = 11;
	НовСтр.НесколькоЗначенийВСтроке = Истина;
	
	НовСтр = тзEDIИнвентаризацияТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "ИдентификаторНеобходимостиОтображенияОперацииВМеркурий";  //relevant for mercury / not relevant
	НовСтр.НачКлюч = "+61E:::";
	НовСтр.КонКлюч = "'"; 
	НовСтр.НС = 11;
	НовСтр.нп = 1;
	НовСтр.НесколькоЗначенийВСтроке = Истина;
	
	НовСтр = тзEDIИнвентаризацияТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "Скоропорт_Нескоропорт";  //FALSE/TRUE
	НовСтр.НачКлюч = "RFF+AER:";
	НовСтр.КонКлюч = "'"; 
	НовСтр.НС = 12;
	НовСтр.Необязательное = Истина;
	
	Для Каждого Тектз из тзEDIИнвентаризацияТаблицаМатериалов Цикл
		тзИнвентаризацияТаблицаМатериалов.Колонки.Добавить(Тектз.ИмяПоля,Новый ОписаниеТипов("Строка"));
	КонецЦикла;	
	
	//---------- производство
	тзEDIПроизводство = Новый ТаблицаЗначений;
	тзEDIПроизводство.Колонки.Добавить("ИмяПоля",Новый ОписаниеТипов("Строка"));
	тзEDIПроизводство.Колонки.Добавить("НачКлюч",Новый ОписаниеТипов("Строка"));
	тзEDIПроизводство.Колонки.Добавить("КонКлюч",Новый ОписаниеТипов("Строка"));
	тзEDIПроизводство.Колонки.Добавить("НС",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(5,0)));
	тзEDIПроизводство.Колонки.Добавить("нп",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(3,0))); //номер поля в строке с нуля
	тзEDIПроизводство.Колонки.Добавить("Обработано",Новый ОписаниеТипов("Булево"));
	тзEDIПроизводство.Колонки.Добавить("НесколькоЗначенийВСтроке",Новый ОписаниеТипов("Булево"));
	тзEDIПроизводство.Колонки.Добавить("Необязательное",Новый ОписаниеТипов("Булево"));
	
	тзEDIПроизводствоТаблицаМатериалов = Новый ТаблицаЗначений;
	тзEDIПроизводствоТаблицаМатериалов.Колонки.Добавить("ИмяПоля",Новый ОписаниеТипов("Строка"));
	тзEDIПроизводствоТаблицаМатериалов.Колонки.Добавить("НачКлюч",Новый ОписаниеТипов("Строка"));
	тзEDIПроизводствоТаблицаМатериалов.Колонки.Добавить("КонКлюч",Новый ОписаниеТипов("Строка"));
	тзEDIПроизводствоТаблицаМатериалов.Колонки.Добавить("НС",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(5,0)));
	тзEDIПроизводствоТаблицаМатериалов.Колонки.Добавить("нп",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(3,0))); //номер поля в строке с нуля
	тзEDIПроизводствоТаблицаМатериалов.Колонки.Добавить("Обработано",Новый ОписаниеТипов("Булево"));
	тзEDIПроизводствоТаблицаМатериалов.Колонки.Добавить("НесколькоЗначенийВСтроке",Новый ОписаниеТипов("Булево"));
	тзEDIПроизводствоТаблицаМатериалов.Колонки.Добавить("Необязательное",Новый ОписаниеТипов("Булево"));
	
	
	//таблица с данными полей заголовка запроса SAP
	тзПроизводство = Новый ТаблицаЗначений;
	
	//таблица с данными полей строк с материалами из запроса SAP
	тзПроизводствоТаблицаМатериалов = Новый ТаблицаЗначений;
	
	НовСтр = тзEDIПроизводство.Добавить();
	НовСтр.ИмяПоля = "НомерСообщения";
	НовСтр.НачКлюч = "UNH+"; //номер для связи с Производств. операцией
	НовСтр.КонКлюч = "+";
	НовСтр.НС = 3;
	
	НовСтр = тзEDIПроизводство.Добавить();
	НовСтр.ИмяПоля = "IDОперации";
	//НовСтр.НачКлюч = "BGM+251+"; //идентификатор производственной транзакции (ИПТ) для незавершенки с автомат. закрытием
	НовСтр.НачКлюч = "BGM+105+"; //идентификатор производственной транзакции (ИПТ) для незавершенки с автомат. закрытием
	НовСтр.КонКлюч = "+9'";
	НовСтр.НС = 4;
	
	НовСтр = тзEDIПроизводство.Добавить();
	НовСтр.ИмяПоля = "ДатаИВремяОперации"; //ГГГГММДДЧЧСС
	НовСтр.НачКлюч = "DTM+137:";
	НовСтр.КонКлюч = ":";
	НовСтр.НС = 5;
	
	НовСтр = тзEDIПроизводство.Добавить();
	НовСтр.ИмяПоля = "ВнутреннийКодПлощадки";
	НовСтр.НачКлюч = "NAD+MF++";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 6;
	
	НовСтр = тзEDIПроизводство.Добавить();
	НовСтр.ИмяПоля = "GUIDПлощадки";
	НовСтр.НачКлюч = "RFF+AES:";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 7;
	
	НовСтр = тзEDIПроизводство.Добавить();
	НовСтр.ИмяПоля = "НомерРО"; 
	НовСтр.НачКлюч = "RFF+CU:";  // отсутствует для незавершенки с автомат. закрытием
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 8;
	
	Для Каждого Тектз из тзEDIПроизводство Цикл
		тзПроизводство.Колонки.Добавить(Тектз.ИмяПоля,Новый ОписаниеТипов("Строка"));
	КонецЦикла;	
	
	НовСтр = тзEDIПроизводствоТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "ГотоваяПродукция_Сырье";  //1 для ГП, 2 для сырья    //LIN+1++:SRV'
	НовСтр.НачКлюч = "LIN+";
	НовСтр.КонКлюч = "++:SRV'";
	НовСтр.НС = 1;
	
	НовСтр = тзEDIПроизводствоТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "НомерРО_ТолькоДляНП";
	НовСтр.НачКлюч = "CCI+11++AIJ:::";    // отсутствует для незавершенки с автомат. закрытием идентификатор производственной транзакции (ИПТ)
	// для незавершенки без автоматического закрытия
	// для незавершенки с автоматическим закрытием это будет IDОперации
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 2;
	
	НовСтр = тзEDIПроизводствоТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "ИдентификаторЗавершенияНП"; //НП - незавершенное производство
	НовСтр.НачКлюч = "CAV+FO:::"; //FALSE (проверять через ВРЕГ) или Нет (false) или Да (все другое)
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 3;
	
	НовСтр = тзEDIПроизводствоТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "IRQ";
	НовСтр.НачКлюч = "IRQ+:::";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 4;
	
	
	НовСтр = тзEDIПроизводствоТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "АртикулМатериалаВУСДанон";
	НовСтр.НачКлюч = "PIA+1+";
	НовСтр.КонКлюч = ":IN'";
	НовСтр.НС = 5;
	
	НовСтр = тзEDIПроизводствоТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "НомерПартии";
	НовСтр.НачКлюч = "PIA+1+";
	НовСтр.КонКлюч = ":NB'";
	НовСтр.НС = 6;
	
	НовСтр = тзEDIПроизводствоТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "РезультатВСЭ"; // VSERAW
	НовСтр.НачКлюч = "PIA+1+";
	НовСтр.КонКлюч = ":ATC'";
	НовСтр.НС = 7;
	
	НовСтр = тзEDIПроизводствоТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "НекачественныйГруз";
	НовСтр.НачКлюч = "PIA+1+"; //false (проверять через ВРЕГ) 
	НовСтр.КонКлюч = ":CG'";
	НовСтр.НС = 8;
	
	НовСтр = тзEDIПроизводствоТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "Наименование";
	НовСтр.НачКлюч = "IMD+F++:::";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 10;
	
	НовСтр = тзEDIПроизводствоТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "Вес";  // Вес - создаем всегда в КГ  QTY+194:264.000:KGM'
	НовСтр.НачКлюч = "QTY+194:";
	НовСтр.КонКлюч = ":"; //ХХХХ.ХХХ
	НовСтр.НС = 11;
	НовСтр.НесколькоЗначенийВСтроке = Истина;
	
	НовСтр = тзEDIПроизводствоТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "ЕдиницаИзмерения";  // KGM 
	НовСтр.НачКлюч = ":";
	НовСтр.КонКлюч = "'"; 
	НовСтр.НС = 11;
	НовСтр.нп = 1;
	НовСтр.НесколькоЗначенийВСтроке = Истина;
	
	НовСтр = тзEDIПроизводствоТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "ДатаПроизводства"; //ГГГГДДММ
	НовСтр.НачКлюч = "DTM+94:";
	НовСтр.КонКлюч = ":"; 
	НовСтр.НС = 12;
	
	НовСтр = тзEDIПроизводствоТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "СрокГодности"; //ГГГГДДММ
	НовСтр.НачКлюч = "DTM+36:";
	НовСтр.КонКлюч = ":"; 
	НовСтр.НС = 13;
	
	Для Каждого Тектз из тзEDIПроизводствоТаблицаМатериалов Цикл
		тзПроизводствоТаблицаМатериалов.Колонки.Добавить(Тектз.ИмяПоля,Новый ОписаниеТипов("Строка"));
	КонецЦикла;	
	
	//---------- Гашение (приемка, возврат, перемещение)
	тзEDIГашение = Новый ТаблицаЗначений;
	тзEDIГашение.Колонки.Добавить("ИмяПоля",Новый ОписаниеТипов("Строка"));
	тзEDIГашение.Колонки.Добавить("НачКлюч",Новый ОписаниеТипов("Строка"));
	тзEDIГашение.Колонки.Добавить("КонКлюч",Новый ОписаниеТипов("Строка"));
	тзEDIГашение.Колонки.Добавить("НС",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(5,0)));
	тзEDIГашение.Колонки.Добавить("нп",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(3,0))); //номер поля в строке с нуля
	тзEDIГашение.Колонки.Добавить("Обработано",Новый ОписаниеТипов("Булево"));
	тзEDIГашение.Колонки.Добавить("НесколькоЗначенийВСтроке",Новый ОписаниеТипов("Булево"));
	тзEDIГашение.Колонки.Добавить("Необязательное",Новый ОписаниеТипов("Булево"));
	
	тзEDIГашениеТаблицаМатериалов = Новый ТаблицаЗначений;
	тзEDIГашениеТаблицаМатериалов.Колонки.Добавить("ИмяПоля",Новый ОписаниеТипов("Строка"));
	тзEDIГашениеТаблицаМатериалов.Колонки.Добавить("НачКлюч",Новый ОписаниеТипов("Строка"));
	тзEDIГашениеТаблицаМатериалов.Колонки.Добавить("КонКлюч",Новый ОписаниеТипов("Строка"));
	тзEDIГашениеТаблицаМатериалов.Колонки.Добавить("НС",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(5,0)));
	тзEDIГашениеТаблицаМатериалов.Колонки.Добавить("нп",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(3,0))); //номер поля в строке с нуля
	тзEDIГашениеТаблицаМатериалов.Колонки.Добавить("Обработано",Новый ОписаниеТипов("Булево"));
	тзEDIГашениеТаблицаМатериалов.Колонки.Добавить("НесколькоЗначенийВСтроке",Новый ОписаниеТипов("Булево"));
	тзEDIГашениеТаблицаМатериалов.Колонки.Добавить("Необязательное",Новый ОписаниеТипов("Булево"));
	
	//таблица с данными полей заголовка запроса SAP
	тзГашение = Новый ТаблицаЗначений;
	
	//таблица с данными полей строк с материалами из запроса SAP
	тзГашениеТаблицаМатериалов = Новый ТаблицаЗначений;
	
	НовСтр = тзEDIГашение.Добавить();
	НовСтр.ИмяПоля = "НомерСообщения";
	НовСтр.НачКлюч = "UNH+"; //номер для связи с Прих. операцией
	НовСтр.КонКлюч = "+";
	НовСтр.НС = 3;
	
	НовСтр = тзEDIГашение.Добавить();
	НовСтр.ИмяПоля = "RECADVNumber";
	НовСтр.НачКлюч = "BGM+632+";
	НовСтр.КонКлюч = "+9'";
	НовСтр.НС = 4;
	
	НовСтр = тзEDIГашение.Добавить();
	НовСтр.ИмяПоля = "ДатаДокумента"; //ГГГГММДДЧЧММ
	НовСтр.НачКлюч = "DTM+137:";
	НовСтр.КонКлюч = ":";
	НовСтр.НС = 5;
	
	НовСтр = тзEDIГашение.Добавить();
	НовСтр.ИмяПоля = "ДатаПолучения"; //ГГГГММДД
	НовСтр.НачКлюч = "DTM+50:";
	НовСтр.КонКлюч = ":";
	НовСтр.НС = 6;
	НовСтр.Необязательное = Истина;
	
	НовСтр = тзEDIГашение.Добавить();
	НовСтр.ИмяПоля = "ТипГашения"; //  for seller - приемка, return - возврат, for danone - перемещение внутреннее
	НовСтр.НачКлюч = "FTX+ZZZ+++";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 7;
	
	НовСтр = тзEDIГашение.Добавить();
	НовСтр.ИмяПоля = "НомерПО";
	НовСтр.НачКлюч = "RFF+ON:";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 8;
	НовСтр.Необязательное = Истина;
	
	НовСтр = тзEDIГашение.Добавить();
	НовСтр.ИмяПоля = "НомерДоставки";
	НовСтр.НачКлюч = "RFF+AAK:";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 9;
	//для внутр. перемещения обязательное ******
	
	НовСтр = тзEDIГашение.Добавить();
	НовСтр.ИмяПоля = "GLNТочкиДоставки";
	НовСтр.НачКлюч = "NAD+DP+";
	НовСтр.КонКлюч = "::9";
	НовСтр.НС = 10;
	НовСтр.Необязательное = Истина;
	
	НовСтр = тзEDIГашение.Добавить();
	НовСтр.ИмяПоля = "GUIDТочкиДоставки";
	НовСтр.НачКлюч = "RFF+AES:";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 11;
	
	НовСтр = тзEDIГашение.Добавить();
	НовСтр.ИмяПоля = "GLNГрузоотправителя";
	НовСтр.НачКлюч = "NAD+CZ+";
	НовСтр.КонКлюч = "::9";
	НовСтр.НС = 12;
	НовСтр.Необязательное = Истина;
	
	
	НовСтр = тзEDIГашение.Добавить();
	НовСтр.ИмяПоля = "GUIDГрузоотправителя";
	НовСтр.НачКлюч = "RFF+AES:";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 13;
	
	Для Каждого Тектз из тзEDIГашение Цикл
		тзГашение.Колонки.Добавить(Тектз.ИмяПоля,Новый ОписаниеТипов("Строка"));
	КонецЦикла;	
	
	НовСтр = тзEDIГашениеТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "КодSAP";
	НовСтр.НачКлюч = "PIA+1+";
	НовСтр.КонКлюч = ":IN'";
	НовСтр.НС = 1;
	
	НовСтр = тзEDIГашениеТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "ИдентификаторПартии";
	НовСтр.НачКлюч = "PIA+1+";
	НовСтр.КонКлюч = ":NB'";
	НовСтр.НС = 2;
	
	НовСтр = тзEDIГашениеТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "Наименование";
	НовСтр.НачКлюч = "IMD+F++:::";
	НовСтр.КонКлюч = "'";
	НовСтр.НС = 3;
	
	НовСтр = тзEDIГашениеТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "Вес";  // Вес - создаем всегда в КГ
	НовСтр.НачКлюч = "QTY+194:";
	НовСтр.КонКлюч = ":"; //ХХХХ.ХХХ
	НовСтр.НС = 4;
	НовСтр.НесколькоЗначенийВСтроке = Истина;
	
	НовСтр = тзEDIГашениеТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "ЕдиницаИзмерения";  // KGM 
	НовСтр.НачКлюч = ":";
	НовСтр.КонКлюч = "'"; 
	НовСтр.НС = 4;
	НовСтр.нп = 1;
	НовСтр.НесколькоЗначенийВСтроке = Истина;
	
	НовСтр = тзEDIГашениеТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "ДатаПроизводства"; //ГГГГДДММ
	НовСтр.НачКлюч = "DTM+94:";
	НовСтр.КонКлюч = ":"; 
	НовСтр.НС = 5;
	
	НовСтр = тзEDIГашениеТаблицаМатериалов.Добавить();
	НовСтр.ИмяПоля = "СрокГодности"; //ГГГГДДММ
	НовСтр.НачКлюч = "DTM+36:";
	НовСтр.КонКлюч = ":"; 
	НовСтр.НС = 6;
	
	//23. RFF+ACE:::1'              // последние 4 строки файла - константы, завершающие строку с данными о материале (продукции)
	//24. RFF+AID:CORRESPONDS'      // мы их пропускаем
	//25. RFF+TP:CORRESPONDS'
	//26. PCI+20+ACCEPT_ALL'
	
	Для Каждого Тектз из тзEDIГашениеТаблицаМатериалов Цикл
		тзГашениеТаблицаМатериалов.Колонки.Добавить(Тектз.ИмяПоля,Новый ОписаниеТипов("Строка"));
	КонецЦикла;	
	
	лСтруктураТзEDI.Вставить("тзEDIОтгрузкаК",тзEDIОтгрузкаК);
	лСтруктураТзEDI.Вставить("тзEDIОтгрузкаТаблицаМатериаловК",тзEDIОтгрузкаТаблицаМатериаловК);
	лСтруктураТзEDI.Вставить("тзОтгрузкаК",тзОтгрузкаК);
	лСтруктураТзEDI.Вставить("тзОтгрузкаТаблицаМатериаловК",тзОтгрузкаТаблицаМатериаловК);
	лСтруктураТзEDI.Вставить("тзEDIОПеремещение",тзEDIОПеремещение);
	лСтруктураТзEDI.Вставить("тзEDIОПеремещениеТаблицаМатериалов",тзEDIОПеремещениеТаблицаМатериалов);
	лСтруктураТзEDI.Вставить("тзПеремещение",тзПеремещение);
	лСтруктураТзEDI.Вставить("тзПеремещениеТаблицаМатериалов",тзПеремещениеТаблицаМатериалов);
	лСтруктураТзEDI.Вставить("тзEDIИнвентаризация",тзEDIИнвентаризация);
	лСтруктураТзEDI.Вставить("тзEDIИнвентаризацияТаблицаМатериалов",тзEDIИнвентаризацияТаблицаМатериалов);
	лСтруктураТзEDI.Вставить("тзИнвентаризация",тзИнвентаризация);
	лСтруктураТзEDI.Вставить("тзИнвентаризацияТаблицаМатериалов",тзИнвентаризацияТаблицаМатериалов);
	лСтруктураТзEDI.Вставить("тзEDIПроизводство",тзEDIПроизводство);
	лСтруктураТзEDI.Вставить("тзEDIПроизводствоТаблицаМатериалов",тзEDIПроизводствоТаблицаМатериалов);
	лСтруктураТзEDI.Вставить("тзПроизводство",тзПроизводство);
	лСтруктураТзEDI.Вставить("тзПроизводствоТаблицаМатериалов",тзПроизводствоТаблицаМатериалов);
	лСтруктураТзEDI.Вставить("тзEDIГашение",тзEDIГашение);
	лСтруктураТзEDI.Вставить("тзEDIГашениеТаблицаМатериалов",тзEDIГашениеТаблицаМатериалов);
	лСтруктураТзEDI.Вставить("тзГашение",тзГашение);
	лСтруктураТзEDI.Вставить("тзГашениеТаблицаМатериалов",тзГашениеТаблицаМатериалов);
	
	Возврат лСтруктураТзEDI;
	
КонецФункции	

Процедура ЗаполнитьОшибкиПроверкиПолейEDIФайла(пДокументСсылка, ВидОперации, мОшибки)
	
	лСтрокаСообщения = НСтр("ru = 'Ошибки при чтении EDI-файла.
	|Тип операции: %1
	|Документ Danone: %2'");
	
	лСтрокаСообщения = лСтрокаСообщения + Символы.ПС;
	Для ош=0 по мОшибки.Количество()-1 Цикл
		лСтрокаСообщения = лСтрокаСообщения + мОшибки.Получить(ош) + Символы.ПС;
	КонецЦикла;	
	лСтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( лСтрокаСообщения, ВидОперации, "" + пДокументСсылка );
	
	//Регистрируем ошибку
	лОписаниеСобытия = лСтрокаСообщения;
	
	ДМ_СлужебныйПривилегированный.ЗарегистрироватьСобытие( 
	пДокументСсылка,
	"Обработка файлов EDI.",
	Перечисления.ДМ_УровниЖурнала.Ошибка,
	ОбщегоНазначения.ИдентификаторОбъектаМетаданных( ТипЗнч(пДокументСсылка) ),
	Строка( пДокументСсылка ),
	лОписаниеСобытия);
	
	ДокDanone = пДокументСсылка.ПолучитьОбъект();
	ДокDanone.СтатусДокумента = Перечисления.СтатусДокументаСФайламиSAP.ОшибкаПриОбработке;
	ДокDanone.Записать();
	
	
КонецПроцедуры	

Процедура ОбработатьОсобыйТипСтроки(ТекТС,ОсобыйТипСтроки,нпс,НачКлюч,ТекСтртзОтгрузка)
	
	Если ОсобыйТипСтроки = 1 Тогда
		// УсловияТранспортировки
		
		//  Варианты TOD+6++SD:::COOLED:возвратная поставка' 
		//           TOD+6++SD:::COOLED'
		
		ИмяПоля1 = "УсловияТранспортировки";
		ИмяПоля2 = "ПризнакВозврата";
		
		ТекТС = Сред(ТекТС,нпс + СтрДлина(НачКлюч)); 
		нпс1 = Найти(ТекТС,":");
		Если нпс1 > 0 Тогда
			ТекСтртзОтгрузка[ИмяПоля1] = Сред(ТекТС,1,нпс1-1);
			Если СтрДлина(ТекТС) > нпс1 Тогда  
				ТекТС = Сред(ТекТС,нпс1+1); 
				кпс2 = Найти(ТекТС,"'");
				Если кпс2 > 0 Тогда
					ТекСтртзОтгрузка[ИмяПоля2] = Сред(ТекТС,1,кпс2-1);
				КонецЕсли;
			КонецЕсли;
		Иначе
			кпс1 = Найти(ТекТС,"'");
			Если кпс1 > 0 Тогда
				ТекСтртзОтгрузка[ИмяПоля1] = Сред(ТекТС,1,кпс1-1);
			КонецЕсли;	
		КонецЕсли;	
		
	ИначеЕсли ОсобыйТипСтроки = 2 Тогда
		// Транспорт
		//TDT+1+++31+++31:PR:ХР8782 77+:::г741Юа 750', где:
		//1 – идентификатор первого ТС
		//31 – тип транспорта
		//ХР8782 77 – номер прицепа
		//г741Юа 750 – номер ТС
		//Возможные варианты передачи:
		//TDT+1+++31+:::Волченков ВА++31:PR:о721ен24+:::с663рр76'	- с водителем,номером ТС и прицепа
		//TDT+1+++31+++31:PR:ХР8782 77+:::г741Юа 750' – с номером ТС и прицепа
		//TDT+1+++31+++31:PR+:::г741Юа 750' – с номером ТС, без номера прицепа
		
		ИмяПоля1 = "ТипТранспорта";
		ИмяПоля2 = "Водитель";
		ИмяПоля3 = "ГосНомерПрицепа_Полуприцепа";
		ИмяПоля4 = "ГосНомерАвтомобиля";
		
		ТекТС = Сред(ТекТС,нпс + СтрДлина(НачКлюч)); 
		кпс1 = Найти(ТекТС,"+");
		Если кпс1 > 0 Тогда
			//есть тип транспорта
			ТипТранспорта = Сред(ТекТС,1,кпс1-1);
			ТекСтртзОтгрузка[ИмяПоля1] = ТипТранспорта;
			Если СтрДлина(ТекТС) > кпс1 Тогда  
				ТекТС = Сред(ТекТС,кпс1+1); 
				нпс2 = Найти(ТекТС,":::");
				нпс21 = Найти(ТекТС,ТипТранспорта);
				Если нпс2 > 0 И нпс21 > нпс2 Тогда
					Если СтрДлина(ТекТС) > нпс2 Тогда  
						ТекТС = Сред(ТекТС,нпс2+3);
						кпс2 = Найти(ТекТС,"+");
						Если кпс2 > 0 Тогда
							//есть водитель
							ТекСтртзОтгрузка[ИмяПоля2] = Сред(ТекТС,1,кпс2-1);
							Если СтрДлина(ТекТС) > кпс2 Тогда  
								ТекТС = Сред(ТекТС,кпс2+1);
							Иначе
								Возврат;
							КонецЕсли;	
						КонецЕсли;
					Иначе
						Возврат;
					КонецЕсли;		
				КонецЕсли;
			Иначе
				Возврат;
			КонецЕсли;
			нпс21 = Найти(ТекТС,ТипТранспорта);
			Если нпс21 > 0 Тогда
				//блок с госномерами
				Если СтрДлина(ТекТС) > нпс21 Тогда  
					ТекТС = Сред(ТекТС,нпс21+1); 
					нпс3 = Найти(ТекТС,":PR:");
					Если нпс3 > 0 Тогда
						Если СтрДлина(ТекТС) > нпс3 Тогда  
							ТекТС = Сред(ТекТС,нпс3+4);
							кпс3 = Найти(ТекТС,"+");
							Если кпс3 > 0 Тогда
								//есть госномер прицепа / полуприцепа
								ТекСтртзОтгрузка[ИмяПоля3] = Сред(ТекТС,1,кпс3-1);
								Если СтрДлина(ТекТС) > кпс3 Тогда  
									ТекТС = Сред(ТекТС,кпс3+1);
								Иначе
									Возврат;
								КонецЕсли;	
							КонецЕсли;
						Иначе	
							Возврат;
						КонецЕсли;		
					КонецЕсли;
				Иначе
					Возврат;
				КонецЕсли;
				нпс4 = Найти(ТекТС,":::");
				Если нпс4 > 0 Тогда
					Если СтрДлина(ТекТС) > нпс4 Тогда  
						ТекТС = Сред(ТекТС,нпс4+3); 
						кпс4 = Найти(ТекТС,"'");
						Если кпс4 > 0 Тогда
							//есть госномер автомобиля
							ТекСтртзОтгрузка[ИмяПоля4] = Сред(ТекТС,1,кпс4-1);
						КонецЕсли;
					Иначе
						Возврат;
					КонецЕсли;
				Иначе
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ОсобыйТипСтроки = 3 Тогда
		// Второй транспорт
		//TDT+30+1+60+31+++31:PR:°123јЅ+:::°123ВВ', где:
		//30 – идентификатор второго ТС
		//31 – тип транспорта
		//°123јЅ – номер прицепа
		//°123ВВ – номер ТС
		//Возможные варианты передачи:
		//TDT+30+1+60+31+++31:PR:°123јЅ+:::°123ВВ' – с номером ТС и прицепа
		//TDT+30+1+60+31+++31:PR+:::°123ВВ' – с номером ТС, без номера прицепа
		
		ИмяПоля2 = "ГосНомерВторогоПрицепа_Полуприцепа";
		ИмяПоля3 = "ГосНомерВторогоАвтомобиля";
		
		ТекТС = Сред(ТекТС,нпс + СтрДлина(НачКлюч)); 
		кпс1 = Найти(ТекТС,"+");
		Если кпс1 > 0 Тогда
			//есть тип транспорта
			ТипТранспорта = Сред(ТекТС,1,кпс1-1);
			Если СтрДлина(ТекТС) > кпс1 Тогда  
				ТекТС = Сред(ТекТС,кпс1+1); 
				нпс21 = Найти(ТекТС,ТипТранспорта);
				Если нпс21 > 0 Тогда
					//блок с госномерами
					Если СтрДлина(ТекТС) > нпс21 Тогда  
						ТекТС = Сред(ТекТС,нпс21+1); 
						нпс2 = Найти(ТекТС,":PR:");
						Если нпс2 > 0 Тогда
							Если СтрДлина(ТекТС) > нпс2 Тогда  
								ТекТС = Сред(ТекТС,нпс2+4);
								кпс2 = Найти(ТекТС,"+");
								Если кпс2 > 0 Тогда
									//есть госномер прицепа / полуприцепа
									ТекСтртзОтгрузка[ИмяПоля2] = Сред(ТекТС,1,кпс2-1);
									Если СтрДлина(ТекТС) > кпс2 Тогда  
										ТекТС = Сред(ТекТС,кпс2+1);
									Иначе
										Возврат;
									КонецЕсли;	
								КонецЕсли;
							Иначе	
								Возврат;
							КонецЕсли;		
						КонецЕсли;
					Иначе
						Возврат;
					КонецЕсли;
					нпс3 = Найти(ТекТС,":::");
					Если нпс3 > 0 Тогда
						Если СтрДлина(ТекТС) > нпс3 Тогда  
							ТекТС = Сред(ТекТС,нпс3+3); 
							кпс3 = Найти(ТекТС,"'");
							Если кпс3 > 0 Тогда
								//есть госномер автомобиля
								ТекСтртзОтгрузка[ИмяПоля3] = Сред(ТекТС,1,кпс3-1);
							КонецЕсли;
						Иначе
							Возврат;
						КонецЕсли;
					Иначе
						Возврат;
					КонецЕсли;
				Иначе
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ОбработатьДокументSAPКлиент(пДокументСсылка,лСтруктураТзEDI,мКодовGLNВнутрПолучателей)
	
	//ИсхДокОбъект = пДокументСсылка.ПолучитьОбъект();
	//Попытка
	//	ИсхДокОбъект.Заблокировать();
	//Исключение
	//	//заблокирован другой задачей, пропускаем
	//	Возврат;
	//КонецПопытки;
	
	ТекСтатус = пДокументСсылка.СтатусДокумента;
	СтрДок = ДМ_ИнтеграцияУВСSAP.ПолучитьФайлИсходный(пДокументСсылка);
	
	ТекстДок = СтрДок.ФайлИсходный;
	Если ТекстДок = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ТекСтрок = ТекстДок.КоличествоСтрок();
	
	GLNСети = "";
	//Проверка типа файла, читаем первые 3 строки
	ПроверкаЗаголовкаФайла = Истина;
	ДопТекстОшибки = "";
	Если ТекСтрок > 3 Тогда
		Для нСтр = 1 По 3  Цикл
			ТС = СокрЛП(ТекстДок.ПолучитьСтроку(нСтр));
			Если нСтр=1 Тогда 
				Если Лев(ТС,5) <> "UNA:+" Тогда
					ПроверкаЗаголовкаФайла = Ложь;
					Прервать;
				КонецЕсли;
			ИначеЕсли нСтр=2 Тогда 
				Если Найти(ТС,"UNB+UNOE:3+") <> 1 Тогда
					ПроверкаЗаголовкаФайла = Ложь;
					Прервать;
				КонецЕсли;	
				//выделим GLN сети
				//2. UNB+UNOE:3+4607053479690:14+4606068999995:14+180227:2103+189298++DESADV'	
				гст = Найти(ТС, ":14+");
				Если гст > 0 Тогда
					ТС1 = Сред(ТС,гст+4);
					гст = Найти(ТС1, ":14+");
					Если гст > 1 Тогда
						GLNСети = Сред(ТС1,1,гст-1);
					КонецЕсли;	
				КонецЕсли;	
				//проверим GLNСети на вхождение в список контрагентов-получателей для внутр. перемещения
				Если мКодовGLNВнутрПолучателей.Найти(GLNСети) <> Неопределено Тогда
					ПроверкаЗаголовкаФайла = Ложь;
					ДопТекстОшибки = "GLN получателя " + GLNСети + " только для внутренних перемещений";
					Прервать;
				КонецЕсли;	
				//ИначеЕсли нСтр=3 Тогда 
				//	Если Найти(ТС,"UNH+") <> 1 Тогда
				//		ПроверкаЗаголовкаФайла = Ложь;
				//		Прервать;
				//	КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
	Иначе
		ПроверкаЗаголовкаФайла = Ложь;
	КонецЕсли;
	
	
	Если ПроверкаЗаголовкаФайла = Ложь Тогда
		лСтрокаСообщения = НСтр("ru = 'Неверный формат файла." + ДопТекстОшибки + "
		|Тип файлов: %1
		|Имя файла: %2
		|Дата загрузки: %3'");
		
		лСтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( лСтрокаСообщения, "ОтгрузкаКлиент", СокрЛП(пДокументСсылка.ИмяФайла),пДокументСсылка.ДатаЗагрузкиИсходногоФайла );
		
		//Регистрируем ошибку
		лОписаниеСобытия = лСтрокаСообщения;
		
		ДМ_СлужебныйПривилегированный.ЗарегистрироватьСобытие( 
		пДокументСсылка,
		"Обработка файлов EDI.",
		Перечисления.ДМ_УровниЖурнала.Ошибка,
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных( ТипЗнч(пДокументСсылка) ),
		Строка( пДокументСсылка ),
		лОписаниеСобытия);
		
		ДокDanone = пДокументСсылка.ПолучитьОбъект();
		ДокDanone.СтатусДокумента = Перечисления.СтатусДокументаСФайламиSAP.ОшибкаПриОбработке;
		ДокDanone.Записать();
		
		Возврат;
		
	КонецЕсли;	
	
	//*** отменено, ибо эта строка стала необязательной
	//определить тип файла (клиентский или внутренний)
	//ТС = СокрЛП(ТекстДок.ПолучитьСтроку(7));
	//Если Лев(ТС,7) <> "MOA+86:" Тогда
	//	
	//	лСтрокаСообщения = НСтр("ru = 'Неверный формат файла.
	//	|Тип файлов: %1
	//	|Имя файла: %2
	//	|Дата загрузки: %3'");
	//	лСтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( лСтрокаСообщения, "ОтгрузкаКлиент", СокрЛП(пДокументСсылка.ИмяФайла),пДокументСсылка.ДатаЗагрузкиИсходногоФайла );
	//	
	//	//Регистрируем ошибку
	//	лОписаниеСобытия = лСтрокаСообщения;
	//	
	//	ДМ_СлужебныйПривилегированный.ЗарегистрироватьСобытие( 
	//		пДокументСсылка,
	//		"Обработка файлов EDI.",
	//		Перечисления.ДМ_УровниЖурнала.Ошибка,
	//		ОбщегоНазначения.ИдентификаторОбъектаМетаданных( ТипЗнч(пДокументСсылка) ),
	//		Строка( пДокументСсылка ),
	//		лОписаниеСобытия);
	//	
	//	ДокDanone = пДокументСсылка.ПолучитьОбъект();
	//	ДокDanone.СтатусДокумента = Перечисления.СтатусДокументаСФайламиSAP.ОшибкаПриОбработке;
	//	ДокDanone.Записать();
	//	
	//	
	//	Возврат;
	//	
	//КонецЕсли;	
	
	Если СокрЛП(пДокументСсылка.ДМ_GLNСети) <> СокрЛП(GLNСети) Тогда
		ДокDanone = пДокументСсылка.ПолучитьОбъект();
		ДокDanone.ДМ_GLNСети = СокрЛП(GLNСети);
		ДокDanone.Записать();
	КонецЕсли;	
	
	
	ТекСтрФайла = 4;
	ТекСтрФайла2 = ТекСтрФайла;
	ФинишФайла = 0;
	Пока ФинишФайла = 0 Цикл
		
		мОшибки = Новый Массив;
		
		тзEDIОтгрузкаК = лСтруктураТзEDI.тзEDIОтгрузкаК.Скопировать();
		тзEDIОтгрузкаТаблицаМатериаловК = лСтруктураТзEDI.тзEDIОтгрузкаТаблицаМатериаловК.Скопировать();
		тзОтгрузкаК = лСтруктураТзEDI.тзОтгрузкаК.Скопировать();
		тзОтгрузкаТаблицаМатериаловК = лСтруктураТзEDI.тзОтгрузкаТаблицаМатериаловК.Скопировать();
		
		ТекСтртзОтгрузка = тзОтгрузкаК.Добавить();
		
		ШапкаПоследнийНомерШаблонаОбработано = 0;
		нсм = 0;  //номер секции с материалами
		нстч = 0; //номер строки от начала секции с материалами
		Для нСтр = ТекСтрФайла По ТекСтрок  Цикл
			ТС = СокрЛП(ТекстДок.ПолучитьСтроку(нСтр));
			Если Лев(ТС,4) = "UNZ+" Тогда
				//финиш файла
				ФинишФайла = 1;
				Прервать;
			КонецЕсли;
			Если Лев(ТС,3) = "CPS" Тогда
				//финиш заголовка, след. строка - начало секции с материалами
				нсм = 1;
				Продолжить;
			КонецЕсли;	
			Если нсм > 0 Тогда
				//секция с материалами
				Если Лев(ТС,4) = "UNT+" Тогда
					//финиш DESADV
					ТекСтрФайла = нСтр + 1;
					ТекСтрФайла3 = ТекСтрФайла;
					Прервать;
				КонецЕсли;
				Если Лев(ТС,4) = "LIN+" Тогда
					//начало секции с материалами
					нстч = 0;
				КонецЕсли;
				нстч = нстч + 1;
				Если нстч = 1 Тогда
					тзEDIОтгрузкаТаблицаМатериаловК.ЗаполнитьЗначения(Ложь, "Обработано");
					ТекСтртзОтгрузкаТаблицаМатериалов = тзОтгрузкаТаблицаМатериаловК.Добавить();
				КонецЕсли;
				СтрОЗ = Новый Структура("Обработано",Ложь);
				мСтртзEDIОтгрузкаТаблицаМатериалов = тзEDIОтгрузкаТаблицаМатериаловК.НайтиСтроки(СтрОЗ);
				Если мСтртзEDIОтгрузкаТаблицаМатериалов.Количество() > 0 Тогда
					ТекТС = ТС;
					Для сс=0 по мСтртзEDIОтгрузкаТаблицаМатериалов.Количество()-1 Цикл
						ТекСтртзEDIОтгрузкаТаблицаМатериалов = мСтртзEDIОтгрузкаТаблицаМатериалов.Получить(сс);
						нпс = Найти(ТекТС,ТекСтртзEDIОтгрузкаТаблицаМатериалов.НачКлюч);
						Если нпс > 0 Тогда
							ТекТС = Сред(ТекТС,нпс + СтрДлина(ТекСтртзEDIОтгрузкаТаблицаМатериалов.НачКлюч)); 
							кпс = Найти(ТекТС,ТекСтртзEDIОтгрузкаТаблицаМатериалов.КонКлюч);
							Если кпс > 0 Тогда
								ТекСтртзОтгрузкаТаблицаМатериалов[ТекСтртзEDIОтгрузкаТаблицаМатериалов.ИмяПоля] = Сред(ТекТС,1,кпс-1);
								ТекСтртзEDIОтгрузкаТаблицаМатериалов.Обработано = Истина;
								Если ПустаяСтрока(Сред(ТекТС,1,кпс-1)) И Не ТекСтртзEDIОтгрузкаТаблицаМатериалов.Необязательное Тогда
									мОшибки.Добавить("Отсутствует " + ТекСтртзEDIОтгрузкаТаблицаМатериалов.ИмяПоля + " (строка " + тзОтгрузкаТаблицаМатериаловК.Количество() + ")");
								КонецЕсли;
								Если ТекСтртзEDIОтгрузкаТаблицаМатериалов.НесколькоЗначенийВСтроке Тогда
									Продолжить;
								Иначе	
									Прервать;
								КонецЕсли;	
							КонецЕсли;
						КонецЕсли;	
					КонецЦикла;	
				КонецЕсли;
				
				
			Иначе
				
				//заголовок
				Для Каждого ТекСтртзEDIОтгрузка Из тзEDIОтгрузкаК Цикл
					Если ТекСтртзEDIОтгрузка.НС < ШапкаПоследнийНомерШаблонаОбработано Тогда
						Если Не ТекСтртзEDIОтгрузка.Обработано Тогда
							ТекСтртзEDIОтгрузка.Обработано = Истина;
						КонецЕсли;	
					КонецЕсли;	
				КонецЦикла;
				СтрОЗ = Новый Структура;
				СтрОЗ.Вставить("Обработано",Ложь);
				СтрОЗ.Вставить("ПроверитьСНачалаФайла",Ложь);
				мСтртзEDIОтгрузка = тзEDIОтгрузкаК.НайтиСтроки(СтрОЗ);
				Если мСтртзEDIОтгрузка.Количество() > 0 Тогда
					ТекТС = ТС;
					Для сс=0 по мСтртзEDIОтгрузка.Количество()-1 Цикл
						ТекСтртзEDIОтгрузка = мСтртзEDIОтгрузка.Получить(сс);
						нпс = Найти(ТекТС,ТекСтртзEDIОтгрузка.НачКлюч);
						Если нпс > 0 Тогда
							//проверка на особый тип строки
							Если ТекСтртзEDIОтгрузка.ОсобыйТипСтроки > 0 Тогда
								Если ТекСтртзEDIОтгрузка.нп=1 Тогда
									ОбработатьОсобыйТипСтроки(ТекТС,ТекСтртзEDIОтгрузка.ОсобыйТипСтроки,нпс,ТекСтртзEDIОтгрузка.НачКлюч,ТекСтртзОтгрузка);
									ШапкаПоследнийНомерШаблонаОбработано = ТекСтртзEDIОтгрузка.НС;
									СтрОЗОт = Новый Структура;
									СтрОЗОт.Вставить("Обработано",Ложь);
									СтрОЗОт.Вставить("НС",ТекСтртзEDIОтгрузка.НС);
									СтрОЗОт.Вставить("ОсобыйТипСтроки",ТекСтртзEDIОтгрузка.ОсобыйТипСтроки);
									мСтртзEDIОтгрузкаОт = тзEDIОтгрузкаК.НайтиСтроки(СтрОЗот);
									Если мСтртзEDIОтгрузкаОт.Количество() > 0 Тогда
										Для ссОт=0 по мСтртзEDIОтгрузкаОт.Количество()-1 Цикл
											ТекСтртзEDIОтгрузкаОт = мСтртзEDIОтгрузкаОт.Получить(ссОт);
											ТекСтртзEDIОтгрузкаОт.Обработано = Истина;
										КонецЦикла;	
									КонецЕсли;
								КонецЕсли;
								Прервать;
							КонецЕсли;
							ТекТС = Сред(ТекТС,нпс + СтрДлина(ТекСтртзEDIОтгрузка.НачКлюч)); 
							кпс = Найти(ТекТС,ТекСтртзEDIОтгрузка.КонКлюч);
							Если кпс > 0 Тогда
								ТекСтртзОтгрузка[ТекСтртзEDIОтгрузка.ИмяПоля] = Сред(ТекТС,1,кпс-1);
								ТекСтртзEDIОтгрузка.Обработано = Истина;
								ШапкаПоследнийНомерШаблонаОбработано = ТекСтртзEDIОтгрузка.НС;
								Если ПустаяСтрока(Сред(ТекТС,1,кпс-1)) Тогда
									Если Не ТекСтртзEDIОтгрузка.Необязательное Тогда
										мОшибки.Добавить("Отсутствует " + ТекСтртзEDIОтгрузка.ИмяПоля);
									КонецЕсли;
								КонецЕсли;	
								Если ТекСтртзEDIОтгрузка.НесколькоЗначенийВСтроке Тогда
									Продолжить;
								Иначе	
									Прервать;
								КонецЕсли;	
							КонецЕсли;	
						КонецЕсли;
					КонецЦикла;	
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЦикла;
		
		Если ФинишФайла = 1 Тогда
			Прервать;
		КонецЕсли;	
		
		//обработка значений с признаком "ПроверитьСНачалаФайла"
		СтрОЗ = Новый Структура;
		СтрОЗ.Вставить("ПроверитьСНачалаФайла",Истина);
		СтрОЗ.Вставить("ГлавныйКлючДляПроверкиСНачалаФайла","");
		мСтртзEDIОтгрузка = тзEDIОтгрузкаК.НайтиСтроки(СтрОЗ);
		Если мСтртзEDIОтгрузка.Количество() > 0 Тогда
			Для сс2=0 по мСтртзEDIОтгрузка.Количество()-1 Цикл
				ТекС2 = мСтртзEDIОтгрузка.Получить(сс2);
				Если ТекС2.НесколькоЗначенийВСтроке ИЛИ ТекС2.ОсобыйТипСтроки > 0 Тогда
					//здесь такое быть не должно
					Продолжить;
				КонецЕсли;
				//с начала сообщения проверим
				Для нСтр = ТекСтрФайла2 По ТекСтрФайла3  Цикл
					ТС = СокрЛП(ТекстДок.ПолучитьСтроку(нСтр));
					нпс = Найти(ТС,ТекС2.НачКлюч);
					Если нпс > 0 Тогда
						ТекТС = Сред(ТС,нпс + СтрДлина(ТекС2.НачКлюч)); 
						кпс = Найти(ТекТС,ТекС2.КонКлюч);
						Если кпс > 0 Тогда
							ТекСтртзОтгрузка[ТекС2.ИмяПоля] = Сред(ТекТС,1,кпс-1);
							ТекС2.НомСтр = нСтр;
							Прервать;
						КонецЕсли;	
					КонецЕсли;	
				КонецЦикла;
			КонецЦикла;	
		КонецЕсли;	
		//заполним подчиненные значения от строки с главным значением
		СтрОЗ = Новый Структура("ПроверитьСНачалаФайла",Истина);
		СтрОЗ = Новый Структура("НомСтр",0);
		мСтртзEDIОтгрузка = тзEDIОтгрузкаК.НайтиСтроки(СтрОЗ);
		Если мСтртзEDIОтгрузка.Количество() > 0 Тогда
			Для сс2=0 по мСтртзEDIОтгрузка.Количество()-1 Цикл
				ТекС2 = мСтртзEDIОтгрузка.Получить(сс2);
				Если Не ПустаяСтрока(ТекС2.ГлавныйКлючДляПроверкиСНачалаФайла) Тогда
					Если ТекС2.НесколькоЗначенийВСтроке ИЛИ ТекС2.ОсобыйТипСтроки > 0 Тогда
						//здесь такое быть не должно
						Продолжить;
					КонецЕсли;
					ИскГлСтр = тзEDIОтгрузкаК.Найти(ТекС2.ГлавныйКлючДляПроверкиСНачалаФайла,"НачКлюч");
					Если ИскГлСтр <> Неопределено Тогда
						Если ИскГлСтр.НомСтр > 0 Тогда
							Для нСтр = (ИскГлСтр.НомСтр+1) По ТекСтрФайла3  Цикл
								ТС = СокрЛП(ТекстДок.ПолучитьСтроку(нСтр));
								нпс = Найти(ТС,ТекС2.НачКлюч);
								Если нпс > 0 Тогда
									ТекТС = Сред(ТС,нпс + СтрДлина(ТекС2.НачКлюч)); 
									кпс = Найти(ТекТС,ТекС2.КонКлюч);
									Если кпс > 0 Тогда
										ТекСтртзОтгрузка[ТекС2.ИмяПоля] = Сред(ТекТС,1,кпс-1);
										Прервать;	
									КонецЕсли;	
								КонецЕсли;
							КонецЦикла;	
						КонецЕсли;	
					КонецЕсли;
				Иначе
					//нарушен оговоренный порядок главного и подчиненного значения
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;	
		
		ТекСтрФайла2 = ТекСтрФайла3;
		
		
		Если мОшибки.Количество() > 0 Тогда
			
			ЗаполнитьОшибкиПроверкиПолейEDIФайла(пДокументСсылка, "ОтгрузкаКлиент", мОшибки);
			
		Иначе	
			
			ЗаполнитьДокументыУВС("ОтгрузкаКлиент",пДокументСсылка,тзОтгрузкаК,тзОтгрузкаТаблицаМатериаловК);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

Процедура ОбработатьДокументSAPВнутреннееПеремещение(пДокументСсылка,лСтруктураТзEDI,мКодовGLNВнутрПолучателей)
	
	//ИсхДокОбъект = пДокументСсылка.ПолучитьОбъект();
	//Попытка
	//	ИсхДокОбъект.Заблокировать();
	//Исключение
	//	//заблокирован другой задачей, пропускаем
	//	Возврат;
	//КонецПопытки;
	
	ТекСтатус = пДокументСсылка.СтатусДокумента;
	СтрДок = ДМ_ИнтеграцияУВСSAP.ПолучитьФайлИсходный(пДокументСсылка);
	
	ТекстДок = СтрДок.ФайлИсходный;
	Если ТекстДок = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ТекСтрок = ТекстДок.КоличествоСтрок();
	
	//Проверка типа файла, читаем первые 3 строки
	ПроверкаЗаголовкаФайла = Истина;
	ДопТекстОшибки = "";
	Если ТекСтрок > 3 Тогда
		Для нСтр = 1 По 3  Цикл
			ТС = СокрЛП(ТекстДок.ПолучитьСтроку(нСтр));
			Если нСтр=1 Тогда 
				Если Лев(ТС,5) <> "UNA:+" Тогда
					ПроверкаЗаголовкаФайла = Ложь;
					Прервать;
				КонецЕсли;
			ИначеЕсли нСтр=2 Тогда 
				Если Найти(ТС,"UNB+UNOE:3+") <> 1 Тогда
					ПроверкаЗаголовкаФайла = Ложь;
					Прервать;
				КонецЕсли;
				//выделим GLN сети
				//2. UNB+UNOE:3+4607053479690:14+4606068999995:14+180227:2103+189298++DESADV'	
				гст = Найти(ТС, ":14+");
				Если гст > 0 Тогда
					ТС1 = Сред(ТС,гст+4);
					гст = Найти(ТС1, ":14+");
					Если гст > 1 Тогда
						GLNСети = Сред(ТС1,1,гст-1);
					КонецЕсли;	
				КонецЕсли;	
				//проверим GLNСети на вхождение в список контрагентов-получателей для внутр. перемещения
				Если мКодовGLNВнутрПолучателей.Найти(GLNСети) = Неопределено Тогда
					ПроверкаЗаголовкаФайла = Ложь;
					ДопТекстОшибки = "GLN получателя " + GLNСети + " нет в регистре контрагентов-получателей для внутренних перемещений";
					Прервать;
				КонецЕсли;
			ИначеЕсли нСтр=3 Тогда 
				Если Найти(ТС,"UNH+") <> 1 Тогда
					ПроверкаЗаголовкаФайла = Ложь;
					Прервать;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
	Иначе
		ПроверкаЗаголовкаФайла = Ложь;
	КонецЕсли;
	
	
	Если ПроверкаЗаголовкаФайла = Ложь Тогда
		лСтрокаСообщения = НСтр("ru = 'Неверный формат файла." + ДопТекстОшибки + "
		|Тип файлов: %1
		|Имя файла: %2
		|Дата загрузки: %3'");
		лСтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( лСтрокаСообщения, "ОтгрузкаВнутренняя", СокрЛП(пДокументСсылка.ИмяФайла),пДокументСсылка.ДатаЗагрузкиИсходногоФайла );
		
		//Регистрируем ошибку
		лОписаниеСобытия = лСтрокаСообщения;
		
		ДМ_СлужебныйПривилегированный.ЗарегистрироватьСобытие( 
		пДокументСсылка,
		"Обработка файлов EDI.",
		Перечисления.ДМ_УровниЖурнала.Ошибка,
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных( ТипЗнч(пДокументСсылка) ),
		Строка( пДокументСсылка ),
		лОписаниеСобытия);
		
		ДокDanone = пДокументСсылка.ПолучитьОбъект();
		ДокDanone.СтатусДокумента = Перечисления.СтатусДокументаСФайламиSAP.ОшибкаПриОбработке;
		ДокDanone.Записать();
		
		
		Возврат;
		
	КонецЕсли;	
	
	//*** отменено, ибо эта строка стала необязательной
	//определить тип файла (клиентский или внутренний)
	//ТС = СокрЛП(ТекстДок.ПолучитьСтроку(7));
	//Если Лев(ТС,7) = "MOA+86:" Тогда
	//	
	//	лСтрокаСообщения = НСтр("ru = 'Неверный формат файла.
	//	|Тип файлов: %1
	//	|Имя файла: %2
	//	|Дата загрузки: %3'");
	//	лСтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( лСтрокаСообщения, "ОтгрузкаВнутренняя)", СокрЛП(пДокументСсылка.ИмяФайла),пДокументСсылка.ДатаЗагрузкиИсходногоФайла );
	//	
	//	//Регистрируем ошибку
	//	лОписаниеСобытия = лСтрокаСообщения;
	//	
	//	ДМ_СлужебныйПривилегированный.ЗарегистрироватьСобытие( 
	//		пДокументСсылка,
	//		"Обработка файлов EDI.",
	//		Перечисления.ДМ_УровниЖурнала.Ошибка,
	//		ОбщегоНазначения.ИдентификаторОбъектаМетаданных( ТипЗнч(пДокументСсылка) ),
	//		Строка( пДокументСсылка ),
	//		лОписаниеСобытия);
	//	
	//	ДокDanone = пДокументСсылка.ПолучитьОбъект();
	//	ДокDanone.СтатусДокумента = Перечисления.СтатусДокументаСФайламиSAP.ОшибкаПриОбработке;
	//	ДокDanone.Записать();
	//	
	//	Возврат;
	//	
	//КонецЕсли;	
	
	
	ТекСтрФайла = 4;
	ТекСтрФайла2 = ТекСтрФайла;
	ФинишФайла = 0;
	Пока ФинишФайла = 0 Цикл
		
		мОшибки = Новый Массив;
		
		тзEDIОПеремещение = лСтруктураТзEDI.тзEDIОПеремещение.Скопировать();
		тзEDIОПеремещениеТаблицаМатериалов = лСтруктураТзEDI.тзEDIОПеремещениеТаблицаМатериалов.Скопировать();
		тзПеремещение = лСтруктураТзEDI.тзПеремещение.Скопировать();
		тзПеремещениеТаблицаМатериалов = лСтруктураТзEDI.тзПеремещениеТаблицаМатериалов.Скопировать();
		
		ТекСтртзОтгрузка = тзПеремещение.Добавить();
		
		ШапкаПоследнийНомерШаблонаОбработано = 0;
		нсм = 0;  //номер секции с материалами
		нстч = 0; //номер строки от начала секции с материалами
		Для нСтр = ТекСтрФайла По ТекСтрок  Цикл
			ТС = СокрЛП(ТекстДок.ПолучитьСтроку(нСтр));
			Если Лев(ТС,4) = "UNZ+" Тогда
				//финиш файла
				ФинишФайла = 1;
				Прервать;
			КонецЕсли;
			Если Лев(ТС,3) = "CPS" Тогда
				//финиш заголовка, след. строка - начало секции с материалами
				нсм = 1;
				Продолжить;
			КонецЕсли;	
			Если нсм > 0 Тогда
				//секция с материалами
				Если Лев(ТС,4) = "UNT+" Тогда
					//финиш DESADV
					ТекСтрФайла = нСтр + 1;
					ТекСтрФайла3 = ТекСтрФайла;
					Прервать;
				КонецЕсли;
				Если Лев(ТС,4) = "LIN+" Тогда
					//начало секции с материалами
					нстч = 0;
				КонецЕсли;
				нстч = нстч + 1;
				Если нстч = 1 Тогда
					тзEDIОПеремещениеТаблицаМатериалов.ЗаполнитьЗначения(Ложь, "Обработано");
					ТекСтртзОтгрузкаТаблицаМатериалов = тзПеремещениеТаблицаМатериалов.Добавить();
				КонецЕсли;
				СтрОЗ = Новый Структура("Обработано",Ложь);
				мСтртзEDIОтгрузкаТаблицаМатериалов = тзEDIОПеремещениеТаблицаМатериалов.НайтиСтроки(СтрОЗ);
				Если мСтртзEDIОтгрузкаТаблицаМатериалов.Количество() > 0 Тогда
					ТекТС = ТС;
					Для сс=0 по мСтртзEDIОтгрузкаТаблицаМатериалов.Количество()-1 Цикл
						ТекСтртзEDIОтгрузкаТаблицаМатериалов = мСтртзEDIОтгрузкаТаблицаМатериалов.Получить(сс);
						нпс = Найти(ТекТС,ТекСтртзEDIОтгрузкаТаблицаМатериалов.НачКлюч);
						Если нпс > 0 Тогда
							ТекТС = Сред(ТекТС,нпс + СтрДлина(ТекСтртзEDIОтгрузкаТаблицаМатериалов.НачКлюч)); 
							кпс = Найти(ТекТС,ТекСтртзEDIОтгрузкаТаблицаМатериалов.КонКлюч);
							Если кпс > 0 Тогда
								ТекСтртзОтгрузкаТаблицаМатериалов[ТекСтртзEDIОтгрузкаТаблицаМатериалов.ИмяПоля] = Сред(ТекТС,1,кпс-1);
								ТекСтртзEDIОтгрузкаТаблицаМатериалов.Обработано = Истина;
								Если ПустаяСтрока(Сред(ТекТС,1,кпс-1)) И Не ТекСтртзEDIОтгрузкаТаблицаМатериалов.Необязательное Тогда
									мОшибки.Добавить("Отсутствует " + ТекСтртзEDIОтгрузкаТаблицаМатериалов.ИмяПоля + " (строка " + тзПеремещениеТаблицаМатериалов.Количество() + ")");
								КонецЕсли;
								Если ТекСтртзEDIОтгрузкаТаблицаМатериалов.НесколькоЗначенийВСтроке Тогда
									Продолжить;
								Иначе	
									Прервать;
								КонецЕсли;	
							КонецЕсли;
						КонецЕсли;	
					КонецЦикла;	
				КонецЕсли;
				
			Иначе
				
				//заголовок
				Для Каждого ТекСтртзEDIОтгрузка Из тзEDIОПеремещение Цикл
					Если ТекСтртзEDIОтгрузка.НС < ШапкаПоследнийНомерШаблонаОбработано Тогда
						Если Не ТекСтртзEDIОтгрузка.Обработано Тогда
							ТекСтртзEDIОтгрузка.Обработано = Истина;
						КонецЕсли;	
					КонецЕсли;	
				КонецЦикла;	
				СтрОЗ = Новый Структура("Обработано",Ложь);
				мСтртзEDIОтгрузка = тзEDIОПеремещение.НайтиСтроки(СтрОЗ);
				Если мСтртзEDIОтгрузка.Количество() > 0 Тогда
					ТекТС = ТС;
					Для сс=0 по мСтртзEDIОтгрузка.Количество()-1 Цикл
						ТекСтртзEDIОтгрузка = мСтртзEDIОтгрузка.Получить(сс);
						нпс = Найти(ТекТС,ТекСтртзEDIОтгрузка.НачКлюч);
						Если нпс > 0 Тогда
							//проверка на особый тип строки
							Если ТекСтртзEDIОтгрузка.ОсобыйТипСтроки > 0 Тогда
								Если ТекСтртзEDIОтгрузка.нп=1 Тогда
									ОбработатьОсобыйТипСтроки(ТекТС,ТекСтртзEDIОтгрузка.ОсобыйТипСтроки,нпс,ТекСтртзEDIОтгрузка.НачКлюч,ТекСтртзОтгрузка);
									ШапкаПоследнийНомерШаблонаОбработано = ТекСтртзEDIОтгрузка.НС;
									СтрОЗОт = Новый Структура;
									СтрОЗОт.Вставить("Обработано",Ложь);
									СтрОЗОт.Вставить("НС",ТекСтртзEDIОтгрузка.НС);
									СтрОЗОт.Вставить("ОсобыйТипСтроки",ТекСтртзEDIОтгрузка.ОсобыйТипСтроки);
									мСтртзEDIОтгрузкаОт = тзEDIОПеремещение.НайтиСтроки(СтрОЗот);
									Если мСтртзEDIОтгрузкаОт.Количество() > 0 Тогда
										Для ссОт=0 по мСтртзEDIОтгрузкаОт.Количество()-1 Цикл
											ТекСтртзEDIОтгрузкаОт = мСтртзEDIОтгрузкаОт.Получить(ссОт);
											ТекСтртзEDIОтгрузкаОт.Обработано = Истина;
										КонецЦикла;	
									КонецЕсли;
								КонецЕсли;
								Прервать;
							КонецЕсли;	
							ТекТС = Сред(ТекТС,нпс + СтрДлина(ТекСтртзEDIОтгрузка.НачКлюч)); 
							кпс = Найти(ТекТС,ТекСтртзEDIОтгрузка.КонКлюч);
							Если кпс > 0 Тогда
								ТекСтртзОтгрузка[ТекСтртзEDIОтгрузка.ИмяПоля] = Сред(ТекТС,1,кпс-1);
								ТекСтртзEDIОтгрузка.Обработано = Истина;
								ШапкаПоследнийНомерШаблонаОбработано = ТекСтртзEDIОтгрузка.НС;
								Если ПустаяСтрока(Сред(ТекТС,1,кпс-1)) Тогда
									Если Не ТекСтртзEDIОтгрузка.Необязательное Тогда
										мОшибки.Добавить("Отсутствует " + ТекСтртзEDIОтгрузка.ИмяПоля);
									КонецЕсли;
								КонецЕсли;
								Если ТекСтртзEDIОтгрузка.НесколькоЗначенийВСтроке Тогда
									Продолжить;
								Иначе	
									Прервать;
								КонецЕсли;	
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;	
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЦикла;
		
		Если ФинишФайла = 1 Тогда
			Прервать;
		КонецЕсли;	
		
		//обработка значений с признаком "ПроверитьСНачалаФайла"
		СтрОЗ = Новый Структура;
		СтрОЗ.Вставить("ПроверитьСНачалаФайла",Истина);
		СтрОЗ.Вставить("ГлавныйКлючДляПроверкиСНачалаФайла","");
		мСтртзEDIОтгрузка = тзEDIОПеремещение.НайтиСтроки(СтрОЗ);
		Если мСтртзEDIОтгрузка.Количество() > 0 Тогда
			Для сс2=0 по мСтртзEDIОтгрузка.Количество()-1 Цикл
				ТекС2 = мСтртзEDIОтгрузка.Получить(сс2);
				Если ТекС2.НесколькоЗначенийВСтроке ИЛИ ТекС2.ОсобыйТипСтроки > 0 Тогда
					//здесь такое быть не должно
					Продолжить;
				КонецЕсли;
				//с начала сообщения проверим
				Для нСтр = ТекСтрФайла2 По ТекСтрФайла3 Цикл
					ТС = СокрЛП(ТекстДок.ПолучитьСтроку(нСтр));
					нпс = Найти(ТС,ТекС2.НачКлюч);
					Если нпс > 0 Тогда
						ТекТС = Сред(ТС,нпс + СтрДлина(ТекС2.НачКлюч)); 
						кпс = Найти(ТекТС,ТекС2.КонКлюч);
						Если кпс > 0 Тогда
							ТекСтртзОтгрузка[ТекС2.ИмяПоля] = Сред(ТекТС,1,кпс-1);
							ТекС2.НомСтр = нСтр;
							Прервать;
						КонецЕсли;	
					КонецЕсли;	
				КонецЦикла;
			КонецЦикла;	
		КонецЕсли;	
		//заполним подчиненные значения от строки с главным значением
		СтрОЗ = Новый Структура("ПроверитьСНачалаФайла",Истина);
		СтрОЗ = Новый Структура("НомСтр",0);
		мСтртзEDIОтгрузка = тзEDIОПеремещение.НайтиСтроки(СтрОЗ);
		Если мСтртзEDIОтгрузка.Количество() > 0 Тогда
			Для сс2=0 по мСтртзEDIОтгрузка.Количество()-1 Цикл
				ТекС2 = мСтртзEDIОтгрузка.Получить(сс2);
				Если Не ПустаяСтрока(ТекС2.ГлавныйКлючДляПроверкиСНачалаФайла) Тогда
					Если ТекС2.НесколькоЗначенийВСтроке ИЛИ ТекС2.ОсобыйТипСтроки > 0 Тогда
						//здесь такое быть не должно
						Продолжить;
					КонецЕсли;
					ИскГлСтр = тзEDIОПеремещение.Найти(ТекС2.ГлавныйКлючДляПроверкиСНачалаФайла,"НачКлюч");
					Если ИскГлСтр <> Неопределено Тогда
						Если ИскГлСтр.НомСтр > 0 Тогда
							Для нСтр = (ИскГлСтр.НомСтр+1) По ТекСтрФайла3  Цикл
								ТС = СокрЛП(ТекстДок.ПолучитьСтроку(нСтр));
								нпс = Найти(ТС,ТекС2.НачКлюч);
								Если нпс > 0 Тогда
									ТекТС = Сред(ТС,нпс + СтрДлина(ТекС2.НачКлюч)); 
									кпс = Найти(ТекТС,ТекС2.КонКлюч);
									Если кпс > 0 Тогда
										ТекСтртзОтгрузка[ТекС2.ИмяПоля] = Сред(ТекТС,1,кпс-1);
										Прервать;	
									КонецЕсли;	
								КонецЕсли;
							КонецЦикла;	
						КонецЕсли;	
					КонецЕсли;
				Иначе
					//нарушен оговоренный порядок главного и подчиненного значения
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		
		ТекСтрФайла2 = ТекСтрФайла3;
		
		Если мОшибки.Количество() > 0 Тогда
			
			ЗаполнитьОшибкиПроверкиПолейEDIФайла(пДокументСсылка, "ОтгрузкаВнутренняя", мОшибки);
			
		Иначе	
			
			ЗапросСразуНаГашение = Ложь;
			Для Каждого ТекТ из тзПеремещениеТаблицаМатериалов Цикл
				Если ВРЕГ(ТекТ.ПризнакНеобходимостиСразуПогаситьСозданныйТВСД) = "CLOSE CERTIFICATE" Тогда
					ЗапросСразуНаГашение = Истина;
					Прервать;	
				КонецЕсли;
			КонецЦикла;	
			
			ЗаполнитьДокументыУВС("ОтгрузкаВнутренняя",пДокументСсылка,тзПеремещение,тзПеремещениеТаблицаМатериалов,ЗапросСразуНаГашение);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

Процедура ОбработатьДокументSAPИнвентаризация(пДокументСсылка,лСтруктураТзEDI)
	
	//ИсхДокОбъект = пДокументСсылка.ПолучитьОбъект();
	//Попытка
	//	ИсхДокОбъект.Заблокировать();
	//Исключение
	//	//заблокирован другой задачей, пропускаем
	//	Возврат;
	//КонецПопытки;
	
	ТекСтатус = пДокументСсылка.СтатусДокумента;
	СтрДок = ДМ_ИнтеграцияУВСSAP.ПолучитьФайлИсходный(пДокументСсылка);
	
	ТекстДок = СтрДок.ФайлИсходный;
	Если ТекстДок = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ТекСтрок = ТекстДок.КоличествоСтрок();
	
	//Проверка типа файла, читаем первые 3 строки
	ПроверкаЗаголовкаФайла = Истина;
	Если ТекСтрок > 3 Тогда
		Для нСтр = 1 По 3  Цикл
			ТС = СокрЛП(ТекстДок.ПолучитьСтроку(нСтр));
			Если нСтр=1 Тогда 
				Если Лев(ТС,5) <> "UNA:+" Тогда
					ПроверкаЗаголовкаФайла = Ложь;
					Прервать;
				КонецЕсли;
			ИначеЕсли нСтр=2 Тогда 
				Если Найти(ТС,"UNB+UNOE:3+") <> 1 Тогда
					ПроверкаЗаголовкаФайла = Ложь;
					Прервать;
				КонецЕсли;
			ИначеЕсли нСтр=3 Тогда 
				Если Найти(ТС,"UNH+") <> 1 ИЛИ Найти(ТС,"INVRPT") = 0 Тогда
					ПроверкаЗаголовкаФайла = Ложь;
					Прервать;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
	Иначе
		ПроверкаЗаголовкаФайла = Ложь;
	КонецЕсли;
	
	
	
	Если ПроверкаЗаголовкаФайла = Ложь Тогда
		лСтрокаСообщения = НСтр("ru = 'Неверный формат файла.
		|Тип файлов: %1
		|Имя файла: %2
		|Дата загрузки: %3'");
		лСтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( лСтрокаСообщения, "Инвентаризация", СокрЛП(пДокументСсылка.ИмяФайла),пДокументСсылка.ДатаЗагрузкиИсходногоФайла );
		
		//Регистрируем ошибку
		лОписаниеСобытия = лСтрокаСообщения;
		
		ДМ_СлужебныйПривилегированный.ЗарегистрироватьСобытие( 
		пДокументСсылка,
		"Обработка файлов EDI.",
		Перечисления.ДМ_УровниЖурнала.Ошибка,
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных( ТипЗнч(пДокументСсылка) ),
		Строка( пДокументСсылка ),
		лОписаниеСобытия);
		
		ДокDanone = пДокументСсылка.ПолучитьОбъект();
		ДокDanone.СтатусДокумента = Перечисления.СтатусДокументаСФайламиSAP.ОшибкаПриОбработке;
		ДокDanone.Записать();
		
		Возврат;
		
	КонецЕсли;	
	
	
	
	ТекСтрФайла = 3;
	ФинишФайла = 0;
	Пока ФинишФайла = 0 Цикл
		
		мОшибки = Новый Массив;
		
		тзEDIИнвентаризация = лСтруктураТзEDI.тзEDIИнвентаризация.Скопировать();
		тзEDIИнвентаризацияТаблицаМатериалов = лСтруктураТзEDI.тзEDIИнвентаризацияТаблицаМатериалов.Скопировать();
		тзИнвентаризация = лСтруктураТзEDI.тзИнвентаризация.Скопировать();
		тзИнвентаризацияТаблицаМатериалов = лСтруктураТзEDI.тзИнвентаризацияТаблицаМатериалов.Скопировать();
		
		ТекСтртзИнвентаризация = тзИнвентаризация.Добавить();
		
		ШапкаПоследнийНомерШаблонаОбработано = 0;
		нсм = 0;  //номер секции с материалами
		нстч = 0; //номер строки от начала секции с материалами
		
		Для нСтр = ТекСтрФайла По ТекСтрок  Цикл
			ТС = СокрЛП(ТекстДок.ПолучитьСтроку(нСтр));
			Если Лев(ТС,4) = "UNZ+" Тогда
				//финиш файла
				ФинишФайла = 1;
				Прервать;
			КонецЕсли;
			Если Лев(ТС,12) = "LIN+1++:SRV'" Тогда
				//финиш заголовка, след. строка - начало секции с материалами
				нсм = 1;
				//Продолжить;
			КонецЕсли;	
			Если нсм > 0 Тогда
				//секция с материалами
				Если Лев(ТС,4) = "UNT+" Тогда
					//финиш INVPRT
					ТекСтрФайла = нСтр + 1;
					Прервать;
				КонецЕсли;
				Если Лев(ТС,4) = "LIN+" Тогда
					//начало секции с материалами
					нстч = 0;
				КонецЕсли;
				нстч = нстч + 1;
				Если нстч = 1 Тогда
					тзEDIИнвентаризацияТаблицаМатериалов.ЗаполнитьЗначения(Ложь, "Обработано");
					ТекСтртзИнвентаризацияТаблицаМатериалов = тзИнвентаризацияТаблицаМатериалов.Добавить();
				КонецЕсли;
				СтрОЗ = Новый Структура("Обработано",Ложь);
				мСтртзEDIИнвентаризацияТаблицаМатериалов = тзEDIИнвентаризацияТаблицаМатериалов.НайтиСтроки(СтрОЗ);
				Если мСтртзEDIИнвентаризацияТаблицаМатериалов.Количество() > 0 Тогда
					ТекТС = ТС;
					Для сс=0 по мСтртзEDIИнвентаризацияТаблицаМатериалов.Количество()-1 Цикл
						ТекСтртзEDIИнвентаризацияТаблицаМатериалов = мСтртзEDIИнвентаризацияТаблицаМатериалов.Получить(сс);
						нпс = Найти(ТекТС,ТекСтртзEDIИнвентаризацияТаблицаМатериалов.НачКлюч);
						Если нпс > 0 Тогда
							ТекТС = Сред(ТекТС,нпс + СтрДлина(ТекСтртзEDIИнвентаризацияТаблицаМатериалов.НачКлюч)); 
							кпс = Найти(ТекТС,ТекСтртзEDIИнвентаризацияТаблицаМатериалов.КонКлюч);
							Если кпс > 0 Тогда
								ТекСтртзИнвентаризацияТаблицаМатериалов[ТекСтртзEDIИнвентаризацияТаблицаМатериалов.ИмяПоля] = Сред(ТекТС,1,кпс-1);
								ТекСтртзEDIИнвентаризацияТаблицаМатериалов.Обработано = Истина;
								Если ПустаяСтрока(Сред(ТекТС,1,кпс-1)) И Не ТекСтртзEDIИнвентаризацияТаблицаМатериалов.Необязательное Тогда
									мОшибки.Добавить("Отсутствует " + ТекСтртзEDIИнвентаризацияТаблицаМатериалов.ИмяПоля + " (строка " + тзИнвентаризацияТаблицаМатериалов.Количество() + ")");
								КонецЕсли;
								Если ТекСтртзEDIИнвентаризацияТаблицаМатериалов.НесколькоЗначенийВСтроке Тогда
									Продолжить;
								Иначе	
									Прервать;
								КонецЕсли;	
							КонецЕсли;
						КонецЕсли;	
					КонецЦикла;	
				КонецЕсли;
				
				
			Иначе
				
				//заголовок
				СтрОЗ = Новый Структура("Обработано",Ложь);
				мСтртзEDIИнвентаризация = тзEDIИнвентаризация.НайтиСтроки(СтрОЗ);
				Если мСтртзEDIИнвентаризация.Количество() > 0 Тогда
					ТекТС = ТС;
					Для сс=0 по мСтртзEDIИнвентаризация.Количество()-1 Цикл
						ТекСтртзEDIИнвентаризация = мСтртзEDIИнвентаризация.Получить(сс);
						нпс = Найти(ТекТС,ТекСтртзEDIИнвентаризация.НачКлюч);
						Если нпс > 0 Тогда
							ТекТС = Сред(ТекТС,нпс + СтрДлина(ТекСтртзEDIИнвентаризация.НачКлюч)); 
							кпс = Найти(ТекТС,ТекСтртзEDIИнвентаризация.КонКлюч);
							Если кпс > 0 Тогда
								ТекСтртзИнвентаризация[ТекСтртзEDIИнвентаризация.ИмяПоля] = Сред(ТекТС,1,кпс-1);
								ТекСтртзEDIИнвентаризация.Обработано = Истина;
								Если ПустаяСтрока(Сред(ТекТС,1,кпс-1)) Тогда
									Если Не ТекСтртзEDIИнвентаризация.Необязательное Тогда
										мОшибки.Добавить("Отсутствует " + ТекСтртзEDIИнвентаризация.ИмяПоля);
									КонецЕсли;
								КонецЕсли;
								Если ТекСтртзEDIИнвентаризация.НесколькоЗначенийВСтроке Тогда
									Продолжить;
								Иначе	
									Прервать;
								КонецЕсли;	
							КонецЕсли;	
						КонецЕсли;
					КонецЦикла;	
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЦикла;
		
		Если ФинишФайла = 1 Тогда
			Прервать;
		КонецЕсли;	
		
		
		Если мОшибки.Количество() > 0 Тогда
			
			ЗаполнитьОшибкиПроверкиПолейEDIФайла(пДокументСсылка, "Инвентаризация", мОшибки);
			
		Иначе	
			
			ЗаполнитьДокументыУВС("Инвентаризация",пДокументСсылка,тзИнвентаризация,тзИнвентаризацияТаблицаМатериалов)
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

Процедура ОбработатьДокументSAPПроизводство(пДокументСсылка,лСтруктураТзEDI)
	
	//ИсхДокОбъект = пДокументСсылка.ПолучитьОбъект();
	//Попытка
	//	ИсхДокОбъект.Заблокировать();
	//Исключение
	//	//заблокирован другой задачей, пропускаем
	//	Возврат;
	//КонецПопытки;
	
	ТекСтатус = пДокументСсылка.СтатусДокумента;
	СтрДок = ДМ_ИнтеграцияУВСSAP.ПолучитьФайлИсходный(пДокументСсылка);
	
	ТекстДок = СтрДок.ФайлИсходный;
	Если ТекстДок = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ТекСтрок = ТекстДок.КоличествоСтрок();
	
	//Проверка типа файла, читаем первые 4 строки
	ПроверкаЗаголовкаФайла = Истина;
	Если ТекСтрок > 3 Тогда
		Для нСтр = 1 По 3  Цикл
			ТС = СокрЛП(ТекстДок.ПолучитьСтроку(нСтр));
			Если нСтр=1 Тогда 
				Если Лев(ТС,5) <> "UNA:+" Тогда
					ПроверкаЗаголовкаФайла = Ложь;
					Прервать;
				КонецЕсли;
			ИначеЕсли нСтр=2 Тогда 
				//Если Найти(ТС,"UNB+UNOE:2+") <> 1 Тогда
				//	ПроверкаЗаголовкаФайла = Ложь;
				//	Прервать;
				//КонецЕсли;
			ИначеЕсли нСтр=3 Тогда 
				Если Найти(ТС,"UNH+") <> 1 ИЛИ Найти(ТС,"RECADV") = 0 Тогда
					ПроверкаЗаголовкаФайла = Ложь;
					Прервать;
				КонецЕсли;
			ИначеЕсли нСтр=4 Тогда 
				Если Лев(ТС,7) <> "BGM+105" Тогда
					ПроверкаЗаголовкаФайла = Ложь;
					Прервать;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
	Иначе
		ПроверкаЗаголовкаФайла = Ложь;
	КонецЕсли;
	
	
	Если ПроверкаЗаголовкаФайла = Ложь Тогда
		лСтрокаСообщения = НСтр("ru = 'Неверный формат файла.
		|Тип файлов: %1
		|Имя файла: %2
		|Дата загрузки: %3'");
		лСтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( лСтрокаСообщения, "Производство", СокрЛП(пДокументСсылка.ИмяФайла),пДокументСсылка.ДатаЗагрузкиИсходногоФайла );
		
		//Регистрируем ошибку
		лОписаниеСобытия = лСтрокаСообщения;
		
		ДМ_СлужебныйПривилегированный.ЗарегистрироватьСобытие( 
		пДокументСсылка,
		"Обработка файлов EDI.",
		Перечисления.ДМ_УровниЖурнала.Ошибка,
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных( ТипЗнч(пДокументСсылка) ),
		Строка( пДокументСсылка ),
		лОписаниеСобытия);
		
		ДокDanone = пДокументСсылка.ПолучитьОбъект();
		ДокDanone.СтатусДокумента = Перечисления.СтатусДокументаСФайламиSAP.ОшибкаПриОбработке;
		ДокDanone.Записать();
		
		Возврат;
	КонецЕсли;	
	
	ТекСтрФайла = 3;
	ФинишФайла = 0;
	Пока ФинишФайла = 0 Цикл
		
		мОшибки = Новый Массив;
		
		тзEDIПроизводство = лСтруктураТзEDI.тзEDIПроизводство.Скопировать();
		тзEDIПроизводствоТаблицаМатериалов = лСтруктураТзEDI.тзEDIПроизводствоТаблицаМатериалов.Скопировать();
		тзПроизводство = лСтруктураТзEDI.тзПроизводство.Скопировать();
		тзПроизводствоТаблицаМатериалов = лСтруктураТзEDI.тзПроизводствоТаблицаМатериалов.Скопировать();
		
		ТекСтртзПроизводство = тзПроизводство.Добавить();
		
		нсм = 0;  //номер секции с материалами
		нстч = 0; //номер строки от начала секции с материалами
		
		Для нСтр = ТекСтрФайла По ТекСтрок  Цикл
			ТС = СокрЛП(ТекстДок.ПолучитьСтроку(нСтр));
			Если Лев(ТС,4) = "UNZ+" Тогда
				//финиш файла
				ФинишФайла = 1;
				Прервать;
			КонецЕсли;
			Если Лев(ТС,4) = "LIN+" Тогда
				//начало секции с материалами
				нстч = 1;
				нсм = 1;	
				ТекСтртзПроизводствоТаблицаМатериалов = тзПроизводствоТаблицаМатериалов.Добавить();	
			КонецЕсли;
			Если нсм > 0 Тогда
				//секция с материалами
				Если Лев(ТС,4) = "UNT+" Тогда
					//финиш RECADV
					ТекСтрФайла = нСтр + 1;
					Прервать;
				КонецЕсли;
				СтрОЗ = Новый Структура("Обработано",Ложь);
				мСтртзEDIПроизводствоТаблицаМатериалов = тзEDIПроизводствоТаблицаМатериалов.НайтиСтроки(СтрОЗ);
				Если мСтртзEDIПроизводствоТаблицаМатериалов.Количество() > 0 Тогда
					ТекТС = ТС;
					Для сс=0 по мСтртзEDIПроизводствоТаблицаМатериалов.Количество()-1 Цикл
						ТекСтртзEDIПроизводствоТаблицаМатериалов = мСтртзEDIПроизводствоТаблицаМатериалов.Получить(сс);
						нпс = Найти(ТекТС,ТекСтртзEDIПроизводствоТаблицаМатериалов.НачКлюч);
						Если нпс > 0 Тогда
							ТекТС = Сред(ТекТС,нпс + СтрДлина(ТекСтртзEDIПроизводствоТаблицаМатериалов.НачКлюч)); 
							кпс = Найти(ТекТС,ТекСтртзEDIПроизводствоТаблицаМатериалов.КонКлюч);
							Если кпс > 0 Тогда
								ТекСтртзПроизводствоТаблицаМатериалов[ТекСтртзEDIПроизводствоТаблицаМатериалов.ИмяПоля] = Сред(ТекТС,1,кпс-1);
								ТекСтртзEDIПроизводствоТаблицаМатериалов.Обработано = Истина;
								Если ПустаяСтрока(Сред(ТекТС,1,кпс-1)) И Не ТекСтртзEDIПроизводствоТаблицаМатериалов.Необязательное Тогда
									мОшибки.Добавить("Отсутствует " + ТекСтртзEDIПроизводствоТаблицаМатериалов.ИмяПоля + " (строка " + тзПроизводствоТаблицаМатериалов.Количество() + ")");
								КонецЕсли;
								Если ТекСтртзEDIПроизводствоТаблицаМатериалов.НесколькоЗначенийВСтроке Тогда
									Продолжить;
								Иначе	
									Прервать;
								КонецЕсли;	
							КонецЕсли;
						КонецЕсли;	
					КонецЦикла;	
				КонецЕсли;
				
			Иначе
				
				//заголовок
				СтрОЗ = Новый Структура("Обработано",Ложь);
				мСтртзEDIПроизводство = тзEDIПроизводство.НайтиСтроки(СтрОЗ);
				Если мСтртзEDIПроизводство.Количество() > 0 Тогда
					ТекТС = ТС;
					Для сс=0 по мСтртзEDIПроизводство.Количество()-1 Цикл
						ТекСтртзEDIПроизводство = мСтртзEDIПроизводство.Получить(сс);
						нпс = Найти(ТекТС,ТекСтртзEDIПроизводство.НачКлюч);
						Если нпс > 0 Тогда
							ТекТС = Сред(ТекТС,нпс + СтрДлина(ТекСтртзEDIПроизводство.НачКлюч)); 
							кпс = Найти(ТекТС,ТекСтртзEDIПроизводство.КонКлюч);
							Если кпс > 0 Тогда
								ТекСтртзПроизводство[ТекСтртзEDIПроизводство.ИмяПоля] = Сред(ТекТС,1,кпс-1);
								ТекСтртзEDIПроизводство.Обработано = Истина;
								Если ПустаяСтрока(Сред(ТекТС,1,кпс-1)) Тогда
									Если Не ТекСтртзEDIПроизводство.Необязательное Тогда
										мОшибки.Добавить("Отсутствует " + ТекСтртзEDIПроизводство.ИмяПоля);
									КонецЕсли;
								КонецЕсли;
								Если ТекСтртзEDIПроизводство.НесколькоЗначенийВСтроке Тогда
									Продолжить;
								Иначе	
									Прервать;
								КонецЕсли;	
							КонецЕсли;	
						КонецЕсли;
					КонецЦикла;	
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЦикла;
		
		Если ФинишФайла = 1 Тогда
			Прервать;
		КонецЕсли;	
		
		
		Если мОшибки.Количество() > 0 Тогда
			
			ЗаполнитьОшибкиПроверкиПолейEDIФайла(пДокументСсылка, "Производство", мОшибки);
			
		Иначе	
			
			ЗаполнитьДокументыУВС("Производство",пДокументСсылка,тзПроизводство,тзПроизводствоТаблицаМатериалов)
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

Процедура ОбработатьДокументSAPГашениеВСД(пДокументСсылка,лСтруктураТзEDI)
	
	//ИсхДокОбъект = пДокументСсылка.ПолучитьОбъект();
	//Попытка
	//	ИсхДокОбъект.Заблокировать();
	//Исключение
	//	//заблокирован другой задачей, пропускаем
	//	Возврат;
	//КонецПопытки;
	
	
	Если ЗначениеЗаполнено(пДокументСсылка.ДМ_ФайлыОбменаПеремещениеИсходный) Тогда
		Если пДокументСсылка.ДМ_ФайлыОбменаПеремещениеИсходный.ДМ_СвязанныеДокументыУВС.Количество() > 0 Тогда
			ДокDanoneГашение = пДокументСсылка.ПолучитьОбъект();
			Для Каждого ТекДокИсх Из пДокументСсылка.ДМ_ФайлыОбменаПеремещениеИсходный.ДМ_СвязанныеДокументыУВС Цикл
				ЗаполнитьПриходПоПеремещению(ДокDanoneГашение,ТекДокИсх.ДМ_СвязанныйДокументУВС);
			КонецЦикла;	
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	ТекСтатус = пДокументСсылка.СтатусДокумента;
	СтрДок = ДМ_ИнтеграцияУВСSAP.ПолучитьФайлИсходный(пДокументСсылка);
	
	ТекстДок = СтрДок.ФайлИсходный;
	Если ТекстДок = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ТекСтрок = ТекстДок.КоличествоСтрок();
	
	//Проверка типа файла, читаем первые 3 строки
	ВидГашения = 0; //1 - приемка, 2 - возврат, 3 - внутреннее перемещение 
	ПроверкаЗаголовкаФайла = Истина;
	Если ТекСтрок > 7 Тогда
		Для нСтр = 1 По 7  Цикл
			ТС = СокрЛП(ТекстДок.ПолучитьСтроку(нСтр));
			Если нСтр=1 Тогда 
				Если Лев(ТС,5) <> "UNA:+" Тогда
					ПроверкаЗаголовкаФайла = Ложь;
					Прервать;
				КонецЕсли;
			ИначеЕсли нСтр=2 Тогда 
				//Если Найти(ТС,"UNB+UNOE:2+") <> 1 Тогда
				//	ПроверкаЗаголовкаФайла = Ложь;
				//	Прервать;
				//КонецЕсли;
			ИначеЕсли нСтр=3 Тогда 
				Если Найти(ТС,"UNH+") <> 1 ИЛИ Найти(ТС,"RECADV") = 0 Тогда
					ПроверкаЗаголовкаФайла = Ложь;
					Прервать;
				КонецЕсли;
			ИначеЕсли нСтр=4 Тогда 
				Если Лев(ТС,7) <> "BGM+632" Тогда
					ПроверкаЗаголовкаФайла = Ложь;
					Прервать;
				КонецЕсли;
			ИначеЕсли нСтр=7 Тогда
				Если Найти(ТС,"FTX+ZZZ+++") <> 1 Тогда
					ПроверкаЗаголовкаФайла = Ложь;
					Прервать;
				ИначеЕсли ТС = "FTX+ZZZ+++for seller'" Тогда
					ВидГашения = 1;
				ИначеЕсли ТС = "FTX+ZZZ+++return'" Тогда
					ВидГашения = 2;
				ИначеЕсли ТС = "FTX+ZZZ+++for danone'" Тогда
					ВидГашения = 3;
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;
	Иначе
		ПроверкаЗаголовкаФайла = Ложь;
	КонецЕсли;
	
	Если ПроверкаЗаголовкаФайла = Ложь Тогда
		лСтрокаСообщения = НСтр("ru = 'Неверный формат файла.
		|Тип файлов: %1
		|Имя файла: %2
		|Дата загрузки: %3'");
		лСтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( лСтрокаСообщения, "ГашениеВСД", СокрЛП(пДокументСсылка.ИмяФайла),пДокументСсылка.ДатаЗагрузкиИсходногоФайла );
		
		//Регистрируем ошибку
		лОписаниеСобытия = лСтрокаСообщения;
		
		ДМ_СлужебныйПривилегированный.ЗарегистрироватьСобытие( 
		пДокументСсылка,
		"Обработка файлов EDI.",
		Перечисления.ДМ_УровниЖурнала.Ошибка,
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных( ТипЗнч(пДокументСсылка) ),
		Строка( пДокументСсылка ),
		лОписаниеСобытия);
		
		ДокDanone = пДокументСсылка.ПолучитьОбъект();
		ДокDanone.СтатусДокумента = Перечисления.СтатусДокументаСФайламиSAP.ОшибкаПриОбработке;
		ДокDanone.Записать();
		
		Возврат;
		
	КонецЕсли;	
	
	НовДок = 0;  // номер документа в файле
	ТекСтрФайла = 3;
	ФинишФайла = 0;
	Пока ФинишФайла =0 Цикл 
		
		мОшибки = Новый Массив;
		
		тзEDIГашение = лСтруктураТзEDI.тзEDIГашение.Скопировать();
		тзEDIГашениеТаблицаМатериалов = лСтруктураТзEDI.тзEDIГашениеТаблицаМатериалов.Скопировать();
		тзГашение = лСтруктураТзEDI.тзГашение.Скопировать();
		тзГашениеТаблицаМатериалов = лСтруктураТзEDI.тзГашениеТаблицаМатериалов.Скопировать();
		
		ТекСтртзГашение = тзГашение.Добавить();
		ТекСтртзГашениеТаблицаМатериалов = тзГашениеТаблицаМатериалов.Добавить();
		
		Для нСтр = ТекСтрФайла По ТекСтрок  Цикл
			ТС = СокрЛП(ТекстДок.ПолучитьСтроку(нСтр));
			//Если Лев(ТС,4) = "UNH+" Тогда
			//	//начало нового документа RECADV
			//	НовДок = НовДок + 1;
			//	ТекСтртзГашениеТаблицаМатериалов = тзГашениеТаблицаМатериалов.Добавить();
			//	тзEDIГашениеТаблицаМатериалов.ЗаполнитьЗначения(Ложь, "Обработано");
			//	Продолжить;
			//КонецЕсли;	
			//Если НовДок > 0  Тогда
			Если Лев(ТС,4) = "UNZ+" Тогда
				//финиш файла
				ФинишФайла = 1;
				Прервать;
			КонецЕсли;
			Если Лев(ТС,4) = "UNT+" Тогда
				//финиш RECADV
				ТекСтрФайла = нСтр + 1;
				Прервать;
			КонецЕсли;
			//заголовок
			СтрОЗ = Новый Структура("Обработано",Ложь);
			мСтртзEDIГашение = тзEDIГашение.НайтиСтроки(СтрОЗ);
			Если мСтртзEDIГашение.Количество() > 0 Тогда
				ТекТС = ТС;
				Для сс=0 по мСтртзEDIГашение.Количество()-1 Цикл
					ТекСтртзEDIГашение = мСтртзEDIГашение.Получить(сс);
					нпс = Найти(ТекТС,ТекСтртзEDIГашение.НачКлюч);
					Если нпс > 0 Тогда
						ТекТС = Сред(ТекТС,нпс + СтрДлина(ТекСтртзEDIГашение.НачКлюч)); 
						кпс = Найти(ТекТС,ТекСтртзEDIГашение.КонКлюч);
						Если кпс > 0 Тогда
							ТекСтртзГашение[ТекСтртзEDIГашение.ИмяПоля] = Сред(ТекТС,1,кпс-1);
							ТекСтртзEDIГашение.Обработано = Истина;
							Если ПустаяСтрока(Сред(ТекТС,1,кпс-1)) Тогда
								Если Не ТекСтртзEDIГашение.Необязательное Тогда
									Если ТекСтртзEDIГашение.ИмяПоля = "НомерДоставки" Тогда 
										Если ВидГашения = 3 Тогда
											мОшибки.Добавить("Отсутствует " + ТекСтртзEDIГашение.ИмяПоля);
										КонецЕсли;
									Иначе
										мОшибки.Добавить("Отсутствует " + ТекСтртзEDIГашение.ИмяПоля);
									КонецЕсли;	
								КонецЕсли;
							КонецЕсли;
							Если ТекСтртзEDIГашение.НесколькоЗначенийВСтроке Тогда
								Продолжить;
							Иначе	
								Прервать;
							КонецЕсли;	
						КонецЕсли;	
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;
			
			//материал - 1 строка 
			СтрОЗ = Новый Структура("Обработано",Ложь);
			мСтртзEDIГашениеТаблицаМатериалов = тзEDIГашениеТаблицаМатериалов.НайтиСтроки(СтрОЗ);
			Если мСтртзEDIГашениеТаблицаМатериалов.Количество() > 0 Тогда
				ТекТС = ТС;
				Для сс=0 по мСтртзEDIГашениеТаблицаМатериалов.Количество()-1 Цикл
					ТекСтртзEDIГашениеТаблицаМатериалов = мСтртзEDIГашениеТаблицаМатериалов.Получить(сс);
					нпс = Найти(ТекТС,ТекСтртзEDIГашениеТаблицаМатериалов.НачКлюч);
					Если нпс > 0 Тогда
						ТекТС = Сред(ТекТС,нпс + СтрДлина(ТекСтртзEDIГашениеТаблицаМатериалов.НачКлюч)); 
						кпс = Найти(ТекТС,ТекСтртзEDIГашениеТаблицаМатериалов.КонКлюч);
						Если кпс > 0 Тогда
							ТекСтртзГашениеТаблицаМатериалов[ТекСтртзEDIГашениеТаблицаМатериалов.ИмяПоля] = Сред(ТекТС,1,кпс-1);
							ТекСтртзEDIГашениеТаблицаМатериалов.Обработано = Истина;
							Если ПустаяСтрока(Сред(ТекТС,1,кпс-1)) И Не ТекСтртзEDIГашениеТаблицаМатериалов.Необязательное Тогда
								мОшибки.Добавить("Отсутствует " + ТекСтртзEDIГашениеТаблицаМатериалов.ИмяПоля + " (строка " + тзГашениеТаблицаМатериалов.Количество() + ")");
							КонецЕсли;
							Если ТекСтртзEDIГашениеТаблицаМатериалов.НесколькоЗначенийВСтроке Тогда
								Продолжить;
							Иначе	
								Прервать;
							КонецЕсли;	
						КонецЕсли;
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;
			
			//КонецЕсли;	
			
		КонецЦикла;
		
		Если ФинишФайла = 1 Тогда
			Прервать;
		КонецЕсли;	
		
		//ошибки проверить
		Если ВидГашения = 1 Тогда
			ВидОперации = "Приемка";
		ИначеЕсли ВидГашения = 2 Тогда
			ВидОперации = "Возврат";
		ИначеЕсли ВидГашения = 3 Тогда
			ВидОперации = "ГашениеВП";
		КонецЕсли;
		
		Если мОшибки.Количество() > 0 Тогда
			
			ЗаполнитьОшибкиПроверкиПолейEDIФайла(пДокументСсылка, ВидОперации, мОшибки);
			
		Иначе	
			
			ЗаполнитьДокументыУВС(ВидОперации,пДокументСсылка,тзГашение,тзГашениеТаблицаМатериалов)
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры	

Процедура ОбработатьДокументSAP(лСтруктура,лСтруктураТзEDI,мКодовGLNВнутрПолучателей)
	
	Если лСтруктура.ВидДокумента = "Клиент" Тогда
		ОбработатьДокументSAPКлиент(лСтруктура.ИсхДок,лСтруктураТзEDI,мКодовGLNВнутрПолучателей);
	ИначеЕсли лСтруктура.ВидДокумента = "ВнутреннееПеремещение" Тогда
		ОбработатьДокументSAPВнутреннееПеремещение(лСтруктура.ИсхДок,лСтруктураТзEDI,мКодовGLNВнутрПолучателей);
	ИначеЕсли лСтруктура.ВидДокумента = "Инвентаризация" Тогда
		ОбработатьДокументSAPИнвентаризация(лСтруктура.ИсхДок,лСтруктураТзEDI);
	ИначеЕсли лСтруктура.ВидДокумента = "Производство" Тогда
		ОбработатьДокументSAPПроизводство(лСтруктура.ИсхДок,лСтруктураТзEDI);
	ИначеЕсли лСтруктура.ВидДокумента = "ГашениеВСД" Тогда
		ОбработатьДокументSAPГашениеВСД(лСтруктура.ИсхДок,лСтруктураТзEDI);
	КонецЕсли;	
	
	ИсхСтатус = лСтруктура.ИсхДок.СтатусДокумента;
	Если ИсхСтатус = Перечисления.СтатусДокументаСФайламиSAP.УспешноОбработан ИЛИ ИсхСтатус = Перечисления.СтатусДокументаСФайламиSAP.ПустаяСсылка() Тогда
		//финальная проверка успешного статуса
		ДокДанонОбъект = лСтруктура.ИсхДок.ПолучитьОбъект();
		УспешноОбработан = Истина;
		Если лСтруктура.ВидДокумента = "Клиент" Тогда
			Если ДокДанонОбъект.ДМ_СвязанныеДокументыУВС.Количество() = 0 Тогда
				УспешноОбработан = Ложь;
			Иначе	
				Для Каждого ТекСтрДок Из ДокДанонОбъект.ДМ_СвязанныеДокументыУВС Цикл
					Если ТекСтрДок.ДМ_СвязанныйДокументУВС = Документы.ТранспортныеОперации.ПустаяСсылка() Тогда
						УспешноОбработан = Ложь;
						Прервать;
					Иначе
						ДокУВС = ТекСтрДок.ДМ_СвязанныйДокументУВС.ПолучитьОбъект();
						Если Не ДокУВС.ПроверитьЗаполнение() Тогда
							УспешноОбработан = Ложь;
							Прервать;
						КонецЕсли;	
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли лСтруктура.ВидДокумента = "ВнутреннееПеремещение" Тогда
			Если ДокДанонОбъект.ДМ_СвязанныеДокументыУВС.Количество() = 0 Тогда
				УспешноОбработан = Ложь;
			Иначе	
				Для Каждого ТекСтрДок Из ДокДанонОбъект.ДМ_СвязанныеДокументыУВС Цикл
					Если ТекСтрДок.ДМ_СвязанныйДокументУВС = Документы.ТранспортныеОперации.ПустаяСсылка() Тогда
						УспешноОбработан = Ложь;
						Прервать;
					Иначе
						ДокУВС = ТекСтрДок.ДМ_СвязанныйДокументУВС.ПолучитьОбъект();
						Если Не ДокУВС.ПроверитьЗаполнение() Тогда
							УспешноОбработан = Ложь;
							Прервать;
						КонецЕсли;	
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли лСтруктура.ВидДокумента = "Инвентаризация" Тогда
			Если ДокДанонОбъект.ДМ_СвязанныеДокументыУВС.Количество() = 0 Тогда
				УспешноОбработан = Ложь;
			Иначе	
				Для Каждого ТекСтрДок Из ДокДанонОбъект.ДМ_СвязанныеДокументыУВС Цикл
					Если ТекСтрДок.ДМ_СвязанныйДокументУВС = Документы.Инвентаризации.ПустаяСсылка() Тогда
						УспешноОбработан = Ложь;
						Прервать;
					Иначе
						ДокУВС = ТекСтрДок.ДМ_СвязанныйДокументУВС.ПолучитьОбъект();
						Если Не ДокУВС.ПроверитьЗаполнение() Тогда
							УспешноОбработан = Ложь;
							Прервать;
						КонецЕсли;	
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли лСтруктура.ВидДокумента = "Производство" Тогда
			Если ДокДанонОбъект.ДМ_СвязанныеДокументыУВС.Количество() = 0 Тогда
				УспешноОбработан = Ложь;
			Иначе	
				Для Каждого ТекСтрДок Из ДокДанонОбъект.ДМ_СвязанныеДокументыУВС Цикл
					Если ТекСтрДок.ДМ_СвязанныйДокументУВС = Документы.ПроизводственныеОперации.ПустаяСсылка() Тогда
						УспешноОбработан = Ложь;
						Прервать;
					Иначе
						ДокУВС = ТекСтрДок.ДМ_СвязанныйДокументУВС.ПолучитьОбъект();
						Если Не ДокУВС.ПроверитьЗаполнение() Тогда
							УспешноОбработан = Ложь;
							Прервать;
						КонецЕсли;	
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			
		ИначеЕсли лСтруктура.ВидДокумента = "ГашениеВСД" Тогда
			Если ДокДанонОбъект.ДМ_СвязанныеДокументыУВС.Количество() = 0 Тогда
				УспешноОбработан = Ложь;
			Иначе	
				Для Каждого ТекСтрДок Из ДокДанонОбъект.ДМ_СвязанныеДокументыУВС Цикл
					Если ТекСтрДок.Приемка = Документы.ПриходныеОперации.ПустаяСсылка() Тогда
						УспешноОбработан = Ложь;
						Прервать;
					Иначе
						ДокУВС = ТекСтрДок.Приемка.ПолучитьОбъект();
						Если Не ДокУВС.ПроверитьЗаполнение() Тогда
							УспешноОбработан = Ложь;
							Прервать;
						КонецЕсли;	
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если Не УспешноОбработан Тогда
			ДокДанонОбъект.СтатусДокумента = Перечисления.СтатусДокументаСФайламиSAP.ОшибкаПриОбработке;
			ДокДанонОбъект.Записать();
		ИначеЕсли ИсхСтатус = Перечисления.СтатусДокументаСФайламиSAP.ПустаяСсылка() Тогда
			ДокДанонОбъект.СтатусДокумента = Перечисления.СтатусДокументаСФайламиSAP.УспешноОбработан;
			ДокДанонОбъект.Записать();
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ДМ_ОбработкаВходныхДанныхSAPБезИнвентаризаций() Экспорт
	
	Попытка
		ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ДМ_ОбработкаВходныхДанныхSAP);
		ОбработкаВходныхДанныхSAPБезИнвентаризаций();
		ДМ_СлужебныйПривилегированный.ЗарегистрироватьУспешноеВыполнениеРегЗадания( "ДМ_ОбработкаВходныхДанныхSAP" );
	Исключение
		лОписаниеОшибки = ОписаниеОшибки();
		ДМ_СлужебныйПривилегированный.ЗарегистрироватьОшибкуВыполненияРегЗадания( "ДМ_ОбработкаВходныхДанныхSAP", лОписаниеОшибки );
		ВызватьИсключение;
	КонецПопытки
	
КонецПроцедуры

Процедура ДМ_ОбработкаВходныхДанныхSAPИнвентаризации() Экспорт
	
	Попытка
		ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ДМ_ОбработкаВходныхДанныхSAP);
		ОбработкаВходныхДанныхSAPИнвентаризации();
		ДМ_СлужебныйПривилегированный.ЗарегистрироватьУспешноеВыполнениеРегЗадания( "ДМ_ОбработкаВходныхДанныхSAP" );
	Исключение
		лОписаниеОшибки = ОписаниеОшибки();
		ДМ_СлужебныйПривилегированный.ЗарегистрироватьОшибкуВыполненияРегЗадания( "ДМ_ОбработкаВходныхДанныхSAP", лОписаниеОшибки );
		ВызватьИсключение;
	КонецПопытки
	
КонецПроцедуры

Процедура ОбработкаВходныхДанныхSAPБезИнвентаризаций()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапрДок = Новый Запрос;
	ЗапрДок.Текст = "ВЫБРАТЬ
	|	ДМ_ФайлыОбменаDanoneКлиент.Ссылка КАК ДокумSAP,
	|	ДМ_ФайлыОбменаDanoneКлиент.Дата КАК Дата,
	|	ДМ_ФайлыОбменаDanoneКлиент.ИмяФайла КАК ИмяФайла,
	|	""Клиент"" КАК ВидДокумента
	|ИЗ
	|	Документ.ДМ_ФайлыОбменаDanoneКлиент КАК ДМ_ФайлыОбменаDanoneКлиент
	|ГДЕ
	|	ДМ_ФайлыОбменаDanoneКлиент.СтатусДокумента В(&мСтатусДокумента)
	|	И ДМ_ФайлыОбменаDanoneКлиент.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДМ_ФайлыОбменаDanoneВнутреннееПеремещение.Ссылка,
	|	ДМ_ФайлыОбменаDanoneВнутреннееПеремещение.Дата,
	|	ДМ_ФайлыОбменаDanoneВнутреннееПеремещение.ИмяФайла,
	|	""ВнутреннееПеремещение""
	|ИЗ
	|	Документ.ДМ_ФайлыОбменаDanoneВнутреннееПеремещение КАК ДМ_ФайлыОбменаDanoneВнутреннееПеремещение
	|ГДЕ
	|	ДМ_ФайлыОбменаDanoneВнутреннееПеремещение.СтатусДокумента В(&мСтатусДокумента)
	|	И ДМ_ФайлыОбменаDanoneВнутреннееПеремещение.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДМ_ФайлыОбменаDanoneГашениеВСД.Ссылка,
	|	ДМ_ФайлыОбменаDanoneГашениеВСД.Дата,
	|	ДМ_ФайлыОбменаDanoneГашениеВСД.ИмяФайла,
	|	""ГашениеВСД""
	|ИЗ
	|	Документ.ДМ_ФайлыОбменаDanoneГашениеВСД КАК ДМ_ФайлыОбменаDanoneГашениеВСД
	|ГДЕ
	|	ДМ_ФайлыОбменаDanoneГашениеВСД.СтатусДокумента В(&мСтатусДокументаГашение)
	|	И ДМ_ФайлыОбменаDanoneГашениеВСД.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДМ_ФайлыОбменаDanoneСторнированиеОтгрузки.Ссылка,
	|	ДМ_ФайлыОбменаDanoneСторнированиеОтгрузки.Дата,
	|	ДМ_ФайлыОбменаDanoneСторнированиеОтгрузки.ИмяФайла,
	|	""СторнированиеОтгрузки""
	|ИЗ
	|	Документ.ДМ_ФайлыОбменаDanoneСторнированиеОтгрузки КАК ДМ_ФайлыОбменаDanoneСторнированиеОтгрузки
	|ГДЕ
	|	ДМ_ФайлыОбменаDanoneСторнированиеОтгрузки.СтатусДокумента В(&мСтатусДокумента)
	|	И ДМ_ФайлыОбменаDanoneСторнированиеОтгрузки.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДМ_ФайлыОбменаDanoneПроизводство.Ссылка,
	|	ДМ_ФайлыОбменаDanoneПроизводство.Дата,
	|	ДМ_ФайлыОбменаDanoneПроизводство.ИмяФайла,
	|	""Производство""
	|ИЗ
	|	Документ.ДМ_ФайлыОбменаDanoneПроизводство КАК ДМ_ФайлыОбменаDanoneПроизводство
	|ГДЕ
	|	ДМ_ФайлыОбменаDanoneПроизводство.СтатусДокумента В(&мСтатусДокумента)
	|	И ДМ_ФайлыОбменаDanoneПроизводство.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	ИмяФайла";
	
	
	// для гашения ВСД
	мСтатусДокументаГашение = Новый Массив;
	мСтатусДокументаГашение.Добавить(Перечисления.СтатусДокументаСФайламиSAP.ПустаяСсылка());
	мСтатусДокументаГашение.Добавить(Перечисления.СтатусДокументаСФайламиSAP.ОшибкаПриОбработке);
	ЗапрДок.Параметры.Вставить("мСтатусДокументаГашение",мСтатусДокументаГашение); 
	
	// для остальных
	мСтатусДокумента = Новый Массив;
	мСтатусДокумента.Добавить(Перечисления.СтатусДокументаСФайламиSAP.ПустаяСсылка());
	ЗапрДок.Параметры.Вставить("мСтатусДокумента",мСтатусДокумента); 
	
	
	ВыбЗапрДок = ЗапрДок.Выполнить().Выбрать();
	
	ЗапрКВП = Новый Запрос;
	ЗапрКВП.Текст = "ВЫБРАТЬ
	|	ДМ_КонтрагентыВнутреннееПеремещение.Контрагент КАК Контрагент,
	|	Контрагенты.ДМ_ГлобальныйНомер КАК GLNПолучателя
	|ИЗ
	|	РегистрСведений.ДМ_КонтрагентыВнутреннееПеремещение КАК ДМ_КонтрагентыВнутреннееПеремещение
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ДМ_КонтрагентыВнутреннееПеремещение.Контрагент = Контрагенты.Ссылка";
	
	мКодовGLNВнутрПолучателей = ЗапрКВП.Выполнить().Выгрузить().ВыгрузитьКолонку("GLNПолучателя");
	
	лСтруктураТзEDI = ПолучитьШаблоныДляРазбораEDI();
	
	Пока ВыбЗапрДок.Следующий() Цикл
		лСтруктура = Новый Структура( "ИсхДок,ВидДокумента", ВыбЗапрДок.ДокумSAP,ВыбЗапрДок.ВидДокумента );
		ОбработатьДокументSAP(лСтруктура,лСтруктураТзEDI,мКодовGLNВнутрПолучателей);
	КонецЦикла;	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ОбработкаВходныхДанныхSAPИнвентаризации()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапрДок = Новый Запрос;
	ЗапрДок.Текст = "ВЫБРАТЬ
	|	ДМ_ФайлыОбменаDanoneИнвентаризация.Ссылка КАК ДокумSAP,
	|	ДМ_ФайлыОбменаDanoneИнвентаризация.Дата КАК Дата,
	|	ДМ_ФайлыОбменаDanoneИнвентаризация.ИмяФайла КАК ИмяФайла,
	|	""Инвентаризация"" КАК ВидДокумента
	|ИЗ
	|	Документ.ДМ_ФайлыОбменаDanoneИнвентаризация КАК ДМ_ФайлыОбменаDanoneИнвентаризация
	|ГДЕ
	|	ДМ_ФайлыОбменаDanoneИнвентаризация.СтатусДокумента В(&мСтатусДокумента)
	|	И ДМ_ФайлыОбменаDanoneИнвентаризация.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	ИмяФайла";
	
	
	мСтатусДокумента = Новый Массив;
	мСтатусДокумента.Добавить(Перечисления.СтатусДокументаСФайламиSAP.ПустаяСсылка());
	ЗапрДок.Параметры.Вставить("мСтатусДокумента",мСтатусДокумента); 
	
	
	ВыбЗапрДок = ЗапрДок.Выполнить().Выбрать();
	
	мКодовGLNВнутрПолучателей = Новый Массив;
	лСтруктураТзEDI = ПолучитьШаблоныДляРазбораEDI();
	
	Пока ВыбЗапрДок.Следующий() Цикл
		лСтруктура = Новый Структура( "ИсхДок,ВидДокумента", ВыбЗапрДок.ДокумSAP,ВыбЗапрДок.ВидДокумента );
		ОбработатьДокументSAP(лСтруктура,лСтруктураТзEDI,мКодовGLNВнутрПолучателей);
	КонецЦикла;	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция СозданиеОбогащенногоEDIФайл_РегистрацияНаОтправку(Источник,Зарегистрировать = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапрДок = Новый Запрос;
	ЗапрДок.Текст = "ВЫБРАТЬ
	|	ДМ_ФайлыОбменаDanoneКлиент.Ссылка КАК ДокDanone
	|ИЗ
	|	Документ.ДМ_ФайлыОбменаDanoneКлиент.ДМ_СвязанныеДокументыУВС КАК ДМ_ФайлыОбменаDanoneКлиентДМ_СвязанныеДокументыУВС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДМ_ФайлыОбменаDanoneКлиент КАК ДМ_ФайлыОбменаDanoneКлиент
	|		ПО ДМ_ФайлыОбменаDanoneКлиентДМ_СвязанныеДокументыУВС.Ссылка = ДМ_ФайлыОбменаDanoneКлиент.Ссылка
	|ГДЕ
	|	ДМ_ФайлыОбменаDanoneКлиентДМ_СвязанныеДокументыУВС.ДМ_СвязанныйДокументУВС = &ТОДок";
	
	ЗапрДок.Параметры.Вставить("ТОДок", Источник.Ссылка);
	
	ВыбЗапрДок = ЗапрДок.Выполнить().Выбрать();
	Если ВыбЗапрДок.Следующий() Тогда
		
		НЗ = РегистрыСведений.ДМ_ДокументыОбменаDanone_EDIКлиенты.СоздатьНаборЗаписей();
		НЗ.Отбор.ДМ_ДокументыОбменаDanone.Установить(ВыбЗапрДок.ДокDanone);
		НЗ.Отбор.ТранспортнаяОперация.Установить(Источник.Ссылка);
		НЗ.Прочитать();
		ПередаватьФайл = Ложь;
		Если НЗ.Количество() = 0 Тогда
			ПередаватьФайл = Истина;
		ИначеЕсли НЗ.Получить(0).Передано = Ложь Тогда
			ПередаватьФайл = Истина;
		КонецЕсли;
		
		Если ПередаватьФайл = Ложь И Зарегистрировать = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;	
		
		тзТаблицаВСД = Источник.ТаблицаВСД.Выгрузить();
		тзТаблицаВСД.Колонки.Добавить("Обработано",Новый ОписаниеТипов("Булево"));
		
		лДанныеФайла = ДМ_ИнтеграцияУВСSAP.ПолучитьФайлИсходный( ВыбЗапрДок.ДокDanone );
		лТекстовыйДокумент = лДанныеФайла.ФайлИсходный;
		лТекстовыйДокументНов0 = Новый ТекстовыйДокумент;
		КвоСтр = лТекстовыйДокумент.КоличествоСтрок();
		НСтр = 1;
		
		//найдем строку с номером ТТН
		ТекНомерТТН = СокрЛП(Источник.НомерТТН);
		нсНомерТТН = 0;
		Для нс=НСтр по КвоСтр Цикл
			ТС = лТекстовыйДокумент.ПолучитьСтроку(нс);
			Если Лев(ТС,7) = "RFF+DQ:" Тогда
				Если Найти(ТС,ТекНомерТТН) > 0 Тогда
					нсНомерТТН = нс;
					Прервать;
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
		
		Если нсНомерТТН = 0 Тогда
			
			лСтрокаСообщения = НСтр("ru = 'Не найден номер ТТН трансп.операции " + ТекНомерТТН + " в исходном файле 
			|Тип файлов: %1
			|ТранспОперация: %
			|ДокDanone: %3'");
			лСтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( лСтрокаСообщения, "ОтправкаОбогащенногоEDIФайла", Источник.Ссылка,ВыбЗапрДок.ДокDanone);
			
			//Регистрируем ошибку
			лОписаниеСобытия = лСтрокаСообщения + " 
			|";
			
			ДМ_СлужебныйПривилегированный.ЗарегистрироватьСобытие( 
			Источник.Ссылка,
			"Подготовка обогащенного EDI-файла",
			Перечисления.ДМ_УровниЖурнала.Ошибка,
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных( ТипЗнч(Источник.Ссылка) ),
			Строка( Источник.Ссылка ),
			лОписаниеСобытия);
			
			Результат = Ложь;
			
			УстановитьПривилегированныйРежим(Ложь);
			
			Возврат Результат;
			
		КонецЕсли;	
		
		//найдем начало и конец текста с данным DESADV по нсНомерТТН
		нсФинишDesadv = 0;
		Для нс=нсНомерТТН по КвоСтр Цикл
			ТС = лТекстовыйДокумент.ПолучитьСтроку(нс);
			Если Лев(ТС,4) = "UNT+" Тогда
				//финиш DESADV
				нсФинишDesadv = нс;
				Прервать;
			КонецЕсли;	
		КонецЦикла;		
		нсСтартDesadv = 0;
		Если нсФинишDesadv > 1 Тогда
			ТС = "ХХХХ";
			нс = нсФинишDesadv;
			Пока Лев(ТС,4) <> "UNH+" Цикл
				нс = нс - 1;
				Если нс = 0 Тогда
					Прервать;
				КонецЕсли;
				ТС = лТекстовыйДокумент.ПолучитьСтроку(нс);
			КонецЦикла;
			//начало DESADV
			нсСтартDesadv = нс;
		КонецЕсли;
		
		Если нсСтартDesadv = 0 ИЛИ нсФинишDesadv = 0 Тогда
			
			лСтрокаСообщения = НСтр("ru = 'Не удалось определить границы секции DESADV в исходном файле 
			|Тип файлов: %1
			|ТранспОперация: %
			|ДокDanone: %3'");
			лСтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( лСтрокаСообщения, "ОтправкаОбогащенногоEDIФайла", Источник.Ссылка,ВыбЗапрДок.ДокDanone);
			
			//Регистрируем ошибку
			лОписаниеСобытия = лСтрокаСообщения + " 
			|";
			
			ДМ_СлужебныйПривилегированный.ЗарегистрироватьСобытие( 
			Источник.Ссылка,
			"Подготовка обогащенного EDI-файла",
			Перечисления.ДМ_УровниЖурнала.Ошибка,
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных( ТипЗнч(Источник.Ссылка) ),
			Строка( Источник.Ссылка ),
			лОписаниеСобытия);
			
			Результат = Ложь;
			
			УстановитьПривилегированныйРежим(Ложь);
			
			Возврат Результат;
			
		КонецЕсли;	
		
		//готовим исходный документ по данному DESADV
		//первые две строки и одна последняя исходного файла всегда добавляются отдельно  
		Для нс=НСтр по 2 Цикл
			ТС = лТекстовыйДокумент.ПолучитьСтроку(нс);
			лТекстовыйДокументНов0.ДобавитьСтроку(ТС);
		КонецЦикла;	
		
		Для нс=нсСтартDesadv по нсФинишDesadv Цикл
			ТС = лТекстовыйДокумент.ПолучитьСтроку(нс);
			лТекстовыйДокументНов0.ДобавитьСтроку(ТС);
		КонецЦикла;	
		
		
		Для нс=КвоСтр по КвоСтр Цикл
			ТС = лТекстовыйДокумент.ПолучитьСтроку(нс);
			лТекстовыйДокументНов0.ДобавитьСтроку(ТС);
		КонецЦикла;	
		
		//Для нн=1 по лТекстовыйДокументНов0.КоличествоСтрок() Цикл
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(лТекстовыйДокументНов0.ПолучитьСтроку(нн));
		//КонецЦикла;	
		
		лТекстовыйДокументНов = Новый ТекстовыйДокумент;
		
		КвоДобавленныхСтрок = 0;
		ЗаписьНовойСтроки = Ложь;
		ВСДGUID_Меркурий = "";
		НомСтр = 0;
		НСтрНов = 1;
		КвоСтрНов = лТекстовыйДокументНов0.КоличествоСтрок();  
		Для нс=НСтрНов по КвоСтрНов Цикл
			ТС = лТекстовыйДокументНов0.ПолучитьСтроку(нс);
			лТекстовыйДокументНов.ДобавитьСтроку(ТС);
			Если Лев(ТС,10) = "FTX+AAR+++" Тогда
				Если ВРЕГ(Сред(ТС,11)) = "RELEVANT FOR MERCURY'" Тогда
					НомСтр = НомСтр + 1;
					Попытка
						ТектзТаблицаВСД = тзТаблицаВСД.Получить(НомСтр-1);
						ВСДGUID_Меркурий = ТектзТаблицаВСД.ВСД.GUID_Меркурий;
						ТектзТаблицаВСД.Обработано = Истина;
						ЗаписьНовойСтроки = Истина;
					Исключение
					КонецПопытки;
				Иначе
					ЗаписьНовойСтроки = Ложь;
				КонецЕсли;
			КонецЕсли;	
			Если Лев(ТС,6) = "MOA+79" Тогда
				Если ЗаписьНовойСтроки Тогда
					ТСНов = "RFF+ACE:" + ВСДGUID_Меркурий + "'";
					лТекстовыйДокументНов.ДобавитьСтроку(ТСНов);
					КвоДобавленныхСтрок = КвоДобавленныхСтрок + 1;
					ЗаписьНовойСтроки = Ложь;
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		
		//проверить тзТаблицаВСД на Обработано во всех строках
		СтрОтб = Новый Структура("Обработано",Ложь);
		мСтр = тзТаблицаВСД.НайтиСтроки(СтрОтб);
		Если мСтр.Количество() > 0 Тогда
			СтрОш = "";
			Для мм=0 по мСтр.Количество()-1 Цикл
				СтрОш = СтрОш + (тзТаблицаВСД.Индекс(мСтр.Получить(мм))+1) +",";
			КонецЦикла;	
			
			лСтрокаСообщения = НСтр("ru = 'Не обработаны следующие строки с ВСД:
			|%1
			|%2
			|%3'");
			лСтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( лСтрокаСообщения, СтрОш, "Отправка обогащенного EDI-Файла", Источник.Ссылка);
			
			//Регистрируем ошибку
			лОписаниеСобытия = лСтрокаСообщения;
			
			ДМ_СлужебныйПривилегированный.ЗарегистрироватьСобытие( 
			Источник.Ссылка,
			"Подготовка обогащенного EDI-файла",
			Перечисления.ДМ_УровниЖурнала.Ошибка,
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных( ТипЗнч(Источник.Ссылка) ),
			Строка( Источник.Ссылка ),
			лОписаниеСобытия);
			
			Результат = Ложь;
			
		Иначе
			
			НачатьТранзакцию();
			
			Попытка
				
				лДанныеФайла = ДМ_ИнтеграцияУВСSAP.ПолучитьФайлОбработанный(ВыбЗапрДок.ДокDanone );
				Попытка
					лТекстовыйДокументОбр = лДанныеФайла.ФайлОбработанныйПоОбменуСМеркурием;
				Исключение
					лТекстовыйДокументОбр = Новый ТекстовыйДокумент;
				КонецПопытки;	
				
				нсНачТО = 0;
				нсКонТО = 0;
				СтрНачТО = "#"+ТекНомерТТН+"_"+СокрЛП(Источник.Номер)+"_"+Формат(Источник.Дата,"ДФ=dd.MM.yyyy")+ "++#";
				СтрКонТО = "#"+ТекНомерТТН+"_"+СокрЛП(Источник.Номер)+"_"+Формат(Источник.Дата,"ДФ=dd.MM.yyyy")+ "--#";
				Для нс = 1 по лТекстовыйДокументОбр.КоличествоСтрок() Цикл
					ТС = лТекстовыйДокументОбр.ПолучитьСтроку(нс);
					Если Найти(ТС,СтрНачТО) > 0 Тогда
						нсНачТО = нс;
					КонецЕсли;	
					Если Найти(ТС,СтрКонТО) > 0 Тогда
						нсКонТО = нс;
					КонецЕсли;
					Если нсНачТО > 0 И нсКонТО > 0 Тогда
						Прервать;
					КонецЕсли;	
				КонецЦикла;	
				
				Если нсНачТО > 0 Тогда
					Пока нсНачТО <= нсКонТО Цикл
						лТекстовыйДокументОбр.УдалитьСтроку(нсНачТО);
						нсКонТО = нсКонТО - 1;
					КонецЦикла;	
				КонецЕсли;
				
				//лТекстовыйДокументОбр.ДобавитьСтроку("");
				лТекстовыйДокументОбр.ДобавитьСтроку(СтрНачТО);
				Для нс=1 по лТекстовыйДокументНов.КоличествоСтрок() Цикл
					ТС = лТекстовыйДокументНов.ПолучитьСтроку(нс);
					Если Лев(ТС,4) = "UNT+" Тогда
						ТС2 = Сред(ТС,5);
						сп = Найти(ТС2,"+");
						Если сп > 1 Тогда 
							Попытка
								НовКвоСтрок = Число(Сред(ТС2,1,сп-1)) + КвоДобавленныхСтрок;
								ТС = "UNT+" + НовКвоСтрок + Сред(ТС2,сп);
							Исключение
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
					Если Лев(ТС,4) = "UNZ+" Тогда
						ТС2 = Сред(ТС,5);
						сп = Найти(ТС2,"+");
						Если сп > 1 Тогда 
							Попытка
								ТС = "UNZ+1" + Сред(ТС2,сп);
							Исключение
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
					лТекстовыйДокументОбр.ДобавитьСтроку(ТС);
				КонецЦикла;	
				лТекстовыйДокументОбр.ДобавитьСтроку(СтрКонТО);
				
				ДокОбмена = ВыбЗапрДок.ДокDanone.ПолучитьОбъект();
				лТекстовыйДокумент2 = Новый ТекстовыйДокумент;
				лТекстовыйДокумент2.УстановитьТекст( лТекстовыйДокументОбр.ПолучитьТекст() );
				ДокОбмена.ФайлОбработанныйПоОбменуСМеркурием = Новый ХранилищеЗначения( лТекстовыйДокумент2, Новый СжатиеДанных(9) );
				ДокОбмена.ДатаЗаписиОбработанногоФайла = ТекущаяДатаСеанса();
				ДокОбмена.Записать();
				
				НЗ = РегистрыСведений.ДМ_ДокументыОбменаDanone_EDIКлиенты.СоздатьНаборЗаписей();
				НЗ.Отбор.ДМ_ДокументыОбменаDanone.Установить(ВыбЗапрДок.ДокDanone);
				НЗ.Отбор.ТранспортнаяОперация.Установить(Источник.Ссылка);
				НЗ.Прочитать();
				Если НЗ.Количество() = 0 Тогда
					НЗ.Отбор.ДМ_ДокументыОбменаDanone.Установить(ВыбЗапрДок.ДокDanone);
					НЗ.Отбор.ТранспортнаяОперация.Установить(Источник.Ссылка);
					НовЗапись = НЗ.Добавить();
					НовЗапись.ДМ_ДокументыОбменаDanone = ВыбЗапрДок.ДокDanone;
					НовЗапись.ТранспортнаяОперация = Источник.Ссылка;
					НЗ.Записать();
				ИначеЕсли Зарегистрировать = Истина Тогда
					Для Каждого ТекЗапись из НЗ Цикл
						ТекЗапись.ДатаПередачи = Дата(1,1,1);
						ТекЗапись.Передано = Ложь;
					КонецЦикла;
					НЗ.Записать();
				КонецЕсли;	
				
				ЗафиксироватьТранзакцию();
				
				Результат = Истина;
				
			Исключение
				
				ОтменитьТранзакцию();	
				
				ТекстОшибки = ОписаниеОшибки();
				
				лСтрокаСообщения = НСтр("ru = 'Не удалось записать обогащенный файл для передачи. 
				|Тип файлов: %1
				|ТранспОперация: %2'");
				лСтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( лСтрокаСообщения, "ОтправкаОбогащенногоEDIФайла", Источник.Ссылка);
				
				//Регистрируем ошибку
				лОписаниеСобытия = лСтрокаСообщения + " 
				|" + ТекстОшибки;
				
				ДМ_СлужебныйПривилегированный.ЗарегистрироватьСобытие( 
				Источник.Ссылка,
				"Подготовка обогащенного EDI-файла",
				Перечисления.ДМ_УровниЖурнала.Ошибка,
				ОбщегоНазначения.ИдентификаторОбъектаМетаданных( ТипЗнч(Источник.Ссылка) ),
				Строка( Источник.Ссылка ),
				лОписаниеСобытия);
				
				Результат = Ложь;
				
			КонецПопытки;
			
		КонецЕсли;	
	Иначе
		
		лСтрокаСообщения = НСтр("ru = 'Не найден документ ФайлыОбменаDanoneКлиент с файлом для обогащения. 
		|Тип файлов: %1
		|ТранспОперация: %2'");
		лСтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( лСтрокаСообщения, "ОтправкаОбогащенногоEDIФайла", Источник.Ссылка);
		
		//Регистрируем ошибку
		лОписаниеСобытия = лСтрокаСообщения;
		
		ДМ_СлужебныйПривилегированный.ЗарегистрироватьСобытие( 
		Источник.Ссылка,
		"Подготовка обогащенного EDI-файла",
		Перечисления.ДМ_УровниЖурнала.Ошибка,
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных( ТипЗнч(Источник.Ссылка) ),
		Строка( Источник.Ссылка ),
		лОписаниеСобытия);
		
		Результат = Ложь;
		
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Процедура ПриПроведенииТранспортнойОперацииОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
КонецПроцедуры

Процедура ДМ_РассылкаОбогащенныхФайлов() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапрДокО = Новый Запрос;
	ЗапрДокО.Текст = "ВЫБРАТЬ
	|	ДМ_ДокументыОбменаDanone_EDIКлиенты.ДМ_ДокументыОбменаDanone КАК ДокОбмена,
	|	ДМ_ДокументыОбменаDanone_EDIКлиенты.ДМ_ДокументыОбменаDanone.ДатаЗаписиОбработанногоФайла КАК ДатаЗаписиОбработанногоФайла,
	|	ДМ_ДокументыОбменаDanone_EDIКлиенты.ДМ_ДокументыОбменаDanone.ДМ_GLNСети КАК GLNСети,
	|	ТранспортныеОперации.Ссылка КАК ДокТО,
	|	ЕСТЬNULL(ДМ_EDIКлиенты.FTPСервер, &ПустойFTP) КАК FTPПараметры
	|ИЗ
	|	РегистрСведений.ДМ_ДокументыОбменаDanone_EDIКлиенты КАК ДМ_ДокументыОбменаDanone_EDIКлиенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТранспортныеОперации КАК ТранспортныеОперации
	|		ПО ДМ_ДокументыОбменаDanone_EDIКлиенты.ТранспортнаяОперация = ТранспортныеОперации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДМ_EDIКлиенты КАК ДМ_EDIКлиенты
	|		ПО ДМ_ДокументыОбменаDanone_EDIКлиенты.ДМ_ДокументыОбменаDanone.ДМ_GLNСети = ДМ_EDIКлиенты.ДМ_ГлобальныйНомер
	|ГДЕ
	|	ДМ_ДокументыОбменаDanone_EDIКлиенты.Передано = ЛОЖЬ
	|	И ДМ_ДокументыОбменаDanone_EDIКлиенты.ДМ_ДокументыОбменаDanone.ДМ_GLNСети <> &ПустаяСтрока
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаЗаписиОбработанногоФайла";	
	
	ЗапрДокО.Параметры.Вставить("ПустойFTP",Справочники.ДМ_ПараметрыПодключенияFTP.ПустаяСсылка());
	ЗапрДокО.Параметры.Вставить("ПустаяСтрока","");
	
	тзДокО = ЗапрДокО.Выполнить().Выгрузить();
	тзДокО2 = тзДокО.Скопировать();
	тзДокО2.Свернуть("FTPПараметры");
	
	Для Каждого ТектзДокО2 из тзДокО2 Цикл
		ТекFTP = ТектзДокО2.FTPПараметры;
		Если ТекFTP = Справочники.ДМ_ПараметрыПодключенияFTP.ПустаяСсылка() Тогда
			//запись в каталог
			СтрОтб = Новый Структура("FTPПараметры",ТекFTP);
			мСтрО = тзДокО.НайтиСтроки(СтрОтб);
			Если мСтрО.Количество() > 0 Тогда
				//вначале проверим наличие каталога
				ДокОбмена = мСтрО.Получить(0).ДокОбмена;
				
				лСпрПутьКОбогащеннымФайлам = Справочники.ДМ_КаталогиДляРаботыСФайлами.ОбогащенныеDESADV.ПолучитьОбъект();
				лПутьКОбогащеннымФайлам = лСпрПутьКОбогащеннымФайлам.КаталогФайловДляОбработки;
				Если ПустаяСтрока( лПутьКОбогащеннымФайлам ) Тогда
					
					лСтрокаСообщения = НСтр("ru = 'Нет указан каталог для записи обогащенных файлов для EDI-клиентов'");
					
					//Регистрируем ошибку
					лОписаниеСобытия = лСтрокаСообщения;
					
					ДМ_СлужебныйПривилегированный.ЗарегистрироватьСобытие( 
					ДокОбмена,
					"Рассылка обогащенных файлов.",
					Перечисления.ДМ_УровниЖурнала.Ошибка,
					ОбщегоНазначения.ИдентификаторОбъектаМетаданных( ТипЗнч(ДокОбмена.Ссылка) ),
					ДокОбмена.ИмяФайла,
					лОписаниеСобытия);
					
					Возврат;
					
				КонецЕсли;
				
				лСтрокаСообщения = "";
				Если Не Справочники.ДМ_КаталогиДляРаботыСФайлами.КаталогОбрабатываемыхФайловДоступен( лПутьКОбогащеннымФайлам, лСтрокаСообщения ) Тогда
					ДМ_СлужебныйПривилегированный.ЗарегистрироватьСобытие( 
					лСпрПутьКОбогащеннымФайлам.КаталогФайловДляОбработки.Ссылка,
					"Рассылка обогащенных файлов.",
					Перечисления.ДМ_УровниЖурнала.Ошибка,
					ОбщегоНазначения.ИдентификаторОбъектаМетаданных( ТипЗнч(лСпрПутьКОбогащеннымФайлам.Ссылка) ),
					Строка( лСпрПутьКОбогащеннымФайлам.Ссылка ),
					лСтрокаСообщения);
					
					Возврат;
					
				КонецЕсли;
				
				Для мм=0 по мСтрО.Количество()-1 Цикл
					ДокОбмена = мСтрО.Получить(мм).ДокОбмена;
					ДокТО = мСтрО.Получить(мм).ДокТО;
					GLNСети = СокрЛП(мСтрО.Получить(мм).GLNСети);
					
					лТекстовыйДокументОбр = ДокОбмена.ФайлОбработанныйПоОбменуСМеркурием.Получить();
					нсНачТО = 0;
					нсКонТО = 0;
					СтрНачТО = "#"+СокрЛП(ДокТО.НомерТТН)+"_"+СокрЛП(ДокТО.Номер)+"_"+Формат(ДокТО.Дата,"ДФ=dd.MM.yyyy")+ "++#";
					СтрКонТО = "#"+СокрЛП(ДокТО.НомерТТН)+"_"+СокрЛП(ДокТО.Номер)+"_"+Формат(ДокТО.Дата,"ДФ=dd.MM.yyyy")+ "--#";
					Для нс = 1 по лТекстовыйДокументОбр.КоличествоСтрок() Цикл
						ТС = лТекстовыйДокументОбр.ПолучитьСтроку(нс);
						Если Найти(ТС,СтрНачТО) > 0 Тогда
							нсНачТО = нс;
						КонецЕсли;	
						Если Найти(ТС,СтрКонТО) > 0 Тогда
							нсКонТО = нс;
						КонецЕсли;
						Если нсНачТО > 0 И нсКонТО > 0 Тогда
							Прервать;
						КонецЕсли;	
					КонецЦикла;	
					
					Если нсНачТО = 0 Тогда
						
						лОписаниеСобытия = НСтр("ru = 'Не найден блок с обогащенным текстом для трансп.операции:
						|ТранспОперация: 1%
						|ДокDanone: %2'");
						лОписаниеСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( лОписаниеСобытия, ДокТО, ДокОбмена);
						
						ДМ_СлужебныйПривилегированный.ЗарегистрироватьСобытие( 
						ДокТО,
						"Отправка обогащенного EDI-файла",
						Перечисления.ДМ_УровниЖурнала.Ошибка,
						ОбщегоНазначения.ИдентификаторОбъектаМетаданных( ТипЗнч(ДокТО) ),
						Строка( ДокТО ),
						лОписаниеСобытия);
						
						Возврат;
						
					КонецЕсли;
					
					лТекстовыйДокументТО = Новый ТекстовыйДокумент;
					
					//UNB+UNOE:3+4607053479690:14+4606038000003:14+190314:1258+431++DESADV'
					GLN_отправителя = "";
					НомерПоставки = "";
					Для нс = (нсНачТО+1) по (нсКонТО-1) Цикл
						ТС = лТекстовыйДокументОбр.ПолучитьСтроку(нс);
						Если GLN_отправителя = "" Тогда
							Если Лев(ТС,11) = "UNB+UNOE:3+" Тогда
								фн = Найти(Сред(ТС,12),":14");
								Если фн > 1 Тогда
									GLN_отправителя = Сред(ТС,12,фн-1);
								КонецЕсли;	
							КонецЕсли;
						КонецЕсли;
						Если НомерПоставки = "" Тогда
							Если Лев(ТС,8) = "BGM+351+" Тогда
								фн = Найти(Сред(ТС,9),"+");
								Если фн > 1 Тогда
									НомерПоставки = Сред(ТС,9,фн-1);
								КонецЕсли;	
							КонецЕсли;
						КонецЕсли;
						лТекстовыйДокументТО.ДобавитьСтроку(ТС);
					КонецЦикла;	
					
					лТекстовыйДокумент2 = Новый ТекстовыйДокумент;
					Если Не ПустаяСтрока( ДокОбмена.Кодировка ) Тогда
						лТекстовыйДокумент2.УстановитьТипФайла( ДокОбмена.Кодировка );
					КонецЕсли;	
					лТекстовыйДокумент2.УстановитьТекст( лТекстовыйДокументТО.ПолучитьТекст() );
					лТекстовыйДокумент = лТекстовыйДокумент2;
					
					//запись файла
					//<GLN_отправителя_из_UNB>.<GLN_получателя_из_UNB>.<номер_поставки>.txt.
					ИмяФайлаДокТО = GLN_отправителя + "." + GLNСети + "." + НомерПоставки + ".txt";
					ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла( лПутьКОбогащеннымФайлам, ИмяФайлаДокТО );
					лФайл = Новый Файл(ПутьКФайлу);
					Если лФайл.Существует() Тогда
						УдалитьФайлы( лФайл );
					КонецЕсли;
					
					Попытка
						
						ИмяВремФайла = ПолучитьИмяВременногоФайла();
						Если Не ПустаяСтрока( ДокОбмена.Кодировка ) Тогда
							лТекстовыйДокумент.Записать(ИмяВремФайла,ДокОбмена.Кодировка);
						Иначе
							лТекстовыйДокумент.Записать(ИмяВремФайла);
						КонецЕсли;
						ПереместитьФайл(ИмяВремФайла,ПутьКФайлу);
						НЗ = РегистрыСведений.ДМ_ДокументыОбменаDanone_EDIКлиенты.СоздатьНаборЗаписей();
						НЗ.Отбор.ДМ_ДокументыОбменаDanone.Установить(ДокОбмена);
						НЗ.Отбор.ТранспортнаяОперация.Установить(ДокТО);
						НЗ.Прочитать();
						Если НЗ.Количество() > 0  Тогда
							ТекЗапись =  НЗ.Получить(0);
							ТекЗапись.Передано = Истина;
							ТекЗапись.ДатаПередачи = ТекущаяДатаСеанса();
							НЗ.Записать();	
							
							лОписаниеСобытия = НСтр("ru = 'Запись обогащенного файла:
							|%1
							|%2'");
							лОписаниеСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( лОписаниеСобытия, ПутьКФайлу );
							
							ДМ_СлужебныйПривилегированный.ЗарегистрироватьСобытие( 
							ДокОбмена,
							"Рассылка обогащенных файлов.",
							Перечисления.ДМ_УровниЖурнала.Информация,
							ОбщегоНазначения.ИдентификаторОбъектаМетаданных( ТипЗнч(ДокОбмена.Ссылка) ),
							Строка( ДокОбмена.Ссылка ),
							лОписаниеСобытия
							);
							
						КонецЕсли;	
						
					Исключение
						
						лОписаниеОшибки = ОписаниеОшибки();
						
						лОписаниеСобытия = НСтр("ru = 'Ошибка записи обогащенного файла:
						|%1
						|Описание ошибки:
						|%2'");
						лОписаниеСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( лОписаниеСобытия, ПутьКФайлу, лОписаниеОшибки );
						
						ДМ_СлужебныйПривилегированный.ЗарегистрироватьСобытие( 
						ДокОбмена,
						"Рассылка обогащенных файлов.",
						Перечисления.ДМ_УровниЖурнала.Ошибка,
						ОбщегоНазначения.ИдентификаторОбъектаМетаданных( ТипЗнч(ДокОбмена.Ссылка) ),
						Строка( ДокОбмена.Ссылка ),
						лОписаниеСобытия
						);
					КонецПопытки;
					
				КонецЦикла;
				
				
			КонецЕсли;	
			
			
		Иначе
			
			СтрОтб = Новый Структура("FTPПараметры",ТекFTP);
			мСтрО = тзДокО.НайтиСтроки(СтрОтб);
			Если мСтрО.Количество() > 0 Тогда
				//запись на FTP, вначале проверка
				ДокОбмена = мСтрО.Получить(0).ДокОбмена;
				ДокТО = мСтрО.Получить(0).ДокТО;
				GLNСети = СокрЛП(мСтрО.Получить(0).GLNСети);
				
				СерверФТП = ?(Не ПустаяСтрока(ТекFTP.ДоменноеИмя),СокрЛП(ТекFTP.ДоменноеИмя),СокрЛП(ТекFTP.IPАдрес)); 
				ПользовательФТП = СокрЛП(ТекFTP.Логин);
				ПарольФТП = СокрЛП(ТекFTP.Пароль);
				//Если ТекFTP.Порт = 0 Тогда
				//	ПортФТП = 21;
				//Иначе
				ПортФТП = ТекFTP.Порт;
				//КонецЕсли;
				КаталогЗагрузкиFTP = СокрЛП(ТекFTP.КаталогЗагрузкиFTP);
				Попытка
					Если ТекFTP.ЗащищенноеСоединение = Истина Тогда
						ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL();
					ИначеЕсли ТекFTP.ЗащищенноеСоединение = Ложь Тогда
						ЗащищенноеСоединение = Неопределено;
					КонецЕсли;
					ФТПСоединение = Новый FTPСоединение(СерверФТП,ПортФТП,ПользовательФТП,ПарольФТП,,ТекFTP.АктивныйРежимРаботы,30,ЗащищенноеСоединение);
				Исключение
					лОписаниеОшибки = ОписаниеОшибки();
					
					лОписаниеСобытия = НСтр("ru = 'Ошибка записи обогащенного файла:
					|%1
					|Описание ошибки:
					|%2'");
					лОписаниеСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( лОписаниеСобытия, ПутьКФайлу, лОписаниеОшибки );
					
					ДМ_СлужебныйПривилегированный.ЗарегистрироватьСобытие( 
					ДокОбмена,
					"Рассылка обогащенных файлов.",
					Перечисления.ДМ_УровниЖурнала.Ошибка,
					ОбщегоНазначения.ИдентификаторОбъектаМетаданных( ТипЗнч(ДокОбмена.Ссылка) ),
					Строка( ДокОбмена.Ссылка ),
					лОписаниеСобытия
					);
					Возврат;	
				КонецПопытки;
				
				Для мм=0 по мСтрО.Количество()-1 Цикл
					ДокОбмена = мСтрО.Получить(мм).ДокОбмена;
					ДокТО = мСтрО.Получить(мм).ДокТО;
					GLNСети = СокрЛП(мСтрО.Получить(мм).GLNСети);
					
					//запись файла 
					ИмяВремФайла = ПолучитьИмяВременногоФайла();
					лТекстовыйДокументОбр = ДокОбмена.ФайлОбработанныйПоОбменуСМеркурием.Получить();
					нсНачТО = 0;
					нсКонТО = 0;
					СтрНачТО = "#"+СокрЛП(ДокТО.НомерТТН)+"_"+СокрЛП(ДокТО.Номер)+"_"+Формат(ДокТО.Дата,"ДФ=dd.MM.yyyy")+ "++#";
					СтрКонТО = "#"+СокрЛП(ДокТО.НомерТТН)+"_"+СокрЛП(ДокТО.Номер)+"_"+Формат(ДокТО.Дата,"ДФ=dd.MM.yyyy")+ "--#";
					Для нс = 1 по лТекстовыйДокументОбр.КоличествоСтрок() Цикл
						ТС = лТекстовыйДокументОбр.ПолучитьСтроку(нс);
						Если Найти(ТС,СтрНачТО) > 0 Тогда
							нсНачТО = нс;
						КонецЕсли;	
						Если Найти(ТС,СтрКонТО) > 0 Тогда
							нсКонТО = нс;
						КонецЕсли;
						Если нсНачТО > 0 И нсКонТО > 0 Тогда
							Прервать;
						КонецЕсли;	
					КонецЦикла;	
					
					Если нсНачТО = 0 Тогда
						
						лОписаниеСобытия = НСтр("ru = 'Не найден блок с обогащенным текстом для трансп.операции:
						|ТранспОперация: 1%
						|ДокDanone: %2'");
						лОписаниеСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( лОписаниеСобытия, ДокТО, ДокОбмена);
						
						ДМ_СлужебныйПривилегированный.ЗарегистрироватьСобытие( 
						ДокТО,
						"Отправка обогащенного EDI-файла",
						Перечисления.ДМ_УровниЖурнала.Ошибка,
						ОбщегоНазначения.ИдентификаторОбъектаМетаданных( ТипЗнч(ДокТО) ),
						Строка( ДокТО ),
						лОписаниеСобытия);
						
						Возврат;
						
					КонецЕсли;
					
					лТекстовыйДокументТО = Новый ТекстовыйДокумент;
					
					//UNB+UNOE:3+4607053479690:14+4606038000003:14+190314:1258+431++DESADV'
					GLN_отправителя = "";
					НомерПоставки = "";
					Для нс = (нсНачТО+1) по (нсКонТО-1) Цикл
						ТС = лТекстовыйДокументОбр.ПолучитьСтроку(нс);
						Если GLN_отправителя = "" Тогда
							Если Лев(ТС,11) = "UNB+UNOE:3+" Тогда
								фн = Найти(Сред(ТС,12),":14");
								Если фн > 1 Тогда
									GLN_отправителя = Сред(ТС,12,фн-1);
								КонецЕсли;	
							КонецЕсли;
						КонецЕсли;
						Если НомерПоставки = "" Тогда
							Если Лев(ТС,8) = "BGM+351+" Тогда
								фн = Найти(Сред(ТС,9),"+");
								Если фн > 1 Тогда
									НомерПоставки = Сред(ТС,9,фн-1);
								КонецЕсли;	
							КонецЕсли;
						КонецЕсли;
						лТекстовыйДокументТО.ДобавитьСтроку(ТС);
					КонецЦикла;	
					
					
					лТекстовыйДокумент2 = Новый ТекстовыйДокумент;
					Если Не ПустаяСтрока( ДокОбмена.Кодировка ) Тогда
						лТекстовыйДокумент2.УстановитьТипФайла( ДокОбмена.Кодировка );
					КонецЕсли;	
					лТекстовыйДокумент2.УстановитьТекст( лТекстовыйДокументТО.ПолучитьТекст() );
					лТекстовыйДокумент = лТекстовыйДокумент2;
					
					Если Не ПустаяСтрока( ДокОбмена.Кодировка ) Тогда
						лТекстовыйДокумент.Записать(ИмяВремФайла,ДокОбмена.Кодировка);
					Иначе
						лТекстовыйДокумент.Записать(ИмяВремФайла);
					КонецЕсли;
					
					лДиректория = КаталогЗагрузкиFTP;
					Если Прав(лДиректория,1)<>"/" Тогда
						лДиректория = лДиректория+"/";
					КонецЕсли;
					
					//<GLN_отправителя_из_UNB>.<GLN_получателя_из_UNB>.<номер_поставки>.txt.
					ИмяФайлаДокТО = GLN_отправителя + "." + GLNСети + "." + НомерПоставки + ".txt";
					
					Попытка
						
						ФТПСоединение.Записать(ИмяВремФайла, лДиректория + ИмяФайлаДокТО);
						НЗ = РегистрыСведений.ДМ_ДокументыОбменаDanone_EDIКлиенты.СоздатьНаборЗаписей();
						НЗ.Отбор.ДМ_ДокументыОбменаDanone.Установить(ДокОбмена);
						НЗ.Отбор.ТранспортнаяОперация.Установить(ДокТО);
						НЗ.Прочитать();
						Если НЗ.Количество() > 0  Тогда
							ТекЗапись =  НЗ.Получить(0);
							ТекЗапись.Передано = Истина;
							ТекЗапись.ДатаПередачи = ТекущаяДатаСеанса();
							НЗ.Записать();	
							
							лОписаниеСобытия = НСтр("ru = 'Запись обогащенного файла:
							|%1
							|Трансп.операция: %2
							|%3'");
							лОписаниеСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( лОписаниеСобытия, ДокТО, лДиректория + ДокОбмена.ИмяФайла );
							
							ДМ_СлужебныйПривилегированный.ЗарегистрироватьСобытие( 
							ДокОбмена,
							"Рассылка обогащенных файлов.",
							Перечисления.ДМ_УровниЖурнала.Информация,
							ОбщегоНазначения.ИдентификаторОбъектаМетаданных( ТипЗнч(ДокОбмена.Ссылка) ),
							Строка( ДокОбмена.Ссылка ),
							лОписаниеСобытия
							);
							
						КонецЕсли;	
						
					Исключение
						
						лОписаниеОшибки = ОписаниеОшибки();
						
						лОписаниеСобытия = НСтр("ru = 'Ошибка записи обогащенного файла:
						|%1
						|Трансп.операция: %2
						|%3
						|Описание ошибки: %4'");
						лОписаниеСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( лОписаниеСобытия, ДокТО, лДиректория + ДокОбмена.ИмяФайла, лОписаниеОшибки );
						
						ДМ_СлужебныйПривилегированный.ЗарегистрироватьСобытие( 
						ДокОбмена,
						"Рассылка обогащенных файлов.",
						Перечисления.ДМ_УровниЖурнала.Ошибка,
						ОбщегоНазначения.ИдентификаторОбъектаМетаданных( ТипЗнч(ДокОбмена.Ссылка) ),
						Строка( ДокОбмена.Ссылка ),
						лОписаниеСобытия
						);
					КонецПопытки;
					
					Попытка 
						УдалитьФайлы(ИмяВремФайла);
					Исключение
					КонецПопытки;	
					
				КонецЦикла;	
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ДМ_ПередЗаписьюПриходнойОперацииПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	//ЗапрДок = Новый Запрос;
	//ЗапрДок.Текст = "ВЫБРАТЬ
	//                |	ДМ_ФайлыОбменаDanoneГашениеВСД.Ссылка КАК ФайлыОбменаГашениеВСД,
	//                |	ДМ_ФайлыОбменаDanoneГашениеВСД.СтатусДокумента КАК СтатусДокумента
	//                |ИЗ
	//                |	Документ.ДМ_ФайлыОбменаDanoneГашениеВСД КАК ДМ_ФайлыОбменаDanoneГашениеВСД
	//                |ГДЕ
	//                |	ДМ_ФайлыОбменаDanoneГашениеВСД.ДМ_СвязанныеДокументыУВС.Ссылка = &ПрихДок";
	//
	//ЗапрДок.Параметры.Вставить("ПрихДок",Источник.Ссылка);
	//ВыбЗапрДок = ЗапрДок.Выполнить().Выбрать();
	//Если ВыбЗапрДок.Следующий() Тогда
	//	Если Источник.ВСД.Пустая() И Источник.ВСД_Возврат.Пустая() Тогда
	//		Если ВыбЗапрДок.СтатусДокумента <> Перечисления.СтатусДокументаСФайламиSAP.НеВыбранВСДДляГашения Тогда
	//			ФайлыОбменаГашениеВСДОбъект = ВыбЗапрДок.ФайлыОбменаГашениеВСД.ПолучитьОбъект();
	//			ФайлыОбменаГашениеВСДОбъект.СтатусДокумента = Перечисления.СтатусДокументаСФайламиSAP.НеВыбранВСДДляГашения;
	//			ФайлыОбменаГашениеВСДОбъект.Записать();
	//		КонецЕсли;	
	//	КонецЕсли;	
	//КонецЕсли;	
	
	
КонецПроцедуры

Процедура ДМ_ЗагрузкаПродукцииПоНаборамФильтров() Экспорт
	
	Запр = Новый Запрос;
	Запр.Текст = "ВЫБРАТЬ
	|	ДМ_НаборыФильтровДляЗагрузкиПродукции.Предприятие КАК Предприятие,
	|	ДМ_НаборыФильтровДляЗагрузкиПродукции.ТипПродукции КАК ТипПродукции,
	|	ДМ_НаборыФильтровДляЗагрузкиПродукции.ДатаЗагрузки КАК ДатаЗагрузки
	|ИЗ
	|	РегистрСведений.ДМ_НаборыФильтровДляЗагрузкиПродукции КАК ДМ_НаборыФильтровДляЗагрузкиПродукции
	|ГДЕ
	|	ДМ_НаборыФильтровДляЗагрузкиПродукции.ДатаЗагрузки = &ПустаяДата";
	
	Запр.Параметры.Вставить("ПустаяДата",Дата(1,1,1));
	
	Кво = 0;
	ВыбЗапр = Запр.Выполнить().Выбрать();
	Пока ВыбЗапр.Следующий() Цикл
		
		ПараметрыФильтра = Новый Структура;
		ПараметрыФильтра.Вставить("Контрагент",      Справочники.Контрагенты.ПустаяСсылка());
		ПараметрыФильтра.Вставить("Предприятие",     ВыбЗапр.Предприятие);
		ПараметрыФильтра.Вставить("ТипПродукции",    ВыбЗапр.ТипПродукции);
		ПараметрыФильтра.Вставить("ВидПродукции",    Справочники.ВидыПродукции.ПустаяСсылка());
		ПараметрыФильтра.Вставить("ПодвидПродукции", Справочники.ПодвидыПродукции.ПустаяСсылка());
		
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("ИдентификаторФормы", Новый УникальныйИдентификатор); 
		ПараметрыВыполнения.Вставить("ДополнительныйРезультат", Ложь);
		ПараметрыВыполнения.Вставить("ОжидатьЗавершение", ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 0.8));
		ПараметрыВыполнения.Вставить("НаименованиеФоновогоЗадания", "");
		ПараметрыВыполнения.Вставить("КлючФоновогоЗадания", "");
		ПараметрыВыполнения.Вставить("АдресРезультата", Неопределено);
		ПараметрыВыполнения.Вставить("ЗапуститьНеВФоне", Ложь);
		ПараметрыВыполнения.Вставить("ЗапуститьВФоне", Ложь);
		ПараметрыВыполнения.Вставить("БезРасширений", Ложь);
		
		ИнтеграцияВетисAPIПродукция.ФоновоеЗаданиеПолучениеСпискаПродукцииПоФильтру(ПараметрыФильтра,ПараметрыВыполнения);
		
		ДМ_ОбщегоНазначенияКлиентСервер.Пауза(30);
		
		Если ПараметрыВыполнения.АдресРезультата <> Неопределено Тогда
			НЗ = РегистрыСведений.ДМ_НаборыФильтровДляЗагрузкиПродукции.СоздатьНаборЗаписей();
			НЗ.Отбор.Предприятие.Установить(ВыбЗапр.Предприятие);
			НЗ.Отбор.ТипПродукции.Установить(ВыбЗапр.ТипПродукции);
			НЗ.Прочитать();
			Для Каждого ТекЗапись из НЗ Цикл
				ТекЗапись.ДатаЗагрузки = ТекущаяДатаСеанса();
			КонецЦикла;
			НЗ.Записать();
			Кво = КВо + 1;
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ДМ_ЗавершениеПроизводственныхОпераций() Экспорт
	
	ТекДатаВремя = ТекущаяДатаСеанса();
	ВремяЧасовДляЗакрытия = Константы.ДМ_ВремяВЧасахДляАвтоматическогоЗакрытияПроизводственнойОперации.Получить();
	ВремяДляЗакрытия = ?(ВремяЧасовДляЗакрытия = 0,24*3600,ВремяЧасовДляЗакрытия*3600);
	
	ЗапрПОЗ = Новый Запрос;
	ЗапрПОЗ.Текст = "ВЫБРАТЬ
	|	ДМ_ПроизводственныеОперацииСАвтоматическимЗакрытием.ПроизводственнаяОперация КАК ПроизводственнаяОперация,
	|	ДМ_ПроизводственныеОперацииСАвтоматическимЗакрытием.ДатаСоздания КАК ДатаСоздания,
	|	ДМ_ПроизводственныеОперацииСАвтоматическимЗакрытием.Завершена КАК Завершена
	|ИЗ
	|	РегистрСведений.ДМ_ПроизводственныеОперацииСАвтоматическимЗакрытием КАК ДМ_ПроизводственныеОперацииСАвтоматическимЗакрытием
	|ГДЕ
	|	ДМ_ПроизводственныеОперацииСАвтоматическимЗакрытием.Завершена = ЛОЖЬ
	|";
	
	ВыбЗапрПОЗ = ЗапрПОЗ.Выполнить().Выбрать();
	Пока ВыбЗапрПОЗ.Следующий() Цикл
		РазностьДат = ТекДатаВремя - ВыбЗапрПОЗ.ДатаСоздания;
		Если РазностьДат < ВремяДляЗакрытия Тогда
			Продолжить;
		КонецЕсли;	 
		ЕстьПризнакЗавершения = Ложь;
		ДокПроизв = ВыбЗапрПОЗ.ПроизводственнаяОперация.ПолучитьОбъект();
		Если ДокПроизв.ЗавершитьПроизводство Тогда
			ЕстьПризнакЗавершения = Истина;
		Иначе
			ДокПроизв.ЗавершитьПроизводство = Истина;
			Попытка 
				ДокПроизв.Записать(РежимЗаписиДокумента.Проведение);
				ЕстьПризнакЗавершения = Истина;
			Исключение
				лОписаниеОшибки = ОписаниеОшибки();
				ДМ_ИнтеграцияВетисAPIСервер.ЗарегистрироватьОшибкуВыполненияРегЗадания( "ЗакрытиеПроизводстваАвтоматическое", лОписаниеОшибки );
			КонецПопытки;
		КонецЕсли;
		
		Если ЕстьПризнакЗавершения Тогда
			НЗ = РегистрыСведений.ДМ_ПроизводственныеОперацииСАвтоматическимЗакрытием.СоздатьНаборЗаписей();
			НЗ.Отбор.ПроизводственнаяОперация.Установить(ДокПроизв.Ссылка);
			НЗ.Прочитать();
			Для Каждого ТекЗапись из НЗ Цикл
				ТекЗапись.Завершена = Истина;
			КонецЦикла;	
			НЗ.Записать();
		КонецЕсли;	
		
	КонецЦикла;	 
	
КонецПроцедуры

Процедура РегистрСведенийНаборЗаписейЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийПередЗаписью(Источник, Отказ, Замещение) Экспорт
	Попытка
		ДокУВС = Источник.Получить(0).ДокументСсылка;
	Исключение
		ДокУВС = Неопределено;
	КонецПопытки;
	Если ТипЗнч(ДокУВС) = Тип("ДокументСсылка.ПриходныеОперации") Тогда
		УспОбработана = Справочники.СтатусыЗаявок.УспешноОбработана;
		Если Источник.Получить(0).Статус = УспОбработана Тогда
			ЗапрЗ = Новый Запрос;
			ЗапрЗ.Текст = "ВЫБРАТЬ
			|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.Статус КАК СтатусНачальный
			|ИЗ
			|	РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.СрезПоследних КАК ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних
			|ГДЕ
			|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.ДокументСсылка = &ДокументСсылка";
			
			ЗапрЗ.Параметры.Вставить("ДокументСсылка",ДокУВС);
			
			БылаУспешноОбработана = Ложь;
			ВыбЗапр = ЗапрЗ.Выполнить().Выбрать();
			Если ВыбЗапр.Следующий() Тогда
				Если ВыбЗапр.СтатусНачальный <> УспОбработана Тогда
					БылаУспешноОбработана = Истина;
				КонецЕсли;	
			КонецЕсли;	
			
			Если БылаУспешноОбработана Тогда
				//делаем объединение при присвоении успешного статуса
				
				мДокДляИнв = Новый Массив;
				
				ЗапрОстПартии = Новый Запрос;
				ЗапрОстПартии.Текст = "ВЫБРАТЬ
				|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
				|	ДвижениеПродукцииОстатки.КоличествоОстаток КАК КоличествоОстаток,
				|	СвойстваЗаписейСкладскогоЖурнала.НомерПартии КАК НомерПартии,
				|	СвойстваЗаписейСкладскогоЖурнала.Продукция КАК Продукция
				|ИЗ
				|	РегистрНакопления.ДвижениеПродукции.Остатки(&МоментВремениОст, ) КАК ДвижениеПродукцииОстатки
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СвойстваЗаписейСкладскогоЖурнала КАК СвойстваЗаписейСкладскогоЖурнала
				|		ПО ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала = СвойстваЗаписейСкладскогоЖурнала.Ссылка
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВерсииЗаписейСкладскогоЖурнала КАК ВерсииЗаписейСкладскогоЖурнала
				|		ПО ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала = ВерсииЗаписейСкладскогоЖурнала.ЗаписьСкладскогоЖурнала
				|ГДЕ
				|	ДвижениеПродукцииОстатки.Организация = &Организация
				|	И ДвижениеПродукцииОстатки.Предприятие = &Предприятие
				|	И ДвижениеПродукцииОстатки.КоличествоОстаток > 0
				|	И СвойстваЗаписейСкладскогоЖурнала.Продукция = &Продукция
				|	И СвойстваЗаписейСкладскогоЖурнала.НомерПартии = &НомерПартии
				|	И ВерсииЗаписейСкладскогоЖурнала.СтатусВерсииЗаписиСкладскогоЖурнала В(&МассивРазрешенныхСтатусов)
				|
				|УПОРЯДОЧИТЬ ПО
				|	Продукция,
				|	НомерПартии";
				
				ЗапрОстПартии.Параметры.Вставить("Организация", ДокУВС.Организация);
				ЗапрОстПартии.Параметры.Вставить("Предприятие", ДокУВС.ПредприятиеПолучатель);
				ЗапрОстПартии.Параметры.Вставить("Продукция", ДокУВС.Продукция);
				ЗапрОстПартии.Параметры.Вставить("НомерПартии", ДокУВС.НомерПартии);
				МоментВремениОст = Новый Граница(ДокУВС.МоментВремени(), ВидГраницы.Включая);
				ЗапрОстПартии.Параметры.Вставить("МоментВремениОст", МоментВремениОст);
				МассивРазрешенныхСтатусов = ИнтеграцияВетисAPIСлужебныйПовтИсп.РазрешенныеСтатусыЗаписейСкладскогоЖурналаДляВыполненияОпераций();
				ЗапрОстПартии.УстановитьПараметр("МассивРазрешенныхСтатусов", МассивРазрешенныхСтатусов);
				
				тзНаборовПартийИ = Новый ТаблицаЗначений;
				тзНаборовПартийИ.Колонки.Добавить("тзНаборовПартий",Новый ОписаниеТипов("ТаблицаЗначений"));
				
				тзНаборовПартий = Новый ТаблицаЗначений;
				тзНаборовПартий.Колонки.Добавить("ЗСЖ",Новый ОписаниеТипов("СправочникСсылка.СвойстваЗаписейСкладскогоЖурнала"));
				тзНаборовПартий.Колонки.Добавить("Остаток",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,6)));
				
				ТекПродукция = Справочники.Продукция.ПустаяСсылка();
				ТекНомерПартии = "";
				ВыбЗапр = ЗапрОстПартии.Выполнить().Выбрать();
				Пока ВыбЗапр.Следующий() Цикл
					Если ТекПродукция <> ВыбЗапр.Продукция ИЛИ ТекНомерПартии <> ВыбЗапр.НомерПартии Тогда
						Если ТекПродукция <> Справочники.Продукция.ПустаяСсылка() Тогда
							НовтзНаборовПартийИ = тзНаборовПартийИ.Добавить();
							НовтзНаборовПартийИ.тзНаборовПартий = тзНаборовПартий.Скопировать();
							тзНаборовПартий.Очистить();	
						КонецЕсли;
						ТекПродукция = ВыбЗапр.Продукция;
						ТекНомерПартии = ВыбЗапр.НомерПартии;
					КонецЕсли;	
					НовтзНаборовПартий = тзНаборовПартий.Добавить();
					НовтзНаборовПартий.ЗСЖ = ВыбЗапр.ЗаписьСкладскогоЖурнала;
					НовтзНаборовПартий.Остаток = ВыбЗапр.КоличествоОстаток;
				КонецЦикла;
				
				Если ТекПродукция <> Справочники.Продукция.ПустаяСсылка() Тогда
					НовтзНаборовПартийИ = тзНаборовПартийИ.Добавить();
					НовтзНаборовПартийИ.тзНаборовПартий = тзНаборовПартий.Скопировать();
				КонецЕсли;	
				
				Если тзНаборовПартийИ.Количество() > 0 Тогда
					Для Каждого ТектзНаборовПартийИ из тзНаборовПартийИ Цикл
						тзНаборовПартий = ТектзНаборовПартийИ.тзНаборовПартий.Скопировать();
						Если тзНаборовПартий.Количество() > 1 Тогда
							ДокОб = Документы.ОбъединениеЗаписейСкладскогоЖурнала.СоздатьДокумент();
							ДокОб.Дата = ДокУВС.Дата+1;
							ДокОб.Организация = ДокУВС.Организация;
							ДокОб.УстановитьНовыйНомер();
							ДокОб.ТипОперации = Ложь; //присоединение
							ДокОб.ВырабатываемаяПродукция = Ложь; //входная
							ДокОб.Контрагент = ДокУВС.КонтрагентПолучатель;
							ДокОб.Предприятие = ДокУВС.ПредприятиеПолучатель;
							ДокОб.Ответственный = Пользователи.АвторизованныйПользователь();
							ДокОб.Комментарий = "Для док-та " + ДокУВС;
							н=0;
							Для Каждого ТекСтр из тзНаборовПартий Цикл
								н=н+1;
								Если н=1 Тогда
									ДокОб.ЗаписьСкладскогоЖурнала = ТекСтр.ЗСЖ;
									Продолжить;
								КонецЕсли;	
								НовСтр = ДокОб.ТаблицаПродукция.Добавить();
								НовСтр.GUIDСтроки = Строка(Новый УникальныйИдентификатор());
								НовСтр.ЗаписьСкладскогоЖурнала = ТекСтр.ЗСЖ;
								НовСтр.Количество = ТекСтр.Остаток;
								Для Каждого ТекФизУп Из ТекСтр.ЗСЖ.СписокФизическихУпаковок Цикл
									НовСтр2 = ДокОб.СписокФизическихУпаковок.Добавить();
									НовСтр2.GUIDСтроки = НовСтр.GUIDСтроки;
									ЗаполнитьЗначенияСвойств(НовСтр2,ТекФизУп);
								КонецЦикла;	
							КонецЦикла;	
							
							ДокОб.Записать(РежимЗаписиДокумента.Проведение);
							мДокДляИнв.Добавить("" + ДокОб);
							
							мДокДляЗаявок = Новый Массив;
							мДокДляЗаявок.Добавить(ДокОб.Ссылка);
							ДМ_СлужебныйПривилегированный.СформироватьЗаявкиДляВетисAPI(мДокДляЗаявок);
							
						КонецЕсли;	
					КонецЦикла;	
				КонецЕсли;
				
				Если мДокДляИнв.Количество() > 0 Тогда
					ТекстСообщенияОЗ = "Созданы документы:
					|";
					Для мм=0 по мДокДляИнв.Количество()-1 Цикл
						ТекстСообщенияОЗ = ТекстСообщенияОЗ + мДокДляИнв.Получить(мм) + ",";
					КонецЦикла;
					
					лСтрокаСообщения = НСтр("Объединение записей скл.журнала после гашения ВСД:
					|%1
					|Документ гашения: %2'");
					
					лСтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( лСтрокаСообщения, ТекстСообщенияОЗ, "" + ДокУВС );
					
					лОписаниеСобытия = лСтрокаСообщения;
					
					ДМ_СлужебныйПривилегированный.ЗарегистрироватьСобытие( 
					ДокУВС,
					"Обработка файлов EDI.",
					Перечисления.ДМ_УровниЖурнала.Информация,
					ОбщегоНазначения.ИдентификаторОбъектаМетаданных( ТипЗнч(ДокУВС) ),
					Строка( ДокУВС ),
					лОписаниеСобытия);
					
				КонецЕсли;	
				
			КонецЕсли;	
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокУВС) = Тип("ДокументСсылка.Инвентаризации") Тогда
		УспОбработана = Справочники.СтатусыЗаявок.УспешноОбработана;
		Если Источник.Получить(0).Статус = УспОбработана Тогда
			ЗапрЗ = Новый Запрос;
			ЗапрЗ.Текст = "ВЫБРАТЬ
			|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.Статус КАК СтатусНачальный
			|ИЗ
			|	РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.СрезПоследних КАК ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних
			|ГДЕ
			|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.ДокументСсылка = &ДокументСсылка";
			
			ЗапрЗ.Параметры.Вставить("ДокументСсылка",ДокУВС);
			
			БылаУспешноОбработана = Ложь;
			ВыбЗапр = ЗапрЗ.Выполнить().Выбрать();
			Если ВыбЗапр.Следующий() Тогда
				Если ВыбЗапр.СтатусНачальный <> УспОбработана Тогда
					БылаУспешноОбработана = Истина;
				КонецЕсли;	
			КонецЕсли;	
			
			Если БылаУспешноОбработана Тогда
				//делаем объединение при присвоении успешного статуса
				
				мДокДляИнв = Новый Массив;
				
				ЗапрОстПартии = Новый Запрос;
				ЗапрОстПартии.Текст = "ВЫБРАТЬ
				|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
				|	ДвижениеПродукцииОстатки.КоличествоОстаток КАК КоличествоОстаток,
				|	СвойстваЗаписейСкладскогоЖурнала.НомерПартии КАК НомерПартии,
				|	СвойстваЗаписейСкладскогоЖурнала.Продукция КАК Продукция
				|ИЗ
				|	РегистрНакопления.ДвижениеПродукции.Остатки(&МоментВремениОст, ) КАК ДвижениеПродукцииОстатки
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СвойстваЗаписейСкладскогоЖурнала КАК СвойстваЗаписейСкладскогоЖурнала
				|		ПО ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала = СвойстваЗаписейСкладскогоЖурнала.Ссылка
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВерсииЗаписейСкладскогоЖурнала КАК ВерсииЗаписейСкладскогоЖурнала
				|		ПО ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала = ВерсииЗаписейСкладскогоЖурнала.ЗаписьСкладскогоЖурнала
				|ГДЕ
				|	ДвижениеПродукцииОстатки.Организация = &Организация
				|	И ДвижениеПродукцииОстатки.Предприятие = &Предприятие
				|	И ДвижениеПродукцииОстатки.КоличествоОстаток > 0
				|	И ВерсииЗаписейСкладскогоЖурнала.СтатусВерсииЗаписиСкладскогоЖурнала В(&МассивРазрешенныхСтатусов)
				|
				|УПОРЯДОЧИТЬ ПО
				|	Продукция,
				|	НомерПартии";
				
				ЗапрОстПартии.Параметры.Вставить("Организация", ДокУВС.Организация);
				ЗапрОстПартии.Параметры.Вставить("Предприятие", ДокУВС.Предприятие);
				МоментВремениОст = Новый Граница(ДокУВС.МоментВремени(), ВидГраницы.Включая);
				ЗапрОстПартии.Параметры.Вставить("МоментВремениОст", МоментВремениОст);
				МассивРазрешенныхСтатусов = ИнтеграцияВетисAPIСлужебныйПовтИсп.РазрешенныеСтатусыЗаписейСкладскогоЖурналаДляВыполненияОпераций();
				ЗапрОстПартии.УстановитьПараметр("МассивРазрешенныхСтатусов", МассивРазрешенныхСтатусов);
				
				тзНаборовПартийИ = Новый ТаблицаЗначений;
				тзНаборовПартийИ.Колонки.Добавить("тзНаборовПартий",Новый ОписаниеТипов("ТаблицаЗначений"));
				
				тзНаборовПартий = Новый ТаблицаЗначений;
				тзНаборовПартий.Колонки.Добавить("ЗСЖ",Новый ОписаниеТипов("СправочникСсылка.СвойстваЗаписейСкладскогоЖурнала"));
				тзНаборовПартий.Колонки.Добавить("Остаток",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,6)));
				
				ТекПродукция = Справочники.Продукция.ПустаяСсылка();
				ТекНомерПартии = "";
				ВыбЗапр = ЗапрОстПартии.Выполнить().Выбрать();
				Пока ВыбЗапр.Следующий() Цикл
					Если ТекПродукция <> ВыбЗапр.Продукция ИЛИ ТекНомерПартии <> ВыбЗапр.НомерПартии Тогда
						Если ТекПродукция <> Справочники.Продукция.ПустаяСсылка() Тогда
							НовтзНаборовПартийИ = тзНаборовПартийИ.Добавить();
							НовтзНаборовПартийИ.тзНаборовПартий = тзНаборовПартий.Скопировать();
							тзНаборовПартий.Очистить();	
						КонецЕсли;
						ТекПродукция = ВыбЗапр.Продукция;
						ТекНомерПартии = ВыбЗапр.НомерПартии;
					КонецЕсли;	
					НовтзНаборовПартий = тзНаборовПартий.Добавить();
					НовтзНаборовПартий.ЗСЖ = ВыбЗапр.ЗаписьСкладскогоЖурнала;
					НовтзНаборовПартий.Остаток = ВыбЗапр.КоличествоОстаток;
				КонецЦикла;
				
				Если ТекПродукция <> Справочники.Продукция.ПустаяСсылка() Тогда
					НовтзНаборовПартийИ = тзНаборовПартийИ.Добавить();
					НовтзНаборовПартийИ.тзНаборовПартий = тзНаборовПартий.Скопировать();
				КонецЕсли;	
				
				Если тзНаборовПартийИ.Количество() > 0 Тогда
					Для Каждого ТектзНаборовПартийИ из тзНаборовПартийИ Цикл
						тзНаборовПартий = ТектзНаборовПартийИ.тзНаборовПартий.Скопировать();
						Если тзНаборовПартий.Количество() > 1 Тогда
							ДокОб = Документы.ОбъединениеЗаписейСкладскогоЖурнала.СоздатьДокумент();
							ДокОб.Дата = ДокУВС.Дата+1;
							ДокОб.Организация = ДокУВС.Организация;
							ДокОб.УстановитьНовыйНомер();
							ДокОб.ТипОперации = Ложь; //присоединение
							ДокОб.ВырабатываемаяПродукция = Ложь; //входная
							ДокОб.Контрагент = ДокУВС.Контрагент;
							ДокОб.Предприятие = ДокУВС.Предприятие;
							ДокОб.Ответственный = Пользователи.АвторизованныйПользователь();
							ДокОб.Комментарий = "Для док-та " + ДокУВС;
							н=0;
							Для Каждого ТекСтр из тзНаборовПартий Цикл
								н=н+1;
								Если н=1 Тогда
									ДокОб.ЗаписьСкладскогоЖурнала = ТекСтр.ЗСЖ;
									Продолжить;
								КонецЕсли;	
								НовСтр = ДокОб.ТаблицаПродукция.Добавить();
								НовСтр.GUIDСтроки = Строка(Новый УникальныйИдентификатор());
								НовСтр.ЗаписьСкладскогоЖурнала = ТекСтр.ЗСЖ;
								НовСтр.Количество = ТекСтр.Остаток;
								Для Каждого ТекФизУп Из ТекСтр.ЗСЖ.СписокФизическихУпаковок Цикл
									НовСтр2 = ДокОб.СписокФизическихУпаковок.Добавить();
									НовСтр2.GUIDСтроки = НовСтр.GUIDСтроки;
									ЗаполнитьЗначенияСвойств(НовСтр2,ТекФизУп);
								КонецЦикла;	
							КонецЦикла;	
							
							ДокОб.Записать(РежимЗаписиДокумента.Проведение);
							мДокДляИнв.Добавить("" + ДокОб);
							
							мДокДляЗаявок = Новый Массив;
							мДокДляЗаявок.Добавить(ДокОб.Ссылка);
							ДМ_СлужебныйПривилегированный.СформироватьЗаявкиДляВетисAPI(мДокДляЗаявок);
							
						КонецЕсли;	
					КонецЦикла;	
				КонецЕсли;
				
				Если мДокДляИнв.Количество() > 0 Тогда
					ТекстСообщенияОЗ = "Созданы документы:
					|";
					Для мм=0 по мДокДляИнв.Количество()-1 Цикл
						ТекстСообщенияОЗ = ТекстСообщенияОЗ + мДокДляИнв.Получить(мм) + ",";
					КонецЦикла;
					
					лСтрокаСообщения = НСтр("Объединение записей скл.журнала после инвентаризации:
					|%1
					|Инвентаризация: %2'");
					
					лСтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( лСтрокаСообщения, ТекстСообщенияОЗ, "" + ДокУВС );
					
					лОписаниеСобытия = лСтрокаСообщения;
					
					ДМ_СлужебныйПривилегированный.ЗарегистрироватьСобытие( 
					ДокУВС,
					"Обработка файлов EDI.",
					Перечисления.ДМ_УровниЖурнала.Информация,
					ОбщегоНазначения.ИдентификаторОбъектаМетаданных( ТипЗнч(ДокУВС) ),
					Строка( ДокУВС ),
					лОписаниеСобытия);
					
				КонецЕсли;	
				
			КонецЕсли;	
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокУВС) = Тип("ДокументСсылка.ТранспортныеОперации") Тогда
		УспОбработана = Справочники.СтатусыЗаявок.УспешноОбработана;
		Если Источник.Получить(0).Статус = УспОбработана Тогда
			ЗапрЗ = Новый Запрос;
			ЗапрЗ.Текст = "ВЫБРАТЬ
			|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.Статус КАК СтатусНачальный
			|ИЗ
			|	РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.СрезПоследних КАК ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних
			|ГДЕ
			|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.ДокументСсылка = &ДокументСсылка";
			
			ЗапрЗ.Параметры.Вставить("ДокументСсылка",ДокУВС);
			
			БылаУспешноОбработана = Ложь;
			ВыбЗапр = ЗапрЗ.Выполнить().Выбрать();
			Если ВыбЗапр.Следующий() Тогда
				Если ВыбЗапр.СтатусНачальный <> УспОбработана Тогда
					БылаУспешноОбработана = Истина;
				КонецЕсли;	
			КонецЕсли;	
			
			Если БылаУспешноОбработана Тогда
				
				Запр = Новый Запрос;
				Запр.Текст = "ВЫБРАТЬ
				|	ТранспортныеОперации.Ссылка КАК ТранспОперация,
				|	ЕСТЬNULL(ДМ_EDIКлиенты.ДМ_ГлобальныйНомер, """") КАК ДМ_ГлобальныйНомер,
				|	ТранспортныеОперации.Дата КАК Дата,
				|	ЕСТЬNULL(ДМ_ДокументыОбменаDanone_EDIКлиенты.Передано, ЛОЖЬ) КАК Передано,
				|	ЕСТЬNULL(ДМ_ДокументыОбменаDanone_EDIКлиенты.ДатаПередачи, &ПустаяДата) КАК ДатаПередачи,
				|	ЕСТЬNULL(ДМ_ДокументыОбменаDanone_EDIКлиенты.ДМ_ДокументыОбменаDanone, &ПустойДокОбмена) КАК ДокументыОбменаDanoneРегистрация,
				|	ДМ_ФайлыОбменаDanoneКлиент.Ссылка КАК ДокОбмена,
				|	ДМ_ФайлыОбменаDanoneКлиент.ДМ_GLNСети КАК ДМ_GLNСети
				|ИЗ
				|	Документ.ДМ_ФайлыОбменаDanoneКлиент КАК ДМ_ФайлыОбменаDanoneКлиент
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДМ_EDIКлиенты КАК ДМ_EDIКлиенты
				|		ПО ДМ_ФайлыОбменаDanoneКлиент.ДМ_GLNСети = ДМ_EDIКлиенты.ДМ_ГлобальныйНомер
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДМ_ФайлыОбменаDanoneКлиент.ДМ_СвязанныеДокументыУВС КАК ДМ_ФайлыОбменаDanoneКлиентДМ_СвязанныеДокументыУВС
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТранспортныеОперации КАК ТранспортныеОперации
				|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДМ_ДокументыОбменаDanone_EDIКлиенты КАК ДМ_ДокументыОбменаDanone_EDIКлиенты
				|				ПО ТранспортныеОперации.Ссылка = ДМ_ДокументыОбменаDanone_EDIКлиенты.ТранспортнаяОперация
				|			ПО ДМ_ФайлыОбменаDanoneКлиентДМ_СвязанныеДокументыУВС.ДМ_СвязанныйДокументУВС = ТранспортныеОперации.Ссылка
				|		ПО ДМ_ФайлыОбменаDanoneКлиент.Ссылка = ДМ_ФайлыОбменаDanoneКлиентДМ_СвязанныеДокументыУВС.Ссылка
				|ГДЕ
				|	ДМ_ФайлыОбменаDanoneКлиент.ДМ_GLNСети <> &ПустаяСтрока
				|	И ТранспортныеОперации.Ссылка = &ТОДок
				|
				|УПОРЯДОЧИТЬ ПО
				|	Дата";
				
				Запр.Параметры.Вставить("ПустаяСтрока","");
				Запр.Параметры.Вставить("ПустаяДата",Дата(1,1,1));
				Запр.Параметры.Вставить("ПустойДокОбмена",Документы.ДМ_ФайлыОбменаDanoneКлиент.ПустаяСсылка());
				Запр.Параметры.Вставить("ТОДок",ДокУВС);
				
				
				ВыбЗапр = Запр.Выполнить().Выбрать();
				Если  ВыбЗапр.Следующий() Тогда
					СозданиеОбогащенногоEDIФайл_РегистрацияНаОтправку(ВыбЗапр.ТранспОперация, Истина);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПометитьВСДНаУдаление() Экспорт
	Обработки.ПометитьВСДНаУдаление.ПоменитьВСДДокументыНаУдаление();
КонецПроцедуры

