#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ОбновлениеВерсииИБ

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего модуля
//                                    ПодсистемыКонфигурацииПереопределяемый.
//   * РежимВыполненияОтложенныхОбработчиков - Строка - "Последовательно" - отложенные обработчики обновления выполняются
//                                    последовательно в интервале от номера версии информационной базы до номера
//                                    версии конфигурации включительно или "Параллельно" - отложенный обработчик после
//                                    обработки первой порции данных передает управление следующему обработчику, а после
//                                    выполнения последнего обработчика цикл повторяется заново.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = Метаданные.Имя;
	Описание.Версия = Метаданные.Версия;
	Описание.РежимВыполненияОтложенныхОбработчиков = "Параллельно";
	Описание.ПараллельноеОтложенноеОбновлениеСВерсии = "2.0.5.1";
	
	// Требуется библиотека стандартных подсистем.
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример:
//  Для добавления своей процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Оперативно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Обработчики, выполняемые при заполнении пустой ИБ и при переходе на новую версию.
	//
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУВС.ПервыйЗапуск";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.2.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУВС.ЗаполнитьНаименованиеРубля";
	Обработчик.НачальноеЗаполнение = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.2.1";
	Обработчик.Процедура           = "ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.ЗаполнитьЗначениеВалютыПоУмолчанию";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.2.1";
	Обработчик.Процедура           = "РегистрыСведений.СоответствиеПродукцииНоменклатуреУчетнойСистемы.ПеренестиНоменклатуруУчетнойСистемыИзРесурсовВИзмерения";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.2.1";
	Обработчик.Процедура           = "РегистрыСведений.СоответствиеХозяйствующихСубъектовКонтрагентамУчетнойСистемы.ПеренестиКонтрагентаУчетнойСистемыИХозяйствующегоСубъекта";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.3.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыУВС.УстановкаЗначенийСлужебныхКонстант";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.3.1";
	Обработчик.Процедура           = "РегистрыСведений.ЗначениеРеквизитовПоУмолчанию.ЗаполнитьЗначенияПоУмолчанию";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.3.1";
	Обработчик.Процедура           = "РегистрыСведений.НастройкиВеденияЖурналовЗагрузкиДанных.ЗаполнитьНастройкиВеденияЖурналовЗагрузкиДанных";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.4.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыУВС.УстановитьЗначениеТаймаутаСоединения";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.4.1";
	Обработчик.Процедура           = "РегистрыСведений.НастройкиОбменаВетисAPI.ПеренестиНастройкиОбменаВетисAPI";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.4.3";
	Обработчик.Процедура           = "Справочники.СвойстваЗаписейСкладскогоЖурнала.ЗаполнитьПредприятие";
	Обработчик.НачальноеЗаполнение = Ложь;
	
#Область Версия_2_0_5_1
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.5.1";
	Обработчик.РежимВыполнения     = "Монопольно";
	Обработчик.Процедура           = "РегистрыСведений.ЗначениеРеквизитовПоУмолчанию.ОбновитьДанныеПоУмолчаниюФорматовДат";
	Обработчик.ЧитаемыеОбъекты     = "РегистрСведений.ЗначениеРеквизитовПоУмолчанию";
	Обработчик.ИзменяемыеОбъекты   = "РегистрСведений.ЗначениеРеквизитовПоУмолчанию";
	Обработчик.Комментарий         = НСтр("ru = 'Обновляет данные форматов дат по умолчанию в регистре ""Значение реквизитов по умолчанию"".'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.5.1";
	Обработчик.РежимВыполнения     = "Монопольно";
	Обработчик.Процедура           = "РегистрыСведений.ДопустимыеФорматыДатПродукции.ЗаполнитьДопустимыеФорматыДатПродукции";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ЧитаемыеОбъекты     = "РегистрСведений.ДопустимыеФорматыДатПродукции";
	Обработчик.ИзменяемыеОбъекты   = "РегистрСведений.ДопустимыеФорматыДатПродукции";
	Обработчик.Комментарий         = НСтр("ru = 'Заполнение значений регистра ""Допустимые форматы дат продукции"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.5.1";
	Обработчик.РежимВыполнения     = "Монопольно";
	Обработчик.Процедура           = "Справочники.СвойстваЗаписейСкладскогоЖурнала.ЗаполнитьФорматыДатПродукции";
	Обработчик.ЧитаемыеОбъекты     = "Справочник.СвойстваЗаписейСкладскогоЖурнала";
	Обработчик.ИзменяемыеОбъекты   = "Справочник.СвойстваЗаписейСкладскогоЖурнала";
	Обработчик.Комментарий         = НСтр("ru = 'Заполняет реквизит ""Формат срока годности"", а так же проверяет корректность заполнения реквизита ""Формат даты выработки"" у записей складского журнала.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.5.1";
	Обработчик.РежимВыполнения     = "Монопольно";
	Обработчик.Процедура           = "Документы.ВСД.ЗаполнитьФорматыДатПродукции";
	Обработчик.ЧитаемыеОбъекты     = "Документ.ВСД";
	Обработчик.ИзменяемыеОбъекты   = "Документ.ВСД";
	Обработчик.Комментарий         = НСтр("ru = 'Заполняет реквизит ""Формат срока годности"", а так же проверяет корректность заполнения реквизита ""Формат даты выработки"" у документов ""ВСД"" со статусом ""Оформлен"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.5.1";
	Обработчик.РежимВыполнения     = "Монопольно";
	Обработчик.Процедура           = "Документы.ПриходныеОперации.ЗаполнитьФорматыДатПродукции";
	Обработчик.ЧитаемыеОбъекты     = "Документ.ПриходныеОперации";
	Обработчик.ИзменяемыеОбъекты   = "Документ.ПриходныеОперации";
	Обработчик.Комментарий         = НСтр("ru = 'Заполняет реквизит ""Формат срока годности"", а так же проверяет корректность заполнения реквизита ""Формат даты выработки"" у документов ""Приходные операции"" со статусом ""Новая заявка"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.5.1";
	Обработчик.РежимВыполнения     = "Монопольно";
	Обработчик.Процедура           = "Документы.Инвентаризации.ЗаполнитьФорматыДатПродукции";
	Обработчик.ЧитаемыеОбъекты     = "Документ.Инвентаризации";
	Обработчик.ИзменяемыеОбъекты   = "Документ.Инвентаризации";
	Обработчик.Комментарий         = НСтр("ru = 'Заполняет реквизит ""Формат срока годности"", а так же проверяет корректность заполнения реквизита ""Формат даты выработки"" у документов ""Инвентаризации"" со статусом ""Новая заявка"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.5.1";
	Обработчик.РежимВыполнения     = "Монопольно";
	Обработчик.Процедура           = "Документы.ПроизводственныеОперации.ЗаполнитьФорматыДатПродукции";
	Обработчик.ЧитаемыеОбъекты     = "Документ.ПроизводственныеОперации";
	Обработчик.ИзменяемыеОбъекты   = "Документ.ПроизводственныеОперации";
	Обработчик.Комментарий         = НСтр("ru = 'Заполняет реквизит ""Формат срока годности"", а так же проверяет корректность заполнения реквизита ""Формат даты выработки"" у документов ""Производственные операции"" со статусом ""Новая заявка"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.5.1";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d7829488-d6fd-4de8-9769-73ddb03463ac");
	Обработчик.Процедура = "Документы.ВСД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Формат срока годности"", а так же проверяет корректность заполнения реквизита ""Формат даты выработки"" у документов ""ВСД"" со статусом отличным от ""Оформлен"".
		|До завершения обработки ""Дата выработки продукции"" и ""Срок годности продукции"" могут содержать не корректные данные.'");
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ВСД.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ВСД";
	Обработчик.ИзменяемыеОбъекты = "Документ.ВСД";
	Обработчик.БлокируемыеОбъекты = "Документ.ВСД";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.5.1";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("37eba165-d006-4168-b342-a1431f9bd7ac");
	Обработчик.Процедура = "Документы.ПриходныеОперации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Формат срока годности"", а так же проверяет корректность заполнения реквизита ""Формат даты выработки"" у документов ""Приходные операции"" со статусом отличным от ""Новая заявка"".
		|До завершения обработки ""Дата выработки продукции"" и ""Срок годности продукции"" могут содержать не корректные данные.'");
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ПриходныеОперации.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ПриходныеОперации";
	Обработчик.ИзменяемыеОбъекты = "Документ.ПриходныеОперации";
	Обработчик.БлокируемыеОбъекты = "Документ.ПриходныеОперации";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.5.1";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c10db7c9-fc6d-4d3d-868d-b4b162e0a5d5");
	Обработчик.Процедура = "Документы.Инвентаризации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Формат срока годности"", а так же проверяет корректность заполнения реквизита ""Формат даты выработки"" у документов ""Инвентаризации"" со статусом отличным от ""Новая заявка"".
		|До завершения обработки ""Дата выработки продукции"" и ""Срок годности продукции"" могут содержать не корректные данные.'");
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.Инвентаризации.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.Инвентаризации";
	Обработчик.ИзменяемыеОбъекты = "Документ.Инвентаризации";
	Обработчик.БлокируемыеОбъекты = "Документ.Инвентаризации";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.5.1";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5e6c4f62-3a2b-4b94-9055-e8a2298edb81");
	Обработчик.Процедура = "Документы.ПроизводственныеОперации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Формат срока годности"", а так же проверяет корректность заполнения реквизита ""Формат даты выработки"" у документов ""Производственные операции"" со статусом отличным от ""Новая заявка"".
		|До завершения обработки ""Дата выработки продукции"" и ""Срок годности продукции"" могут содержать не корректные данные.'");
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ПроизводственныеОперации.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Документ.ПроизводственныеОперации";
	Обработчик.ИзменяемыеОбъекты = "Документ.ПроизводственныеОперации";
	Обработчик.БлокируемыеОбъекты = "Документ.ПроизводственныеОперации";

#КонецОбласти

#Область Версия_2_0_5_2

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.5.2";
	Обработчик.РежимВыполнения     = "Монопольно";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыУВС.УстановитьПризнакИспользованияСертификатовБезопасности";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ЧитаемыеОбъекты     = "Константа.ИспользоватьСертификатыБезопасностиПриПодключении";
	Обработчик.ИзменяемыеОбъекты   = "Константа.ИспользоватьСертификатыБезопасностиПриПодключении";
	Обработчик.Комментарий         = НСтр("ru = 'Задается значение по умолчанию для константы ИспользоватьСертификатыБезопасностиПриПодключении.'");

#КонецОбласти

#Область Версия_2_0_6_1

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.6.1";
	Обработчик.РежимВыполнения     = "Монопольно";
	Обработчик.Процедура           = "Справочники.НастройкиПодключенияКВетисAPI.ИзменитьИдентификаторСервиса";
	Обработчик.ЧитаемыеОбъекты     = "Справочник.НастройкиПодключенияКВетисAPI";
	Обработчик.ИзменяемыеОбъекты   = "Справочник.НастройкиПодключенияКВетисAPI";
	Обработчик.Комментарий         = НСтр("ru = 'Изменяет значение идентификатора сервиса для работы со схемами версии 2.1 на mercury-g2b.service:2.1.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.6.1";
	Обработчик.РежимВыполнения     = "Монопольно";
	Обработчик.Процедура           = "РегистрыСведений.ДатыПоследнихЗагрузокВСД.ЗаполнитьТипыЗагружаемыхВСД";
	Обработчик.ЧитаемыеОбъекты     = "РегистрСведений.ДатыПоследнихЗагрузокВСД";
	Обработчик.ИзменяемыеОбъекты   = "РегистрСведений.ДатыПоследнихЗагрузокВСД";
	Обработчик.Комментарий         = НСтр("ru = 'Заполняет даты загрузок значениями типов ВСД.'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.6.1";
	Обработчик.РежимВыполнения     = "Монопольно";
	Обработчик.Процедура           = "РегистрыСведений.НастройкиВеденияЖурналовЗагрузкиДанных.ЗаполнитьНастройкиВеденияЖурналовЗагрузкиДанных";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.ЧитаемыеОбъекты     = "РегистрСведений.НастройкиВеденияЖурналовЗагрузкиДанных";
	Обработчик.ИзменяемыеОбъекты   = "РегистрСведений.НастройкиВеденияЖурналовЗагрузкиДанных";
	Обработчик.Комментарий         = НСтр("ru = 'Добавляет значение для настрйоки очистки ""Журнала состояний заявок на оформление операций"".'");
	
#КонецОбласти

#Область Версия_2_0_7_1
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.7.1";
	Обработчик.РежимВыполнения     = "Монопольно";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыУВС.ЗаполнитьЗаписиДвиженияТоваровДокумента";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.ЧитаемыеОбъекты     = "Документ.АннулированиеВСД, Документ.ВнесениеНомеровТранспортныхСредств, Документ.ВнесениеСведенийОЛабораторныхИсследованиях, Документ.ПриходныеОперации, Документ.Инвентаризации, Документ.ПроизводственныеОперации, Документ.ТранспортныеОперации,Документ.ОбъединениеЗаписейСкладскогоЖурнала";
	Обработчик.ИзменяемыеОбъекты   = "Документ.АннулированиеВСД, Документ.ВнесениеНомеровТранспортныхСредств, Документ.ВнесениеСведенийОЛабораторныхИсследованиях, Документ.ПриходныеОперации, Документ.Инвентаризации, Документ.ПроизводственныеОперации, Документ.ТранспортныеОперации,Документ.ОбъединениеЗаписейСкладскогоЖурнала";
	Обработчик.Комментарий         = НСтр("ru = 'Присваивает реквизиту ""Проведён"" значение ""Истина"" и записывает движения документов не вызывая обаботку проведения.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.7.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыУВС.УстановитьНововеЗначениеТаймаутаОпросаСервера";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.ЧитаемыеОбъекты     = "Константа.ТаймаутОпросаСервера";
	Обработчик.ИзменяемыеОбъекты   = "Константа.ТаймаутОпросаСервера";
	Обработчик.Комментарий         = НСтр("ru = 'Присваивает константе ""Таймаут опроса сервера"" новое значение.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.7.1";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыУВС.УстановитьЗначениеКоличествоПопытокОпросаСервера";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ЧитаемыеОбъекты     = "Константа.КоличествоПопытокОпросаСервера";
	Обработчик.ИзменяемыеОбъекты   = "Константа.КоличествоПопытокОпросаСервера";
	Обработчик.Комментарий         = НСтр("ru = 'Присваивает константе ""Количество попыток опроса сервера"" значение.'");
	
#КонецОбласти

#Область Версия_2_0_7_2
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.7.2";
	Обработчик.РежимВыполнения     = "Монопольно";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыУВС.ПерезаписатьПериодыДвиженийДокументов";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.ЧитаемыеОбъекты     = "Документ.ПроизводственныеОперации,Документ.ОбъединениеЗаписейСкладскогоЖурнала";
	Обработчик.ИзменяемыеОбъекты   = "Документ.ПроизводственныеОперации, Документ.ОбъединениеЗаписейСкладскогоЖурнала";
	Обработчик.Комментарий         = НСтр("ru = 'Перезаписывает движения документов у которых дата движения не совпадает с датой документа.'");
	
#КонецОбласти

#Область Версия_2_0_8_1

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.8.1";
	Обработчик.РежимВыполнения     = "Монопольно";
	Обработчик.Процедура           = "РегистрыСведений.НастройкиОбменаВетисAPI.ЗаполнитьЗначенияАдминистрированияПользователями";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ЧитаемыеОбъекты     = "РегистрСведений.НастройкиОбменаВетисAPI";
	Обработчик.ИзменяемыеОбъекты   = "РегистрСведений.НастройкиОбменаВетисAPI";
	Обработчик.Комментарий         = НСтр("ru = 'Заполняет настройки обмена с Ветис.API для операций по администрированию пользователей.'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.8.1";
	Обработчик.РежимВыполнения     = "Монопольно";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыУВС.ВыполнитьЗаполнениеДанныхПоПравамИЗонамОбслуживанияПользователей";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ЧитаемыеОбъекты     = "Справочник.ПраваПользователейВСистемеМеркурий, РегистрСведений.УдалитьОбслуживаемыеПредприятия";
	Обработчик.ИзменяемыеОбъекты   = "Справочник.ПраваПользователейВСистемеМеркурий, Документ.АдминистрированиеПользователей, РегистраНакоплений.ДвижениеПродукции";
	Обработчик.Комментарий         = НСтр("ru = 'Выполняет заполнение справочника ""Права пользователей в ИС """"Меркурий"""".
									|А так же производит первоначальное заполнение документа ""Администрирование пользователей"" по данным
									|регистра ""Обслуживаемые предприятия"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.8.1";
	Обработчик.РежимВыполнения     = "Монопольно";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыУВС.ЗаполнитьВидКонтактнойИнформацииТелефонEmailПредприятия";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ЧитаемыеОбъекты     = "";
	Обработчик.ИзменяемыеОбъекты   = "Справочник.ВидыКонтактнойИнформации";
	Обработчик.Комментарий         = НСтр("ru = 'Добавление возможности указания телефона и адреса электронной почты для справочника""Предприятия"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.8.1";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("275bb99e-395f-4c0d-856f-4eda525bbbcb");
	Обработчик.Процедура = "Справочники.ВСДПрисоединенныеФайлы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Комментарий = НСтр("ru = 'Выполняет удаление дублей файла ""Ветеринарная справка""'");
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ВСДПрисоединенныеФайлы.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.ВСДПрисоединенныеФайлы";
	Обработчик.ИзменяемыеОбъекты = "Справочник.ВСДПрисоединенныеФайлы";
	Обработчик.БлокируемыеОбъекты = "Справочник.ВСДПрисоединенныеФайлы";
	
#КонецОбласти

КонецПроцедуры

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПередОбновлениемИнформационнойБазы.
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПослеОбновленияИнформационнойБазы.
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
	Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПриПодготовкеМакетаОписанияОбновлений.
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы
//                                           ПредыдущееИмяКонфигурации.
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры 

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ПервоначальноеЗаполнение

Процедура ПервыйЗапуск() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда // В подчиненных узлах РИБ не выполняется
	КонецЕсли;
	
	ЗаполнитьКонстанты();
	ОбновитьПредопределенныеВидыКонтактнойИнформации();
	Справочники.КлассификаторОКОПФ.ЗагрузитьЭлементы();
	РегистрыСведений.ЗависимостиВырабатываемойПродукцииОтСырья.ЗаполнитьЗначенияЗависимостей();
	
	ОбъектДанных = Справочники.СтраныМира.Россия.ПолучитьОбъект();
	ОбъектДанных.Наименование  = "Российская Федерация";
	ОбъектДанных.GUID_Меркурий = "74a3cbb1-56fa-94f3-ab3f-e8db4940d96b";
	ОбъектДанных.УчастникЕАЭС  = Истина;
	ОбъектДанных.Записать();

	РегистрыСведений.ЗначениеРеквизитовПоУмолчанию.ЗаполнитьЗначенияПоУмолчанию();
	
КонецПроцедуры

Процедура ЗаполнитьКонстанты() Экспорт
	
	Константы.ТаймаутОпросаСервера.Установить(10);
	Константы.ИсточникДанныхАдресногоКлассификатора.Установить("Меркурий");
	Константы.ВидСервераВетисAPI.Установить(Перечисления.ВидыСерверовВетисAPI.Тестовый);
	
КонецПроцедуры

Процедура НайтиСоздатьВалюту(Код, Наименование, НаименованиеПолное, ПараметрыПрописиНаРусском)
	
	Ссылка = Справочники.Валюты.НайтиПоКоду(Код);
	
	Если Ссылка.Пустая() Тогда
		
		СправочникОбъект = Справочники.Валюты.СоздатьЭлемент();
		
		СправочникОбъект.Код                  = Код;
		СправочникОбъект.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод;
		СправочникОбъект.Наименование         = Наименование;
		СправочникОбъект.НаименованиеПолное   = НаименованиеПолное;
		СправочникОбъект.ПараметрыПрописи     = ПараметрыПрописиНаРусском;
		
		СправочникОбъект.Записать();
		
	Иначе
		
		// Рубль может быть создан из классификатора, где он имеет наименование RUB,
		// необходимо переименовать его
		Если Ссылка.Наименование <> Наименование Тогда
			СправочникОбъект = Ссылка.ПолучитьОбъект();
			СправочникОбъект.Наименование = Наименование;
			
			СправочникОбъект.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПредопределенныеВидыКонтактнойИнформации() Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Возврат;
	КонецЕсли;
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	
	// Справочник "Контрагенты"
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ЮрАдресКонтрагента";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Истина;
	ПараметрыВида.Порядок = 3;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	// Справочник "Предприятия"
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "АдресПредприятия";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Истина;
	ПараметрыВида.Порядок = 4;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	// Справочник "ПунктыПерегрузки"
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "АдресПунктаПерегрузки";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Истина;
	ПараметрыВида.Порядок = 5;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	// Справочник "ПользователиСистемыМеркурий"
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "ТелефонПользователяСистемыМеркурий";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ПараметрыВида.Порядок = 6;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "РабочийТелефонПользователяСистемыМеркурий";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ПараметрыВида.Порядок = 7;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
	ПараметрыВида.Вид = "EmailПользователяСистемыМеркурий";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ПараметрыВида.Порядок = 8;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
	ПараметрыВида.Вид = "РабочийEmailПользователяСистемыМеркурий";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ПараметрыВида.Порядок = 9;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбновления

Процедура ЗаполнитьНаименованиеРубля() Экспорт
	
	НайтиСоздатьВалюту("643", "руб.", "Российский рубль", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");
	
КонецПроцедуры

Процедура УстановитьЗначенияФорматовДатОбъекта(Данные, СвойстваДат) Экспорт
	
	//Даты выработки
	Если ЗначениеЗаполнено(СвойстваДат.ДатаВыработкиСтрокой) Тогда
		Если НРег(СвойстваДат.ДатаВыработкиСтрокой) = "неизвестно" Тогда
			Данные.ДатаВыработкиСтрокой = "";
			Данные.ФорматДатыВыработки  = Перечисления.СпособыЗаданияДаты.Неизвестно;
		ИначеЕсли НЕ ЗначениеЗаполнено(СвойстваДат.ФорматДатыВыработки) Тогда
			Данные.ФорматДатыВыработки  = Перечисления.СпособыЗаданияДаты.Строка;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СвойстваДат.ФорматДатыВыработки) Тогда
		Если ЗначениеЗаполнено(СвойстваДат.ДатаВыработкиНачало) Тогда
			Данные.ФорматДатыВыработки = Перечисления.СпособыЗаданияДаты.Дата;
		КонецЕсли;
	КонецЕсли;
	
	//Сроки годности
	Если ЗначениеЗаполнено(СвойстваДат.ДатаСрокаГодностиСтрокой) Тогда
		Если НРег(СвойстваДат.ДатаСрокаГодностиСтрокой) = "не ограничен" Тогда
			Данные.ДатаСрокаГодностиСтрокой = "";
			Данные.ФорматСрокаГодности      = Перечисления.СпособыЗаданияДаты.НеОграничен;
		Иначе
			Данные.ФорматСрокаГодности      = Перечисления.СпособыЗаданияДаты.Строка;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СвойстваДат.ДатаОкончанияСрокаГодностиНачало) Тогда
		Если Данные.ФорматДатыВыработки = Перечисления.СпособыЗаданияДаты.Дата
			ИЛИ Данные.ФорматДатыВыработки = Перечисления.СпособыЗаданияДаты.Месяц Тогда
				Данные.ФорматСрокаГодности = Данные.ФорматДатыВыработки;
			Иначе
				Данные.ФорматСрокаГодности = Перечисления.СпособыЗаданияДаты.Дата;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СвойстваДат.ДатаОкончанияСрокаГодностиНачало) И НЕ ЗначениеЗаполнено(Данные.ФорматСрокаГодности) Тогда
		Данные.ФорматСрокаГодности = Перечисления.СпособыЗаданияДаты.БезСрокаГодности;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Сообщить о неудачной обработке
//
// Параметры:
//  ИнформацияОбОшибке	 - ИнформацияОбОшибке - результат функции ИнформацияОбОшибке()
//  Ссылка				 - ЛюбаяСсылка - обрабатываемый объект.
//
Процедура СообщитьОНеудачнойОбработке(ИнформацияОбОшибке, Ссылка) Экспорт
	ТекстСообщения = НСтр("ru = 'Не удалось обработать объект: %Объект% по причине: %Причина%'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Ссылка);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
							УровеньЖурналаРегистрации.Предупреждение,
							Ссылка.Метаданные(),
							Ссылка,
							ТекстСообщения);
КонецПроцедуры

Функция СвойстваПараметровДат() Экспорт
	
	СвойстваПараметровДат = Новый Структура("
						|ФорматДатыВыработки,
						|ДатаВыработкиНачало,
						|ДатаВыработкиОкончание,
						|ДатаВыработкиСтрокой,
						|ДатаОкончанияСрокаГодностиНачало,
						|ДатаОкончанияСрокаГодностиОкончание,
						|ДатаСрокаГодностиСтрокой");

	Возврат СвойстваПараметровДат;
	
КонецФункции

Процедура УстановитьПризнакИспользованияСертификатовБезопасности() Экспорт
	
	МенеджерЗначения = Константы.ИспользоватьСертификатыБезопасностиПриПодключении.СоздатьМенеджерЗначения();
	МенеджерЗначения.Значение = Истина;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	
КонецПроцедуры

// Процедура - присваивает реквизиту Проведён значение Истина и записывает движения для документов:
// Документ.АннулированиеВСД,
// Документ.ВнесениеНомеровТранспортныхСредств,
// Документ.ВнесениеСведенийОЛабораторныхИсследованиях,
// Документ.ПриходныеОперации,
// Документ.Инвентаризации,
// Документ.ПроизводственныеОперации,
// Документ.ТранспортныеОперации,
// Документ.ОбъединениеЗаписейСкладскогоЖурнала
Процедура ЗаполнитьЗаписиДвиженияТоваровДокумента() Экспорт
	
	// Список типов документов на основании которых ставится резерв
	СписокТиповДокументовРезерва = Новый СписокЗначений();
	СписокТиповДокументовРезерва.Добавить(Тип("ДокументСсылка.ПроизводственныеОперации"));
	СписокТиповДокументовРезерва.Добавить(Тип("ДокументСсылка.ТранспортныеОперации"));
	СписокТиповДокументовРезерва.Добавить(Тип("ДокументСсылка.Инвентаризации"));
	СписокТиповДокументовРезерва.Добавить(Тип("ДокументСсылка.ОбъединениеЗаписейСкладскогоЖурнала"));
	
	СписокТиповДокументовДляПроведения = Новый СписокЗначений();
	СписокТиповДокументовДляПроведения.Добавить(Тип("ДокументСсылка.АннулированиеВСД"));
	СписокТиповДокументовДляПроведения.Добавить(Тип("ДокументСсылка.ВнесениеНомеровТранспортныхСредств"));
	СписокТиповДокументовДляПроведения.Добавить(Тип("ДокументСсылка.ВнесениеСведенийОЛабораторныхИсследованиях"));
	СписокТиповДокументовДляПроведения.Добавить(Тип("ДокументСсылка.ПриходныеОперации"));
	
	// Список состояний заявок при которых документы должны быть проведены
	СписокСостоянийДляРезерва = Новый СписокЗначений();
	СписокСостоянийДляРезерва.Добавить(Справочники.СтатусыЗаявок.IDОтправлен);
	СписокСостоянийДляРезерва.Добавить(Справочники.СтатусыЗаявок.IDПолучен);
	СписокСостоянийДляРезерва.Добавить(Справочники.СтатусыЗаявок.Подготовлен);
	СписокСостоянийДляРезерва.Добавить(Справочники.СтатусыЗаявок.Обрабатывается);
	СписокСостоянийДляРезерва.Добавить(Справочники.СтатусыЗаявок.Отправлена);
	СписокСостоянийДляРезерва.Добавить(Справочники.СтатусыЗаявок.Принята);
	СписокСостоянийДляРезерва.Добавить(Справочники.СтатусыЗаявок.Новая);
	СписокСостоянийДляРезерва.Добавить(Справочники.СтатусыЗаявок.ОшибкаОбработкиОтвета);
	СписокСостоянийДляРезерва.Добавить(Справочники.СтатусыЗаявок.ОшибкаОтправкиID);
	
	// Ищем заявки со статусами из списка "СписокСостоянийДляРезерва",
	// для которых нет документов РезервированиеПродукции
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
	               |	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.ДокументСсылка КАК ДокументСсылка,
	               |	ИСТИНА КАК Резерв
	               |ИЗ
	               |	РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.СрезПоследних(, ТИПЗНАЧЕНИЯ(ДокументСсылка) В (&ТипыДокументовРезерва)) КАК ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних
	               |ГДЕ
	               |	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.Статус В(&Статусы)
	               |	И НЕ ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.ДокументСсылка.Проведен
	               |	И НЕ ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.ДокументСсылка В (&МассивОшибок)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
	               |	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.ДокументСсылка,
	               |	ЛОЖЬ
	               |ИЗ
	               |	РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.СрезПоследних(, ТИПЗНАЧЕНИЯ(ДокументСсылка) В (&ТипыДокументовПроведения)) КАК ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних
	               |ГДЕ
	               |	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.Статус В(&Статусы)
	               |	И НЕ ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.ДокументСсылка.Проведен
	               |	И НЕ ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.ДокументСсылка В (&МассивОшибок)";
	
	МассивОшибок = Новый Массив;
	Запрос.УстановитьПараметр("Статусы", СписокСостоянийДляРезерва);
	Запрос.УстановитьПараметр("ТипыДокументовРезерва", СписокТиповДокументовРезерва);
	Запрос.УстановитьПараметр("ТипыДокументовПроведения", СписокТиповДокументовДляПроведения);
	Запрос.УстановитьПараметр("МассивОшибок", МассивОшибок);
	Результат = Запрос.Выполнить();
	
	// Проводим найденные документы
	Пока Не Результат.Пустой() Цикл
		ДокументыДляПроведения = Результат.Выбрать();
		Пока ДокументыДляПроведения.Следующий() Цикл
			Попытка 
				ДокументОбъект = ДокументыДляПроведения.ДокументСсылка.ПолучитьОбъект();
				ДокументОбъект.Проведен = Истина;
				СсылкаНаДокумент = ДокументыДляПроведения.ДокументСсылка;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
				ИнтеграцияВетисAPIСервер.УстановитьСтатусПодготовлен(СсылкаНаДокумент);
				Если ДокументыДляПроведения.Резерв Тогда
					Документы[СсылкаНаДокумент.Метаданные().Имя].ЗаполнитьЗаписиДвиженияТоваровПриОбновлении(СсылкаНаДокумент);
				КонецЕсли;
			Исключение
				МассивОшибок.Добавить(СсылкаНаДокумент);
				ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ТекстШаблона = НСтр("ru = 'Не удалось обработать документ %1 по причине: %2.'");
				ТекстИсключения = СтрЗаменить(ТекстШаблона, СсылкаНаДокумент, ПредставлениеОшибки);
				ЗаписьЖурналаРегистрации("Ошибка выполнения",
										 УровеньЖурналаРегистрации.Ошибка,
										 СсылкаНаДокумент.Метаданные(),
										 СсылкаНаДокумент,
										 ТекстИсключения);
			КонецПопытки;
			
		КонецЦикла;
		
		Запрос.УстановитьПараметр("МассивОшибок", МассивОшибок);
		Результат = Запрос.Выполнить();
	КонецЦикла;
	
КонецПроцедуры

// Процедура - присваивает константе "ТаймаутОпросаСервера" новое значение
Процедура УстановитьНововеЗначениеТаймаутаОпросаСервера() Экспорт
	ТаймаутОпросаСервера = Константы.ТаймаутОпросаСервера.Получить();

	Если ТаймаутОпросаСервера >= 15 Тогда
		ТаймаутОпросаСервера = 15;
	ИначеЕсли ТаймаутОпросаСервера >= 10 Тогда
		ТаймаутОпросаСервера = 10;
	ИначеЕсли ТаймаутОпросаСервера >= 5 Тогда
		ТаймаутОпросаСервера = 5;
	ИначеЕсли ТаймаутОпросаСервера >= 2 Тогда
		ТаймаутОпросаСервера = 2;
	Иначе
		ТаймаутОпросаСервера = 1;
	КонецЕсли;

	МенеджерЗначения = Константы.ТаймаутОпросаСервера.СоздатьМенеджерЗначения();
	МенеджерЗначения.Значение = ТаймаутОпросаСервера;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
КонецПроцедуры

// Процедура - присваивает константе "КоличествоПопытокОпросаСервера" новое значение
Процедура УстановитьЗначениеКоличествоПопытокОпросаСервера() Экспорт
	
	МенеджерЗначения = Константы.КоличествоПопытокОпросаСервера.СоздатьМенеджерЗначения();
	МенеджерЗначения.Значение = 15;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
КонецПроцедуры

// Процедура - перезаписывает периоды движений для документов "ПроизводственныеОперации" и "ОбъединениеЗаписейСкладскогоЖурнала"
Процедура ПерезаписатьПериодыДвиженийДокументов() Экспорт
	
	// Ищем заявки в движении которых дата не совпадает с датой документа
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
	               |	ДвижениеПродукции.Регистратор КАК Регистратор
	               |ИЗ
	               |	РегистрНакопления.ДвижениеПродукции КАК ДвижениеПродукции
	               |ГДЕ
	               |	ДвижениеПродукции.Регистратор ССЫЛКА Документ.ПроизводственныеОперации
	               |	И НЕ ДвижениеПродукции.Период = ДвижениеПродукции.Регистратор.Дата
	               |	И НЕ ДвижениеПродукции.Регистратор В (&МассивОшибок)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
	               |	ДвижениеПродукции.Регистратор
	               |ИЗ
	               |	РегистрНакопления.ДвижениеПродукции КАК ДвижениеПродукции
	               |ГДЕ
	               |	ДвижениеПродукции.Регистратор ССЫЛКА Документ.ОбъединениеЗаписейСкладскогоЖурнала
	               |	И НЕ ДвижениеПродукции.Период = ДвижениеПродукции.Регистратор.Дата
	               |	И НЕ ДвижениеПродукции.Регистратор В (&МассивОшибок)";
	
	МассивОшибок = Новый Массив;
	Запрос.УстановитьПараметр("МассивОшибок", МассивОшибок);
	Результат = Запрос.Выполнить();
	
	// Перезаписываем движения у найденных документов
	Пока Не Результат.Пустой() Цикл
		ДокументыДляПерезаписи = Результат.Выбрать();
		Пока ДокументыДляПерезаписи.Следующий() Цикл
			Попытка
				СсылкаНаДокумент = ДокументыДляПерезаписи.Регистратор;
				НаборЗаписей = РегистрыНакопления.ДвижениеПродукции.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(СсылкаНаДокумент);
				НаборЗаписей.Прочитать();
				ТаблицаНабора = НаборЗаписей.Выгрузить();
				ТаблицаНабора.ЗаполнитьЗначения(СсылкаНаДокумент.Дата, "Период");
				НаборЗаписей.Загрузить(ТаблицаНабора);
				НаборЗаписей.Записать();
			Исключение
				МассивОшибок.Добавить(СсылкаНаДокумент);
				ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ТекстШаблона = НСтр("ru = 'Не удалось обработать документ %1 по причине: %2.'");
				ТекстИсключения = СтрЗаменить(ТекстШаблона, СсылкаНаДокумент, ПредставлениеОшибки);
				ЗаписьЖурналаРегистрации("Ошибка выполнения",
										 УровеньЖурналаРегистрации.Ошибка,
										 СсылкаНаДокумент.Метаданные(),
										 СсылкаНаДокумент,
										 ТекстИсключения);
			КонецПопытки;
			
		КонецЦикла;
		
		Запрос.УстановитьПараметр("МассивОшибок", МассивОшибок);
		Результат = Запрос.Выполнить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьЗаполнениеДанныхПоПравамИЗонамОбслуживанияПользователей() Экспорт
	
	Справочники.ПраваПользователейВСистемеМеркурий.ЗаполнитьСправочникСпискомПрав();
	
	Документы.АдминистрированиеПользователей.ВыполнитьПереносДанныхВАдминистрированиеПользователей();
	
КонецПроцедуры

Процедура ЗаполнитьВидКонтактнойИнформацииТелефонEmailПредприятия() Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Возврат;
	КонецЕсли;
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	
	// Справочник "Предприятия"
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
	ПараметрыВида.Вид = "EmailПредприятия";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ПараметрыВида.Порядок = 10;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "ТелефонПредприятия";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Ложь;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ПараметрыВида.Порядок = 11;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

Процедура УстановкаЗначенийСлужебныхКонстант() Экспорт
	
	Константы.СтатусЗаявкиПоОкончаниюОпросаЗаявокВСтатусеЗаявкаОбрабатывается.Установить(Справочники.СтатусыЗаявок.ЗаявкаОтмененаАдминистратором);
	Константы.УдалитьСмещениеВСпискахЗапросов.Установить(1000);
	
КонецПроцедуры

#Область УстановкаКонстанты_ТаймаутСоединения

Процедура УстановитьЗначениеТаймаутаСоединения() Экспорт
	
	МенеджерЗначения = Константы.ТаймаутСоединения.СоздатьМенеджерЗначения();
	МенеджерЗначения.Значение = 60;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	
КонецПроцедуры

#КонецОбласти
