
// Функция возвращает имя каталога временных файлов.
//
// Возвращаемое значение:
//	Строка - путь к каталогу временных файлов.
//
Функция КаталогСлужебныхФайлов( пСообщатьОНеобходимостиНастройки=Ложь ) Экспорт
	
	ОбщийТипПлатформы = "Windows";
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	ТипПлатформыСервера = СистемнаяИнфо.ТипПлатформы;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если    ТипПлатформыСервера = ТипПлатформы.Windows_x86
		ИЛИ ТипПлатформыСервера = ТипПлатформы.Windows_x86_64 Тогда
		
		Результат         = Константы.КаталогСообщенийОбменаДаннымиДляWindows.Получить();
		
	ИначеЕсли ТипПлатформыСервера = ТипПлатформы.Linux_x86
		ИЛИ   ТипПлатформыСервера = ТипПлатформы.Linux_x86_64 Тогда
		
		Результат         = Константы.КаталогСообщенийОбменаДаннымиДляLinux.Получить();
		ОбщийТипПлатформы = "Linux";
		
	Иначе
		
		Результат         = Константы.КаталогСообщенийОбменаДаннымиДляWindows.Получить();
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат = СокрЛП(Результат);
	
	// Проверка существования каталога.
	Каталог = Новый Файл(Результат);
	Если Не Каталог.Существует() Тогда
		
		Если пСообщатьОНеобходимостиНастройки = Истина Тогда
			
			ПредставлениеКонстанты = ?(ОбщийТипПлатформы = "Linux", 
				Метаданные.Константы.КаталогСообщенийОбменаДаннымиДляLinux.Представление(),
				Метаданные.Константы.КаталогСообщенийОбменаДаннымиДляWindows.Представление());
			
			ШаблонСообщения = НСтр("ru = 'Каталог служебных файлов не существует.
					|Необходимо убедиться, что в настройках программы задано правильное значение параметра
					|""%1"".'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПредставлениеКонстанты);
			ВызватьИсключение(ТекстСообщения);
			
		КонецЕсли;
		
		Результат = "";
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НастройкаПодключенияКВетисAPIПоКонтрагенту(Контрагент) Экспорт 
	НастройкаПодключения = Новый Структура;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	НастройкиПодключенияКВетисAPI.Организация КАК Организация,
		|	НастройкиПодключенияКВетисAPI.АдресСервиса КАК АдресСервиса,
		|	НастройкиПодключенияКВетисAPI.ИдентификаторСервиса КАК ИдентификаторСервиса,
		|	НастройкиПодключенияКВетисAPI.Ключ КАК Ключ,
		|	НастройкиПодключенияКВетисAPI.ЛогинДляЗагрузкиНСИ КАК ЛогинДляЗагрузкиНСИ,
		|	НастройкиПодключенияКВетисAPI.ПарольДляЗагрузкиНСИ КАК ПарольДляЗагрузкиНСИ,
		|	НастройкиПодключенияКВетисAPI.ИдентификаторХозяйствующегоСубъекта КАК ИдентификаторХозяйствующегоСубъекта,
		|	НастройкиПодключенияКВетисAPI.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НастройкиПодключенияКВетисAPI КАК НастройкиПодключенияКВетисAPI
		|ГДЕ
		|	НЕ НастройкиПодключенияКВетисAPI.ПометкаУдаления
		|	И НастройкиПодключенияКВетисAPI.Контрагент = &Контрагент";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат	НастройкаПодключения;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		НастройкаПодключения.Вставить("Ссылка", ВыборкаДетальныеЗаписи.Ссылка);
		НастройкаПодключения.Вставить("Организация", ВыборкаДетальныеЗаписи.Организация);
		НастройкаПодключения.Вставить("АдресСервиса", ВыборкаДетальныеЗаписи.АдресСервиса);
		НастройкаПодключения.Вставить("ИдентификаторСервиса", ВыборкаДетальныеЗаписи.ИдентификаторСервиса);
		НастройкаПодключения.Вставить("Ключ", ВыборкаДетальныеЗаписи.Ключ);
		НастройкаПодключения.Вставить("ЛогинДляЗагрузкиНСИ", ВыборкаДетальныеЗаписи.ЛогинДляЗагрузкиНСИ);
		НастройкаПодключения.Вставить("ПарольДляЗагрузкиНСИ", ВыборкаДетальныеЗаписи.ПарольДляЗагрузкиНСИ);
		НастройкаПодключения.Вставить("ИдентификаторХозяйствующегоСубъекта", ВыборкаДетальныеЗаписи.ИдентификаторХозяйствующегоСубъекта);
	КонецЕсли;
	
	Возврат НастройкаПодключения;
	
КонецФункции

Функция ПолучитьОрганизациюПоПредприятию(Предприятие) Экспорт 
	
	Организация = Справочники.Организации.ПустаяСсылка();
	Контрагент = ДМ_СлужебныйПривилегированный.ПолучитьКонтрагентаПоПредприятию(Предприятие);
	
	Если Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда 
		Возврат	Организация;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	НастройкиПодключенияКВетисAPI.Организация КАК Организация,
		|	НастройкиПодключенияКВетисAPI.АдресСервиса КАК АдресСервиса,
		|	НастройкиПодключенияКВетисAPI.ИдентификаторСервиса КАК ИдентификаторСервиса,
		|	НастройкиПодключенияКВетисAPI.Ключ КАК Ключ,
		|	НастройкиПодключенияКВетисAPI.ЛогинДляЗагрузкиНСИ КАК ЛогинДляЗагрузкиНСИ,
		|	НастройкиПодключенияКВетисAPI.ПарольДляЗагрузкиНСИ КАК ПарольДляЗагрузкиНСИ,
		|	НастройкиПодключенияКВетисAPI.ИдентификаторХозяйствующегоСубъекта КАК ИдентификаторХозяйствующегоСубъекта,
		|	НастройкиПодключенияКВетисAPI.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НастройкиПодключенияКВетисAPI КАК НастройкиПодключенияКВетисAPI
		|ГДЕ
		|	НЕ НастройкиПодключенияКВетисAPI.ПометкаУдаления
		|	И НастройкиПодключенияКВетисAPI.Контрагент = &Контрагент";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат	Организация;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Организация = ВыборкаДетальныеЗаписи.Организация;
		Если Предприятие.ДМ_Организация <> Организация Тогда
			ПредприятиеОбъект = Предприятие.ПолучитьОбъект();
			ПредприятиеОбъект.ДМ_Организация = Организация;
			ПредприятиеОбъект.Записать();
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции

