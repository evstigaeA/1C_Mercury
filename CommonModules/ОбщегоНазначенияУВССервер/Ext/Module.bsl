#Область СлужебныеПроцедурыИФункции

Функция ПолучитьДанныеДляЗаполненияПриходнойОперацииПоВСД(ВСД) Экспорт
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВСД.Организация КАК Организация,
	|	ВСД.КонтрагентОтправитель КАК КонтрагентОтправитель,
	|	ВСД.ПредприятиеОтправитель КАК ПредприятиеОтправитель,
	|	ВСД.КонтрагентПолучатель КАК КонтрагентПолучатель,
	|	ВСД.ПредприятиеПолучатель КАК ПредприятиеПолучатель,
	|	ВСД.ТипДокумента КАК ТипДокумента,
	|	ВСД.ТипТТН КАК ТипТТН,
	|	ВСД.ДатаТТН КАК ДатаТТН,
	|	ВСД.НомерТТН КАК НомерТТН,
	|	ВСД.СерияТТН КАК СерияТТН,
	|	ВСД.ФормаВСД КАК ФормаВСД,
	|	ВСД.ТипВСД КАК ТипВСД,
	|	ВСД.СерияВСД КАК СерияВСД,
	|	ВСД.БлагополучиеМестности КАК БлагополучиеМестности,
	|	ВСД.ВидПродукции КАК ВидПродукции,
	|	ВСД.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВСД.КоличествоМесяцевНахожденияЖивотныхНаТерриторииТС КАК КоличествоМесяцевНахожденияЖивотныхНаТерриторииТС,
	|	ВСД.НазначениеГруза КАК НазначениеГруза,
	|	ВСД.ОсобыеОтметки КАК ОсобыеОтметки,
	|	ВСД.ПериодНахожденияЖивотныхНаТерриторииТС КАК ПериодНахожденияЖивотныхНаТерриторииТС,
	|	ВСД.ПодвидПродукции КАК ПодвидПродукции,
	|	ВСД.Посредник КАК Посредник,
	|	ВСД.Продукция КАК Продукция,
	|	ВСД.СпособХраненияПриПеревозке КАК СпособХраненияПриПеревозке,
	|	ВСД.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВСД.ТипПродукции КАК ТипПродукции,
	|	ВСД.Транспорт КАК Транспорт,
	|	ВСД.ФорматДатыВыработки КАК ФорматДатыВыработки,
	|	ВСД.ДатаВыработкиНачало КАК ДатаВыработкиНачало,
	|	ВСД.ДатаВыработкиОкончание КАК ДатаВыработкиОкончание,
	|	ВСД.ДатаВыработкиСтрокой КАК ДатаВыработкиСтрокой,
	|	ВСД.ФорматСрокаГодности КАК ФорматСрокаГодности,
	|	ВСД.ДатаОкончанияСрокаГодностиНачало КАК ДатаОкончанияСрокаГодностиНачало,
	|	ВСД.ДатаОкончанияСрокаГодностиОкончание КАК ДатаОкончанияСрокаГодностиОкончание,
	|	ВСД.ДатаСрокаГодностиСтрокой КАК ДатаСрокаГодностиСтрокой,
	|	ВСД.Количество КАК Количество,
	|	ВСД.СкоропортящаясяПродукция КАК СкоропортящаясяПродукция,
	|	ВСД.НекачественныйГруз КАК НекачественныйГруз,
	|	ВСД.Продукция.Наименование КАК ПродукцияНаименование,
	|	ВСД.ПродукцияПроизводителя КАК ПродукцияПроизводителя,
	|	ВСД.НомерПартии КАК НомерПартии,
	|	ВСД.ПроводиласьВетсанэкспертиза КАК ПроводиласьВетсанэкспертиза,
	|	ВСД.ОсуществленКонтрольВрачом КАК ОсуществленКонтрольВрачом,
	|	ВСД.МестоПроведенияКарантинирования КАК МестоПроведенияКарантинирования,
	|	ВСД.СрокДействияКарантина КАК СрокДействияКарантина,
	|	ВСД.ДополнительныеСведенияОКарантинировании КАК ДополнительныеСведенияОКарантинировании,
	|	ВСД.ДатаКарантинирования КАК ДатаКарантинирования
	|ПОМЕСТИТЬ ВТ_ДанныеВСД
	|ИЗ
	|	Документ.ВСД КАК ВСД
	|ГДЕ
	|	ВСД.Ссылка = &ВСД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СоответствиеПродукцииНоменклатуреУчетнойСистемы.НоменклатураУчетнойСистемы КАК НоменклатураУчетнойСистемы
	|ПОМЕСТИТЬ ВТ_Соответствие
	|ИЗ
	|	РегистрСведений.СоответствиеПродукцииНоменклатуреУчетнойСистемы КАК СоответствиеПродукцииНоменклатуреУчетнойСистемы
	|ГДЕ
	|	СоответствиеПродукцииНоменклатуреУчетнойСистемы.Продукция В
	|			(ВЫБРАТЬ
	|				ВТ_ДанныеВСД.Продукция
	|			ИЗ
	|				ВТ_ДанныеВСД КАК ВТ_ДанныеВСД)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Соответствие.НоменклатураУчетнойСистемы КАК НоменклатураУчетнойСистемы,
	|	1 КАК Приоритет
	|ПОМЕСТИТЬ ВТ_СписокНайденнойНоменклатура
	|ИЗ
	|	ВТ_Соответствие КАК ВТ_Соответствие
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НоменклатураУчетнойСистемы.Ссылка,
	|	2
	|ИЗ
	|	Справочник.НоменклатураУчетнойСистемы КАК НоменклатураУчетнойСистемы
	|ГДЕ
	|	НоменклатураУчетнойСистемы.Наименование В
	|			(ВЫБРАТЬ
	|				ВТ_ДанныеВСД.ПродукцияНаименование
	|			ИЗ
	|				ВТ_ДанныеВСД КАК ВТ_ДанныеВСД)
	|	И НЕ НоменклатураУчетнойСистемы.Ссылка В
	|				(ВЫБРАТЬ
	|					ВТ_Соответствие.НоменклатураУчетнойСистемы
	|				ИЗ
	|					ВТ_Соответствие КАК ВТ_Соответствие)
	|	И НЕ НоменклатураУчетнойСистемы.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_НайденнаяНоменклатура.НоменклатураУчетнойСистемы КАК НоменклатураУчетнойСистемы,
	|	ВТ_НайденнаяНоменклатура.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ ВТ_НайденнаяНоменклатура
	|ИЗ
	|	ВТ_СписокНайденнойНоменклатура КАК ВТ_НайденнаяНоменклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет,
	|	НоменклатураУчетнойСистемы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеВСД.Организация КАК Организация,
	|	ВТ_ДанныеВСД.КонтрагентОтправитель КАК КонтрагентОтправитель,
	|	ВТ_ДанныеВСД.ПредприятиеОтправитель КАК ПредприятиеОтправитель,
	|	ВТ_ДанныеВСД.КонтрагентПолучатель КАК КонтрагентПолучатель,
	|	ВТ_ДанныеВСД.ПредприятиеПолучатель КАК ПредприятиеПолучатель,
	|	ВТ_ДанныеВСД.ТипДокумента КАК ТипДокумента,
	|	ВТ_ДанныеВСД.ТипТТН КАК ТипТТН,
	|	ВТ_ДанныеВСД.ДатаТТН КАК ДатаТТН,
	|	ВТ_ДанныеВСД.НомерТТН КАК НомерТТН,
	|	ВТ_ДанныеВСД.СерияТТН КАК СерияТТН,
	|	ВТ_ДанныеВСД.ФормаВСД КАК ФормаВСД,
	|	ВТ_ДанныеВСД.ТипВСД КАК ТипВСД,
	|	ВТ_ДанныеВСД.СерияВСД КАК СерияВСД,
	|	ВТ_ДанныеВСД.БлагополучиеМестности КАК БлагополучиеМестности,
	|	ВТ_ДанныеВСД.ВидПродукции КАК ВидПродукции,
	|	ВТ_ДанныеВСД.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТ_ДанныеВСД.КоличествоМесяцевНахожденияЖивотныхНаТерриторииТС КАК КоличествоМесяцевНахожденияЖивотныхНаТерриторииТС,
	|	ВТ_ДанныеВСД.НазначениеГруза КАК НазначениеГруза,
	|	ВТ_ДанныеВСД.ОсобыеОтметки КАК ОсобыеОтметки,
	|	ВТ_ДанныеВСД.ПериодНахожденияЖивотныхНаТерриторииТС КАК ПериодНахожденияЖивотныхНаТерриторииТС,
	|	ВТ_ДанныеВСД.ПодвидПродукции КАК ПодвидПродукции,
	|	ВТ_ДанныеВСД.Посредник КАК Посредник,
	|	ВТ_ДанныеВСД.Продукция КАК Продукция,
	|	ВТ_ДанныеВСД.СпособХраненияПриПеревозке КАК СпособХраненияПриПеревозке,
	|	ВТ_ДанныеВСД.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВТ_ДанныеВСД.ТипПродукции КАК ТипПродукции,
	|	ВТ_ДанныеВСД.Транспорт КАК Транспорт,
	|	ВТ_ДанныеВСД.ФорматДатыВыработки КАК ФорматДатыВыработки,
	|	ВТ_ДанныеВСД.ДатаВыработкиНачало КАК ДатаВыработкиНачало,
	|	ВТ_ДанныеВСД.ДатаВыработкиОкончание КАК ДатаВыработкиОкончание,
	|	ВТ_ДанныеВСД.ДатаВыработкиСтрокой КАК ДатаВыработкиСтрокой,
	|	ВТ_ДанныеВСД.ФорматСрокаГодности КАК ФорматСрокаГодности,
	|	ВТ_ДанныеВСД.ДатаОкончанияСрокаГодностиНачало КАК ДатаОкончанияСрокаГодностиНачало,
	|	ВТ_ДанныеВСД.ДатаОкончанияСрокаГодностиОкончание КАК ДатаОкончанияСрокаГодностиОкончание,
	|	ВТ_ДанныеВСД.ДатаСрокаГодностиСтрокой КАК ДатаСрокаГодностиСтрокой,
	|	ВТ_ДанныеВСД.Количество КАК Количество,
	|	ВТ_ДанныеВСД.СкоропортящаясяПродукция КАК СкоропортящаясяПродукция,
	|	ВТ_ДанныеВСД.НекачественныйГруз КАК НекачественныйГруз,
	|	ЕСТЬNULL(ВТ_НайденнаяНоменклатура.НоменклатураУчетнойСистемы, ЗНАЧЕНИЕ(Справочник.НоменклатураУчетнойСистемы.ПустаяСсылка)) КАК НоменклатураУчетнойСистемы,
	|	ВТ_ДанныеВСД.ПродукцияПроизводителя КАК ПродукцияПроизводителя,
	|	ВТ_ДанныеВСД.НомерПартии КАК НомерПартии,
	|	ВТ_ДанныеВСД.ПроводиласьВетсанэкспертиза КАК ПроводиласьВетсанэкспертиза,
	|	ВТ_ДанныеВСД.ОсуществленКонтрольВрачом КАК ОсуществленКонтрольВрачом,
	|	ВТ_ДанныеВСД.СрокДействияКарантина КАК СрокДействияКарантина,
	|	ВТ_ДанныеВСД.ДополнительныеСведенияОКарантинировании КАК ДополнительныеСведенияОКарантинировании,
	|	ВТ_ДанныеВСД.ДатаКарантинирования КАК ДатаКарантинирования,
	|	ВТ_ДанныеВСД.МестоПроведенияКарантинирования КАК МестоПроведенияКарантинирования
	|ИЗ
	|	ВТ_ДанныеВСД КАК ВТ_ДанныеВСД
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НайденнаяНоменклатура КАК ВТ_НайденнаяНоменклатура
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВСДТаблицаМаршрутСледования.Ссылка КАК Ссылка,
	|	ВСДТаблицаМаршрутСледования.НомерСтроки КАК НомерСтроки,
	|	ВСДТаблицаМаршрутСледования.ИдентификаторТочкиМаршрута КАК ИдентификаторТочкиМаршрута,
	|	ВСДТаблицаМаршрутСледования.ИнформацияОСледующемТранспорте КАК ИнформацияОСледующемТранспорте,
	|	ВСДТаблицаМаршрутСледования.НазваниеПункта КАК НазваниеПункта,
	|	ВСДТаблицаМаршрутСледования.ОсуществляетсяПерегрузка КАК ОсуществляетсяПерегрузка
	|ИЗ
	|	Документ.ВСД.ТаблицаМаршрутСледования КАК ВСДТаблицаМаршрутСледования
	|ГДЕ
	|	ВСДТаблицаМаршрутСледования.Ссылка = &ВСД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВСДПроизводителиПродукции.Ссылка КАК Ссылка,
	|	ВСДПроизводителиПродукции.НомерСтроки КАК НомерСтроки,
	|	ВСДПроизводителиПродукции.Производитель КАК Производитель,
	|	ВСДПроизводителиПродукции.РольПроизводителя КАК РольПроизводителя
	|ИЗ
	|	Документ.ВСД.ПроизводителиПродукции КАК ВСДПроизводителиПродукции
	|ГДЕ
	|	ВСДПроизводителиПродукции.Ссылка = &ВСД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВСДСписокФизическихУпаковок.Ссылка КАК Ссылка,
	|	ВСДСписокФизическихУпаковок.НомерСтроки КАК НомерСтроки,
	|	ВСДСписокФизическихУпаковок.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВСДСписокФизическихУпаковок.НаименованиеМаркировки КАК НаименованиеМаркировки,
	|	ВСДСписокФизическихУпаковок.ТипМаркировки КАК ТипМаркировки,
	|	ВСДСписокФизическихУпаковок.Упаковка КАК Упаковка,
	|	ВСДСписокФизическихУпаковок.УровеньУпаковки КАК УровеньУпаковки
	|ИЗ
	|	Документ.ВСД.СписокФизическихУпаковок КАК ВСДСписокФизическихУпаковок
	|ГДЕ
	|	ВСДСписокФизическихУпаковок.Ссылка = &ВСД";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВСД", ВСД);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Возврат Результат;
КонецФункции

Функция СоздатьОбъектСЛК(ИмяОбъекта)Экспорт 
	ПолноеИмяОбъекта = "ДанныеСЛК." + ИмяОбъекта;
	Серия = "C7F8";
	ОписаниеОшибки = "";
	
	ОбъектСЛК = слкМенеджерЗащиты.СоздатьОбъект(Серия, ПолноеИмяОбъекта, ОписаниеОшибки);
	
	Если ОбъектСЛК = Неопределено Тогда
		слкМенеджерЗащиты.СообщитьОбОшибкеСЛК(ОписаниеОшибки, Серия);
	КонецЕсли;
		
	Возврат ОбъектСЛК;
КонецФункции

Функция ВидСервераВетисAPI() Экспорт 
	Возврат Константы.ВидСервераВетисAPI.Получить();
КонецФункции

Функция НастройкаПодключенияКВетисAPI(Организация) Экспорт 
	НастройкаПодключения = Новый Структура;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	НастройкиПодключенияКВетисAPI.Организация,
		|	НастройкиПодключенияКВетисAPI.АдресСервиса,
		|	НастройкиПодключенияКВетисAPI.ИдентификаторСервиса,
		|	НастройкиПодключенияКВетисAPI.Ключ,
		|	НастройкиПодключенияКВетисAPI.ЛогинДляЗагрузкиНСИ,
		|	НастройкиПодключенияКВетисAPI.ПарольДляЗагрузкиНСИ,
		|	НастройкиПодключенияКВетисAPI.ИдентификаторХозяйствующегоСубъекта,
		|	НастройкиПодключенияКВетисAPI.Ссылка
		|ИЗ
		|	Справочник.НастройкиПодключенияКВетисAPI КАК НастройкиПодключенияКВетисAPI
		|ГДЕ
		|	НЕ НастройкиПодключенияКВетисAPI.ПометкаУдаления
		|	И НастройкиПодключенияКВетисAPI.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат	НастройкаПодключения;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		НастройкаПодключения.Вставить("Ссылка", ВыборкаДетальныеЗаписи.Ссылка);
		НастройкаПодключения.Вставить("Организация", ВыборкаДетальныеЗаписи.Организация);
		НастройкаПодключения.Вставить("АдресСервиса", ВыборкаДетальныеЗаписи.АдресСервиса);
		НастройкаПодключения.Вставить("ИдентификаторСервиса", ВыборкаДетальныеЗаписи.ИдентификаторСервиса);
		НастройкаПодключения.Вставить("Ключ", ВыборкаДетальныеЗаписи.Ключ);
		НастройкаПодключения.Вставить("ЛогинДляЗагрузкиНСИ", ВыборкаДетальныеЗаписи.ЛогинДляЗагрузкиНСИ);
		НастройкаПодключения.Вставить("ПарольДляЗагрузкиНСИ", ВыборкаДетальныеЗаписи.ПарольДляЗагрузкиНСИ);
		НастройкаПодключения.Вставить("ИдентификаторХозяйствующегоСубъекта", ВыборкаДетальныеЗаписи.ИдентификаторХозяйствующегоСубъекта);
	КонецЕсли;
	
	Возврат НастройкаПодключения
КонецФункции

Функция ПолучитьДатуПоследнейЗагрузкиНСИ(ВидОперации) Экспорт
	
	Возврат РегистрыСведений.ДатыПоследнихЗагрузокНСИ.ДатаПоследнейЗагрузки(ВидОперации);
	
КонецФункции

// Возвращает предприятия обслуживаемые текущим пользователем связанные с контрагентом.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - ссылка на переданную организацию;
//
//  ТребуетсяСписокЗначений - Булево - Истина, если требуется список значений;
//
//  Текст - Строка - по переданному тексту в наименовании будет установлен отбор;
//
// Возвращаемое значение:
//   Массив, СписокЗначений - массив или список значений с предприятиями в зависимости от переданного параметра "ТребуетсяСписокЗначений"
//
Функция ПолучитьПредприятияОбслуживаемыеТекущимПользователем(Организация, ТребуетсяСписокЗначений = Ложь, Текст = "") Экспорт
	
	Если ТребуетсяСписокЗначений Тогда
		ПредприятияПользователя = Новый СписокЗначений;
	Иначе
		ПредприятияПользователя = Новый Массив;
	КонецЕсли;

	ОграниченияПользователя = ИнтеграцияВетисAPIСервер.ПроверитьОграниченияПользователя(Организация,, Пользователи.ТекущийПользователь());
	
	Если ТипЗнч(ОграниченияПользователя) = Тип("Структура") Тогда
		
		Если ОграниченияПользователя.ЕстьПраваПоОрганизации Тогда
			
			Запрос = Новый Запрос;
			
			Если ОграниченияПользователя.ЕстьОграниченияПоПредприятиям Тогда
				
				Запрос.Текст =
					"ВЫБРАТЬ
					|	ТаблицаПредприятий.Предприятие КАК Предприятие
					|ИЗ
					|	РегистрСведений.ПредприятияОбслуживаемыеПользователем.СрезПоследних(
					|			,
					|			Организация = &Организация
					|				И Пользователь = &Пользователь) КАК ТаблицаПредприятий
					|ГДЕ
					|	ТаблицаПредприятий.Используется";
				
			Иначе
				
				Запрос.Текст =
					"ВЫБРАТЬ
					|	ТаблицаПредприятий.Предприятие КАК Предприятие
					|ИЗ
					|	РегистрСведений.СвязиМеждуКонтрагентамиИПредприятиями КАК ТаблицаПредприятий
					|ГДЕ
					|	ТаблицаПредприятий.Контрагент В
					|			(ВЫБРАТЬ ПЕРВЫЕ 1
					|				НастройкиПодключенияКВетисAPI.Контрагент КАК Контрагент
					|			ИЗ
					|				Справочник.НастройкиПодключенияКВетисAPI КАК НастройкиПодключенияКВетисAPI
					|			ГДЕ
					|				НастройкиПодключенияКВетисAPI.Организация = &Организация
					|				И НЕ НастройкиПодключенияКВетисAPI.ПометкаУдаления)";
				
			КонецЕсли;
			
			Если Текст <> "" Тогда
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ", "ВЫБРАТЬ ПЕРВЫЕ 50");
				Запрос.Текст = Запрос.Текст + "   И ТаблицаПредприятий.Предприятие.Наименование ПОДОБНО &Текст";
				Запрос.УстановитьПараметр("Текст", "%" + Текст + "%");
				
			КонецЕсли;
			
			Запрос.УстановитьПараметр("Организация" , Организация);
			Запрос.УстановитьПараметр("Пользователь", ОграниченияПользователя.ПользовательМеркурия);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ПредприятияПользователя.Добавить(Выборка.Предприятие);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПредприятияПользователя;
КонецФункции

Функция КонтрагентПоОрганизации(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиПодключенияКВетисAPI.Организация,
		|	НастройкиПодключенияКВетисAPI.Контрагент
		|ИЗ
		|	Справочник.НастройкиПодключенияКВетисAPI КАК НастройкиПодключенияКВетисAPI
		|ГДЕ
		|	НЕ НастройкиПодключенияКВетисAPI.ПометкаУдаления
		|	И НастройкиПодключенияКВетисAPI.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Контрагент;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСвойстваПродукции(Продукция) Экспорт
	
	Возврат Новый Структура("ТипПродукции, ВидПродукции, ПодвидПродукции", Продукция.Владелец.Владелец.Владелец, Продукция.Владелец.Владелец, Продукция.Владелец);
	
КонецФункции

Функция ОрганизацияТекущегоПользователя() Экспорт
	Возврат ПараметрыСеанса.ТекущийПользователь.ОсновнаяОрганизация;
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Процедура, вызываемая из обработчиков событий форм объектов
//
// Параметры:
//  Форма	 - УправляемаяФорма	 - форма, из обработчика события которой происходит вызов процедуры.
//
Процедура УстановитьУсловноеОформлениеНеИспользуемыхЭлементов(Форма) Экспорт
	
	УсловноеОформление = Форма.Список.УсловноеОформление;
	УсловноеОформление.Элементы.Очистить();
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НеИспользуется");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
КонецПроцедуры

// Процедура, вызываемая из обработчиков событий форм объектов
//
// Параметры:
//  Форма	 - УправляемаяФорма	 - форма, из обработчика события которой происходит вызов процедуры.
//
Процедура УстановитьУсловноеОформлениеСопоставленныхЭлементовЭлементов(Форма) Экспорт
	
	УсловноеОформление = Форма.Список.УсловноеОформление;
	УсловноеОформление.Элементы.Очистить();
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Сопоставлен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.РезультатУспехЦвет);
	
КонецПроцедуры

// Функция проверяет корректность адреса
//
// Параметры:
//  Объект			 - ОбъектМетаданных	 - объект, из которого происходит вызов функции.
//  ВидКИ			 - СправочникСсылка	 - ссылка на справочник ВидыКонтактнойИнформации.
//  ТекстСообщения	 - Строка			 - текст сообщения для пользователя
// 
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция ПроверитьКорректностьАдреса(Объект, ВидКИ, ТекстСообщения) Экспорт
	
	ИспользуетсяКраткийАдрес = ВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента
						ИЛИ ВидКИ = Справочники.ВидыКонтактнойИнформации.АдресПунктаПерегрузки;
	
	ТекстСообщения = "";
	
	Отбор  = Новый Структура("Вид", ВидКИ);
	Строки = Объект.КонтактнаяИнформация.НайтиСтроки(Отбор);
	Если Строки.Количество() = 0  Тогда
		ТекстСообщения = НСтр("ru = 'Не указан адрес.'");
		Возврат Ложь;
	КонецЕсли;
	XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(Строки[0].ЗначенияПолей, ВидКИ);
		
	СоставАдреса = XDTOКонтактная.Состав;
	Если СоставАдреса.Состав = Неопределено Тогда
		Если ИспользуетсяКраткийАдрес Тогда
			ТекстСообщения = НСтр("ru = 'Не корректно указан адрес. Как минимум необходимо указать регион адреса.'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Не корректно указан адрес. Как минимум необходимо указать регион адреса, а так же населенный пункт или улицу.'");
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СоставАдреса.Состав.IDРегион) Тогда
		ТекстСообщения = НСтр("ru = 'Не корректно указан регион адреса.'");
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ИспользуетсяКраткийАдрес Тогда
		Если Не ЗначениеЗаполнено(СоставАдреса.Состав.IDНаселенныйПункт) И Не ЗначениеЗаполнено(СоставАдреса.Состав.IDГород) И Не ЗначениеЗаполнено(СоставАдреса.Состав.IDУлица) Тогда
			ТекстСообщения = НСтр("ru = 'Должны быть указаны или город, или населенный пункт или улица.'");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

// Процедура добававляет элемент адрес на форму списка выбора
//
// Параметры:
//  ЭтаФорма - УправляемаяФорма	 - форма, из обработчика события которой происходит вызов процедуры.
//  ИмяПоля	 - Строка			 - 
//
Процедура ДобавитьЭлементАдресНаФормуСпискаВыбора(ЭтаФорма, ИмяПоля) Экспорт
	Элементы = ЭтаФорма.Элементы;
	ЭлементАдрес = Элементы.Найти("СписокСсылкаАдрес");
	Если ЭлементАдрес = Неопределено Тогда
		ЭлементАдрес = Элементы.Добавить("СписокСсылкаАдрес", Тип("ПолеФормы"), Элементы.Список);
		ЭлементАдрес.ПутьКДанным = "Список.Ссылка.[" + ИмяПоля + "]";
	КонецЕсли;	
КонецПроцедуры	

#КонецОбласти

#Область Подсистемы

// Добавляет подсистему в коллекцию.
//
// Параметры:
//	Коллекция - Массив или СписокЗначений - коллекция, куда добавляется подсистема из метаданных
//	ИмяПодсистемы - Строка - имя подсистемы
//		подчиненные подсистемы разделяются ".",	служебные слова "Подсистема" или "Подсистемы" указывать не нужно
//	Представление - Строка - представление подсистемы (для списка значений)
//
Процедура ДобавитьПодсистемуВКоллекцию(Коллекция, ИмяПодсистемы, Представление = "") Экспорт
	
	Подсистема = ПодсистемаПоИмени(ИмяПодсистемы);
	Если Подсистема = Неопределено Тогда
		Возврат; // нет такой подсистемы в метаданных
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Представление) Тогда
		Коллекция.Добавить(Подсистема, Представление);
	Иначе
		Коллекция.Добавить(Подсистема);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает метаданные подсистемы по ее имени.
//
// Параметры:
//	ИмяПодсистемы - Строка - имя подсистемы
//		подчиненные подсистемы разделяются ".",	служебные слова "Подсистема" или "Подсистемы" указывать не нужно
//
// Возвращаемое значение:
//	Объект метаданных - метаданные подсистемы или Неопределено, если подсистемы с таким именем не существует
//
Функция ПодсистемаПоИмени(ИмяПодсистемы) Экспорт
	
	ПолноеИмяПодсистемы = Сред(СтрЗаменить("." + ИмяПодсистемы, ".", ".Подсистема."), 2);
	
	Возврат Метаданные.НайтиПоПолномуИмени(ПолноеИмяПодсистемы);
	
КонецФункции

#КонецОбласти