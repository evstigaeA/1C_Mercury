
// Выполняет регистрацию события в альтернативном журнале регистрации
//
// Параметры:
//	пДанныеЗаписи  - ДокументСсылка, СправочникСсылка - ссылка на данные, связанные с событием
//	пСобытиеИмя - СправочникСсылка.ДМ_СобытияЖурналаРегистрации - Тип события
//	пУровеньЖурнала - ПеречислениеСсылка.ДМ_УровниЖурнала - Уровень важности события журнала регистрации.
//	пОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных, Строка - Объект метаданных, к которому относится событие.
//	пДанныеПредставление - Строка - Представление объекта данных, к которому относится событие.
//  пОписаниеСобытия  - Строка - Произвольная строка комментария к событию
//
Процедура ЗарегистрироватьСобытие( 
	пДанныеЗаписи = Неопределено, 
	пСобытиеИмя = Неопределено, 
	пУровеньЖурнала = Неопределено, 
	пОбъектМетаданных = Неопределено,
	пДанныеПредставление = Неопределено,
	пОписаниеСобытия = Неопределено
	) Экспорт

	РегистрыСведений.ДМ_СтрокиЗаписейЖурналаРегистрации.ЗарегистрироватьСобытие( 
		пДанныеЗаписи,
		пСобытиеИмя,
		пУровеньЖурнала, 
		пОбъектМетаданных, 
		пДанныеПредставление,
		пОписаниеСобытия
 	);

КонецПроцедуры // ЗарегистрироватьСобытие()

// Выполняет установку значения реквизита КодСостояния в предопределенном элементе справочника ДМ_КонтролируемыеПоказатели
//
// Параметры:
//  пИмяЭлемента  - Строка - имя предопределенного элемента справочника ДМ_КонтролируемыеПоказатели, как
//                 оно задано в конфигураторе
//  пКодСостояния  - Число(1,0) - значение реквизита КодСостояния:
//                 0 - неопределено
//                 1 - успех
//                 2 - предупреждение
//                 3 - ошибка
//
Процедура УстановитьКодСостоянияПоказателя( пИмяЭлемента, пКодСостояния, пОписаниеОшибки="" ) Экспорт

	лСправочник = Справочники.ДМ_КонтролируемыеПоказатели[пИмяЭлемента].ПолучитьОбъект();
	лСправочник.Заблокировать();
	лСправочник.КодСостояния = пКодСостояния;
	лСправочник.ОписаниеОшибки = пОписаниеОшибки;
	лСправочник.Записать();
	лСправочник.Разблокировать();

КонецПроцедуры // УстановитьКодСостоянияПоказателя()

// Выполняет регистрацию ошибки выполнения регламентного задания
//
// Параметры:
//  пИмяРегламентногоЗадания  - Строка - имя регламентного задания, как
//                 оно задано в конфигураторе
//  пОписаниеОшибки  - Строка - описание ошибки
//  пПараметрыЗадания  - Структура - структура параметров метода
//                 регламентного задания
//
Процедура ЗарегистрироватьОшибкуВыполненияРегЗадания( пИмяРегламентногоЗадания, пОписаниеОшибки, пПараметрыЗадания=Неопределено ) Экспорт

	УстановитьКодСостоянияПоказателя( пИмяРегламентногоЗадания, 3, пОписаниеОшибки );
	ОбновитьФайлИндикатор( пИмяРегламентногоЗадания );

КонецПроцедуры // ЗарегистрироватьОшибкуВыполненияРегЗадания()

// Выполняет регистрацию успешного выполнения регламентного задания
//
// Параметры:
//  пИмяРегламентногоЗадания  - Строка - имя регламентного задания, как
//                 оно задано в конфигураторе
//
Процедура ЗарегистрироватьУспешноеВыполнениеРегЗадания( пИмяРегламентногоЗадания ) Экспорт

	УстановитьКодСостоянияПоказателя( пИмяРегламентногоЗадания, 1 );
	ОбновитьФайлИндикатор( пИмяРегламентногоЗадания );

КонецПроцедуры // ЗарегистрироватьУспешноеВыполнениеРегЗадания()

Процедура МониторингПоказателей() Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ДМ_МониторингПоказателей);
	ОписаниеОшибки = "";
	ВидСообщения = НСтр("ru = 'Данон-Меркурий. Мониторинг показателей.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
	Если НЕ СистемнаяУчетнаяЗаписьНастроена(ОписаниеОшибки) Тогда
		ЗаписьЖурналаРегистрации(ВидСообщения, УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегламентныеЗадания.ДМ_МониторингПоказателей,, ОписаниеОшибки);
		ЗарегистрироватьОшибкуВыполненияРегЗадания( "ДМ_МониторингПоказателей", ОписаниеОшибки );
		ВызватьИсключение(ОписаниеОшибки);
	КонецЕсли;

	ДатаУведомления = ТекущаяДатаСеанса();
	ДатаПоследнегоУведомления = Константы.ДМ_ДатаУведомленияОНовыхПроблемах.Получить();
	
	// Если оповещение ранее не производилось, или последнее оповещение происходило
	// ранее, чем за сутки, то отбираем проблемные показатели за последние сутки.
	Если (ДатаПоследнегоУведомления = '00010101000000') 
		Или (ДатаУведомления - ДатаПоследнегоУведомления > 24*60*60) Тогда
		ДатаПоследнегоУведомления = ДатаУведомления - 24*60*60;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ВидСообщения, УровеньЖурналаРегистрации.Информация,,,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Начато регламентное уведомление о проблемных показателях за период %1 - %2'"),
		ДатаПоследнегоУведомления, ДатаУведомления));
	
	ПроблемныеПоказатели = ВыбратьПроблемныеПоказатели(ДатаПоследнегоУведомления, ДатаУведомления);
	
	Для Каждого Строка Из ПроблемныеПоказатели.Строки Цикл
		ОтправитьУведомлениеОПроблемныхПоказателях(Строка);
	КонецЦикла;
	
	Константы.ДМ_ДатаУведомленияОНовыхПроблемах.Установить(ДатаУведомления);
	
	ЗаписьЖурналаРегистрации(ВидСообщения, УровеньЖурналаРегистрации.Информация,,,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Завершено регламентное уведомление о проблемных показателях (уведомлено исполнителей: %1)'"),
		ПроблемныеПоказатели.Строки.Количество()));
		
	ЗарегистрироватьУспешноеВыполнениеРегЗадания( "ДМ_МониторингПоказателей" )
	
КонецПроцедуры

Функция СистемнаяУчетнаяЗаписьНастроена(ОписаниеОшибки)
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		ОписаниеОшибки = НСтр("ru = 'Отправка почты не предусмотрена в программе.'");
	Иначе
		МодульРаботаСПочтовымиСообщениями = ОбщегоНазначения.ОбщийМодуль("РаботаСПочтовымиСообщениями");
		Если МодульРаботаСПочтовымиСообщениями.УчетнаяЗаписьНастроена(МодульРаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись(), Истина, Ложь) Тогда
			Возврат Истина;
		КонецЕсли;
		ОписаниеОшибки = НСтр("ru = 'Системная учетная запись электронной почты не настроена для отправки.'");
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

Функция ВыбратьПроблемныеПоказатели(Знач ДатаВремяОт, Знач ДатаВремяПо)
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДМ_КонтролируемыеПоказатели.Ссылка КАК Ссылка,
		|	ДМ_КонтролируемыеПоказатели.Наименование КАК Наименование,
		|	ДМ_КонтролируемыеПоказатели.ДатаСостояния КАК ДатаСостояния,
		|	ДМ_КонтролируемыеПоказатели.ОписаниеОшибки КАК ОписаниеОшибки,
		|	ДМ_КонтролируемыеПоказатели.УровеньВложенности КАК УровеньВложенности,
		|	ДМ_КонтролируемыеПоказатели.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
		|	ДМ_КонтролируемыеПоказатели.ПолныйКодЭлемента КАК ПолныйКодЭлемента,
		|	ВложенныйЗапрос.ЭлПочта КАК ЭлПочта,
		|	ВложенныйЗапрос.Пользователь КАК Пользователь,
		|	ДМ_КонтролируемыеПоказатели.ДатаИзмененияСостояния КАК ДатаИзмененияСостояния
		|ИЗ
		|	Справочник.ДМ_КонтролируемыеПоказатели КАК ДМ_КонтролируемыеПоказатели,
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ДМ_ГруппыОтветственныхПользователи.ЭлПочта КАК ЭлПочта,
		|		МАКСИМУМ(ВЫБОР
		|				КОГДА ДМ_ГруппыОтветственныхПользователи.Физлицо ССЫЛКА Справочник.Пользователи
		|					ТОГДА ДМ_ГруппыОтветственныхПользователи.Физлицо.Наименование
		|				ИНАЧЕ ДМ_ГруппыОтветственныхПользователи.Физлицо
		|			КОНЕЦ) КАК Пользователь
		|	ИЗ
		|		Справочник.ДМ_ГруппыОтветственных.Пользователи КАК ДМ_ГруппыОтветственныхПользователи
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ДМ_ГруппыОтветственныхПользователи.ЭлПочта) КАК ВложенныйЗапрос
		|ГДЕ
		|	ДМ_КонтролируемыеПоказатели.ПометкаУдаления = ЛОЖЬ
		|	И ДМ_КонтролируемыеПоказатели.ДатаИзмененияСостояния МЕЖДУ &ДатаВремяОт И &ДатаВремяПо
		|	И ДМ_КонтролируемыеПоказатели.КодСостояния = 3
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПолныйКодЭлемента,
		|	УровеньВложенности,
		|	ДатаСостояния,
		|	Наименование
		|ИТОГИ
		|	МАКСИМУМ(Пользователь)
		|ПО
		|	ЭлПочта";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("ДатаВремяОт", ДатаВремяОт + 1);
	Запрос.Параметры.Вставить("ДатаВремяПо", ДатаВремяПо);
	Результат = Запрос.Выполнить().Выгрузить( ОбходРезультатаЗапроса.ПоГруппировкам );
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьУведомлениеОПроблемныхПоказателях(СтрокаПолучателяУведомления)
	
	ВидСообщения = НСтр("ru = 'Данон-Меркурий. Мониторинг показателей.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ПочтовыйАдресПолучателя = СтрокаПолучателяУведомления.ЭлПочта;
	Если ПустаяСтрока(ПочтовыйАдресПолучателя) Тогда
		ЗаписьЖурналаРегистрации(
			ВидСообщения, 
			УровеньЖурналаРегистрации.Информация,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Уведомление не отправлено, так как не указан почтовый адрес у пользователя %1.'"), СтрокаПолучателяУведомления.Пользователь));
		Возврат Ложь;
	КонецЕсли;
	
	ТекстПисьма = "";
	Для Каждого Показатель Из СтрокаПолучателяУведомления.Строки Цикл
		ТекстПисьма = ТекстПисьма + СформироватьПредставлениеПоказателя(Показатель);
	КонецЦикла;
	ТемаПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Уведомление о проблемах обмена с Меркурием - %1'"), Метаданные.КраткаяИнформация);
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
	ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
	ПараметрыПисьма.Вставить("Кому", ПочтовыйАдресПолучателя);
	
	МодульРаботаСПочтовымиСообщениями = ОбщегоНазначения.ОбщийМодуль("РаботаСПочтовымиСообщениями");
	Попытка 
		МодульРаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(
			МодульРаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись(), ПараметрыПисьма);
	Исключение
		ЗаписьЖурналаРегистрации(ВидСообщения, 
			УровеньЖурналаРегистрации.Ошибка,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при отправке уведомления о проблемных показателях: %1'"), 
			   ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		Возврат Ложь;
	КонецПопытки;

	ЗаписьЖурналаРегистрации(ВидСообщения,
		УровеньЖурналаРегистрации.Информация,,,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Уведомление успешно отправлено на адрес %1.'"), ПочтовыйАдресПолучателя));
	Возврат Истина;	
		
КонецФункции

Функция СформироватьПредставлениеПоказателя(ЗадачаСтруктура)
	
	Результат = "";
	лОтступ0 = СтроковыеФункцииКлиентСервер.ДополнитьСтроку( "!", ЗадачаСтруктура.УровеньВложенности*3, "-", "Справа" );
	лОтступ = СтроковыеФункцииКлиентСервер.ДополнитьСтроку( "!", ЗадачаСтруктура.УровеньВложенности*3, " ", "Справа" );
	
	Результат = Результат + лОтступ + ЗадачаСтруктура.Наименование + Символы.ПС;
	Результат = Результат + лОтступ + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Дата изменения состояния: %1'"),
		Формат(ЗадачаСтруктура.ДатаИзмененияСостояния, "ДП='не указана'")) + Символы.ПС;
	Если ЗначениеЗаполнено(ЗадачаСтруктура.ОписаниеОшибки) Тогда
		Результат = Результат + лОтступ + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Описание ошибки:
			|%1'"), ЗадачаСтруктура.ОписаниеОшибки) + Символы.ПС;
	КонецЕсли;
	Возврат Результат + СтроковыеФункцииКлиентСервер.ДополнитьСтроку( "!", 60, "-", "Справа" ) + Символы.ПС;
	
КонецФункции

// Выполняет обновление файла-индикатора в служебном каталоге
//
// Параметры:
//  пИмяРегламентногоЗадания  - Строка - имя регламентного задания, как
//                 оно задано в конфигураторе
//
Процедура ОбновитьФайлИндикатор( пИмяРегламентногоЗадания )

	лПутьКСлужебнымФайлам = ДМ_ВызовСервераПовтИсп.КаталогСлужебныхФайлов();
	Если Не ПустаяСтрока(лПутьКСлужебнымФайлам) Тогда
	
		лИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла( лПутьКСлужебнымФайлам, "LED.txt" );
		
		Попытка
			лФайл = Новый Файл(лИмяФайла);
			Если лФайл.Существует() Тогда
				УдалитьФайлы( лИмяФайла );
			КонецЕсли;
			лТекстовыйДокумент = Новый ТекстовыйДокумент;
			лТекстовыйДокумент.ДобавитьСтроку( "" + Формат(ТекущаяДата(),"ДФ='yyyy-MM-dd HH:mm:ss'") + " - " + пИмяРегламентногоЗадания );
			лТекстовыйДокумент.Записать( лИмяФайла, КодировкаТекста.UTF8 );
		Исключение
			лОписаниеОшибки = ОписаниеОшибки();
			
			ВидСообщения = НСтр("ru = 'Данон-Меркурий. Индикатор работы системы.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(ВидСообщения, УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегламентныеЗадания[пИмяРегламентногоЗадания],, лОписаниеОшибки);
			Возврат;
		КонецПопытки;
	
	КонецЕсли;

КонецПроцедуры // ОбновитьФайлИндикатор()

// Осуществляет поиск элемента по значению реквизита.
// Помеченные на удаление элементы не участвуют в поиске.
// Если существует несколько элементов с указанным значением реквизита, то будет найден только один из них,
// у которого минимальное значение поля "ВерсияДанных"
//
// Параметры:
//  ИмяСправочника     - Строка - Имя справочника, как оно задано в конфигураторе, в котором осуществляется поиск.
//  ИмяРеквизита       - Строка - Имя реквизита, как он задан в конфигураторе, по значению которого осуществляется поиск.
//  ЗначениеРеквизита  - Произвольный - Значение реквизита, по которому должен выполняться поиск.
//  Родитель		   - СправочникСсылка.<Имя справочника> - Родитель, в пределах которого нужно выполнять поиск.
//								Если не указан, то поиск будет проводиться во всем справочнике.
//  Владелец		   - СправочникСсылка.<Имя справочника> - Владелец, в пределах которого нужно выполнять поиск.
//								Если не указан, то поиск будет проводиться во всем справочнике.
//
// Возвращаемое значение:
//  СправочникСсылка.<Имя справочника> - Ссылка на найденный элемент справочника. Если не существует ни одного элемента
//							с требуемым значением реквизита, то будет возвращена пустая ссылка.
//
Функция НайтиЭлементСправочникаПоРеквизиту( Знач ИмяСправочника, Знач ИмяРеквизита, Знач ЗначениеРеквизита, Родитель=Неопределено, Владелец=Неопределено ) Экспорт

	Если ПустаяСтрока(ИмяСправочника) Тогда 
		ВызватьИсключение НСтр("ru = 'Неверный первый параметр ИмяСправочника: 
		                             |- Имя справочника должно быть заполнено'");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяРеквизита) Тогда 
		ВызватьИсключение НСтр("ru = 'Неверный второй параметр ИмяРеквизита: 
		                             |- Имя реквизита должно быть заполнено'");
	КонецЕсли;
	
	лЗапрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	тСправочник.Ссылка КАК Ссылка,
	|	тСправочник.ВерсияДанных КАК ВерсияДанных
	|ИЗ
	|	Справочник.Валюты КАК тСправочник
	|ГДЕ
	|	тСправочник.ПометкаУдаления = ЛОЖЬ
	|	И тСправочник.ИмяПредопределенныхДанных = &ЗначениеРеквизита
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВерсияДанных"
	);
	лЗапрос.Текст = СтрЗаменить( лЗапрос.Текст, "Валюты", ИмяСправочника );
	лЗапрос.Текст = СтрЗаменить( лЗапрос.Текст, "ИмяПредопределенныхДанных", ИмяРеквизита );
	лЗапрос.УстановитьПараметр( "ЗначениеРеквизита", ЗначениеРеквизита );
	Если Родитель <> Неопределено Тогда
	
		лЗапрос.Текст = лЗапрос.Текст + "
		|	И тСправочник.Родитель = &Родитель";
		лЗапрос.УстановитьПараметр("Родитель", Родитель);
	
	КонецЕсли;
	Если Владелец <> Неопределено Тогда
	
		лЗапрос.Текст = лЗапрос.Текст + "
		|	И тСправочник.Владелец = &Владелец";
		лЗапрос.УстановитьПараметр("Владелец", Владелец);
	
	КонецЕсли;
	
	лРезультат = лЗапрос.Выполнить();
	Если лРезультат.Пустой() Тогда
	
		Возврат Справочники[ИмяСправочника].ПустаяСсылка();
	
	Иначе
	
		лВыборка = лРезультат.Выбрать();
		лВыборка.Следующий();
		Возврат лВыборка.Ссылка;
	
	КонецЕсли;

КонецФункции // НайтиЭлементСправочникаПоРеквизиту()

Процедура ОтправитьУведомлениеНаEmail(пПараметрыПисьма) Экспорт
	
	Если ТипЗнч(пПараметрыПисьма) = Тип("Структура") Тогда
 		пПараметрыПисьма.Вставить( "УдачнаяОтправка", Истина);
	КонецЕсли;
	
	лОписание = "";
	СистемнаяУчетнаяЗаписьНастроена(лОписание);
	Если лОписание <> "" Тогда
		пПараметрыПисьма.Вставить("УдачнаяОтправка",Ложь);
		пПараметрыПисьма.Вставить("ОписаниеОшибки",лОписание);		
		Возврат;
	КонецЕсли;
	
	Тема = пПараметрыПисьма.Тема;
	Получатель = пПараметрыПисьма.Получатель;
	Текст = пПараметрыПисьма.Текст;
	
	
	
	//Тема = лТема;
	//Тема = СтрЗаменить(Тема, "_", " ");
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Тема", Тема);
	ПараметрыПисьма.Вставить("Тело", Текст);
	Если пПараметрыПисьма.Свойство("ТипТекста") Тогда
		ПараметрыПисьма.Вставить("ТипТекста", пПараметрыПисьма.ТипТекста);
	Иначе
		ПараметрыПисьма.Вставить("ТипТекста","HTML");
	КонецЕсли;
	
	Если пПараметрыПисьма.Свойство("Вложения") Тогда
		ПараметрыПисьма.Вставить("Вложения", пПараметрыПисьма.Вложения);
	КонецЕсли;
	
	Если ТипЗнч(Получатель) = Тип("Строка") Тогда
		лАдрес = Получатель;
	Иначе
		Если Получатель = Справочники.Пользователи.ПустаяСсылка() Тогда
			ТекушийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
			ПользовательСсылка = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ",ТекушийПользователь.УникальныйИдентификатор);
		Иначе
			ПользовательСсылка = Получатель;
		КонецЕсли;	
		
		лАдрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ПользовательСсылка,Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	КонецЕсли;
	
	ПараметрыПисьма.Вставить("Кому", лАдрес);
	
	Если ТипЗнч(пПараметрыПисьма) = Тип("Структура") Тогда
		пПараметрыПисьма.Вставить( "УдачнаяОтправкаАдрес", лАдрес);
	КонецЕсли;
 
	Попытка
		УстановитьПривилегированныйРежим( Истина );
		РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(
		РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись(),
		ПараметрыПисьма
		);
		УстановитьПривилегированныйРежим( Ложь );
		ТекстСообщения = "ru = 'Сообщение отправлено: %1.'; en = 'Message sent: %1.'";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", лАдрес); 
		#Если Не ВнешнееСоединение Тогда
			Сообщить(НСтр(ТекстСообщения)); 
		#КонецЕсли
	Исключение
		лОшибка = ОписаниеОшибки();
		#Если Не ВнешнееСоединение Тогда
			Сообщить(лОшибка); 
		#КонецЕсли
		Если ТипЗнч(пПараметрыПисьма) = Тип("Структура") Тогда
			пПараметрыПисьма.Вставить( "УдачнаяОтправка", Ложь);
			пПараметрыПисьма.Вставить( "ОписаниеОшибки",лОшибка);
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры

// Возвращает номер планта основной организации текущего пользователя системы
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//   Строка   - номер планта основной организации текущего пользователя системы
//
Функция НомеПлантаТекущегоПользователя() Экспорт

	//УСТАРЕЛА
	
	лТекущийПользователь = Пользователи.ТекущийПользователь();
	лЗапрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Пользователи.ОсновнаяОрганизация.ДМ_КодSAP КАК НомерПланта
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка = &ТекущийПользователь"
	);
	лЗапрос.УстановитьПараметр("ТекущийПользователь", лТекущийПользователь);
	лРезультат = лЗапрос.Выполнить();
	Если лРезультат.Пустой() Тогда
	
		Возврат "";
	
	Иначе
	
		лВыборка = лРезультат.Выбрать();
		лВыборка.Следующий();
		Возврат лВыборка.НомерПланта;
	
	КонецЕсли;

КонецФункции // НомеПлантаТекущегоПользователя()

// Возвращает список предприятий доступных пользователю
Функция МассивПредприятийТекущегоПользователя() Экспорт

	мПред = Новый Массив;
	СтрОтвета = Новый Структура;
	лТекущийПользователь = Пользователи.ТекущийПользователь();
	Если лТекущийПользователь.ПользовательСистемыМеркурий.Пустая() Тогда
		СтрОтвета.Вставить("ДоступныВсеПредприятия",Ложь);
		СтрОтвета.Вставить("мПред",мПред);
		Возврат СтрОтвета;
	ИначеЕсли Не лТекущийПользователь.ПользовательСистемыМеркурий.НеИспользуетсяПриОбмене Тогда
		СтрОтвета.Вставить("ДоступныВсеПредприятия",Истина);
		СтрОтвета.Вставить("мПред",мПред);
		Возврат СтрОтвета;
	Иначе
		СтрОтвета.Вставить("ДоступныВсеПредприятия",Ложь);
	КонецЕсли;
	
	лЗапрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПредприятияОбслуживаемыеПользователемСрезПоследних.Предприятие КАК Предприятие
	|ИЗ
	|	РегистрСведений.ПредприятияОбслуживаемыеПользователем.СрезПоследних КАК ПредприятияОбслуживаемыеПользователемСрезПоследних
	|ГДЕ
	|	ПредприятияОбслуживаемыеПользователемСрезПоследних.Пользователь = &ТекущийПользователь
	|	И ПредприятияОбслуживаемыеПользователемСрезПоследних.Используется = ИСТИНА"
	);
	лЗапрос.УстановитьПараметр("ТекущийПользователь", лТекущийПользователь.ПользовательСистемыМеркурий);
	лРезультат = лЗапрос.Выполнить();
	Если Не лРезультат.Пустой() Тогда
		СтрОтвета.Вставить("мПред",лРезультат.Выгрузить().ВыгрузитьКолонку("Предприятие"));
	КонецЕсли;
	
	Возврат СтрОтвета;

КонецФункции // НомеПлантаТекущегоПользователя()


// Возвращает организацию по номеру планта Предприятия
//
// Параметры:
//  Предприятие (ссылка на элемент)
//
// Возвращаемое значение:
//   Ссылка на организацию
//
Функция ПолучитьОрганизациюПоПредприятию(Предприятие) Экспорт
	
	ИскОрганизация = Справочники.Организации.ПустаяСсылка();
	Если Предприятие <> Справочники.Предприятия.ПустаяСсылка() Тогда 
		Если Не ЗначениеЗаполнено(Предприятие.ДМ_Организация) Тогда 
			Если Не ПустаяСтрока(Предприятие.ДМ_НомерПланта) Тогда
				лЗапрос = Новый Запрос(
				"ВЫБРАТЬ
				|	Организации.Ссылка КАК Организация
				|ИЗ
				|	Справочник.Организации КАК Организации
				|ГДЕ
				|	Организации.ДМ_КодSAP = &ДМ_КодSAP
				|	И Организации.ПометкаУдаления = ЛОЖЬ");
				
				лЗапрос.УстановитьПараметр("ДМ_КодSAP", Предприятие.ДМ_НомерПланта);
				лВыборка = лЗапрос.Выполнить().Выбрать();
				Если лВыборка.Следующий() Тогда
					ИскОрганизация = лВыборка.Организация;
					ПредприятиеОбъект = Предприятие.ПолучитьОбъект();
					ПредприятиеОбъект.ДМ_Организация = ИскОрганизация;
					ПредприятиеОбъект.Записать();
				КонецЕсли;
			КонецЕсли;
		Иначе
			ИскОрганизация = Предприятие.ДМ_Организация;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИскОрганизация;
	
КонецФункции // ПолучитьОрганизациюПоПредприятию()

// Возвращает предприятие по номеру планта организации
//
// Параметры:
//  Организация (ссылка на элемент)
//
// Возвращаемое значение:
//   Ссылка на Предприятие
//
Функция ПолучитьПредприятиеПоОрганизации(Организация) Экспорт
	
	ИскЭлемент = Справочники.Предприятия.ПустаяСсылка();
	Если Организация <> Справочники.Организации.ПустаяСсылка() Тогда 
		лЗапрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Предприятия.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА Предприятия.ДМ_Организация = &ДМ_Организация
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Порядок
		|ИЗ
		|	Справочник.Предприятия КАК Предприятия
		|ГДЕ
		|	Предприятия.ПометкаУдаления = ЛОЖЬ
		|	И (Предприятия.ДМ_Организация = &ДМ_Организация
		|			ИЛИ Предприятия.ДМ_НомерПланта = &ДМ_НомерПланта)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок");
		
		лЗапрос.УстановитьПараметр( "ДМ_НомерПланта", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ДМ_КодSAP") );
		лЗапрос.УстановитьПараметр( "ДМ_Организация", Организация );
		лВыборка = лЗапрос.Выполнить().Выбрать();
		Если лВыборка.Следующий() Тогда
			ИскЭлемент = лВыборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИскЭлемент;
	
КонецФункции // ПолучитьОрганизациюПоПредприятию()

// Возвращает контрагента по номеру планта Предприятия
//
// Параметры:
//  Предприятие (ссылка на элемент)
//
// Возвращаемое значение:
//   Ссылка на контрагента
//
Функция ПолучитьКонтрагентаПоПредприятию(Предприятие) Экспорт
	
	ИскКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
	Если Предприятие <> Справочники.Предприятия.ПустаяСсылка() Тогда 
		лЗапрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СвязиМеждуКонтрагентамиИПредприятиями.Контрагент КАК Контрагент
		|ИЗ
		|	РегистрСведений.СвязиМеждуКонтрагентамиИПредприятиями КАК СвязиМеждуКонтрагентамиИПредприятиями
		|ГДЕ
		|	СвязиМеждуКонтрагентамиИПредприятиями.Предприятие = &Предприятие");
		
		лЗапрос.УстановитьПараметр("Предприятие", Предприятие);
		лВыборка = лЗапрос.Выполнить().Выбрать();
		Если лВыборка.Следующий() Тогда
			ИскКонтрагент = лВыборка.Контрагент;
		КонецЕсли;
		
		Если ИскКонтрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
			ИскКонтрагент = Предприятие.КонтрагентСобственник;
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат ИскКонтрагент;
	
КонецФункции // ПолучитьКонтрагентаПоПредприятию()

Процедура СформироватьЗаявкиДляВетисAPI(МассивДокументов) Экспорт

	ИнтеграцияВетисAPIОтправкаЗаявокНаОформление.СформироватьЗаявки(МассивДокументов);
	
КонецПроцедуры	
	