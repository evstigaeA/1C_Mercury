#Область ОбработчикиПодписокНаСобытия

Процедура КонтрольЗаписиНеразрешенныхСправочниковПередЗаписью(Источник, Отказ) Экспорт
	
	КонтрольЗаписи(Источник, Отказ);
	
КонецПроцедуры

Процедура КонтрольЗаписиНеразрешенныхДокументовПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	КонтрольЗаписи(Источник, Отказ);
	
КонецПроцедуры

Процедура КонтрольДокументовПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	КонтрольПометкиНаУдаление(Источник, Отказ);
	
КонецПроцедуры

Процедура КонтрольОтменыПроведенияДокументовОбработкаУдаленияПроведения(Источник, Отказ) Экспорт
	
	КонтрольОтменыПроведения(Источник, Отказ);
	
КонецПроцедуры

Процедура ЗаполнитьДатуПартии(Источник, Отказ) Экспорт
	
	ЗаполнитьДатуПартииЗаписи(Источник, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура КонтрольЗаписи(Источник, Отказ)

	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ИгнорироватьКонтрольЗаписи") Тогда
		Возврат
	КонецЕсли;	
	
	Отказ = Ложь;
	
	Если Отказ Тогда
		
		ОписаниеОшибки 	= НСтр("ru = 'Элементы ""%1"" недоступны для редактирования'");
		ОписаниеОшибки	= СтрЗаменить(ОписаниеОшибки, "%1", Источник.Метаданные().Синоним);
		
		Если ОбщегоНазначения.ЭтоРегистрСведений(Источник.Метаданные()) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки, Источник);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки, Источник.Ссылка);
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(
			ОписаниеОшибки,
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ОписаниеОшибки,
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		
	КонецЕсли;	

КонецПроцедуры

Процедура КонтрольПометкиНаУдаление(Источник, Отказ)

	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ИгнорироватьКонтрольЗаписи") Тогда
		Возврат;
	КонецЕсли;	
	
	Если Источник.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не Источник.ПометкаУдаления Тогда
		// Снимаем с удаления регистраторы журнала состояний заявок
		ПометкаУдаленияРегистраторовЖурналаСостоянийЗаявок(Источник, Отказ);
		Возврат;
	КонецЕсли;
	
	ТекущийСтатусДокумента = РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ТекущийСтатусДокумента(Источник.Ссылка);
	
	// Список состояний заявок, для которых возможна отмена проведения
		
	СтатусыДляОтменыПроведения = СписокСтатусовДляОтменыПроведения();
	Если СтатусыДляОтменыПроведения.НайтиПоЗначению(ТекущийСтатусДокумента) = Неопределено Тогда
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя помечать на удаление документ уже отправленный в систему ""Меркурий""", Источник.Ссылка, , , Отказ);
		ПометкаУдаленияРегистраторовЖурналаСостоянийЗаявок(Источник, Отказ); // Add
	Иначе
		// Ставим пометку удаления у регистраторов журнала состояний заявок
		ПометкаУдаленияРегистраторовЖурналаСостоянийЗаявок(Источник, Отказ);
	КонецЕсли; 
	
КонецПроцедуры

Процедура КонтрольОтменыПроведения(Источник, Отказ)

	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ИгнорироватьКонтрольЗаписи") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущийСтатусДокумента = РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ТекущийСтатусДокумента(Источник.Ссылка);
	
	// Список состояний заявок, для которых возможна отмена проведения
	СтатусыДляОтменыПроведения = СписокСтатусовДляОтменыПроведения();
	
	Если СтатусыДляОтменыПроведения.НайтиПоЗначению(ТекущийСтатусДокумента) = Неопределено Тогда
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Нельзя отменять проведение документа, отправленного в систему ""Меркурий""", Источник.Ссылка, , , Отказ);
	КонецЕсли; 
	
КонецПроцедуры

Функция СписокСтатусовДляОтменыПроведения()
	
	СписокСтатусовДляОтменыПроведения = Новый СписокЗначений();
	СписокСтатусовДляОтменыПроведения.Добавить(Неопределено);
	СписокСтатусовДляОтменыПроведения.Добавить(Справочники.СтатусыЗаявок.Черновик);
	СписокСтатусовДляОтменыПроведения.Добавить(Справочники.СтатусыЗаявок.Подготовлен);
	СписокСтатусовДляОтменыПроведения.Добавить(Справочники.СтатусыЗаявок.Отклонена);
	СписокСтатусовДляОтменыПроведения.Добавить(Справочники.СтатусыЗаявок.ЗаявкаОтмененаАдминистратором);
	СписокСтатусовДляОтменыПроведения.Добавить(Справочники.СтатусыЗаявок.ОшибкаОтправкиЗапроса);
	
	Возврат СписокСтатусовДляОтменыПроведения;
	
КонецФункции

Процедура ПометкаУдаленияРегистраторовЖурналаСостоянийЗаявок(ДокументИсточник, Отказ = Ложь)
	СсылкаНаДокумент = ДокументИсточник.Ссылка;
	Если СсылкаНаДокумент <> Неопределено Тогда
		Запрос = Новый Запрос();
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Регистратор КАК Ссылка
			|ИЗ
			|	РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций
			|ГДЕ
			|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ДокументСсылка = &ДокументСсылка
			|	И ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Регистратор.ПометкаУдаления = &ПометкаУдаления";
		
		Запрос.УстановитьПараметр("ДокументСсылка", СсылкаНаДокумент);
		Запрос.УстановитьПараметр("ПометкаУдаления", Не ДокументИсточник.ПометкаУдаления);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Регистраторы = РезультатЗапроса.Выбрать();
			Пока Регистраторы.Следующий() Цикл
				ДокументОбъект = Регистраторы.Ссылка.ПолучитьОбъект();
				ДокументОбъект.УстановитьПометкуУдаления(ДокументИсточник.ПометкаУдаления);
				
				Попытка
					ДокументОбъект.Записать();
				Исключение
					
					ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ТекстИсключения = НСтр("ru = 'Не удалось пометить на удаление регистратор журнала состояний заявок по причине: %ПредставлениеОшибки%.'");
					ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПредставлениеОшибки%", ПредставлениеОшибки);
					ЗаписьЖурналаРегистрации("Ошибка пометки удаления",
											 УровеньЖурналаРегистрации.Ошибка,
											 СсылкаНаДокумент.Метаданные(),
											 СсылкаНаДокумент,
											 ТекстИсключения);
					Отказ = Истина;
					Возврат;
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьДатуПартииЗаписи(Источник, Отказ)
	
	Попытка
		ДатаПартии = Дата(Сред(Источник.НомерПартии, 3, 8));
		Если Не Источник.ДатаПартии = ДатаПартии Тогда
			Источник.ДатаПартии = ДатаПартии;
		КонецЕсли;
	Исключение
		Источник.ДатаПартии = Дата('00010101');
	КонецПопытки;	
КонецПроцедуры

#КонецОбласти 