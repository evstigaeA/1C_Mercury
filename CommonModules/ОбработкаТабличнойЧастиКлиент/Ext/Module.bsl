#Область ОбработчикиСобытий_ТабличнойЧасти

Процедура ПродукцияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, ПараметрыПодбора) Экспорт
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ОбщегоНазначенияУВСВызовСервера.ПродукцияПредприятия(ПараметрыПодбора, Текст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПродукцияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, ПараметрыПодбора) Экспорт
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ОбщегоНазначенияУВСВызовСервера.ПродукцияПредприятия(ПараметрыПодбора, Текст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередУдалениемСтрокиТабличнойЧасти(ДанныеФормы, ИмяТЧ, МассивСвязанныхТЧ, КлючСвязи = Неопределено) Экспорт
	
	Форма = ИнтеграцияВетисAPIКлиент.ПолучитьУправляемуюФорму(ДанныеФормы);
	
	Если ОбщегоНазначенияУВСКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, ИмяТЧ) Тогда
		ТЧ = Форма.Объект[ИмяТЧ];
	Иначе
		ТЧ = Форма[ИмяТЧ];
	КонецЕсли;
	
	Для Каждого ИдентификаторВыделеннойСтроки Из Форма.Элементы[ИмяТЧ].ВыделенныеСтроки Цикл
		
		СтрокаТЧ = ТЧ.НайтиПоИдентификатору(ИдентификаторВыделеннойСтроки);
		
		Если КлючСвязи = Неопределено Тогда
			ПараметрыОтбора = Новый Структура("GUIDСтроки", СтрокаТЧ.GUIDСтроки);
		Иначе
			ПараметрыОтбора = Новый Структура(КлючСвязи, СтрокаТЧ[КлючСвязи]);
		КонецЕсли;
		
		Для Каждого СвязаннаяТЧ Из МассивСвязанныхТЧ Цикл
			
			Если ОбщегоНазначенияУВСКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, СвязаннаяТЧ) Тогда
				ПодчиненнаяТЧ = Форма.Объект[СвязаннаяТЧ];
			Иначе
				ПодчиненнаяТЧ = Форма[СвязаннаяТЧ];
			КонецЕсли;
			
			НайденныеСтроки = ПодчиненнаяТЧ.НайтиСтроки(ПараметрыОтбора);
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				ПодчиненнаяТЧ.Удалить(ТекСтрока);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПродукцияПолучателяАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, ПараметрыПодбора) Экспорт
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ОбщегоНазначенияУВСВызовСервера.ПродукцияПолучателяПродукции(ПараметрыПодбора, Текст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПродукцияПолучателяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, ПараметрыПодбора) Экспорт
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ОбщегоНазначенияУВСВызовСервера.ПродукцияПолучателяПродукции(ПараметрыПодбора, Текст);
	КонецЕсли;
	
КонецПроцедуры

Процедура СкопироватьПодчиненныеТабличныеЧасти(ДанныеФормы, GUIDНовойСтроки, GUIDКопируемойСтроки, МассивСвязанныхТЧ) Экспорт
	
	Форма = ИнтеграцияВетисAPIКлиент.ПолучитьУправляемуюФорму(ДанныеФормы);
	
	ПараметрыОтбора = Новый Структура("GUIDСтроки", GUIDКопируемойСтроки);
	
	Для Каждого СвязаннаяТЧ Из МассивСвязанныхТЧ Цикл
		
		Если ОбщегоНазначенияУВСКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, СвязаннаяТЧ) Тогда
			ПодчиненнаяТЧ = Форма.Объект[СвязаннаяТЧ];
		Иначе
			ПодчиненнаяТЧ = Форма[СвязаннаяТЧ];
		КонецЕсли;
		
		НайденныеСтроки = ПодчиненнаяТЧ.НайтиСтроки(ПараметрыОтбора);
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			НоваяСтрокаПодчиненнойТЧ = ПодчиненнаяТЧ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПодчиненнойТЧ, ТекСтрока);
			НоваяСтрокаПодчиненнойТЧ.GUIDСтроки = GUIDНовойСтроки;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриИзмененииПризнакаСкоропортящейсяПродукции(СтрокаТабличнойЧасти) Экспорт
	
	ИнтеграцияВетисAPIКлиент.ПриИзмененииПризнакаСкоропортящейсяПродукции(СтрокаТабличнойЧасти);
	
	СтрокаТабличнойЧасти.ПредставлениеДатыВыработки = ИнтеграцияВетисAPIКлиентСервер.СформироватьПредставлениеДатыВыработки(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.ПредставлениеСрокаГодности = ИнтеграцияВетисAPIКлиентСервер.СформироватьПредставлениеСрокаГодности(СтрокаТабличнойЧасти);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеСтрокТабличныхЧастейДокумента

Процедура ГрупповоеЗаполнениеСтрокДокумента(ДанныеЗаполнения, Объект) Экспорт
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипОбъекта          = ТипЗнч(Объект.Ссылка);
	ИмяТабЧасти         = ТабличнаяЧастьЗаполненияПоТипу(ТипОбъекта);
	ЕстьТабЧастьСДатами = (ТипОбъекта = Тип("ДокументСсылка.ПроизводственныеОперации")) ИЛИ (ТипОбъекта = Тип("ДокументСсылка.Инвентаризации"));
	ЕстьПроизводители   = ДанныеЗаполнения.Свойство("ТаблицаПроизводителей");
	
	Если ЕстьПроизводители Тогда
		Объект.ТаблицаПроизводителей.Очистить();
		ТаблицаПроизводителей = ДанныеЗаполнения.ТаблицаПроизводителей;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект[ИмяТабЧасти] Цикл
		
		Для Каждого ТекЗначение Из ДанныеЗаполнения Цикл
			
			Если ТекСтрока.ТипПродукцииЖивыеЖивотные
				И (ТекЗначение.Ключ = "ОсуществленКонтрольВрачом" ИЛИ ТекЗначение.Ключ = "ПроводиласьВетсанэкспертиза" ИЛИ ТекЗначение.Ключ = "СкоропортящаясяПродукция") Тогда
				Продолжить;
			КонецЕсли;
			Если ТекЗначение.Ключ = "НазначениеГрузаДляНекачественнойПродукции" Тогда
				Если ТекСтрока.НекачественныйГруз Тогда
					ТекСтрока.НазначениеГруза = ТекЗначение.Значение;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			Если ТекСтрока.Свойство(ТекЗначение.Ключ) Тогда
				ТекСтрока[ТекЗначение.Ключ] = ТекЗначение.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьТабЧастьСДатами Тогда
			
			СтруктураФорматовДат = ИнтеграцияВетисAPIВызовСервера.ДопустимыеФорматыДат(ТекСтрока.Продукция, ТекСтрока.СкоропортящаясяПродукция);
			
			Если ДанныеЗаполнения.Свойство("ДанныеПоДатамВыработки") Тогда
				
				ДанныеПоДатамВыработки = ДанныеЗаполнения.ДанныеПоДатамВыработки;
				
				ПроверитьЗаполнитьДанныеПоФорматуДаты(
					ТекСтрока,
					ДанныеПоДатамВыработки,
					ДанныеПоДатамВыработки.ФорматДатыВыработки,
					СтруктураФорматовДат.ФорматыДатВыработки,
					Истина);
				
			КонецЕсли;
			
			Если ДанныеЗаполнения.Свойство("ДанныеПоСрокамГодности") Тогда
				
				ДанныеПоСрокамГодности = ДанныеЗаполнения.ДанныеПоСрокамГодности;
				
				ПроверитьЗаполнитьДанныеПоФорматуДаты(
					ТекСтрока,
					ДанныеПоСрокамГодности,
					ДанныеПоСрокамГодности.ФорматСрокаГодности,
					СтруктураФорматовДат.ФорматыСроковГодности,
					Ложь);
				
			КонецЕсли;
			
			ТекСтрока.ПредставлениеДатыВыработки = ИнтеграцияВетисAPIКлиентСервер.СформироватьПредставлениеДатыВыработки(ТекСтрока);
			ТекСтрока.ПредставлениеСрокаГодности = ИнтеграцияВетисAPIКлиентСервер.СформироватьПредставлениеСрокаГодности(ТекСтрока);
			
		КонецЕсли;
		
		Если ЕстьПроизводители Тогда
			
			Для Каждого ТекПроизводитель Из ТаблицаПроизводителей Цикл
				НоваяСтрока = Объект.ТаблицаПроизводителей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекПроизводитель);
				НоваяСтрока.GUIDСтроки = ТекСтрока.GUIDСтроки;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнитьДанныеПоФорматуДаты(СтрокаТабличнойЧасти, ДанныеПоДатам, ФорматДаты, ДопустимыеФорматыДат, ПроверитьДатуВыработки)
	
	Если ЗначениеЗаполнено(ФорматДаты) Тогда
		
		ТекстОшибки     = "";
		ШаблонСообщения = НСтр("ru = 'В строке %1 ""%2"" не установлены. ""%3""'");
		НазваниеПоля    = ?(ПроверитьДатуВыработки, "Даты выработки продукции", "Сроки годности продукции");
		
		ДанныеПоДатам.Вставить("Продукция", СтрокаТабличнойЧасти.Продукция);
		
		Если ИнтеграцияВетисAPIКлиентСервер.ПроверитьДанныеПоФорматуДат(ДанныеПоДатам, ДопустимыеФорматыДат, ФорматДаты, ПроверитьДатуВыработки, ТекстОшибки) Тогда
			
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеПоДатам);
			
		Иначе
			
			ТекстСообщения = СтрШаблон(
					ШаблонСообщения,
					СтрокаТабличнойЧасти.НомерСтроки,
					НазваниеПоля,
					ТекстОшибки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	Иначе
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеПоДатам);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТабличнаяЧастьЗаполненияПоТипу(ТипОбъекта)
	
	Если ТипОбъекта = Тип("ДокументСсылка.ТранспортныеОперации") Тогда
		Возврат "ТаблицаПродукция";
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ПроизводственныеОперации") Тогда
		Возврат "ТаблицаПродукции";
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.Инвентаризации") Тогда
		Возврат "ТаблицаНовойПродукции";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти