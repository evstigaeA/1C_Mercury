#Область РаботаСДатамиВыработкиИСроковГодности

Функция ДопустимыеФорматыДат(Продукция, СкоропортящаясяПродукция) Экспорт
	
	СтруктураФорматов            = Новый Структура;
	СписокФорматовДатВыработки   = Новый СписокЗначений;
	СписокФорматовСроковГодности = Новый СписокЗначений;

	Если ЗначениеЗаполнено(Продукция) Тогда
		
		СвойстваПродукции = ОбщегоНазначенияУВССервер.ПолучитьСвойстваПродукции(Продукция);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДопустимыеФорматыДатПродукции.ТипПродукции КАК ТипПродукции,
			|	ДопустимыеФорматыДатПродукции.ВидПродукции КАК ВидПродукции,
			|	ДопустимыеФорматыДатПродукции.ПодвидПродукции КАК ПодвидПродукции,
			|	ДопустимыеФорматыДатПродукции.РазрешенаДатаВыработки КАК РазрешенаДатаВыработки,
			|	ДопустимыеФорматыДатПродукции.РазрешенМесяцВыработки КАК РазрешенМесяцВыработки,
			|	ДопустимыеФорматыДатПродукции.РазрешенГодВыработки КАК РазрешенГодВыработки,
			|	ДопустимыеФорматыДатПродукции.РазрешенаНеизвестнаяДатаВыработки КАК РазрешенаНеизвестнаяДатаВыработки,
			|	ДопустимыеФорматыДатПродукции.РазрешенаДатаСрокаГодности КАК РазрешенаДатаСрокаГодности,
			|	ДопустимыеФорматыДатПродукции.РазрешенМесяцСрокаГодности КАК РазрешенМесяцСрокаГодности,
			|	ДопустимыеФорматыДатПродукции.РазрешенГодСрокаГодности КАК РазрешенГодСрокаГодности,
			|	ДопустимыеФорматыДатПродукции.РазрешенНеограниченныйСрокГодности КАК РазрешенНеограниченныйСрокГодности,
			|	ДопустимыеФорматыДатПродукции.БезСрокаГодности КАК БезСрокаГодности
			|ПОМЕСТИТЬ ТаблицаФорматов
			|ИЗ
			|	РегистрСведений.ДопустимыеФорматыДатПродукции КАК ДопустимыеФорматыДатПродукции
			|ГДЕ
			|	ВЫБОР
			|			КОГДА &ТипПродукции = ДопустимыеФорматыДатПродукции.ТипПродукции
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ДопустимыеФорматыДатПродукции.ТипПродукции = ЗНАЧЕНИЕ(Справочник.ТипыПродукции.ПустаяСсылка)
			|		КОНЕЦ
			|	И ВЫБОР
			|			КОГДА &ВидПродукции = ДопустимыеФорматыДатПродукции.ВидПродукции
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ДопустимыеФорматыДатПродукции.ВидПродукции = ЗНАЧЕНИЕ(Справочник.ВидыПродукции.ПустаяСсылка)
			|		КОНЕЦ
			|	И ВЫБОР
			|			КОГДА &ПодвидПродукции = ДопустимыеФорматыДатПродукции.ПодвидПродукции
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ДопустимыеФорматыДатПродукции.ПодвидПродукции = ЗНАЧЕНИЕ(Справочник.ПодвидыПродукции.ПустаяСсылка)
			|		КОНЕЦ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаФорматов.ТипПродукции КАК ТипПродукции,
			|	ТаблицаФорматов.ВидПродукции КАК ВидПродукции,
			|	ТаблицаФорматов.ПодвидПродукции КАК ПодвидПродукции,
			|	ТаблицаФорматов.РазрешенаДатаВыработки КАК РазрешенаДатаВыработки,
			|	ТаблицаФорматов.РазрешенМесяцВыработки КАК РазрешенМесяцВыработки,
			|	ТаблицаФорматов.РазрешенГодВыработки КАК РазрешенГодВыработки,
			|	ТаблицаФорматов.РазрешенаНеизвестнаяДатаВыработки КАК РазрешенаНеизвестнаяДатаВыработки,
			|	ТаблицаФорматов.РазрешенаДатаСрокаГодности КАК РазрешенаДатаСрокаГодности,
			|	ТаблицаФорматов.РазрешенМесяцСрокаГодности КАК РазрешенМесяцСрокаГодности,
			|	ТаблицаФорматов.РазрешенГодСрокаГодности КАК РазрешенГодСрокаГодности,
			|	ТаблицаФорматов.РазрешенНеограниченныйСрокГодности КАК РазрешенНеограниченныйСрокГодности,
			|	ТаблицаФорматов.БезСрокаГодности КАК БезСрокаГодности,
			|	1 КАК Приоритет
			|ПОМЕСТИТЬ ТаблицаПриоритетов
			|ИЗ
			|	ТаблицаФорматов КАК ТаблицаФорматов
			|ГДЕ
			|	ТаблицаФорматов.ТипПродукции = &ТипПродукции
			|	И ТаблицаФорматов.ВидПродукции = &ВидПродукции
			|	И ТаблицаФорматов.ПодвидПродукции = &ПодвидПродукции
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаФорматов.ТипПродукции,
			|	ТаблицаФорматов.ВидПродукции,
			|	ТаблицаФорматов.ПодвидПродукции,
			|	ТаблицаФорматов.РазрешенаДатаВыработки,
			|	ТаблицаФорматов.РазрешенМесяцВыработки,
			|	ТаблицаФорматов.РазрешенГодВыработки,
			|	ТаблицаФорматов.РазрешенаНеизвестнаяДатаВыработки,
			|	ТаблицаФорматов.РазрешенаДатаСрокаГодности,
			|	ТаблицаФорматов.РазрешенМесяцСрокаГодности,
			|	ТаблицаФорматов.РазрешенГодСрокаГодности,
			|	ТаблицаФорматов.РазрешенНеограниченныйСрокГодности,
			|	ТаблицаФорматов.БезСрокаГодности,
			|	2
			|ИЗ
			|	ТаблицаФорматов КАК ТаблицаФорматов
			|ГДЕ
			|	ТаблицаФорматов.ТипПродукции = &ТипПродукции
			|	И ТаблицаФорматов.ВидПродукции = &ВидПродукции
			|	И ТаблицаФорматов.ПодвидПродукции = ЗНАЧЕНИЕ(Справочник.ПодвидыПродукции.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаФорматов.ТипПродукции,
			|	ТаблицаФорматов.ВидПродукции,
			|	ТаблицаФорматов.ПодвидПродукции,
			|	ТаблицаФорматов.РазрешенаДатаВыработки,
			|	ТаблицаФорматов.РазрешенМесяцВыработки,
			|	ТаблицаФорматов.РазрешенГодВыработки,
			|	ТаблицаФорматов.РазрешенаНеизвестнаяДатаВыработки,
			|	ТаблицаФорматов.РазрешенаДатаСрокаГодности,
			|	ТаблицаФорматов.РазрешенМесяцСрокаГодности,
			|	ТаблицаФорматов.РазрешенГодСрокаГодности,
			|	ТаблицаФорматов.РазрешенНеограниченныйСрокГодности,
			|	ТаблицаФорматов.БезСрокаГодности,
			|	3
			|ИЗ
			|	ТаблицаФорматов КАК ТаблицаФорматов
			|ГДЕ
			|	ТаблицаФорматов.ТипПродукции = &ТипПродукции
			|	И ТаблицаФорматов.ВидПродукции = ЗНАЧЕНИЕ(Справочник.ВидыПродукции.ПустаяСсылка)
			|	И ТаблицаФорматов.ПодвидПродукции = ЗНАЧЕНИЕ(Справочник.ПодвидыПродукции.ПустаяСсылка)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МИНИМУМ(ТаблицаПриоритетов.Приоритет) КАК Приоритет
			|ПОМЕСТИТЬ ТаблицаИтог
			|ИЗ
			|	ТаблицаПриоритетов КАК ТаблицаПриоритетов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаПриоритетов.РазрешенаДатаВыработки КАК РазрешенаДатаВыработки,
			|	ТаблицаПриоритетов.РазрешенМесяцВыработки КАК РазрешенМесяцВыработки,
			|	ТаблицаПриоритетов.РазрешенГодВыработки КАК РазрешенГодВыработки,
			|	ТаблицаПриоритетов.РазрешенаНеизвестнаяДатаВыработки КАК РазрешенаНеизвестнаяДатаВыработки,
			|	ТаблицаПриоритетов.РазрешенаДатаСрокаГодности КАК РазрешенаДатаСрокаГодности,
			|	ТаблицаПриоритетов.РазрешенМесяцСрокаГодности КАК РазрешенМесяцСрокаГодности,
			|	ТаблицаПриоритетов.РазрешенГодСрокаГодности КАК РазрешенГодСрокаГодности,
			|	ТаблицаПриоритетов.РазрешенНеограниченныйСрокГодности КАК РазрешенНеограниченныйСрокГодности,
			|	ТаблицаПриоритетов.БезСрокаГодности КАК БезСрокаГодности
			|ИЗ
			|	ТаблицаИтог КАК ТаблицаИтог
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПриоритетов КАК ТаблицаПриоритетов
			|		ПО ТаблицаИтог.Приоритет = ТаблицаПриоритетов.Приоритет
			|ГДЕ
			|	НЕ ТаблицаИтог.Приоритет ЕСТЬ NULL";
		
		Запрос.УстановитьПараметр("ТипПродукции"   , СвойстваПродукции.ТипПродукции);
		Запрос.УстановитьПараметр("ВидПродукции"   , СвойстваПродукции.ВидПродукции);
		Запрос.УстановитьПараметр("ПодвидПродукции", СвойстваПродукции.ПодвидПродукции);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			//Даты выработки
			Если Выборка.РазрешенаДатаВыработки Тогда
				СписокФорматовДатВыработки.Добавить(Перечисления.СпособыЗаданияДаты.Дата);
			КонецЕсли;
			Если Не СкоропортящаясяПродукция Тогда
				Если Выборка.РазрешенМесяцВыработки Тогда
					СписокФорматовДатВыработки.Добавить(Перечисления.СпособыЗаданияДаты.Месяц);
				КонецЕсли;
				Если Выборка.РазрешенГодВыработки Тогда
					СписокФорматовДатВыработки.Добавить(Перечисления.СпособыЗаданияДаты.Год);
				КонецЕсли;
			КонецЕсли;
			Если Выборка.РазрешенаНеизвестнаяДатаВыработки Тогда
				СписокФорматовДатВыработки.Добавить(Перечисления.СпособыЗаданияДаты.Неизвестно);
			КонецЕсли;
			//Сроки годности
			Если Выборка.БезСрокаГодности Тогда
				СписокФорматовСроковГодности.Добавить(Перечисления.СпособыЗаданияДаты.БезСрокаГодности);
			КонецЕсли;
			Если Выборка.РазрешенаДатаСрокаГодности Тогда
				СписокФорматовСроковГодности.Добавить(Перечисления.СпособыЗаданияДаты.Дата);
			КонецЕсли;
			Если Не СкоропортящаясяПродукция Тогда
				Если Выборка.РазрешенМесяцСрокаГодности Тогда
					СписокФорматовСроковГодности.Добавить(Перечисления.СпособыЗаданияДаты.Месяц);
				КонецЕсли;
				Если Выборка.РазрешенГодСрокаГодности Тогда
					СписокФорматовСроковГодности.Добавить(Перечисления.СпособыЗаданияДаты.Год);
				КонецЕсли;
			КонецЕсли;
			Если Выборка.РазрешенНеограниченныйСрокГодности Тогда
				СписокФорматовСроковГодности.Добавить(Перечисления.СпособыЗаданияДаты.НеОграничен);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СписокФорматовДатВыработки.Добавить(Перечисления.СпособыЗаданияДаты.Дата);
		Если Не СкоропортящаясяПродукция Тогда
			СписокФорматовДатВыработки.Добавить(Перечисления.СпособыЗаданияДаты.Месяц);
			СписокФорматовДатВыработки.Добавить(Перечисления.СпособыЗаданияДаты.Год);
		КонецЕсли;
		СписокФорматовДатВыработки.Добавить(Перечисления.СпособыЗаданияДаты.Неизвестно);
		
		СписокФорматовСроковГодности.Добавить(Перечисления.СпособыЗаданияДаты.Дата);
		Если Не СкоропортящаясяПродукция Тогда
			СписокФорматовСроковГодности.Добавить(Перечисления.СпособыЗаданияДаты.Месяц);
			СписокФорматовСроковГодности.Добавить(Перечисления.СпособыЗаданияДаты.Год);
		КонецЕсли;
		СписокФорматовСроковГодности.Добавить(Перечисления.СпособыЗаданияДаты.БезСрокаГодности);
		СписокФорматовСроковГодности.Добавить(Перечисления.СпособыЗаданияДаты.НеОграничен);
		
	КонецЕсли;
	
	СтруктураФорматов.Вставить("ФорматыДатВыработки"  , СписокФорматовДатВыработки);
	СтруктураФорматов.Вставить("ФорматыСроковГодности", СписокФорматовСроковГодности);
	
	Возврат СтруктураФорматов;
КонецФункции

#Область ПроверкаКорректностиЗаполненияДат

// Процедура проверяет корректность заполнения дат
//
// Параметры:
//  Форма				  - УправляемаяФорма	- форма объекта.
//  Данные				  - Произвольный 		- проверяемые данные
//  ИмяТабЧасти			  - Строка				- имя табличной части документа.
//  ПредставлениеТабЧасти - Строка				- представление табличной части документа.
//  Отказ				  - Булево				- признак отказа выполнения.
//
Процедура ПроверитьКорректностьЗаполненияДат(Форма, Данные, ИмяТабЧасти = "", ПредставлениеТабЧасти = "", Отказ) Экспорт
	
	ТекстОшибки  = "";
	ЕстьТабЧасть = ?(ИмяТабЧасти = "", Ложь, Истина);
	
	СтруктураФорматовДат  = ИнтеграцияВетисAPIСлужебныйПовтИсп.ДопустимыеФорматыДат(Данные.Продукция, Данные.СкоропортящаясяПродукция);
	ФорматыДатВыработки   = СтруктураФорматовДат.ФорматыДатВыработки;
	ФорматыСроковГодности = СтруктураФорматовДат.ФорматыСроковГодности;
	
	СписокОшибок = Новый СписокЗначений;
	
	Если Не ИнтеграцияВетисAPIКлиентСервер.ПроверитьЗаполнениеРеквизита(Данные, "ФорматДатыВыработки", "Формат даты выработки", ТекстОшибки) Тогда
		СписокОшибок.Добавить("ПредставлениеДатыВыработки", ТекстОшибки);
	КонецЕсли;
	
	Если Не ИнтеграцияВетисAPIКлиентСервер.ПроверитьЗаполнениеРеквизита(Данные, "ФорматСрокаГодности", "Формат срока годности", ТекстОшибки) Тогда
		СписокОшибок.Добавить("ПредставлениеСрокаГодности", ТекстОшибки);
	КонецЕсли;
	
	Если Не ИнтеграцияВетисAPIКлиентСервер.ПроверитьДанныеПоФорматуДат(Данные, ФорматыДатВыработки, Данные.ФорматДатыВыработки, Истина, ТекстОшибки) Тогда
		СписокОшибок.Добавить("ПредставлениеДатыВыработки", ТекстОшибки);
	КонецЕсли;
	
	Если Не ИнтеграцияВетисAPIКлиентСервер.ПроверитьДанныеПоФорматуДат(Данные, ФорматыСроковГодности, Данные.ФорматСрокаГодности, Ложь, ТекстОшибки) Тогда
		СписокОшибок.Добавить("ПредставлениеСрокаГодности", ТекстОшибки);
	КонецЕсли;
	
	Если Не ПроверитьКорректностьИнтервала(Данные.ФорматДатыВыработки, Данные.ДатаВыработкиНачало, Данные.ДатаВыработкиОкончание, ТекстОшибки) Тогда
		СписокОшибок.Добавить("ПредставлениеДатыВыработки", ТекстОшибки);
	КонецЕсли;
	
	Если Не ПроверитьКорректностьИнтервала(Данные.ФорматСрокаГодности, Данные.ДатаОкончанияСрокаГодностиНачало, Данные.ДатаОкончанияСрокаГодностиОкончание, ТекстОшибки) Тогда
		СписокОшибок.Добавить("ПредставлениеСрокаГодности", ТекстОшибки);
	КонецЕсли;
	
	//Проверка пересечений дат выработки сроков годности
	ФорматыВВидеДат = ИнтеграцияВетисAPIКлиентСервер.ФорматыВВидеДат();
	Если ФорматыВВидеДат.Найти(Данные.ФорматДатыВыработки) <> Неопределено И ФорматыВВидеДат.Найти(Данные.ФорматСрокаГодности) <> Неопределено Тогда
		
		ШаблонСообщения = НСтр("ru='Не корректно указан интервал дат. ""%1"" не должна быть меньше ""%2""'");
		
		ДатаВыработкиНачало        = Данные.ДатаВыработкиНачало;
		ДатаВыработкиОкончание     = Данные.ДатаВыработкиОкончание;
		ДатаСрокаГодностиНачало    = Данные.ДатаОкончанияСрокаГодностиНачало;
		ДатаСрокаГодностиОкончание = Данные.ДатаОкончанияСрокаГодностиОкончание;
		
		Если Данные.ФорматСрокаГодности = Перечисления.СпособыЗаданияДаты.Год Тогда
			ДатаВыработкиНачало        = НачалоГода(ДатаВыработкиНачало);
			ДатаВыработкиОкончание     = НачалоГода(ДатаВыработкиОкончание);
			ДатаСрокаГодностиНачало    = НачалоГода(ДатаСрокаГодностиНачало);
			ДатаСрокаГодностиОкончание = НачалоГода(ДатаСрокаГодностиОкончание);
		ИначеЕсли Данные.ФорматСрокаГодности = Перечисления.СпособыЗаданияДаты.Месяц Тогда
			ДатаВыработкиНачало        = НачалоМесяца(ДатаВыработкиНачало);
			ДатаВыработкиОкончание     = НачалоМесяца(ДатаВыработкиОкончание);
			ДатаСрокаГодностиНачало    = НачалоМесяца(ДатаСрокаГодностиНачало);
			ДатаСрокаГодностиОкончание = НачалоМесяца(ДатаСрокаГодностиОкончание);
		КонецЕсли;
		
		//Если ИнтеграцияВетисAPIКлиентСервер.ИспользуетсяИнтервалДат(Данные.ФорматДатыВыработки, Данные.ДатаВыработкиОкончание) Тогда
		//	Если ИнтеграцияВетисAPIКлиентСервер.ИспользуетсяИнтервалДат(Данные.ФорматСрокаГодности, Данные.ДатаОкончанияСрокаГодностиОкончание) Тогда
		//		Если ДатаСрокаГодностиНачало < ДатаВыработкиНачало Тогда
		//			СписокОшибок.Добавить("ПредставлениеСрокаГодности", СтрШаблон(ШаблонСообщения, "Дата начала срока годности", "Даты начала выработки"));
		//		КонецЕсли;
		//		Если ДатаСрокаГодностиОкончание < ДатаВыработкиОкончание Тогда
		//			СписокОшибок.Добавить("ПредставлениеСрокаГодности", СтрШаблон(ШаблонСообщения, "Дата окончания срока годности", "Даты окончания выработки"));
		//		КонецЕсли;
		//	Иначе
		//		Если ДатаСрокаГодностиНачало < ДатаВыработкиОкончание Тогда
		//			СписокОшибок.Добавить("ПредставлениеСрокаГодности", СтрШаблон(ШаблонСообщения, "Дата срока годности", "Даты окончания выработки"));
		//		КонецЕсли;
		//	КонецЕсли;
		//Иначе
		//	Если ДатаСрокаГодностиНачало < ДатаВыработкиНачало Тогда
		//		СписокОшибок.Добавить("ПредставлениеСрокаГодности", СтрШаблон(ШаблонСообщения, "Дата начала срока годности", "Даты выработки"));
		//	КонецЕсли;
		//КонецЕсли;
		
	КонецЕсли;
	
	Если СписокОшибок.Количество() > 0 Тогда
		
		Для Каждого ТекОшибка Из СписокОшибок Цикл
			
			Если ЕстьТабЧасть Тогда
				ВывестиСобщениеОбОшибкеВСтроке(Форма, ИмяТабЧасти, ПредставлениеТабЧасти, ТекОшибка.Значение, Данные.НомерСтроки, ТекОшибка.Представление, Отказ);
			Иначе
				ВывестиСобщениеОбОшибке(Форма, ТекОшибка.Значение, ТекОшибка.Представление, Отказ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьКорректностьИнтервала(ФорматДаты, ДатаНачала, ДатаОкончания, ТекстОшибки) Экспорт
	
	НачалоИнтервала    = ДатаНачала;
	ОкончаниеИнтервала = ДатаОкончания;
	
	Если ИнтеграцияВетисAPIКлиентСервер.ИспользуетсяИнтервалДат(ФорматДаты, ДатаОкончания) Тогда
		
		Если ФорматДаты = Перечисления.СпособыЗаданияДаты.Месяц Тогда
			
			НачалоИнтервала    = НачалоМесяца(ДатаНачала);
			ОкончаниеИнтервала = НачалоМесяца(ДатаОкончания);
			
		КонецЕсли;
		
		Если НачалоИнтервала >= ОкончаниеИнтервала Тогда
			
			ТекстОшибки = НСтр("ru = 'Не корректно указан интервал дат. ""Дата окончания"" должна быть больше ""Даты начала""'");
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат Истина;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВывестиСобщениеОбОшибке(Форма, ИмяРеквизита, ТекстОшибки, Отказ)
	
	ШаблонОшибки   = НСтр("ru = 'Ошибка данных: %1'");
	ТекстСообщения = СтрШаблон(ШаблонОшибки, ТекстОшибки);
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ТекстСообщения,
		Форма,
		,
		ИмяРеквизита,
		Отказ);
	
КонецПроцедуры

Процедура ВывестиСобщениеОбОшибкеВСтроке(Форма, ИмяТабЧасти, ПредставлениеТабЧасти, ИмяРеквизита, НомерСтроки, ТекстОшибки, Отказ)
	
	ШаблонОшибки   = НСтр("ru = 'В строке %1 списка ""%2"" ошибка в данных: %3'");
	ТекстСообщения = СтрШаблон(ШаблонОшибки, НомерСтроки, ПредставлениеТабЧасти, ТекстОшибки);
	Поле           = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабЧасти, НомерСтроки, ИмяРеквизита);
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ТекстСообщения,
		Форма,
		Поле,
		,
		Отказ);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область УстановкаСвойствПродукции

Процедура УстановитьСвойстваПродукции(ТекущиеДанные, ТипПродукцииЖивыеЖивотные) Экспорт
	
	СтруктураФорматовДат = ИнтеграцияВетисAPIСлужебныйПовтИсп.ДопустимыеФорматыДат(ТекущиеДанные.Продукция, ТекущиеДанные.СкоропортящаясяПродукция);
	
	ФорматыДатВыработки       = СтруктураФорматовДат.ФорматыДатВыработки;
	ФорматыСроковГодности     = СтруктураФорматовДат.ФорматыСроковГодности;
	ПродукцияБезСрокаГодности = ФорматыСроковГодности.НайтиПоЗначению(Перечисления.СпособыЗаданияДаты.БезСрокаГодности) <> Неопределено;
	
	Если ТипПродукцииЖивыеЖивотные Тогда
		
		ТекущиеДанные.СкоропортящаясяПродукция        = Ложь;
		ТекущиеДанные.НекачественныйГруз              = Ложь;
		Если ТекущиеДанные.Свойство("ОсуществленКонтрольВрачом") Тогда
			ТекущиеДанные.ОсуществленКонтрольВрачом   = Ложь;
		КонецЕсли;
		Если ТекущиеДанные.Свойство("ПроводиласьВетсанэкспертиза") Тогда
			ТекущиеДанные.ПроводиласьВетсанэкспертиза = Справочники.РезультатыЛабораторногоИсследования.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ФорматыДатВыработки.НайтиПоЗначению(ТекущиеДанные.ФорматДатыВыработки) = Неопределено Тогда//Текущего формата нет в разрешенных
		
		ТекущиеДанные.ДатаВыработкиНачало    = Неопределено;
		ТекущиеДанные.ДатаВыработкиОкончание = Неопределено;
		ТекущиеДанные.ФорматДатыВыработки    = Перечисления.СпособыЗаданияДаты.ПустаяСсылка();
		
	КонецЕсли;
	
	Если ПродукцияБезСрокаГодности Тогда
		
		ТекущиеДанные.ДатаОкончанияСрокаГодностиНачало    = Неопределено;
		ТекущиеДанные.ДатаОкончанияСрокаГодностиОкончание = Неопределено;
		ТекущиеДанные.ФорматСрокаГодности                 = Перечисления.СпособыЗаданияДаты.БезСрокаГодности;
		
	ИначеЕсли ФорматыСроковГодности.НайтиПоЗначению(ТекущиеДанные.ФорматСрокаГодности) = Неопределено Тогда//Текущего формата нет в разрешенных
		
		ТекущиеДанные.ДатаОкончанияСрокаГодностиНачало    = Неопределено;
		ТекущиеДанные.ДатаОкончанияСрокаГодностиОкончание = Неопределено;
		ТекущиеДанные.ФорматСрокаГодности                 = Перечисления.СпособыЗаданияДаты.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаЭлементовФорм

Процедура УстановитьОформлениеЭлементовФормы(ЭтаФорма) Экспорт
	
	Элементы = ЭтаФорма.Элементы;
	Объект   = ЭтаФорма.Объект;
	
	ЖивыеЖивотные = ЭтаФорма.ТипПродукцииЖивыеЖивотные;
	
	Элементы.ГиперссылкаПерейтиУпаковкиЗаписейСкладскогоЖурнала.Заголовок   = ОбщегоНазначенияУВСКлиентСервер.СформироватьПредставлениеСпискаУпаковок(Объект);
	Элементы.ГиперссылкаПерейтиУпаковкиЗаписейСкладскогоЖурнала.Доступность = НЕ ЖивыеЖивотные;
	Элементы.ПроводиласьВетсанэкспертиза.Видимость                          = НЕ ЖивыеЖивотные;
	Элементы.ОсуществленКонтрольВрачом.Видимость                            = НЕ ЖивыеЖивотные;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПриходныеОперации") Тогда
		Элементы.ГруппаЖивыеЖивотные.Видимость                                       = ЖивыеЖивотные;
		Элементы.НоменклатураУчетнойСистемы.АвтоОтметкаНезаполненного                = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЧерезУниверсальныйФормат");
		Элементы.ГиперссылкаПерейтиУпаковкиЗаписейСкладскогоЖурналаВозврат.Заголовок = ОбщегоНазначенияУВСКлиентСервер.СформироватьПредставлениеСпискаУпаковок(Объект,, "СписокФизическихУпаковок_Возврат");
	КонецЕсли;
	
	ЭтаФорма.ПредставлениеДатыВыработки = ИнтеграцияВетисAPIКлиентСервер.СформироватьПредставлениеДатыВыработки(Объект);
	ЭтаФорма.ПредставлениеСрокаГодности = ИнтеграцияВетисAPIКлиентСервер.СформироватьПредставлениеСрокаГодности(Объект);
	
	//ТТН
	ОбщегоНазначенияУВСКлиентСервер.УстановитьСвойстваЭлементовФормыДанныхТТН(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область УсловноеОформление

Процедура УстановитьЭлементОформленияФорматаДата(Список, МассивПолей, ИмяРеквизита, ЗначениеСравнения)
	
	ЭлементОформления = Список.УсловноеОформление.Элементы.Добавить();
	
	Для Каждого ТекПоле Из МассивПолей Цикл
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ТекПоле);
		ПолеОформления.Использование = Истина;
	КонецЦикла;
	
	ГруппаЭлементовОтбораДанных = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбораДанных.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ГруппаЭлементовОтбораДанных.Использование = Истина;
	
	ЭлементОтбора = ГруппаЭлементовОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяРеквизита);
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ЗначениеСравнения;
	ЭлементОтбора.Использование  = Истина;
	
	ЭлементОтбора = ГруппаЭлементовОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СкоропортящаясяПродукция");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование  = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ='dd.MM.yyyy HH'");
	
КонецПроцедуры

Процедура УстановитьЭлементОформления(Список, МассивПолей, ИмяРеквизита, ЗначениеСравнения, Параметр, ЗначениеПараметра)
	
	ЭлементОформления = Список.УсловноеОформление.Элементы.Добавить();

	Для Каждого ТекПоле Из МассивПолей Цикл
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ТекПоле);
		ПолеОформления.Использование = Истина;
	КонецЦикла;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяРеквизита);
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ЗначениеСравнения;
	ЭлементОтбора.Использование  = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра(Параметр, ЗначениеПараметра);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеФорматовДат(Список) Экспорт
	
	//ДАТЫ ВЫРАБОТКИ
	МассивПолей = Новый Массив;
	МассивПолей.Добавить("ДатаВыработкиНачало");
	//ГОД
	УстановитьЭлементОформления(Список, МассивПолей, "ФорматДатыВыработки", Перечисления.СпособыЗаданияДаты.Год, "Формат", "ДФ=yyyy");
	//ДАТА ВЫРАБОТКИ НЕИЗВЕСТНА
	УстановитьЭлементОформления(Список, МассивПолей, "ФорматДатыВыработки", Перечисления.СпособыЗаданияДаты.Неизвестно, "Текст", НСтр("ru = 'Неизвестно'"));
	//МЕСЯЦ
	МассивПолей.Добавить("ДатаВыработкиОкончание");
	УстановитьЭлементОформления(Список, МассивПолей, "ФорматДатыВыработки", Перечисления.СпособыЗаданияДаты.Месяц, "Формат", "ДФ='MMMM yyyy'");
	//ДАТА
	УстановитьЭлементОформленияФорматаДата(Список, МассивПолей, "ФорматДатыВыработки", Перечисления.СпособыЗаданияДаты.Дата);
	
	//СРОКИ ГОДНОСТИ
	МассивПолей = Новый Массив;
	МассивПолей.Добавить("СрокГодностиНачало");
	//ГОД
	УстановитьЭлементОформления(Список, МассивПолей, "ФорматСрокаГодности", Перечисления.СпособыЗаданияДаты.Год, "Формат", "ДФ=yyyy");
	//СРОК ГОДНОСТИ НЕ ОГРАНИЧЕН
	УстановитьЭлементОформления(Список, МассивПолей, "ФорматСрокаГодности", Перечисления.СпособыЗаданияДаты.НеОграничен, "Текст", НСтр("ru = 'Срок годности не ограничен'"));
	//СРОК ГОДНОСТИ НЕ ИСПОЛЬЗУЕТСЯ
	УстановитьЭлементОформления(Список, МассивПолей, "ФорматСрокаГодности", Перечисления.СпособыЗаданияДаты.БезСрокаГодности, "Текст", НСтр("ru = 'Без срока годности'"));
	//МЕСЯЦ
	МассивПолей.Добавить("СрокГодностиОкончание");
	УстановитьЭлементОформления(Список, МассивПолей, "ФорматСрокаГодности", Перечисления.СпособыЗаданияДаты.Месяц, "Формат", "ДФ='MMMM yyyy'");
	//ДАТА
	УстановитьЭлементОформленияФорматаДата(Список, МассивПолей, "ФорматСрокаГодности", Перечисления.СпособыЗаданияДаты.Дата);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СписокПроизводителейПродукции(Продукция, СтранаПроисхождения, Текст = "") Экспорт
	
	Если ЗначениеЗаполнено(Продукция.GUID_Меркурий) Тогда
		
		СписокПроизводителей = Новый СписокЗначений;
		
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 50
			|	ПродукцияПроизводителиПродукции.Предприятие КАК Предприятие
			|ИЗ
			|	Справочник.Продукция.ПроизводителиПродукции КАК ПродукцияПроизводителиПродукции
			|ГДЕ
			|	ПродукцияПроизводителиПродукции.Ссылка = &Продукция
			|	И ПродукцияПроизводителиПродукции.Предприятие.СтранаРегистрации = &СтранаРегистрации";
		
		Запрос = Новый Запрос;
		
		Если ЗначениеЗаполнено(Текст) Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
				|	И ПродукцияПроизводителиПродукции.Предприятие.Наименование ПОДОБНО &Текст";
			
			Запрос.УстановитьПараметр("Текст", "%" + Текст + "%");
			
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.УстановитьПараметр("Продукция"        , Продукция);
		Запрос.УстановитьПараметр("СтранаРегистрации", СтранаПроисхождения);
		
		СписокПроизводителей.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Предприятие"));
		
		Возврат СписокПроизводителей;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ЭтоЗарегистрированнаяПродукция(Продукция) Экспорт
	
	Возврат ЗначениеЗаполнено(Продукция.GUID_Меркурий);
	
КонецФункции

Функция НайтиСоздатьЗаполнитьЭлементСправочника(ИмяСправочника, СтруктураПоиска, СтруктураЗаполнения = Неопределено) Экспорт

	Если СтруктураЗаполнения = Неопределено Тогда
		СтруктураЗаполнения = СтруктураПоиска;
	КонецЕсли;
	
	Если ИмяСправочника = "Транспорт" ИЛИ ИмяСправочника = "Продукция" Тогда//Меркурий различает символы написанные в верхнем и нижнем регистре, как только исправят нужно убрать условие
		
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаСправочник.Ссылка
			|ИЗ
			|	Справочник." + ИмяСправочника + " КАК ТаблицаСправочник
			|ГДЕ
			|	ИСТИНА";
		Для Каждого КлючИЗначение Из СтруктураПоиска Цикл
			ТекстЗапроса = ТекстЗапроса + " И ТаблицаСправочник." + КлючИЗначение.Ключ + " = &" + КлючИЗначение.Ключ + "";
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		Для Каждого КлючИЗначение Из СтруктураПоиска Цикл
			Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		//Вообще ничего не нашли
		Если РезультатЗапроса.Пустой() Тогда
			
			СправочникОбъект = Справочники[ИмяСправочника].СоздатьЭлемент();
			СправочникОбъект.УстановитьНовыйКод();
			Для Каждого КлючИЗначение Из СтруктураЗаполнения Цикл
				СправочникОбъект[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
			КонецЦикла;
			СправочникОбъект.ОбменДанными.Загрузка = Истина;
			СправочникОбъект.Записать();
			
			Возврат СправочникОбъект.Ссылка
			
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		
		//Поиск с учетом регистра
		Пока Выборка.Следующий() Цикл
			ЕстьСовпадение = Истина;
			Для Каждого КлючИЗначение Из СтруктураПоиска Цикл
				Если Не Выборка.Ссылка[КлючИЗначение.Ключ] = КлючИЗначение.Значение Тогда
					ЕстьСовпадение = Ложь;
				КонецЕсли;
			КонецЦикла;
			Если ЕстьСовпадение Тогда
				Возврат Выборка.Ссылка;
			КонецЕсли;
		КонецЦикла;
		
		//Поиск с учетом регистра не дал результата
		СправочникОбъект = Справочники[ИмяСправочника].СоздатьЭлемент();
		СправочникОбъект.УстановитьНовыйКод();
		Для Каждого КлючИЗначение Из СтруктураЗаполнения Цикл
			СправочникОбъект[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЦикла;
		СправочникОбъект.ОбменДанными.Загрузка = Истина;
		СправочникОбъект.Записать();
		
		Возврат СправочникОбъект.Ссылка
		
	Иначе
		
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ТаблицаСправочник.Ссылка
			|ИЗ
			|	Справочник." + ИмяСправочника + " КАК ТаблицаСправочник
			|ГДЕ
			|	ИСТИНА";
		Для Каждого КлючИЗначение Из СтруктураПоиска Цикл
			ТекстЗапроса = ТекстЗапроса + " И ТаблицаСправочник." + КлючИЗначение.Ключ + " = &" + КлючИЗначение.Ключ + "";
		КонецЦикла; 
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		Для Каждого КлючИЗначение Из СтруктураПоиска Цикл
			Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла; 
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			
			СправочникОбъект = Справочники[ИмяСправочника].СоздатьЭлемент();
			СправочникОбъект.УстановитьНовыйКод();
			Для Каждого КлючИЗначение Из СтруктураЗаполнения Цикл
				СправочникОбъект[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
			КонецЦикла; 
			СправочникОбъект.ОбменДанными.Загрузка = Истина;
			СправочникОбъект.Записать();
			
			Возврат СправочникОбъект.Ссылка
			
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Ссылка
		
	КонецЕсли;
	
КонецФункции

Функция ТипыПродукцииСДоступнымВидомПроисхождения() Экспорт
	
	СписокТиповПродукции = Новый СписокЗначений;
	СписокТиповПродукции.Добавить(Справочники.ТипыПродукции.КормаИКормовыеДобавки);
	СписокТиповПродукции.Добавить(Справочники.ТипыПродукции.ЛекарственныеСредства);
	СписокТиповПродукции.Добавить(Справочники.ТипыПродукции.НепищевыеПродуктыИДругое);
	
	Возврат СписокТиповПродукции;
КонецФункции

Функция ПредставлениеОбъекта(ПараметрОбъект) Экспорт
	
	Если ПараметрОбъект = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	МетаданныеОбъекта = ?(ТипЗнч(ПараметрОбъект) = Тип("Строка"), Метаданные.НайтиПоПолномуИмени(ПараметрОбъект), ПараметрОбъект);
	
	Представление = Новый Структура("ПредставлениеОбъекта");
	ЗаполнитьЗначенияСвойств(Представление, МетаданныеОбъекта);
	Если Не ПустаяСтрока(Представление.ПредставлениеОбъекта) Тогда
		Возврат Представление.ПредставлениеОбъекта;
	КонецЕсли;
	
	Возврат МетаданныеОбъекта.Представление();
	
КонецФункции

#КонецОбласти

#Область ОбработчикиПодписокНаСобытия

// При записи (но не проведении) документа без статуса, присваивает заявке статус черновик
Процедура ДокументыЗаявокПриЗаписи(Источник, Отказ) Экспорт
	
	ТекущийСтатус = РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ТекущийСтатусДокумента(Источник.Ссылка);
	
	Если Не Источник.Проведен 
		 И (ТекущийСтатус = Неопределено
		 ИЛИ ТекущийСтатус = Справочники.СтатусыЗаявок.Подготовлен) Тогда
		ИнтеграцияВетисAPIСлужебный.УстановитьТекущийСтатусСостоянийЗаявокНаОформлениеОпераций(
															Источник.Ссылка,
															Справочники.СтатусыЗаявок.Черновик);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийИзмененияСтатусовЗаявок

// Присваивает заявке статус "Подготовлен"
// Параметры:
// СсылкаНаДокумента - ссылка на документ заявки
Процедура УстановитьСтатусПодготовлен(СсылкаНаДокумент) Экспорт
	
	ТекущийСтатус = РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ТекущийСтатусДокумента(СсылкаНаДокумент);
	
	//Список состояний заявок из которых при проведении ставится статус "Подготовлен"
	СписокСостоянийДляПроведения = Новый СписокЗначений();
	СписокСостоянийДляПроведения.Добавить(Неопределено);
	СписокСостоянийДляПроведения.Добавить(Справочники.СтатусыЗаявок.Черновик);
	СписокСостоянийДляПроведения.Добавить(Справочники.СтатусыЗаявок.ЗаявкаОтмененаАдминистратором);
	СписокСостоянийДляПроведения.Добавить(Справочники.СтатусыЗаявок.Отклонена);
	СписокСостоянийДляПроведения.Добавить(Справочники.СтатусыЗаявок.ОшибкаОтправкиЗапроса);
	
	Если СписокСостоянийДляПроведения.НайтиПоЗначению(ТекущийСтатус) <> Неопределено Тогда
		ИнтеграцияВетисAPIСлужебный.УстановитьТекущийСтатусСостоянийЗаявокНаОформлениеОпераций(СсылкаНаДокумент, Справочники.СтатусыЗаявок.Подготовлен);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Пользователи

Функция ТекущийПользовательМеркурия() Экспорт
	
	Возврат ПользовательМеркурия(Пользователи.ТекущийПользователь());
	
КонецФункции

Функция ПользовательМеркурия(ПользовательИБ) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПользовательИБ, "ПользовательСистемыМеркурий");
	
КонецФункции

Функция ПроверитьОграниченияПользователя(Организация,
		Предприятие = Неопределено, ПользовательИБ = Неопределено, ТекстСообщения = "") Экспорт
	
	Если ПользовательИБ = Неопределено Тогда
		ПользовательМеркурия = ТекущийПользовательМеркурия();
	Иначе
		ПользовательМеркурия = ПользовательМеркурия(ПользовательИБ);
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ПраваПользователя.ЕстьПраваПоОрганизации, ЛОЖЬ) КАК ЕстьПраваПоОрганизации,
		|	ЕСТЬNULL(ПредприятияПользователя.ЕстьОграниченияПоПредприятиям, ЛОЖЬ) КАК ЕстьОграниченияПоПредприятиям
		|ПОМЕСТИТЬ ОграниченияПользователя
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1
		|		ИСТИНА КАК ЕстьПраваПоОрганизации
		|	ИЗ
		|		РегистрСведений.ПраваПользователейСистемыМеркурий.СрезПоследних(
		|				,
		|				Организация = &Организация
		|					И Пользователь = &Пользователь) КАК ПраваПользователейСистемыМеркурийСрезПоследних
		|	ГДЕ
		|		ПраваПользователейСистемыМеркурийСрезПоследних.Используется) КАК ПраваПользователя
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА КАК ЕстьОграниченияПоПредприятиям
		|		ИЗ
		|			РегистрСведений.ПредприятияОбслуживаемыеПользователем.СрезПоследних(
		|					,
		|					Организация = &Организация
		|						И Пользователь = &Пользователь) КАК ПредприятияОбслуживаемыеПользователемСрезПоследних
		|		ГДЕ
		|			ПредприятияОбслуживаемыеПользователемСрезПоследних.Используется) КАК ПредприятияПользователя
		|		ПО (ИСТИНА)";
	
	Если Предприятие = Неопределено Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОграниченияПользователя.ЕстьПраваПоОрганизации КАК ЕстьПраваПоОрганизации,
			|	ОграниченияПользователя.ЕстьОграниченияПоПредприятиям КАК ЕстьОграниченияПоПредприятиям
			|ИЗ
			|	ОграниченияПользователя КАК ОграниченияПользователя";
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОграниченияПользователя.ЕстьПраваПоОрганизации КАК ЕстьПраваПоОрганизации,
			|	ОграниченияПользователя.ЕстьОграниченияПоПредприятиям КАК ЕстьОграниченияПоПредприятиям,
			|	ВЫБОР
			|		КОГДА ПредприятияОбслуживаемыеПользователемСрезПоследних.Предприятие ЕСТЬ NULL
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ЕстьПравоНаОбслуживаниеПредприятия
			|ИЗ
			|	ОграниченияПользователя КАК ОграниченияПользователя
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредприятияОбслуживаемыеПользователем.СрезПоследних(
			|				,
			|				Организация = &Организация
			|					И Пользователь = &Пользователь
			|					И Предприятие = &Предприятие) КАК ПредприятияОбслуживаемыеПользователемСрезПоследних
			|		ПО (ОграниченияПользователя.ЕстьПраваПоОрганизации)
			|			И (ОграниченияПользователя.ЕстьОграниченияПоПредприятиям)
			|			И (ПредприятияОбслуживаемыеПользователемСрезПоследних.Используется)";
		
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Организация" , Организация);
	Запрос.УстановитьПараметр("Пользователь", ПользовательМеркурия);
	Запрос.УстановитьПараметр("Предприятие" , Предприятие);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ТекстСообщения = НСтр("ru = 'Для пользователя %Пользователь% не назначены права по организации %Организация%.'");
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Пользователь%", ПользовательМеркурия);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%" , Организация);
		
		Возврат Ложь;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если Предприятие = Неопределено Тогда
			
			ОграниченияПользователя = Новый Структура;
			ОграниченияПользователя.Вставить("ПользовательМеркурия", ПользовательМеркурия);
			ОграниченияПользователя.Вставить("ЕстьПраваПоОрганизации", Ложь);
			ОграниченияПользователя.Вставить("ЕстьОграниченияПоПредприятиям", Ложь);
			
			ЗаполнитьЗначенияСвойств(ОграниченияПользователя, Выборка);
			
			Возврат ОграниченияПользователя;
			
		Иначе
			
			Если Не Выборка.ЕстьПраваПоОрганизации Тогда
				
				ТекстСообщения = НСтр("ru = 'Для пользователя %Пользователь% не назначены права по организации %Организация%.'");
				
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Пользователь%", ПользовательМеркурия);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%" , Организация);
		
				Возврат Ложь;
				
			ИначеЕсли Выборка.ЕстьОграниченияПоПредприятиям И Не Выборка.ЕстьПравоНаОбслуживаниеПредприятия Тогда
				
				ТекстСообщения = НСтр("ru = 'Для пользователя %Пользователь% не назначены права на обслуживание предприятия %Предприятие%.'");
				
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Пользователь%", ПользовательМеркурия);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Предприятие%" , Предприятие);
				
				Возврат Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область ПроверкаЗаполнения

Процедура ОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ) Экспорт
	
	ТекстОшибки = "";
	
	ПользовательМеркурия = ИнтеграцияВетисAPIСервер.ПользовательМеркурия(ДокументОбъект.Ответственный);
	
	Если ЗначениеЗаполнено(ПользовательМеркурия) Тогда
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПриходныеОперации") Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПриходныеОперацииСводно") Тогда
			
			Если ДокументОбъект.УполномоченноеГашение Тогда
				
				Если НЕ РегистрыСведений.УполномоченноеГашение.ВозможностьОформленияУполномоченногоГашения(ДокументОбъект.Организация, ДокументОбъект.КонтрагентПолучатель) Тогда
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						НСтр("ru = 'По указанному хоз. субъекту нельзя оформить операцию Уполномоченного гашения.'"),
						ДокументОбъект,
						"КонтрагентПолучатель",
						,
						Отказ);
					
				КонецЕсли;
				
				РеквизитПроверки = "ПредприятиеОтправитель";
				
			Иначе
				
				РеквизитПроверки = "ПредприятиеПолучатель";
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ТранспортныеОперации") Тогда
			РеквизитПроверки = "ПредприятиеОтправитель";
		Иначе
			РеквизитПроверки = "Предприятие";
		КонецЕсли;
		
		ПроверитьОграниченияПользователя(ДокументОбъект.Организация, ДокументОбъект[РеквизитПроверки], ДокументОбъект.Ответственный, ТекстОшибки);
		
	Иначе
		
		РеквизитПроверки = "Ответственный";
		
		ТекстОшибки = НСтр("ru = 'Для пользователя информационной базы %ПользовательИБ% не указан пользователь ИС ""Меркурий"".'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПользовательИБ%", ДокументОбъект.Ответственный);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументОбъект,
			РеквизитПроверки,
			,
			Отказ);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКорректностьСвойствЗаписиСкладскогоЖурнала(ДокументОбъект, Данные, ИмяТабЧасти = "", ПредставлениеТабЧасти = "", Отказ) Экспорт
	
	МассивРазрешенныхСтатусов = ИнтеграцияВетисAPIСлужебныйПовтИсп.РазрешенныеСтатусыЗаписейСкладскогоЖурналаДляВыполненияОпераций();
	
	Если ИмяТабЧасти = "" Тогда
		
		Поле = "ЗаписьСкладскогоЖурнала";
		
	Иначе
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабЧасти, Данные.НомерСтроки, "ЗаписьСкладскогоЖурнала");
		
	КонецЕсли;
	
	Если Данные.ЗаписьСкладскогоЖурналаНеИспользуется Тогда
		
		Если ИмяТабЧасти = "" Тогда
			
			ШаблонСообщения = НСтр("ru='В документе указана не используемая запись складского журнала ""%1"".'");
			
			ТекстСообщения = СтрШаблон(
				ШаблонСообщения,
				Данные.ЗаписьСкладскогоЖурнала);
				
		Иначе
			
			ШаблонСообщения = НСтр("ru='В строке %1 списка ""%2"" указана не используемая запись складского журнала ""%3"".'");
			
			ТекстСообщения = СтрШаблон(
				ШаблонСообщения,
				Данные.НомерСтроки,
				ПредставлениеТабЧасти,
				Данные.ЗаписьСкладскогоЖурнала);
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			ДокументОбъект,
			Поле,
			,
			Отказ);
		
	КонецЕсли;
		
	Если МассивРазрешенныхСтатусов.Найти(Данные.СтатусВерсииЗаписиСкладскогоЖурнала) = Неопределено Тогда
		
		Если ИмяТабЧасти = "" Тогда
			
			ШаблонСообщения = НСтр("ru='В документе указана запись складского журнала ""%1"", которая находится в не допустимом статусе ""%2"".'");
			
			ТекстСообщения = СтрШаблон(
				ШаблонСообщения,
				Данные.ЗаписьСкладскогоЖурнала,
				Данные.СтатусВерсииЗаписиСкладскогоЖурнала);
				
		Иначе
			
			ШаблонСообщения = НСтр("ru='В строке %1 списка ""%2"" указана запись складского журнала ""%3"", которая находится в не допустимом статусе ""%4"".'");
			
			ТекстСообщения = СтрШаблон(
				ШаблонСообщения,
				Данные.НомерСтроки,
				ПредставлениеТабЧасти,
				Данные.ЗаписьСкладскогоЖурнала,
				Данные.СтатусВерсииЗаписиСкладскогоЖурнала);
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			ДокументОбъект,
			Поле,
			,
			Отказ);
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти