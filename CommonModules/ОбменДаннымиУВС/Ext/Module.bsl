#Область ПрограммныйИнтерфейс

// Создает список доступных для создания планов обмена
//
// Параметры:
//  ПланыОбменаПодсистемы	 - Массив	 - Массив планов обмена конфигурации,
//  	которые используют функционал подсистемы обмена данными.
//  	Элементами массива являются объекты метаданных планов обмена.
//
Процедура СписокПлановОбмена(ПланыОбменаПодсистемы) Экспорт
	
	ПланыОбменаПодсистемы.Добавить(Метаданные.ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат);
	
КонецПроцедуры

// Производит регистрацию объектов для начальной выгрузки
//  с помощью оптимизированного алгоритма.
//
// Параметры:
//  Получатель			 - ПланОбменаСсылка	 - ссылка на план обмена СинхронизацияДанныхЧерезУниверсальныйФормат.
//  СтандартнаяОбработка - Булево			 - признак стандартной обработки.
//  Отбор				 - Массив			 - массив элементов плана обмена.
//
Процедура РегистрацияИзмененияДляНачальнойВыгрузки(Получатель, СтандартнаяОбработка, Отбор) Экспорт
	
	Если ТипЗнч(Получатель) = Тип("ПланОбменаСсылка.СинхронизацияДанныхЧерезУниверсальныйФормат") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Получатель, "ИспользоватьОтборПоОрганизациям,
			|ДатаНачалаВыгрузкиДокументов,
			|Организации,
			|ПравилаОтправкиСправочников,
			|ПравилаОтправкиДокументов");
		
		Организации = ?(ЗначенияРеквизитов.ИспользоватьОтборПоОрганизациям,
			ЗначенияРеквизитов.Организации.Выгрузить().ВыгрузитьКолонку("Организация"), Неопределено);
			
		Если Организации = Неопределено Тогда
			
			Запрос = Новый Запрос("ВЫБРАТЬ
				|	Организации.Ссылка КАК Организация
				|ИЗ
				|	Справочник.Организации КАК Организации
				|ГДЕ
				|	Организации.ПометкаУдаления = ЛОЖЬ
				|
				|СГРУППИРОВАТЬ ПО
				|	Организации.Ссылка");
			
			Результат = Запрос.Выполнить();
			
			Если Не Результат.Пустой() Тогда
				Организации = Результат.Выгрузить().ВыгрузитьКолонку("Организация");
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначенияРеквизитов.ПравилаОтправкиСправочников <> "НеСинхронизировать"
			ИЛИ ЗначенияРеквизитов.ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация" Тогда
			
			Отбор = Новый Массив();
			ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(Получатель);
			СоставПланаОбмена = Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав;
			
			Для Каждого ЭлементСоставаПланаОбмена Из СоставПланаОбмена Цикл 
			
				Если ОбщегоНазначения.ЭтоСправочник(ЭлементСоставаПланаОбмена.Метаданные) Тогда
					
					Если ЗначенияРеквизитов.ПравилаОтправкиСправочников = "АвтоматическаяСинхронизация"
						ИЛИ (ЗначенияРеквизитов.ПравилаОтправкиСправочников = "СинхронизироватьПоНеобходимости"
						И ЭлементСоставаПланаОбмена.Метаданные.Имя = "Организации") Тогда
						Отбор.Добавить(ЭлементСоставаПланаОбмена.Метаданные);
					КонецЕсли;
					
				ИначеЕсли ОбщегоНазначения.ЭтоДокумент(ЭлементСоставаПланаОбмена.Метаданные) Тогда
					
					Если ЗначенияРеквизитов.ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация" Тогда
						Отбор.Добавить(ЭлементСоставаПланаОбмена.Метаданные);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Отбор.Количество() = 0 Тогда
				Отбор = Неопределено;
			КонецЕсли;
			
			ОбменДаннымиСервер.ЗарегистрироватьДанныеПоДатеНачалаВыгрузкиИОрганизациям(Получатель,
				ЗначенияРеквизитов.ДатаНачалаВыгрузкиДокументов,
				Организации,
				Отбор);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет перечень доступных версий универсального формата EnterpriseData.
//
// Параметры:
//  ВерсииФормата - Соответствие - Соответствие номера версии формата общему модулю,
//                  в котором находятся обработчики выгрузки/загрузки для данной версии.
//
Процедура ДоступныеВерсииУниверсальногоФормата(ВерсииФормата) Экспорт
	
	ВерсииФормата.Вставить("1.0", МенеджерОбменаЧерезУниверсальныйФормат);
	ВерсииФормата.Вставить("1.1", МенеджерОбменаЧерезУниверсальныйФормат);
	ВерсииФормата.Вставить("1.2", МенеджерОбменаЧерезУниверсальныйФормат);
	ВерсииФормата.Вставить("1.3", МенеджерОбменаЧерезУниверсальныйФормат);
	ВерсииФормата.Вставить("1.4", МенеджерОбменаЧерезУниверсальныйФормат);
	ВерсииФормата.Вставить("1.5", МенеджерОбменаЧерезУниверсальныйФормат);
	
КонецПроцедуры

// Предназначена для точной идентификации имени этой конфигурации при настройке 
// синхронизации данных в модели сервиса.
// В случае если данная конфигурация разработана на основе оригинальной конфигурации
// и должна поддерживать обмен с другими прикладными решениями с помощью плана обмена,
// взятого из оригинальной конфигурации, то следует вернуть имя оригинальной конфигурации.
// Например, для конфигурации МояБухгалтерия, которая является доработанной конфигурацией БухгалтерияПредприятия,
// следует вернуть БухгалтерияПредприятия.
//
// Используется только для планов обмена в модели сервиса.
//
// Возвращаемое значение:
//	Строка - имя этой или другой конфигурации, от имени которой выполняется обмен данными
//			(имя конфигурации как задано в метаданных).
//
// Пример:
//  Возврат "БухгалтерияПредприятия";
//
Функция ИмяКонфигурацииИсточника() Экспорт
	Возврат "УправлениеВетеринарнымиСертификатами";
КонецФункции

#КонецОбласти