#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьЗначенияПоУмолчанию(Очищать = Ложь) Экспорт
	
	Если Очищать Тогда
		Регистр = РегистрыСведений.ЗначениеРеквизитовПоУмолчанию.СоздатьНаборЗаписей();
		Регистр.Очистить();
		Регистр.Записать();
	КонецЕсли;
	
	Макет = ПолучитьМакет("РеквизитыПоУмолчанию");
	Для ТекСтр=2 По Макет.ВысотаТаблицы Цикл
	
		СоздатьЭлемент(Макет.Область("R"+ТекСтр+"C1").Текст,
						Макет.Область("R"+ТекСтр+"C2").Текст,
						Макет.Область("R"+ТекСтр+"C3").Текст,
						Макет.Область("R"+ТекСтр+"C4").Текст,
						Макет.Область("R"+ТекСтр+"C5").Текст);
	
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьЭлемент(ВидОбъекта, ИмяТабличнойЧасти, ИмяРеквизита, ТипРеквизита, СтрЗначениеРеквизита)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ИдентификаторыОбъектовМетаданных.Ссылка
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
	|ГДЕ
	|	ИдентификаторыОбъектовМетаданных.ПолноеИмя = &ПолноеИмя");
	Запрос.УстановитьПараметр("ПолноеИмя", ВидОбъекта);
	
	РезультатВыборки = Запрос.Выполнить().Выбрать();
	Если НЕ РезультатВыборки.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	Регистр = РегистрыСведений.ЗначениеРеквизитовПоУмолчанию.СоздатьНаборЗаписей();
	Регистр.Отбор.ВидОбъекта.Установить(РезультатВыборки.Ссылка);
	Регистр.Отбор.ИмяТабличнойЧасти.Установить(ИмяТабличнойЧасти);
	Регистр.Отбор.ИмяРеквизита.Установить(ИмяРеквизита);
	
	//Данные уже есть в регистре трогать не будем
	Регистр.Прочитать();
	Если Регистр.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	НовЗапись = Регистр.Добавить();
	НовЗапись.ВидОбъекта        = РезультатВыборки.Ссылка;
	НовЗапись.ИмяТабличнойЧасти = ИмяТабличнойЧасти;
	НовЗапись.ИмяРеквизита      = ИмяРеквизита;
		
	ОбъектМетаданные = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(НовЗапись.ВидОбъекта);
	Если ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда
		НовЗапись.ПредставлениеИмениТабличнойЧасти = ОбъектМетаданные.ТабличныеЧасти[ИмяТабличнойЧасти].Синоним;
		Если ОбъектМетаданные.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти(НовЗапись.ИмяРеквизита) <> Неопределено Тогда
			НовЗапись.ПредставлениеИмениРеквизита = ОбъектМетаданные.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты[НовЗапись.ИмяРеквизита].Синоним;
		КонецЕсли;
	Иначе
		Если ОбъектМетаданные.Реквизиты.Найти(НовЗапись.ИмяРеквизита) <> Неопределено Тогда
			НовЗапись.ПредставлениеИмениРеквизита = ОбъектМетаданные.Реквизиты[НовЗапись.ИмяРеквизита].Синоним;
		КонецЕсли;
	КонецЕсли;

	НовЗапись.ТипРеквизита          = ТипРеквизита;
	Если ЗначениеЗаполнено(СтрЗначениеРеквизита) Тогда
		НовЗапись.ЗначениеРеквизита = ПолучитьЗначениеРеквизита(ТипРеквизита, СтрЗначениеРеквизита);
	КонецЕсли;

	Регистр.Записать(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Монопольный обработчик обновления 2.0.5.1
Процедура ОбновитьДанныеПоУмолчаниюФорматовДат() Экспорт
	
	УдалитьСпособЗаданияДат("СпособЗаданияДатыВыработки");
	УдалитьСпособЗаданияДат("СпособЗаданияДатыСроковГодности");
	
	Регистр = РегистрыСведений.ЗначениеРеквизитовПоУмолчанию.СоздатьНаборЗаписей();
	Регистр.Отбор.ИмяРеквизита.Установить("ФорматЗаданияДат");
	
	Регистр.Прочитать();
	
	Для Каждого ТекЗапись Из Регистр Цикл
		ДобавитьЗначениеФорматаДат(ТекЗапись, "ФорматДатыВыработки", "Формат даты выработки");
		ДобавитьЗначениеФорматаДат(ТекЗапись, "ФорматСрокаГодности", "Формат срока годности");
	КонецЦикла;
	
	Регистр.Очистить();
	Регистр.Записать();
	
КонецПроцедуры

Процедура ДобавитьЗначениеФорматаДат(ДанныеЗаписи, ИмяРеквизита, ПредставлениеИмениРеквизита)
	
	МенеджерЗаписи = РегистрыСведений.ЗначениеРеквизитовПоУмолчанию.СоздатьМенеджерЗаписи();
	
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ДанныеЗаписи);
	
	МенеджерЗаписи.ИмяРеквизита = ИмяРеквизита;
	МенеджерЗаписи.ПредставлениеИмениРеквизита = ПредставлениеИмениРеквизита;
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура УдалитьСпособЗаданияДат(ИмяСпособа)
	
	НаборЗаписей = РегистрыСведений.ЗначениеРеквизитовПоУмолчанию.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИмяРеквизита.Установить(ИмяСпособа);
	
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция ищет значение реквизита по заданному представлению. Для справочников поиск ведется по основному представлению.
//
// Возвращаемое значение:
//   Найденное значение реквизита
//
Функция ПолучитьЗначениеРеквизита(ТипРеквизита, СтрЗначениеРеквизита)
	
	Если ТипРеквизита = "Строка" Тогда
		Возврат СтрЗначениеРеквизита;
	ИначеЕсли ТипРеквизита = "Число" Тогда
		ТипЧисло = Новый ОписаниеТипов("Число");
		Возврат ТипЧисло.ПривестиЗначение(СтрЗначениеРеквизита);
	ИначеЕсли ТипРеквизита = "Дата" Тогда
		ТипДата = Новый ОписаниеТипов("Дата");
		Возврат ТипДата.ПривестиЗначение(СтрЗначениеРеквизита);
	ИначеЕсли ТипРеквизита = "Булево" Тогда
		ТипБулево = Новый ОписаниеТипов("Булево");
		Возврат ТипБулево.ПривестиЗначение(СтрЗначениеРеквизита);
	КонецЕсли;

	ЧастиИмени = СтрРазделить(ТипРеквизита, ".");
	ТипОбъекта=ЧастиИмени[0];
	ВидОбъекта=ЧастиИмени[1];
	
	Если ТипОбъекта="Справочник" Тогда
		Возврат Справочники[ВидОбъекта][СтрЗначениеРеквизита];
	ИначеЕсли ТипОбъекта="Перечисление" Тогда
		Возврат Перечисления[ВидОбъекта][СтрЗначениеРеквизита];
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции // ПолучитьЗначениеРеквизита()

#КонецОбласти

#КонецЕсли