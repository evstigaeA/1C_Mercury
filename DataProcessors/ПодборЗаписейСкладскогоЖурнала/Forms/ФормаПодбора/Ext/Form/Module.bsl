#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Документ = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Предусмотрено открытие обработки только из документов.'");
	КонецЕсли;
	
	ИспользоватьОбменЧерезУниверсальныйФормат = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЧерезУниверсальныйФормат");
	
	ИнициализацияФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ПеренестиВДокумент Тогда
		АдресПродукцииВХранилище = АдресПродукцииВХранилище(ЭтаФорма.ВладелецФормы.УникальныйИдентификатор);
	Иначе
		АдресПродукцииВХранилище = Неопределено;
	КонецЕсли;
	
	Если АдресПродукцииВХранилище <> Неопределено Тогда
		ОповеститьОВыборе(АдресПродукцииВХранилище);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПродукцииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СписокПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	СтруктураСтроки = Новый Структура("ЗаписьСкладскогоЖурнала, Количество, КоличествоМаксимум");
	ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекущиеДанные);
	СтруктураСтроки.КоличествоМаксимум = СтруктураСтроки.Количество;
	
	ОбработатьВыборЗначения(СтруктураСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПродукцииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияПродукцииПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ИерархияПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("ТипПродукции, ВидПродукции, ПодвидПродукции");
	
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекущиеДанные);
	
	Для Каждого ТекЭлемент Из СтруктураОтбора Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПродукции, ТекЭлемент.Ключ,
				ТекЭлемент.Значение, ВидСравненияКомпоновкиДанных.Равно, Строка(ТипЗнч(ТекЭлемент.Значение)), ЗначениеЗаполнено(ТекЭлемент.Значение));
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ИерархияПродукцииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияПродукцииПередРазворачиванием(Элемент, Строка, Отказ)
	
	Если Строка.ИмяГруппировки = "ПодвидПродукции" Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТаблицаПодобраннаяПродукция

&НаКлиенте
Процедура ПодобраннаяПродукцияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяПродукцияПередУдалением(Элемент, Отказ)
	
	МассивСвязанныхТЧ = Новый Массив;
	МассивСвязанныхТЧ.Добавить("СписокФизическихУпаковок");

	ОбработкаТабличнойЧастиКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭтаФорма, "ПодобраннаяПродукция", МассивСвязанныхТЧ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяПродукцияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПодобраннаяПродукция.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ПодобраннаяПродукцияУпаковки" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ТекущиеДанные.ТипПродукцииЖивыеЖивотные Тогда
			Возврат;
		КонецЕсли;
		
		GUIDСтроки = ТекущиеДанные.GUIDСтроки;
		
		АдресХранения = ПоместитьТаблицуУпаковокВоВременноеХранилище(GUIDСтроки);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("АдресХранения",  АдресХранения);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодобраннаяПродукцияВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ВводДанныхПоУпаковкам.Форма", ПараметрыФормы,,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Поле.Имя = "ПодобраннаяПродукцияЗаписьСкладскогоЖурнала" Тогда
		
		ПоказатьЗначение(, ТекущиеДанные.ЗаписьСкладскогоЖурнала);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяПродукцияВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные   = ДополнительныеПараметры.ТекущиеДанные;
	
	НайденныеСтроки = СписокФизическихУпаковок.НайтиСтроки(Новый Структура("GUIDСтроки", ТекущиеДанные.GUIDСтроки));
	
	Для Каждого ТекСтрока Из НайденныеСтроки Цикл
		СписокФизическихУпаковок.Удалить(ТекСтрока);
	КонецЦикла;
	
	Если Результат.Количество() = 0 Тогда
		ТекущиеДанные.Упаковки = НСтр("ru = 'Без упаковок'");
	Иначе
		Для Каждого ТекДанные Из Результат Цикл
			НоваяСтрока = СписокФизическихУпаковок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекДанные);
			НоваяСтрока.GUIDСтроки = ТекущиеДанные.GUIDСтроки;
		КонецЦикла;
		ТекущиеДанные.Упаковки = НСтр("ru = 'Введены данные по упаковкам'");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяПродукцияКоличествоПриИзменении(Элемент)
	
	Если КонтрольОстатков Тогда
		
		ТекущиеДанные = Элементы.ПодобраннаяПродукция.ТекущиеДанные;
		
		Если ТекущиеДанные.Количество > ТекущиеДанные.КоличествоМаксимум Тогда
			ТекущиеДанные.Количество = ТекущиеДанные.КоличествоМаксимум;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нельзя выбрать больше максимума'"), , "ПодобраннаяПродукция[" + ПодобраннаяПродукция.Индекс(ТекущиеДанные) + "].Количество");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяПродукцияНоменклатураУчетнойСистемыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПодобраннаяПродукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУВСКлиент.НоменклатураУчетнойСистемыНачалоВыбора(Элемент, СтандартнаяОбработка, ТекущиеДанные.ЗаписьСкладскогоЖурнала);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяПродукцияНоменклатураУчетнойСистемыАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПодобраннаяПродукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУВСКлиент.НоменклатураУчетнойСистемыАвтоПодбор(ДанныеВыбора, Текст, СтандартнаяОбработка, ТекущиеДанные.ЗаписьСкладскогоЖурнала);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяПродукцияНоменклатураУчетнойСистемыОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПодобраннаяПродукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУВСКлиент.НоменклатураУчетнойСистемыОкончаниеВводаТекста(ДанныеВыбора, Текст, СтандартнаяОбработка, ТекущиеДанные.ЗаписьСкладскогоЖурнала);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	ПеренестиВДокумент = Истина;
	Закрыть(КодВозвратаДиалога.OK);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализацияФормы()
	
	Параметры.Свойство("Организация"     , Организация);
	Параметры.Свойство("Предприятие"     , Предприятие);
	Параметры.Свойство("КонтрольОстатков", КонтрольОстатков);
	Параметры.Свойство("ТолькоПросмотр"  , ТолькоПросмотр);
	
	МассивРазрешенныхСтатусов = ИнтеграцияВетисAPIСлужебныйПовтИсп.РазрешенныеСтатусыЗаписейСкладскогоЖурналаДляВыполненияОпераций();
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПродукции, "МассивРазрешенныхСтатусов"  , МассивРазрешенныхСтатусов);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ИерархияПродукции, "МассивРазрешенныхСтатусов", МассивРазрешенныхСтатусов);
	
	Если ТипЗнч(Параметры.Документ) = Тип("ДокументСсылка.ОбъединениеЗаписейСкладскогоЖурнала") Тогда
		
		СоединениеДляОбъединения = СоединениеЗапросаДинамическогоСпискаДляОбъединенияПродукции();
		
		СписокПродукции.ТекстЗапроса   = СтрЗаменить(СписокПродукции.ТекстЗапроса  , "//%ЛевоеСоединениеДляОбъединенияПродукции", СоединениеДляОбъединения);
		ИерархияПродукции.ТекстЗапроса = СтрЗаменить(ИерархияПродукции.ТекстЗапроса, "//%ЛевоеСоединениеДляОбъединенияПродукции", СоединениеДляОбъединения);
		
		УсловияЗапросаДляОбъединения = УсловияЗапросаДинамическогоСпискаДляОбъединенияПродукции();
		
		СписокПродукции.ТекстЗапроса   = СписокПродукции.ТекстЗапроса + УсловияЗапросаДляОбъединения;
		ИерархияПродукции.ТекстЗапроса = ИерархияПродукции.ТекстЗапроса + УсловияЗапросаДляОбъединения;
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПродукции, "ВырабатываемаяПродукция"    , Параметры.ВырабатываемаяПродукция);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПродукции, "ТипПродукции"               , Параметры.ТипПродукции);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПродукции, "ВидПродукции"               , Параметры.ВидПродукции);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПродукции, "СтранаПроисхождения"        , Параметры.СтранаПроисхождения);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПродукции, "НекачественныйГруз"         , Параметры.НекачественныйГруз);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПродукции, "СкоропортящаясяПродукция"   , Параметры.СкоропортящаясяПродукция);
		Если Параметры.Свойство("ЗаписьСкладскогоЖурнала") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПродукции, "ЗаписьСкладскогоЖурнала", Параметры.ЗаписьСкладскогоЖурнала);
		КонецЕсли;
		Если Параметры.Свойство("ПодвидПродукции") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПродукции, "ПодвидПродукции", Параметры.ПодвидПродукции);
		КонецЕсли;
		Если Параметры.Свойство("Продукция") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПродукции, "Продукция", Параметры.Продукция);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ИерархияПродукции, "ВырабатываемаяПродукция"  , Параметры.ВырабатываемаяПродукция);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ИерархияПродукции, "ТипПродукции"             , Параметры.ТипПродукции);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ИерархияПродукции, "ВидПродукции"             , Параметры.ВидПродукции);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ИерархияПродукции, "СтранаПроисхождения"      , Параметры.СтранаПроисхождения);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ИерархияПродукции, "НекачественныйГруз"       , Параметры.НекачественныйГруз);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ИерархияПродукции, "СкоропортящаясяПродукция" , Параметры.СкоропортящаясяПродукция);
		Если Параметры.Свойство("ЗаписьСкладскогоЖурнала") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ИерархияПродукции, "ЗаписьСкладскогоЖурнала", Параметры.ЗаписьСкладскогоЖурнала);
		КонецЕсли;
		Если Параметры.Свойство("ПодвидПродукции") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ИерархияПродукции, "ПодвидПродукции", Параметры.ПодвидПродукции);
		КонецЕсли;
		Если Параметры.Свойство("Продукция") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ИерархияПродукции, "Продукция", Параметры.Продукция);
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПродукции,   "Организация", Организация);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПродукции,   "Предприятие", Предприятие);
		
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ИерархияПродукции, "Организация", Организация);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ИерархияПродукции, "Предприятие", Предприятие);
	
	Если ЗначениеЗаполнено(Параметры.Заголовок) Тогда
		ЭтаФорма.АвтоЗаголовок = Ложь;
		ЭтаФорма.Заголовок     = Параметры.Заголовок;
	КонецЕсли;
	
	Элементы.ПодобраннаяПродукция.ТолькоПросмотр = ТолькоПросмотр;
	
	ТаблицаИзДокумента = ПолучитьИзВременногоХранилища(Параметры.АдресХраненияДанных);
	ДобавитьКТаблицеДокументаЗначенияМаксимумов(ТаблицаИзДокумента);
	
	СписокФизическихУпаковок.Загрузить(ПолучитьИзВременногоХранилища(Параметры.АдресХраненияУпаковок));
	
КонецПроцедуры

&НаСервере
Функция СоединениеЗапросаДинамическогоСпискаДляОбъединенияПродукции()
	
	ТекстЗапроса = "
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СвойстваЗаписейСкладскогоЖурнала.ПроизводителиПродукции КАК СвойстваЗаписейСкладскогоЖурналаПроизводителиПродукции
			|		ПО (СвойстваЗаписейСкладскогоЖурнала.Ссылка = СвойстваЗаписейСкладскогоЖурналаПроизводителиПродукции.Ссылка)";
			
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция УсловияЗапросаДинамическогоСпискаДляОбъединенияПродукции()
	
	ТекстЗапроса = "
			|{ГДЕ
			|	(СвойстваЗаписейСкладскогоЖурнала.ТипПродукции = &ТипПродукции),
			|	(СвойстваЗаписейСкладскогоЖурнала.ВидПродукции = &ВидПродукции),
			|	(СвойстваЗаписейСкладскогоЖурнала.ПодвидПродукции = &ПодвидПродукции),
			|	(СвойстваЗаписейСкладскогоЖурнала.Продукция = &Продукция),
			|	(СвойстваЗаписейСкладскогоЖурнала.СтранаПроисхождения = &СтранаПроисхождения),
			|	(СвойстваЗаписейСкладскогоЖурнала.НекачественныйГруз = &НекачественныйГруз),
			|	(СвойстваЗаписейСкладскогоЖурнала.СкоропортящаясяПродукция = &СкоропортящаясяПродукция),
			|	(СвойстваЗаписейСкладскогоЖурнала.Ссылка <> &ЗаписьСкладскогоЖурнала),
			|	(ВЫБОР
			|				КОГДА &ВырабатываемаяПродукция
			|					ТОГДА СвойстваЗаписейСкладскогоЖурналаПроизводителиПродукции.Производитель = &Предприятие
			|				ИНАЧЕ НЕ &Предприятие В (СвойстваЗаписейСкладскогоЖурналаПроизводителиПродукции.Производитель)
			|			КОНЕЦ
			|			И СвойстваЗаписейСкладскогоЖурнала.ФорматДатыВыработки <> ЗНАЧЕНИЕ(Перечисление.СпособыЗаданияДаты.Строка)
			|			И СвойстваЗаписейСкладскогоЖурнала.ФорматСрокаГодности <> ЗНАЧЕНИЕ(Перечисление.СпособыЗаданияДаты.Строка))}";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Процедура ДобавитьКТаблицеДокументаЗначенияМаксимумов(ТаблицаИзДокумента)
	
	Если ТаблицаИзДокумента.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗаписей = ТаблицаИзДокумента.ВыгрузитьКолонку("ЗаписьСкладскогоЖурнала");
	ПринадлежностьЗаписейЖивымЖивотным = ИнтеграцияВетисAPIВызовСервера.ПродукцияПринадлежитТипуЖивыхЖивотных(МассивЗаписей, Ложь);

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаИзДокумента.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
		|	ТаблицаИзДокумента.Количество КАК Количество,
		|	ТаблицаИзДокумента.Упаковки КАК Упаковки,
		|	ТаблицаИзДокумента.GUIDСтроки КАК GUIDСтроки
		|ПОМЕСТИТЬ ВТ_ДанныеИзДоумента
		|ИЗ
		|	&ТаблицаИзДокумента КАК ТаблицаИзДокумента
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаписьСкладскогоЖурнала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_ДанныеИзДоумента.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
		|	ВТ_ДанныеИзДоумента.Количество КАК Количество,
		|	ВТ_ДанныеИзДоумента.Упаковки КАК Упаковки,
		|	ВТ_ДанныеИзДоумента.GUIDСтроки КАК GUIDСтроки,
		|	ИСТИНА КАК ЭтоСтрокаИзДокумента,
		|	ДвижениеПродукцииОстатки.КоличествоОстаток КАК КоличествоМаксимум
		|ИЗ
		|	ВТ_ДанныеИзДоумента КАК ВТ_ДанныеИзДоумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДвижениеПродукции.Остатки(
		|				,
		|				ЗаписьСкладскогоЖурнала В
		|						(ВЫБРАТЬ
		|							ВТ_ДанныеИзДоумента.ЗаписьСкладскогоЖурнала
		|						ИЗ
		|							ВТ_ДанныеИзДоумента КАК ВТ_ДанныеИзДоумента)
		|					И Организация = &Организация
		|					И Предприятие = &Предприятие) КАК ДвижениеПродукцииОстатки
		|		ПО ВТ_ДанныеИзДоумента.ЗаписьСкладскогоЖурнала = ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаИзДокумента", ТаблицаИзДокумента);
	Запрос.УстановитьПараметр("Организация"       , Организация);
	Запрос.УстановитьПараметр("Предприятие"       , Предприятие);
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ПодобраннаяПродукция.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ТипПродукции = Выборка.ЗаписьСкладскогоЖурнала.ТипПродукции;
		НоваяСтрока.ТипПродукцииЖивыеЖивотные = ПринадлежностьЗаписейЖивымЖивотным.Получить(Выборка.ЗаписьСкладскогоЖурнала);
		
		Если Не ЗначениеЗаполнено(Выборка.GUIDСтроки) Тогда
			НоваяСтрока.GUIDСтроки = Строка(Новый УникальныйИдентификатор());
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборЗначения(СтруктураСтроки)

	СтруктураПоиска = Новый Структура("ЗаписьСкладскогоЖурнала", СтруктураСтроки.ЗаписьСкладскогоЖурнала);
	
	НайденныеСтроки = ПодобраннаяПродукция.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ТекущаяСтрока = НайденныеСтроки[0];
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураСтроки);
		
	Иначе
		
		ТекущаяСтрока = ПодобраннаяПродукция.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураСтроки);
		
		ТекущаяСтрока.GUIDСтроки = Строка(Новый УникальныйИдентификатор());
		
		ДанныеЗаписи = ДанныеЗаписиСкладскогоЖурнала(СтруктураСтроки.ЗаписьСкладскогоЖурнала, ТекущаяСтрока.GUIDСтроки);
		
		ТекущаяСтрока.ТипПродукции = ДанныеЗаписи.ТипПродукции;
		ТекущаяСтрока.ТипПродукцииЖивыеЖивотные = ДанныеЗаписи.ТипПродукцииЖивыеЖивотные;
		
		Если ДанныеЗаписи.ЕстьУпаковки Тогда
			ТекущаяСтрока.Упаковки = НСтр("ru = 'Введены данные по упаковкам'");
		Иначе
			ТекущаяСтрока.Упаковки = НСтр("ru = 'Без упаковок'");
		КонецЕсли;
		
		Если ИспользоватьОбменЧерезУниверсальныйФормат Тогда

			ТекущаяСтрока.НоменклатураУчетнойСистемы = ПолучитьНоменклатуруУчетнойСистемы(СтруктураСтроки.ЗаписьСкладскогоЖурнала);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ПодобраннаяПродукция.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();

КонецПроцедуры

&НаСервере
Функция ПолучитьНоменклатуруУчетнойСистемы(ЗаписьСкладскогоЖурнала)
	
	Возврат Справочники.НоменклатураУчетнойСистемы.ПолучитьНоменклатуруУчетнойСитсемы(ЗаписьСкладскогоЖурнала);
	
КонецФункции

&НаСервере
Функция ДанныеЗаписиСкладскогоЖурнала(ЗаписьСкладскогоЖурнала, ИдентификаторСтроки)
	
	ТаблицаУпаковок = ЗаписьСкладскогоЖурнала.СписокФизическихУпаковок;
	
	ЕстьУпаковки = Ложь;
	
	Если ТаблицаУпаковок.Количество() > 0 Тогда
		
		Для Каждого ТекСтрока Из ТаблицаУпаковок Цикл
			НоваяСтрока = СписокФизическихУпаковок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.GUIDСтроки = ИдентификаторСтроки; 
		КонецЦикла;
		
		ЕстьУпаковки = Истина;
	КонецЕсли;
	
	ДанныеЗаписи = Новый Структура;
	ДанныеЗаписи.Вставить("ТипПродукции", ЗаписьСкладскогоЖурнала.ТипПродукции);
	ДанныеЗаписи.Вставить("ТипПродукцииЖивыеЖивотные", ИнтеграцияВетисAPIВызовСервера.ПродукцияПринадлежитТипуЖивыхЖивотных(ЗаписьСкладскогоЖурнала, Ложь));
	ДанныеЗаписи.Вставить("ЕстьУпаковки", ЕстьУпаковки);
	
	Возврат ДанныеЗаписи;
КонецФункции

&НаСервере
Функция ПоместитьТаблицуУпаковокВоВременноеХранилище(ИдентификаторСтроки)
	
	ТаблицаУпаковок = СписокФизическихУпаковок.Выгрузить(Новый Структура("GUIDСтроки", ИдентификаторСтроки));
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаУпаковок, УникальныйИдентификатор);
КонецФункции

&НаСервере
Функция АдресПродукцииВХранилище(УникальныйИдентификаторВладельца)
	
	АдресВХранилище = Неопределено;
	
	Если ПеренестиВДокумент Тогда
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Продукция", ПодобраннаяПродукция.Выгрузить());
		СтруктураДанных.Вставить("СписокФизическихУпаковок", СписокФизическихУпаковок.Выгрузить());
		
		АдресВХранилище = ПоместитьВоВременноеХранилище(СтруктураДанных, УникальныйИдентификаторВладельца);
	
	КонецЕсли;
	
	Возврат АдресВХранилище;
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ИнтеграцияВетисAPIСервер.УстановитьУсловноеОформлениеФорматовДат(СписокПродукции);
	
КонецПроцедуры

#КонецОбласти