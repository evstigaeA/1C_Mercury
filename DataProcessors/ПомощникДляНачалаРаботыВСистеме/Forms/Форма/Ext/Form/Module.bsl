
#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Устанавливаем текущую таблицу переходов.
	ТаблицаПереходовПоСценарию1();
	
	// Позиционируемся на первом шаге помощника.
	УстановитьПорядковыйНомерПерехода(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ТекстПредупреждения = НСтр("ru = 'Закрыть помощник?'");
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияПроизвольнойФормы(
		ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, "ЗакрытьФормуБезусловно");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеДанныхПредприятия" Тогда
		Элементы.Предприятия.Обновить();
	ИначеЕсли ИмяСобытия = "СозданиеКорректировкиОстатковЗаписейСкладскогоЖурнала" Тогда
		Элементы.КорректировкаОстатковЗаписейСкладскогоЖурнала.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	ПропуститьЗагрузку = Ложь;
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПропуститьЗагрузку(Команда)
	
	ПропуститьЗагрузку = Истина;
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	ЗакрытьФормуБезусловно = Истина;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Поставляемая часть

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	
	ПорядковыйНомерПерехода = Значение;
	
	Если ПорядковыйНомерПерехода < 0 Тогда
		
		ПорядковыйНомерПерехода = 0;
		
	КонецЕсли;
	
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Выполняем обработчики событий перехода.
	ВыполнитьОбработчикиСобытийПерехода(ЭтоПереходДалее);
	
	// Устанавливаем отображение страниц.
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяСтраницыДекорации) Тогда
		
		Элементы.ПанельДекорации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыДекорации];
		
	КонецЕсли;
	
	// Устанавливаем текущую кнопку по умолчанию.
	КнопкаДалее = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаДалее");
	
	Если КнопкаДалее <> Неопределено Тогда
		
		КнопкаДалее.КнопкаПоУмолчанию = Истина;
		
	Иначе
		
		КнопкаГотово = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаГотово");
		
		Если КнопкаГотово <> Неопределено Тогда
			
			КнопкаГотово.КнопкаПоУмолчанию = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПереходДалее И СтрокаПереходаТекущая.ДлительнаяОперация Тогда
		
		ПодключитьОбработчикОжидания("ВыполнитьОбработчикДлительнойОперации", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикиСобытийПерехода(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов.
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		
		Если СтрокиПерехода.Количество() > 0 Тогда
			
			СтрокаПерехода = СтрокиПерехода[0];
			
			// Обработчик ПриПереходеДалее.
			Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее)
				И Не СтрокаПерехода.ДлительнаяОперация Тогда
				
				ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
				ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
				
				Отказ = Ложь;
				
				Результат = Вычислить(ИмяПроцедуры);
				
				Если Отказ Тогда
					
					ПорядковыйНомерПерехода = ПорядковыйНомерПерехода - 1;
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() > 0 Тогда
			
			СтрокаПерехода = СтрокиПерехода[0];
			
			// Обработчик ПриПереходеНазад.
			Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад)
				И Не СтрокаПерехода.ДлительнаяОперация Тогда
				
				ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
				ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
				
				Отказ = Ложь;
				
				Результат = Вычислить(ИмяПроцедуры);
				
				Если Отказ Тогда
					
					ПорядковыйНомерПерехода = ПорядковыйНомерПерехода + 1;
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Если СтрокаПереходаТекущая.ДлительнаяОперация И Не ЭтоПереходДалее Тогда
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
		Возврат;
	КонецЕсли;
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		Результат = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			ПорядковыйНомерПерехода = ПорядковыйНомерПерехода - 1;
			Возврат;
			
		ИначеЕсли ПропуститьСтраницу Тогда
			
			Если ЭтоПереходДалее Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				Возврат;
				
			Иначе
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикДлительнойОперации()
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// Обработчик ОбработкаДлительнойОперации.
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПерейтиДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации);
		
		Отказ = Ложь;
		ПерейтиДалее = Истина;
		
		Результат = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			ПорядковыйНомерПерехода = ПорядковыйНомерПерехода - 1;
			Возврат;
			
		ИначеЕсли ПерейтиДалее Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКнопкуФормыПоИмениКоманды(ЭлементФормы, ИмяКоманды)
	
	Для Каждого Элемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			
			ЭлементФормыПоИмениКоманды = ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);
			
			Если ЭлементФормыПоИмениКоманды <> Неопределено Тогда
				
				Возврат ЭлементФормыПоИмениКоманды;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы")
			И СтрНайти(Элемент.ИмяКоманды, ИмяКоманды) > 0 Тогда
			
			Возврат Элемент;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть - Обработчики событий переходов.

#Область СтраницаНастройкиПодключенияКВетисAPI

// Обработчик выполняется при открытии страницы помощника "СтраницаНастройкиПодключенияКВетисAPI".
//
// Параметры:
//
//  Отказ - Булево - флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад).
//
//  ПропуститьСтраницу - Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад).
//
//  ЭтоПереходДалее (только чтение) - Булево - флаг определяет направление перехода.
//			Истина - выполняется переход далее; Ложь - выполняется переход назад.
//
&НаКлиенте
Функция Подключаемый_СтраницаНастройкиПодключенияКВетисAPI_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	СтраницаНастройкиПодключенияКВетисAPI_ПриОткрытииНаСервере();
	
КонецФункции

// Обработчик перехода далее (на следующую страницу) при уходе со страницы помощника "СтраницаНастройкиПодключенияКВетисAPI".
//
// Параметры:
// Отказ - Булево - флаг отказа от выполнения перехода далее;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
&НаКлиенте
Функция Подключаемый_СтраницаНастройкиПодключенияКВетисAPI_ПриПереходеДалее(Отказ)
	
	Если Не ЗначениеЗаполнено(ВидСервераВетисAPI) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Необходимо указать вид сервера.'"),, "ВидСервераВетисAPI");
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Необходимо указать организацию.'"),, "Организация");
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НастройкаПодключенияКВетисAPI) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Необходимо указать настройки подключения в Ветис.API.'"));
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Необходимо указать хозяйствующий субъект.'"),, "Контрагент");
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОрганизацияДляПолученияНСИ) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Необходимо указать организацию для получения НСИ.'"),, "ОрганизацияДляПолученияНСИ");
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Необходимо указать пользователя.'"),, "Пользователь");
		Отказ = Истина;
	Иначе
		ПараметрыПодключенияПользователя = ПараметрыПодключенияПользователя(Пользователь);
		Если ПараметрыПодключенияПользователя = Неопределено Тогда
			Отказ = Истина;
		Иначе
			Если ЗначениеЗаполнено(ПараметрыПодключенияПользователя.ОписаниеОшибки) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПараметрыПодключенияПользователя.ОписаниеОшибки,, "Пользователь");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПараметрыПодключенияПользователя(Пользователь)
	ПараметрыПодключенияПользователя = ИнтеграцияВетисAPIСлужебный.ПараметрыПодключенияПользователя(Пользователь);
	Возврат ПараметрыПодключенияПользователя
КонецФункции

&НаСервере
Процедура СтраницаНастройкиПодключенияКВетисAPI_ПриОткрытииНаСервере()
	
	ВидСервераВетисAPI = Константы.ВидСервераВетисAPI.Получить();
	ТаймаутСоединения  = Константы.ТаймаутСоединения.Получить();
	ОрганизацияДляПолученияНСИ = Константы.ОрганизацияДляПолученияНСИ.Получить();
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	СвойстваНеуказанногоПользователя = ПользователиСлужебный.СвойстваНеуказанногоПользователя();
	Если Не ТекущийПользователь = СвойстваНеуказанногоПользователя.Ссылка Тогда
		Пользователь = ТекущийПользователь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСервераВетисAPIПриИзменении(Элемент)
	ЗаписатьОбщиеДанные("ВидСервераВетисAPI");
КонецПроцедуры

&НаКлиенте
Процедура ТаймаутСоединенияПриИзменении(Элемент)
	ЗаписатьОбщиеДанные(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	НастройкаПодключения = ОбщегоНазначенияУВССервер.НастройкаПодключенияКВетисAPI(Организация);
	Если ЗначениеЗаполнено(НастройкаПодключения) Тогда
		НастройкаПодключенияКВетисAPI = НастройкаПодключения.Ссылка;
		Контрагент = ОбщегоНазначенияУВССервер.КонтрагентПоОрганизации(Организация);
		Элементы.ДекорацияНастройкиПодключения.Заголовок = НастройкаПодключенияКВетисAPI.Наименование;
		Элементы.ДекорацияНастройкиПодключения.ЦветТекста = ЦветаСтиля.ГиперссылкаЦвет;
	Иначе	
		НастройкаПодключенияКВетисAPI = Справочники.НастройкиПодключенияКВетисAPI.ПустаяСсылка();
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Элементы.ДекорацияНастройкиПодключения.Заголовок = "Настройки подключения не указаны";
		Элементы.ДекорацияНастройкиПодключения.ЦветТекста = ЦветаСтиля.ПросроченныеДанныеЦвет;
	КонецЕсли;
	
	Предприятия.Параметры.УстановитьЗначениеПараметра("Контрагент",  Контрагент);
	ДатыПоследнихЗагрузокВСД.Параметры.УстановитьЗначениеПараметра("Организация", Организация);
	КорректировкаОстатковЗаписейСкладскогоЖурнала.Параметры.УстановитьЗначениеПараметра("Организация", Организация);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(АдминистрированиеПользователей, "Организация", Организация, ВидСравненияКомпоновкиДанных.Равно);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиПодключенияНажатие(Элемент)
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("НастройкиПодключенияЗавершение", Этаформа);
		Если ЗначениеЗаполнено(НастройкаПодключенияКВетисAPI) Тогда 
			ОткрытьФорму("Справочник.НастройкиПодключенияКВетисAPI.Форма.ФормаЭлемента", Новый Структура("Ключ", НастройкаПодключенияКВетисAPI), Этаформа,,,, ОповещениеОЗакрытии);
		Иначе
			ОткрытьФорму("Справочник.НастройкиПодключенияКВетисAPI.Форма.ФормаЭлемента", Новый Структура("Организация", Организация), Этаформа,,,, ОповещениеОЗакрытии);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Необходимо указать организацию.'"),, "Организация");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПодключенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияДляПолученияНСИПриИзменении(Элемент)
	ЗаписатьОбщиеДанные("ОрганизацияДляПолученияНСИ");
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиОбменаНажатие(Элемент)
	
	ОткрытьФорму("РегистрСведений.НастройкиОбменаВетисAPI.Форма.ФормаСписка",, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаЗагрузкаБазовойНСИ

// Обработчик выполняется при открытии страницы помощника "СтраницаЗагрузкаБазовойНСИ".
//
// Параметры:
//
//  Отказ - Булево - флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад).
//
//  ПропуститьСтраницу - Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад).
//
//  ЭтоПереходДалее (только чтение) - Булево - флаг определяет направление перехода.
//			Истина - выполняется переход далее; Ложь - выполняется переход назад.
//
&НаКлиенте
Функция Подключаемый_СтраницаЗагрузкаБазовойНСИ_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	ПропуститьСтраницу = ПропуститьЗагрузку;
	
КонецФункции

// Обработчик перехода далее (на следующую страницу) при уходе со страницы помощника "СтраницаЗагрузкаБазовойНСИ".
//
// Параметры:
// Отказ - Булево - флаг отказа от выполнения перехода далее;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
&НаКлиенте
Функция Подключаемый_СтраницаЗагрузкаБазовойНСИ_Ожидание(Отказ, ПерейтиДалее)
	
	ЗагрузкаБазовойНСИНаСервере();
	
КонецФункции

&НаСервере
Процедура ЗагрузкаБазовойНСИНаСервере()
	
	ПараметрыЗапуска = Новый Массив;
	ПараметрыЗапуска.Добавить(Истина);
	Задание = ФоновыеЗадания.Выполнить("ИнтеграцияВетисAPIБазоваяНСИ.РегламентноеЗаданиеЗагрузкаБазовойНСИИСМеркурий",
							ПараметрыЗапуска,
							"ЗагрузкаБазовойНСИИСМеркурий",
							НСтр("ru = 'Загрузка базовой НСИ ИС ""Меркурий""'"));
							
	МассивЗаданий = Новый Массив;
	МассивЗаданий.Добавить(Задание);
	
	ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
	
КонецПроцедуры	

#КонецОбласти

#Область СтраницаПоискСозданиеПредприятий

// Обработчик перехода далее (на следующую страницу) при уходе со страницы помощника "СтраницаПоискСозданиеПредприятий".
//
// Параметры:
// Отказ - Булево - флаг отказа от выполнения перехода далее;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
&НаКлиенте
Функция Подключаемый_СтраницаПоискСозданиеПредприятий_ПриПереходеДалее(Отказ)
КонецФункции

// Обработчик перехода назад (на предыдущую страницу) при уходе со страницы помощника "СтраницаПоискСозданиеПредприятий".
//
// Параметры:
// Отказ - Булево - флаг отказа от выполнения перехода назад;
//					если в обработчике поднять этот флаг, то переход на предыдущую страницу выполнен не будет.
//
&НаКлиенте
Функция Подключаемый_СтраницаПоискСозданиеПредприятий_ПриПереходеНазад(Отказ)
КонецФункции

// Обработчик выполняется при открытии страницы помощника "СтраницаПоискСозданиеПредприятий".
//
// Параметры:
//
//  Отказ - Булево - флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад).
//
//  ПропуститьСтраницу - Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад).
//
//  ЭтоПереходДалее (только чтение) - Булево - флаг определяет направление перехода.
//			Истина - выполняется переход далее; Ложь - выполняется переход назад.
//
&НаКлиенте
Функция Подключаемый_СтраницаПоискСозданиеПредприятий_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	СтраницаПоискСозданиеПредприятий_ПриОткрытииНаСервере();
КонецФункции

&НаСервере
Процедура СтраницаПоискСозданиеПредприятий_ПриОткрытииНаСервере()
	ЭлементАдрес = Элементы.Найти("ПредприятияСсылкаАдрес");
	Если ЭлементАдрес = Неопределено Тогда
		ЭлементАдрес = Элементы.Добавить("ПредприятияСсылкаАдрес", Тип("ПолеФормы"), Элементы.Предприятия);
		ЭлементАдрес.ПутьКДанным = "Предприятия.Ссылка.[Адрес предприятия]";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПредприятийХозяйствующегоСубъекта(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("ГруппаПоискВидимость", Ложь);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("СписокПредприятийХозяйствующегоСубъектаЗавершение", Этаформа);
	ОткрытьФорму("Обработка.СписокПредприятийХозяйствующегоСубъекта.Форма.Форма", ПараметрыФормы, ЭтаФорма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте 
Процедура СписокПредприятийХозяйствующегоСубъектаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Оповестить("ОбновлениеДанныхПредприятия");
КонецПроцедуры

&НаКлиенте
Процедура ПоискПредприятийПоФильтру(Команда)
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПоискСозданиеПредприятийЗавершение", Этаформа);
	ОткрытьФорму("Обработка.РасширенныйПоискПредприятий.Форма.Форма",, ЭтаФорма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте 
Процедура ПоискСозданиеПредприятийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Оповестить("ОбновлениеДанныхПредприятия");
КонецПроцедуры

&НаКлиенте
Процедура ПоискПарыКонтрагентПредприятиеПоGLN(Команда)
	
	ОткрытьФорму("Обработка.ПоискПоGLN.Форма.Форма", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияОбновлениеПредприятий(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("БезОрганизации", Истина);
	ПараметрыФормы.Вставить("БезПользователя", Истина);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МассивПредприятий", Элементы.Предприятия.ВыделенныеСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводДополнительныхЗначенийПриРегистрацииОбновленииПредприятийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.ФормаВводаДополнительныхЗначений", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводДополнительныхЗначенийПриРегистрацииОбновленииПредприятийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	РезультатВыполненияОперации = ИнтеграцияВетисAPIВызовСервера.ОбновитьДанныеПоПредприятиям(ДополнительныеПараметры.МассивПредприятий, Организация, Пользователь, Результат.ОснованиеДобавленияИзменения);
	
	Если ЗначениеЗаполнено(РезультатВыполненияОперации.ОписаниеОшибки) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Операция не выполнена:'") + РезультатВыполненияОперации.ОписаниеОшибки);

	Иначе
		
		ТекстОшибки = НСтр("ru = 'При выполнении операции по предприятию <%1> произошли ошибки:
							|%2'");

		ТекстУспешногоВыполнения = НСтр("ru = 'Выполнение операции по предприятию <%1> прошло успешно.'");
		
		ДанныеРезультата = РезультатВыполненияОперации.Предприятие;
		
		Для Каждого ТекРезультат Из ДанныеРезультата Цикл
			
			Если ЗначениеЗаполнено(ТекРезультат.ОписаниеОшибки) Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ТекРезультат.Предприятие, ТекРезультат.ОписаниеОшибки), ТекРезультат.Предприятие);
							
			Иначе
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстУспешногоВыполнения, ТекРезультат.Предприятие), ТекРезультат.Предприятие);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Оповестить("ОбновлениеДанныхПредприятия");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСвязьПредприятий(Команда)
	МассивПредприятий = Элементы.Предприятия.ВыделенныеСтроки;
	ИзменитьСвязьПредприятийНаСервере(Контрагент, МассивПредприятий, Организация, Пользователь, Ложь);
	
	Оповестить("ОбновлениеДанныхПредприятия");
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСвязьПредприятий(Команда)
	МассивПредприятий = Элементы.Предприятия.ВыделенныеСтроки;
	ИзменитьСвязьПредприятийНаСервере(Контрагент, МассивПредприятий, Организация, Пользователь, Истина);
	
	Оповестить("ОбновлениеДанныхПредприятия");
КонецПроцедуры

&НаСервере
Процедура ИзменитьСвязьПредприятийНаСервере(Контрагент, МассивПредприятий, Организация, Пользователи, Удаление)
	
	Если Не ЗначениеЗаполнено(МассивПредприятий) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПредприятий = Новый ТаблицаЗначений;
	ТаблицаПредприятий.Колонки.Добавить("Предприятие");
	ТаблицаПредприятий.Колонки.Добавить("GLN");
	ТаблицаПредприятий.Колонки.Добавить("СообщениеПользователю");
	ТаблицаПредприятий.Колонки.Добавить("УспешноОбработано");
	Для каждого ЭлементСписка Из МассивПредприятий Цикл
		НоваяСтрока = ТаблицаПредприятий.Добавить();
		НоваяСтрока.Предприятие = ЭлементСписка;
		НоваяСтрока.СообщениеПользователю = "";
		НоваяСтрока.УспешноОбработано = Ложь;
	КонецЦикла;
	
	ИнтеграцияВетисAPIКонтрагентыПредприятия.ИзменитьСвязьМеждуКонтрагентомИПредприятиями(Контрагент, ТаблицаПредприятий, Организация, Пользователи, Удаление);
	
	// Ответ приходит в целом на операцию без разбивки по предприятиям.
	СтрокаТаблицыПредприятий = ТаблицаПредприятий[0];
	
	ТекстОшибки = НСтр("ru = 'При выполнении операции произошли ошибки:
	|%1'");
	
	ТекстУспешногоВыполнения = НСтр("ru = 'Выполнение операции прошло успешно.'");
	
	
	Если Не СтрокаТаблицыПредприятий.УспешноОбработано Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаТаблицыПредприятий.СообщениеПользователю));
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстУспешногоВыполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаНастройкаРЗЗагрузкиНСИ

// Обработчик перехода далее (на следующую страницу) при уходе со страницы помощника "СтраницаНастройкаРЗЗагрузкиНСИ".
//
// Параметры:
// Отказ - Булево - флаг отказа от выполнения перехода далее;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
&НаКлиенте
Функция Подключаемый_СтраницаНастройкаРЗЗагрузкиНСИ_ПриПереходеДалее(Отказ)
КонецФункции

// Обработчик перехода назад (на предыдущую страницу) при уходе со страницы помощника "СтраницаНастройкаРЗЗагрузкиНСИ".
//
// Параметры:
// Отказ - Булево - флаг отказа от выполнения перехода назад;
//					если в обработчике поднять этот флаг, то переход на предыдущую страницу выполнен не будет.
//
&НаКлиенте
Функция Подключаемый_СтраницаНастройкаРЗЗагрузкиНСИ_ПриПереходеНазад(Отказ)
КонецФункции

// Обработчик выполняется при открытии страницы помощника "СтраницаНастройкаРЗЗагрузкиНСИ".
//
// Параметры:
//
//  Отказ - Булево - флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад).
//
//  ПропуститьСтраницу - Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад).
//
//  ЭтоПереходДалее (только чтение) - Булево - флаг определяет направление перехода.
//			Истина - выполняется переход далее; Ложь - выполняется переход назад.
//
&НаКлиенте
Функция Подключаемый_СтраницаНастройкаРЗЗагрузкиНСИ_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	СписокКлючейРЗ = Новый СписокЗначений;
	СписокКлючейРЗ.Добавить("ЗагрузкаБазовойНСИИСМеркурий");
	СписокКлючейРЗ.Добавить("АктуализацияСправочникаКонтрагентов");
	СписокКлючейРЗ.Добавить("АктуализацияСправочникаПредприятий");
	СписокКлючейРЗ.Добавить("АктуализацияСправочникаПродукции");
	СписокКлючейРЗ.Добавить("ЗагрузкаОбновленийВерсийЗаписейСкладскогоЖурнала");
	
	ЗаполнитьТаблицуРегламентныхЗаданий(СписокКлючейРЗ);
	
КонецФункции

&НаКлиенте
Процедура ТаблицаРегламентныеЗаданияНСИВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ТаблицаРегламентныеЗаданияНСИ.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "РЗНСИНаименование" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Идентификатор"	, ТекущиеДанные.Идентификатор);
		ПараметрыФормы.Вставить("Действие"		, "Изменить");
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Идентификатор", ТекущиеДанные.Идентификатор);
		ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ТекущиеДанные.ПолучитьИдентификатор());
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьНастройкиРегламентногоЗаданияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.РегламентноеЗадание", ПараметрыФормы, ЭтаФорма, Ложь,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли Поле.Имя = "РЗНСИРасписание" Тогда
		Диалог = Новый ДиалогРасписанияРегламентногоЗадания(
			ПолучитьРасписание(ТекущиеДанные.Идентификатор));
		
		Диалог.Показать(Новый ОписаниеОповещения(
			"ОткрытьРасписаниеЗавершение", ЭтотОбъект, ТекущиеДанные));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаАдминистрированиеПользователей

// Обработчик перехода далее (на следующую страницу) при уходе со страницы помощника "СтраницаАдминистрированиеПользователей".
//
// Параметры:
// Отказ - Булево - флаг отказа от выполнения перехода далее;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
&НаКлиенте
Функция Подключаемый_СтраницаАдминистрированиеПользователей_ПриПереходеДалее(Отказ)
	СтраницаАдминистрированиеПользователей_ПриПереходеДалееНаСервере();
КонецФункции

// Обработчик перехода назад (на предыдущую страницу) при уходе со страницы помощника "СтраницаАдминистрированиеПользователей".
//
// Параметры:
// Отказ - Булево - флаг отказа от выполнения перехода назад;
//					если в обработчике поднять этот флаг, то переход на предыдущую страницу выполнен не будет.
//
&НаКлиенте
Функция Подключаемый_СтраницаАдминистрированиеПользователей_ПриПереходеНазад(Отказ)
КонецФункции

// Обработчик выполняется при открытии страницы помощника "СтраницаАдминистрированиеПользователей".
//
// Параметры:
//
//  Отказ - Булево - флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад).
//
//  ПропуститьСтраницу - Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад).
//
//  ЭтоПереходДалее (только чтение) - Булево - флаг определяет направление перехода.
//			Истина - выполняется переход далее; Ложь - выполняется переход назад.
//
&НаКлиенте
Функция Подключаемый_СтраницаАдминистрированиеПользователей_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
КонецФункции

&НаКлиенте
Процедура АдминистрированиеПользователейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ЗначенияЗаполнения = Новый Структура("Организация, Контрагент, Ответственный", Организация, Контрагент, Пользователь);
	ПараметрыФормы     = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.АдминистрированиеПользователей.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура СтраницаАдминистрированиеПользователей_ПриПереходеДалееНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	СвязиМеждуКонтрагентамиИПредприятиями.Предприятие КАК Предприятие
		|ПОМЕСТИТЬ ВТ_СвязанныеПредприятия
		|ИЗ
		|	РегистрСведений.СвязиМеждуКонтрагентамиИПредприятиями КАК СвязиМеждуКонтрагентамиИПредприятиями
		|ГДЕ
		|	СвязиМеждуКонтрагентамиИПредприятиями.Контрагент = &Контрагент
		|	И НЕ СвязиМеждуКонтрагентамиИПредприятиями.Предприятие.ПометкаУдаления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ПредприятияОбслуживаемыеПользователемСрезПоследних.Период, ПраваПользователейСистемыМеркурийСрезПоследних.Период) КАК Период,
		|	ПраваПользователейСистемыМеркурийСрезПоследних.Организация КАК Организация,
		|	ПредприятияОбслуживаемыеПользователемСрезПоследних.Предприятие КАК Предприятие,
		|	ВЫБОР
		|		КОГДА ПредприятияОбслуживаемыеПользователемСрезПоследних.Предприятие ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ДоступныВсеПредприятия
		|ПОМЕСТИТЬ ВТ_ОграниченияПользователей
		|ИЗ
		|	РегистрСведений.ПраваПользователейСистемыМеркурий.СрезПоследних(
		|			,
		|			Организация = &Организация
		|				И ПравоПользователя = ЗНАЧЕНИЕ(Справочник.ПраваПользователейВСистемеМеркурий.ЗагрузкаВСД)) КАК ПраваПользователейСистемыМеркурийСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредприятияОбслуживаемыеПользователем.СрезПоследних КАК ПредприятияОбслуживаемыеПользователемСрезПоследних
		|		ПО ПраваПользователейСистемыМеркурийСрезПоследних.Организация = ПредприятияОбслуживаемыеПользователемСрезПоследних.Организация
		|			И ПраваПользователейСистемыМеркурийСрезПоследних.Пользователь = ПредприятияОбслуживаемыеПользователемСрезПоследних.Пользователь
		|			И (ПредприятияОбслуживаемыеПользователемСрезПоследних.Используется)
		|ГДЕ
		|	ПраваПользователейСистемыМеркурийСрезПоследних.Используется
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОграниченияПользователей.Организация КАК Организация,
		|	МАКСИМУМ(ВТ_ОграниченияПользователей.ДоступныВсеПредприятия) КАК ДоступныВсеПредприятия
		|ПОМЕСТИТЬ ВТ_ОграниченияПоОрганизации
		|ИЗ
		|	ВТ_ОграниченияПользователей КАК ВТ_ОграниченияПользователей
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ОграниченияПользователей.Организация
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ВТ_ОграниченияПользователей.Период) КАК Период,
		|	ВТ_ОграниченияПользователей.Организация КАК Организация,
		|	ВТ_СвязанныеПредприятия.Предприятие КАК Предприятие
		|ПОМЕСТИТЬ ВТ_ПредприятияДляЗагрузкиВСД
		|ИЗ
		|	ВТ_ОграниченияПользователей КАК ВТ_ОграниченияПользователей
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СвязанныеПредприятия КАК ВТ_СвязанныеПредприятия
		|		ПО ВТ_ОграниченияПользователей.Организация = ВТ_СвязанныеПредприятия.Организация
		|ГДЕ
		|	ВТ_СвязанныеПредприятия.Организация В
		|			(ВЫБРАТЬ
		|				ВТ_ОграниченияПоОрганизации.Организация КАК Организация
		|			ИЗ
		|				ВТ_ОграниченияПоОрганизации КАК ВТ_ОграниченияПоОрганизации
		|			ГДЕ
		|				ВТ_ОграниченияПоОрганизации.ДоступныВсеПредприятия)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ОграниченияПользователей.Организация,
		|	ВТ_СвязанныеПредприятия.Предприятие
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МИНИМУМ(ВТ_ОграниченияПользователей.Период),
		|	ВТ_ОграниченияПользователей.Организация,
		|	ВТ_ОграниченияПользователей.Предприятие
		|ИЗ
		|	ВТ_ОграниченияПользователей КАК ВТ_ОграниченияПользователей
		|ГДЕ
		|	ВТ_ОграниченияПользователей.Организация В
		|			(ВЫБРАТЬ
		|				ВТ_ОграниченияПоОрганизации.Организация КАК Организация
		|			ИЗ
		|				ВТ_ОграниченияПоОрганизации КАК ВТ_ОграниченияПоОрганизации
		|			ГДЕ
		|				НЕ ВТ_ОграниченияПоОрганизации.ДоступныВсеПредприятия)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ОграниченияПользователей.Предприятие,
		|	ВТ_ОграниченияПользователей.Организация
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	Предприятие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ВТ_ПредприятияДляЗагрузкиВСД.Период, ДЕНЬ) КАК Период,
		|	ВТ_ПредприятияДляЗагрузкиВСД.Организация КАК Организация,
		|	ВТ_ПредприятияДляЗагрузкиВСД.Предприятие КАК Предприятие,
		|	ДатыПоследнихЗагрузокТранспортныхВСД.ТипВСД КАК ТранспортныйВСД,
		|	ДатыПоследнихЗагрузокПроизводственныхВСД.ТипВСД КАК ПроизводственныйВСД
		|ИЗ
		|	ВТ_ПредприятияДляЗагрузкиВСД КАК ВТ_ПредприятияДляЗагрузкиВСД
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатыПоследнихЗагрузокВСД КАК ДатыПоследнихЗагрузокТранспортныхВСД
		|		ПО ВТ_ПредприятияДляЗагрузкиВСД.Организация = ДатыПоследнихЗагрузокТранспортныхВСД.Организация
		|			И ВТ_ПредприятияДляЗагрузкиВСД.Предприятие = ДатыПоследнихЗагрузокТранспортныхВСД.Предприятие
		|			И (ДатыПоследнихЗагрузокТранспортныхВСД.ТипВСД = ЗНАЧЕНИЕ(Справочник.ТипыВСД.Транспортный))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатыПоследнихЗагрузокВСД КАК ДатыПоследнихЗагрузокПроизводственныхВСД
		|		ПО ВТ_ПредприятияДляЗагрузкиВСД.Организация = ДатыПоследнихЗагрузокПроизводственныхВСД.Организация
		|			И ВТ_ПредприятияДляЗагрузкиВСД.Предприятие = ДатыПоследнихЗагрузокПроизводственныхВСД.Предприятие
		|			И (ДатыПоследнихЗагрузокПроизводственныхВСД.ТипВСД = ЗНАЧЕНИЕ(Справочник.ТипыВСД.ПроизводственныйВСД))
		|ГДЕ
		|	(ДатыПоследнихЗагрузокТранспортныхВСД.Организация ЕСТЬ NULL
		|			ИЛИ ДатыПоследнихЗагрузокПроизводственныхВСД.Организация ЕСТЬ NULL)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СвязанныеПредприятия.Предприятие КАК Ссылка
		|ИЗ
		|	ВТ_СвязанныеПредприятия КАК ВТ_СвязанныеПредприятия
		|ГДЕ
		|	НЕ (ВТ_СвязанныеПредприятия.Организация, ВТ_СвязанныеПредприятия.Предприятие) В
		|				(ВЫБРАТЬ
		|					ВТ_ПредприятияДляЗагрузкиВСД.Организация КАК Организация,
		|					ВТ_ПредприятияДляЗагрузкиВСД.Предприятие КАК Предприятие
		|				ИЗ
		|					ВТ_ПредприятияДляЗагрузкиВСД КАК ВТ_ПредприятияДляЗагрузкиВСД)";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент" , Контрагент);
	
	РезультатПакет = Запрос.ВыполнитьПакет();
	ВыборкаДатыЗагрузки = РезультатПакет[4].Выбрать();
	
	Пока ВыборкаДатыЗагрузки.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
		
			НаборЗаписей = РегистрыСведений.ДатыПоследнихЗагрузокВСД.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(ВыборкаДатыЗагрузки.Организация);
			НаборЗаписей.Отбор.Предприятие.Установить(ВыборкаДатыЗагрузки.Предприятие);
			
			Если Не ЗначениеЗаполнено(ВыборкаДатыЗагрузки.ТранспортныйВСД) Тогда
				ДобавитьЗаписьВНаборЗаписей(НаборЗаписей, ВыборкаДатыЗагрузки, Справочники.ТипыВСД.Транспортный);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ВыборкаДатыЗагрузки.ПроизводственныйВСД) Тогда
				ДобавитьЗаписьВНаборЗаписей(НаборЗаписей, ВыборкаДатыЗагрузки, Справочники.ТипыВСД.ПроизводственныйВСД);
			КонецЕсли;
			
			НаборЗаписей.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось добавить запись по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка записи в регистр ""Даты последних загрузок ВСД.""'"),
			                         УровеньЖурналаРегистрации.Ошибка,
			                         Метаданные.РегистрыСведений.ДатыПоследнихЗагрузокВСД,
			                         ,
			                         ТекстСообщения);
			
		КонецПопытки;
	
	КонецЦикла;
	
	ПредприятияБезНазначенногоПользователяДляЗагрузкиВСД.Загрузить(РезультатПакет[5].Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаписьВНаборЗаписей(НаборЗаписей, Данные, ТипВСД)
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Организация = Данные.Организация;
	НоваяЗапись.Предприятие = Данные.Предприятие;
	НоваяЗапись.ТипВСД      = ТипВСД;
	НоваяЗапись.Дата        = Данные.Период;
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаПредприятияБезНазначенногоПользователя

// Обработчик перехода далее (на следующую страницу) при уходе со страницы помощника "СтраницаПредприятияБезНазначенногоПользователя".
//
// Параметры:
// Отказ - Булево - флаг отказа от выполнения перехода далее;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
&НаКлиенте
Функция Подключаемый_СтраницаПредприятияБезНазначенногоПользователя_ПриПереходеДалее(Отказ)
КонецФункции

// Обработчик перехода назад (на предыдущую страницу) при уходе со страницы помощника "СтраницаПредприятияБезНазначенногоПользователя".
//
// Параметры:
// Отказ - Булево - флаг отказа от выполнения перехода назад;
//					если в обработчике поднять этот флаг, то переход на предыдущую страницу выполнен не будет.
//
&НаКлиенте
Функция Подключаемый_СтраницаПредприятияБезНазначенногоПользователя_ПриПереходеНазад(Отказ)
КонецФункции

// Обработчик выполняется при открытии страницы помощника "СтраницаПредприятияБезНазначенногоПользователя".
//
// Параметры:
//
//  Отказ - Булево - флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад).
//
//  ПропуститьСтраницу - Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад).
//
//  ЭтоПереходДалее (только чтение) - Булево - флаг определяет направление перехода.
//			Истина - выполняется переход далее; Ложь - выполняется переход назад.
//
&НаКлиенте
Функция Подключаемый_СтраницаПредприятияБезНазначенногоПользователя_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Если ПредприятияБезНазначенногоПользователяДляЗагрузкиВСД.Количество() = 0 Тогда
		ПропуститьСтраницу = Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СтраницаНастройкаДатПоследнейЗагрузкиВСД

// Обработчик перехода далее (на следующую страницу) при уходе со страницы помощника "СтраницаНастройкаДатПоследнейЗагрузкиВСД".
//
// Параметры:
// Отказ - Булево - флаг отказа от выполнения перехода далее;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
&НаКлиенте
Функция Подключаемый_СтраницаНастройкаДатПоследнейЗагрузкиВСД_ПриПереходеДалее(Отказ)
КонецФункции

// Обработчик перехода назад (на предыдущую страницу) при уходе со страницы помощника "СтраницаНастройкаДатПоследнейЗагрузкиВСД".
//
// Параметры:
// Отказ - Булево - флаг отказа от выполнения перехода назад;
//					если в обработчике поднять этот флаг, то переход на предыдущую страницу выполнен не будет.
//
&НаКлиенте
Функция Подключаемый_СтраницаНастройкаДатПоследнейЗагрузкиВСД_ПриПереходеНазад(Отказ)
КонецФункции

// Обработчик выполняется при открытии страницы помощника "СтраницаНастройкаДатПоследнейЗагрузкиВСД".
//
// Параметры:
//
//  Отказ - Булево - флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад).
//
//  ПропуститьСтраницу - Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад).
//
//  ЭтоПереходДалее (только чтение) - Булево - флаг определяет направление перехода.
//			Истина - выполняется переход далее; Ложь - выполняется переход назад.
//
&НаКлиенте
Функция Подключаемый_СтраницаНастройкаДатПоследнейЗагрузкиВСД_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
КонецФункции

#КонецОбласти

#Область СтраницаЗагрузкаВСД

// Обработчик выполняется при открытии страницы помощника "СтраницаЗагрузкаВСД".
//
// Параметры:
//
//  Отказ - Булево - флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад).
//
//  ПропуститьСтраницу - Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад).
//
//  ЭтоПереходДалее (только чтение) - Булево - флаг определяет направление перехода.
//			Истина - выполняется переход далее; Ложь - выполняется переход назад.
//
&НаКлиенте
Функция Подключаемый_СтраницаЗагрузкаВСД_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	ПропуститьСтраницу = ПропуститьЗагрузку;
	
	Подключаемый_СтраницаЗагрузкаВСД_ПриОткрытииНаСервере();
	
КонецФункции

&НаСервере
Процедура Подключаемый_СтраницаЗагрузкаВСД_ПриОткрытииНаСервере()
	ЗагружатьПогашенныеИАннулированныеВСД = Константы.ЗагружатьПогашенныеИАннулированныеВСД.Получить();
	ПолучатьФайлВетеринарнойСправкиПриЗагрузкеВСД = Константы.ПолучатьФайлВетеринарнойСправкиПриЗагрузкеВСД.Получить();
КонецПроцедуры

&НаКлиенте
Процедура ЗагружатьПогашенныеИАннулированныеВСДПриИзменении(Элемент)
	ЗаписатьОбщиеДанные(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПолучатьФайлВетеринаронойСправкиПриЗагрузкеВСДПриИзменении(Элемент)
	
	ЗаписатьОбщиеДанные(Элемент.Имя);
	
КонецПроцедуры

// Обработчик перехода далее (на следующую страницу) при уходе со страницы помощника "СтраницаЗагрузкаВСД".
//
// Параметры:
// Отказ - Булево - флаг отказа от выполнения перехода далее;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
&НаКлиенте
Функция Подключаемый_СтраницаЗагрузкаВСД_Ожидание(Отказ, ПерейтиДалее)
	
	СтраницаЗагрузкаВСДНаСервере();
	
КонецФункции

&НаСервере
Процедура СтраницаЗагрузкаВСДНаСервере()
	
	//Задание = ФоновыеЗадания.Выполнить("ИнтеграцияВетисAPIОтправкаЗаявокНаОформление.ЗагрузкаИзмененийПоВСД",
	//						,
	//						"ЗагрузкаДанныхПоВСД",
	//						НСтр("ru = 'Загрузка данных по ВСД'"));
	//						
	//МассивЗаданий = Новый Массив;
	//МассивЗаданий.Добавить(Задание);
	//
	//ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
	
КонецПроцедуры	

#КонецОбласти

#Область СтраницаНастройкаРЗОтправкиЗаявокИОбработкиОтвета

// Обработчик перехода далее (на следующую страницу) при уходе со страницы помощника "СтраницаНастройкаРЗОтправкиЗаявокИОбработкиОтвета".
//
// Параметры:
// Отказ - Булево - флаг отказа от выполнения перехода далее;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
&НаКлиенте
Функция Подключаемый_СтраницаНастройкаРЗОтправкиЗаявокИОбработкиОтвета_ПриПереходеДалее(Отказ)
КонецФункции

// Обработчик перехода назад (на предыдущую страницу) при уходе со страницы помощника "СтраницаНастройкаРЗОтправкиЗаявокИОбработкиОтвета".
//
// Параметры:
// Отказ - Булево - флаг отказа от выполнения перехода назад;
//					если в обработчике поднять этот флаг, то переход на предыдущую страницу выполнен не будет.
//
&НаКлиенте
Функция Подключаемый_СтраницаНастройкаРЗОтправкиЗаявокИОбработкиОтвета_ПриПереходеНазад(Отказ)
КонецФункции

// Обработчик выполняется при открытии страницы помощника "СтраницаНастройкаРЗОтправкиЗаявокИОбработкиОтвета".
//
// Параметры:
//
//  Отказ - Булево - флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад).
//
//  ПропуститьСтраницу - Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад).
//
//  ЭтоПереходДалее (только чтение) - Булево - флаг определяет направление перехода.
//			Истина - выполняется переход далее; Ложь - выполняется переход назад.
//
&НаКлиенте
Функция Подключаемый_СтраницаНастройкаРЗОтправкиЗаявокИОбработкиОтвета_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	СписокКлючейРЗ = Новый СписокЗначений;
	СписокКлючейРЗ.Добавить("ЗагрузкаТранспортныхВСД");
	СписокКлючейРЗ.Добавить("ЗагрузкаПроизводственныхВСД");
	
	СписокКлючейРЗ.Добавить("ОтправкаПриходныхОпераций");
	СписокКлючейРЗ.Добавить("ОбработкаОтветаПоПриходнымОперациям");
	
	СписокКлючейРЗ.Добавить("ОтправкаПроизводственныхОпераций");
	СписокКлючейРЗ.Добавить("ОбработкаОтветаПоПроизводственнымОперациям");
	
	СписокКлючейРЗ.Добавить("ОтправкаТранспортныхОпераций");
	СписокКлючейРЗ.Добавить("ОбработкаОтветаПоТранспортнымОперациям");
	
	СписокКлючейРЗ.Добавить("ОтправкаИнвентаризаций");
	СписокКлючейРЗ.Добавить("ОбработкаОтветаПоИнвентаризациям");
	
	СписокКлючейРЗ.Добавить("ОтправкаОбъединенийЗаписейСкладскогоЖурнала");
	СписокКлючейРЗ.Добавить("ОбработкаОтветаПоОбъединениямЗаписейСкладскогоЖурнала");
	
	СписокКлючейРЗ.Добавить("ОтправкаАннулированийВСД");
	СписокКлючейРЗ.Добавить("ОбработкаОтветаПоАннулированиюВСД");
	
	СписокКлючейРЗ.Добавить("ОтправкаВнесенийНомеровТранспортныхСредств");
	СписокКлючейРЗ.Добавить("ОбработкаОтветаПоВнесениюНомеровТранспортныхСредств");
	
	СписокКлючейРЗ.Добавить("ОтправкаВнесенийЛабораторныхИсследований");
	СписокКлючейРЗ.Добавить("ОбработкаОтветаПоВнесениюЛабораторныхИсследований");
	
	ЗаполнитьТаблицуРегламентныхЗаданий(СписокКлючейРЗ);
	
КонецФункции

&НаКлиенте
Процедура ТаблицаРегламентныеЗаданияОтправкиЗаявокИОбработкиОтветаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ТаблицаРегламентныеЗаданияОтправкиЗаявокИОбработкиОтвета.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "РЗОтправкиЗаявокИОбработкиОтветаНаименование" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Идентификатор"	, ТекущиеДанные.Идентификатор);
		ПараметрыФормы.Вставить("Действие"		, "Изменить");
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Идентификатор", ТекущиеДанные.Идентификатор);
		ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ТекущиеДанные.ПолучитьИдентификатор());
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьНастройкиРегламентногоЗаданияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.РегламентноеЗадание", ПараметрыФормы, ЭтаФорма, Ложь,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли Поле.Имя = "РЗОтправкиЗаявокИОбработкиОтветаРасписание" Тогда
		Диалог = Новый ДиалогРасписанияРегламентногоЗадания(
			ПолучитьРасписание(ТекущиеДанные.Идентификатор));
		
		Диалог.Показать(Новый ОписаниеОповещения(
			"ОткрытьРасписаниеЗавершение", ЭтотОбъект, ТекущиеДанные));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаДополнительныеНастройки

// Обработчик выполняется при открытии страницы помощника "СтраницаДополнительныеНастройки".
//
// Параметры:
//
//  Отказ - Булево - флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад).
//
//  ПропуститьСтраницу - Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад).
//
//  ЭтоПереходДалее (только чтение) - Булево - флаг определяет направление перехода.
//			Истина - выполняется переход далее; Ложь - выполняется переход назад.
//
&НаКлиенте
Функция Подключаемый_СтраницаДополнительныеНастройки_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	СтраницаДополнительныеНастройки_ПриОткрытииНаСервере();
КонецФункции

&НаСервере
Процедура СтраницаДополнительныеНастройки_ПриОткрытииНаСервере()
	ТаймаутОпросаСервера = Константы.ТаймаутОпросаСервера.Получить();
	ИспользоватьКонтрольПартийПриНезавершенномПроизводстве = Константы.ИспользоватьКонтрольПартийПриНезавершенномПроизводстве.Получить();
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияРеквизитовПоУмолчаниюПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияРеквизитовПоУмолчаниюПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаймаутОпросаСервераПриИзменении(Элемент)
	
	ЗаписатьОбщиеДанные(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКонтрольПартийПриНезавершенномПроизводствеПриИзменении(Элемент)
	ЗаписатьОбщиеДанные(Элемент.Имя);
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаписатьОбщиеДанные(ИмяРеквизита)
	Константы[ИмяРеквизита].Установить(ЭтаФорма[ИмяРеквизита]);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРегламентныхЗаданий(СписокКлючейРЗ)
	
	ТаблицаРегламентныеЗадания.Очистить();
	
	Для каждого КлючРегламентногоЗадания Из СписокКлючейРЗ Цикл
		МассивРеглментныхЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", КлючРегламентногоЗадания.Значение));
		Если МассивРеглментныхЗаданий.Количество() > 0 Тогда
			ЗаполнитьСтрокуТаблицыРегламентныхЗаданий(МассивРеглментныхЗаданий[0])
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуТаблицыРегламентныхЗаданий(РегламентноеЗадание)
	СтрокаТЗ = ТаблицаРегламентныеЗадания.Добавить();
	СтрокаТЗ.Идентификатор = Строка(РегламентноеЗадание.УникальныйИдентификатор);
	СтрокаТЗ.Наименование = Строка(РегламентноеЗадание.Наименование);
	СтрокаТЗ.Использование = РегламентноеЗадание.Использование;
	СтрокаТЗ.Расписание = Строка(РегламентноеЗадание.Расписание);
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтрокуТаблицыРегламентныхЗаданий(Идентификатор, ИдентификаторСтроки)
	СтрокаТЗ = ТаблицаРегламентныеЗадания.НайтиПоИдентификатору(ИдентификаторСтроки);
	РегламентноеЗадание = РегламентныеЗаданияСервер.ПолучитьРегламентноеЗадание(Идентификатор);
	СтрокаТЗ.Идентификатор = Строка(РегламентноеЗадание.УникальныйИдентификатор);
	СтрокаТЗ.Наименование = Строка(РегламентноеЗадание.Наименование);
	СтрокаТЗ.Использование = РегламентноеЗадание.Использование;
	СтрокаТЗ.Расписание = Строка(РегламентноеЗадание.Расписание);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиРегламентногоЗаданияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьСтрокуТаблицыРегламентныхЗаданий(ДополнительныеПараметры.Идентификатор, ДополнительныеПараметры.ИдентификаторСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасписаниеЗавершение(НовоеРасписание, ТекущиеДанные) Экспорт
	
	Если НовоеРасписание <> Неопределено Тогда
		УстановитьРасписание(ТекущиеДанные.Идентификатор, НовоеРасписание);
		ТекущиеДанные.Расписание = Строка(НовоеРасписание);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРасписание(Знач ИдентификаторРегламентногоЗадания)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат РегламентныеЗаданияСервер.РасписаниеРегламентногоЗадания(
		ИдентификаторРегламентногоЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьРасписание(Знач ИдентификаторРегламентногоЗадания, Знач Расписание)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегламентныеЗаданияСервер.УстановитьРасписаниеРегламентногоЗадания(
		ИдентификаторРегламентногоЗадания,
		Расписание);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть - Инициализация переходов помощника.

// Процедура определяет таблицу переходов по сценарию №1.
//
&НаКлиенте
Процедура ТаблицаПереходовПоСценарию1()
	
	ТаблицаПереходов.Очистить();
	
	Переход = ТаблицаПереходов.Добавить();
	Переход.ПорядковыйНомерПерехода = 1;
	Переход.ИмяОсновнойСтраницы     = "СтраницаНастройкиПодключенияКВетисAPI";
	Переход.ИмяСтраницыНавигации    = "СтраницаНавигацииЗагрузкаНСИ";
	Переход.ИмяСтраницыДекорации    = "СтраницаДекорацииНачало";
	Переход.ИмяОбработчикаПриОткрытии = "СтраницаНастройкиПодключенияКВетисAPI_ПриОткрытии";
	Переход.ИмяОбработчикаПриПереходеДалее = "СтраницаНастройкиПодключенияКВетисAPI_ПриПереходеДалее";
	
	Переход = ТаблицаПереходов.Добавить();
	Переход.ПорядковыйНомерПерехода = 2;
	Переход.ИмяОсновнойСтраницы     = "СтраницаЗагрузкаБазовойНСИ";
	Переход.ИмяСтраницыНавигации    = "СтраницаНавигацииОжидание";
	Переход.ИмяСтраницыДекорации    = "СтраницаДекорацииПродолжение";
	Переход.ДлительнаяОперация      = Истина;
	Переход.ИмяОбработчикаПриОткрытии = "СтраницаЗагрузкаБазовойНСИ_ПриОткрытии";
	Переход.ИмяОбработчикаДлительнойОперации = "СтраницаЗагрузкаБазовойНСИ_Ожидание";
	
	Переход = ТаблицаПереходов.Добавить();
	Переход.ПорядковыйНомерПерехода = 3;
	Переход.ИмяОсновнойСтраницы     = "СтраницаПоискСозданиеПредприятий";
	Переход.ИмяСтраницыНавигации    = "СтраницаНавигацииПродолжение";
	Переход.ИмяСтраницыДекорации    = "СтраницаДекорацииПродолжение";
	Переход.ИмяОбработчикаПриОткрытии = "СтраницаПоискСозданиеПредприятий_ПриОткрытии";
	Переход.ИмяОбработчикаПриПереходеДалее = "СтраницаПоискСозданиеПредприятий_ПриПереходеДалее";
	Переход.ИмяОбработчикаПриПереходеНазад = "СтраницаПоискСозданиеПредприятий_ПриПереходеНазад";
	
	Переход = ТаблицаПереходов.Добавить();
	Переход.ПорядковыйНомерПерехода = 4;
	Переход.ИмяОсновнойСтраницы     = "СтраницаНастройкаРЗЗагрузкиНСИ";
	Переход.ИмяСтраницыНавигации    = "СтраницаНавигацииПродолжение";
	Переход.ИмяСтраницыДекорации    = "СтраницаДекорацииПродолжение";
	Переход.ИмяОбработчикаПриОткрытии = "СтраницаНастройкаРЗЗагрузкиНСИ_ПриОткрытии";
	Переход.ИмяОбработчикаПриПереходеДалее = "СтраницаНастройкаРЗЗагрузкиНСИ_ПриПереходеДалее";
	Переход.ИмяОбработчикаПриПереходеНазад = "СтраницаНастройкаРЗЗагрузкиНСИ_ПриПереходеНазад";
	
	Переход = ТаблицаПереходов.Добавить();
	Переход.ПорядковыйНомерПерехода = 5;
	Переход.ИмяОсновнойСтраницы     = "СтраницаАдминистрированиеПользователей";
	Переход.ИмяСтраницыНавигации    = "СтраницаНавигацииПродолжение";
	Переход.ИмяСтраницыДекорации    = "СтраницаДекорацииПродолжение";
	Переход.ИмяОбработчикаПриОткрытии = "СтраницаАдминистрированиеПользователей_ПриОткрытии";
	Переход.ИмяОбработчикаПриПереходеДалее = "СтраницаАдминистрированиеПользователей_ПриПереходеДалее";
	Переход.ИмяОбработчикаПриПереходеНазад = "СтраницаАдминистрированиеПользователей_ПриПереходеНазад";
	
	Переход = ТаблицаПереходов.Добавить();
	Переход.ПорядковыйНомерПерехода = 6;
	Переход.ИмяОсновнойСтраницы     = "СтраницаПредприятияБезНазначенногоПользователя";
	Переход.ИмяСтраницыНавигации    = "СтраницаНавигацииПродолжение";
	Переход.ИмяСтраницыДекорации    = "СтраницаДекорацииПродолжение";
	Переход.ИмяОбработчикаПриОткрытии = "СтраницаПредприятияБезНазначенногоПользователя_ПриОткрытии";
	Переход.ИмяОбработчикаПриПереходеДалее = "СтраницаПредприятияБезНазначенногоПользователя_ПриПереходеДалее";
	Переход.ИмяОбработчикаПриПереходеНазад = "СтраницаПредприятияБезНазначенногоПользователя_ПриПереходеНазад";
	
	Переход = ТаблицаПереходов.Добавить();
	Переход.ПорядковыйНомерПерехода = 7;
	Переход.ИмяОсновнойСтраницы     = "СтраницаНастройкаДатПоследнейЗагрузкиВСД";
	Переход.ИмяСтраницыНавигации    = "СтраницаНавигацииЗагрузкаВСД";
	Переход.ИмяСтраницыДекорации    = "СтраницаДекорацииПродолжение";
	Переход.ИмяОбработчикаПриОткрытии = "СтраницаНастройкаДатПоследнейЗагрузкиВСД_ПриОткрытии";
	Переход.ИмяОбработчикаПриПереходеДалее = "СтраницаНастройкаДатПоследнейЗагрузкиВСД_ПриПереходеДалее";
	Переход.ИмяОбработчикаПриПереходеНазад = "СтраницаНастройкаДатПоследнейЗагрузкиВСД_ПриПереходеНазад";
	
	Переход = ТаблицаПереходов.Добавить();
	Переход.ПорядковыйНомерПерехода = 8;
	Переход.ИмяОсновнойСтраницы     = "СтраницаЗагрузкаВСД";
	Переход.ИмяСтраницыНавигации    = "СтраницаНавигацииОжидание";
	Переход.ИмяСтраницыДекорации    = "СтраницаДекорацииПродолжение";
	Переход.ДлительнаяОперация      = Истина;
	Переход.ИмяОбработчикаПриОткрытии = "СтраницаЗагрузкаВСД_ПриОткрытии";
	Переход.ИмяОбработчикаДлительнойОперации = "СтраницаЗагрузкаВСД_Ожидание";
	
	Переход = ТаблицаПереходов.Добавить();
	Переход.ПорядковыйНомерПерехода = 9;
	Переход.ИмяОсновнойСтраницы     = "СтраницаНастройкаРЗОтправкиЗаявокИОбработкиОтвета";
	Переход.ИмяСтраницыНавигации    = "СтраницаНавигацииПродолжение";
	Переход.ИмяСтраницыДекорации    = "СтраницаДекорацииПродолжение";
	Переход.ИмяОбработчикаПриОткрытии = "СтраницаНастройкаРЗОтправкиЗаявокИОбработкиОтвета_ПриОткрытии";
	Переход.ИмяОбработчикаПриПереходеДалее = "СтраницаНастройкаРЗОтправкиЗаявокИОбработкиОтвета_ПриПереходеДалее";
	Переход.ИмяОбработчикаПриПереходеНазад = "СтраницаНастройкаРЗОтправкиЗаявокИОбработкиОтвета_ПриПереходеНазад";
	
	Переход = ТаблицаПереходов.Добавить();
	Переход.ПорядковыйНомерПерехода = 10;
	Переход.ИмяОсновнойСтраницы     = "СтраницаДополнительныеНастройки";
	Переход.ИмяСтраницыНавигации    = "СтраницаНавигацииОкончание";
	Переход.ИмяСтраницыДекорации    = "СтраницаДекорацииОкончание";
	Переход.ИмяОбработчикаПриОткрытии = "СтраницаДополнительныеНастройки_ПриОткрытии";
	
КонецПроцедуры

#КонецОбласти
