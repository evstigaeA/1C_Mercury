
#Область ОбработчикиСобытийФорм

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Документ = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Предусмотрено открытие обработки только из документов.'");
	КонецЕсли;
	
	ИспользоватьОбменЧерезУниверсальныйФормат = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЧерезУниверсальныйФормат");
	
	ИнициализацияФормы();

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ПеренестиВДокумент Тогда
		АдресПродукцииВХранилище = АдресПродукцииВХранилище(ЭтаФорма.ВладелецФормы.УникальныйИдентификатор);
	Иначе
		АдресПродукцииВХранилище = Неопределено;
	КонецЕсли;
	
	Если АдресПродукцииВХранилище <> Неопределено Тогда
		ОповеститьОВыборе(АдресПродукцииВХранилище);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПродукцияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СписокПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	СтруктураСтроки = Новый Структура("Продукция, ТипПродукции", ТекущиеДанные.Ссылка, ТекущиеДанные.ТипПродукции);
	
	ОбработатьВыборЗначения(СтруктураСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ИерархияПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("ТипПродукции, ВидПродукции, ПодвидПродукции");
	
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекущиеДанные);
	
	Для Каждого ТекЭлемент Из СтруктураОтбора Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПродукции, ТекЭлемент.Ключ,
				ТекЭлемент.Значение, ВидСравненияКомпоновкиДанных.Равно, Строка(ТипЗнч(ТекЭлемент.Значение)), ЗначениеЗаполнено(ТекЭлемент.Значение));
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ИерархияПродукцииПередРазворачиванием(Элемент, Строка, Отказ)
	
	Если Строка.ИмяГруппировки = "ПодвидПродукции" Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТаблицаПодобраннаяПродукция

&НаКлиенте
Процедура ПодобраннаяПродукцияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяПродукцияПередУдалением(Элемент, Отказ)
	
	МассивСвязанныхТЧ = Новый Массив;
	МассивСвязанныхТЧ.Добавить("СписокФизическихУпаковок");

	ОбработкаТабличнойЧастиКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭтаФорма, "ПодобраннаяПродукция", МассивСвязанныхТЧ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяПродукцияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПодобраннаяПродукция.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ПодобраннаяПродукцияУпаковки" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ТекущиеДанные.ТипПродукцииЖивыеЖивотные Тогда
			Возврат;
		КонецЕсли;
		
		GUIDСтроки = ТекущиеДанные.GUIDСтроки;
		
		АдресХранения = ПоместитьТаблицуУпаковокВоВременноеХранилище(GUIDСтроки);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("АдресХранения",  АдресХранения);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодобраннаяПродукцияВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ВводДанныхПоУпаковкам.Форма", ПараметрыФормы,,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Поле.Имя = "ПодобраннаяПродукцияПродукция" Тогда
		
		ПоказатьЗначение(, ТекущиеДанные.Продукция);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяПродукцияВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные   = ДополнительныеПараметры.ТекущиеДанные;
	
	НайденныеСтроки = СписокФизическихУпаковок.НайтиСтроки(Новый Структура("GUIDСтроки", ТекущиеДанные.GUIDСтроки));
	
	Для Каждого ТекСтрока Из НайденныеСтроки Цикл
		СписокФизическихУпаковок.Удалить(ТекСтрока);
	КонецЦикла;
	
	Если Результат.Количество() = 0 Тогда
		ТекущиеДанные.Упаковки = НСтр("ru = 'Без упаковок'");
	Иначе
		Для Каждого ТекДанные Из Результат Цикл
			НоваяСтрока = СписокФизическихУпаковок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекДанные);
			НоваяСтрока.GUIDСтроки = ТекущиеДанные.GUIDСтроки;
		КонецЦикла;
		ТекущиеДанные.Упаковки = НСтр("ru = 'Введены данные по упаковкам'");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяПродукцияНоменклатураУчетнойСистемыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПодобраннаяПродукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУВСКлиент.НоменклатураУчетнойСистемыНачалоВыбора(Элемент, СтандартнаяОбработка, ТекущиеДанные.Продукция);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяПродукцияНоменклатураУчетнойСистемыАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПодобраннаяПродукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУВСКлиент.НоменклатураУчетнойСистемыАвтоПодбор(ДанныеВыбора, Текст, СтандартнаяОбработка, ТекущиеДанные.Продукция);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяПродукцияНоменклатураУчетнойСистемыОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПодобраннаяПродукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУВСКлиент.НоменклатураУчетнойСистемыОкончаниеВводаТекста(ДанныеВыбора, Текст, СтандартнаяОбработка, ТекущиеДанные.Продукция);
	
КонецПроцедуры

#КонецОбласти

#Область КомандыФормы

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	ПеренестиВДокумент = Истина;
	Закрыть(КодВозвратаДиалога.OK);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализацияФормы()
	
	Параметры.Свойство("Организация", Организация);
	Параметры.Свойство("Предприятие", Предприятие);
	Параметры.Свойство("Контрагент" , Контрагент);
	
	Если ТипЗнч(Параметры.Документ) = Тип("ДокументСсылка.ПроизводственныеОперации") Тогда
		УстановитьЗначенияОтборов(СписокПродукции);
		УстановитьЗначенияОтборов(ИерархияПродукции);
	КонецЕсли;

	Если ЗначениеЗаполнено(Параметры.Заголовок) Тогда
		ЭтаФорма.АвтоЗаголовок = Ложь;
		ЭтаФорма.Заголовок = Параметры.Заголовок;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборЗначения(СтруктураСтроки)
	
	СтруктураПоиска = Новый Структура("Продукция", СтруктураСтроки.Продукция);
	
	НайденныеСтроки = ПодобраннаяПродукция.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ТекущаяСтрока = НайденныеСтроки[0];
		ТекущаяСтрока.Количество = ТекущаяСтрока.Количество + 1;
		
	Иначе
		
		ТекущаяСтрока = ПодобраннаяПродукция.Добавить();
		ТекущаяСтрока.GUIDСтроки = Строка(Новый УникальныйИдентификатор());
		ТекущаяСтрока.ТипПродукции = СтруктураСтроки.ТипПродукции;
		ТекущаяСтрока.Продукция    = СтруктураСтроки.Продукция;
		ТекущаяСтрока.ТипПродукцииЖивыеЖивотные = ИнтеграцияВетисAPIВызовСервера.ПродукцияПринадлежитТипуЖивыхЖивотных(СтруктураСтроки.Продукция);
		ТекущаяСтрока.Количество   = 1;
		ТекущаяСтрока.Упаковки     = НСтр("ru = 'Без упаковок'");
		
		Если ИспользоватьОбменЧерезУниверсальныйФормат Тогда
			
			ТекущаяСтрока.НоменклатураУчетнойСистемы = ПолучитьНоменклатуруУчетнойСистемы(СтруктураСтроки.Продукция);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ПодобраннаяПродукция.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНоменклатуруУчетнойСистемы(Продукция)
	
	Возврат Справочники.НоменклатураУчетнойСистемы.ПолучитьНоменклатуруУчетнойСитсемы(Продукция);
	
КонецФункции

&НаСервере
Процедура УстановитьЗначенияОтборов(Список)

	ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Список.Отбор.Элементы,
			"ГруппаОтбора", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора, "GUID_Меркурий",
			ВидСравненияКомпоновкиДанных.НеРавно, "", "GUID_Меркурий", Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора, "Контрагент",
			ВидСравненияКомпоновкиДанных.Равно, Контрагент, "Контрагент", Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора, "ПроизводителиПродукции.Предприятие",
			ВидСравненияКомпоновкиДанных.Равно, Предприятие, "ПроизводителиПродукцииПредприятие", Истина);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТаблицуУпаковокВоВременноеХранилище(ИдентификаторСтроки)
	
	ТаблицаУпаковок = СписокФизическихУпаковок.Выгрузить(Новый Структура("GUIDСтроки", ИдентификаторСтроки));
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаУпаковок, УникальныйИдентификатор);
КонецФункции

&НаСервере
Функция АдресПродукцииВХранилище(УникальныйИдентификаторВладельца)
	
	АдресВХранилище = Неопределено;
	
	Если ПеренестиВДокумент Тогда
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Продукция", ПодобраннаяПродукция.Выгрузить());
		СтруктураДанных.Вставить("СписокФизическихУпаковок", СписокФизическихУпаковок.Выгрузить());
		
		АдресВХранилище = ПоместитьВоВременноеХранилище(СтруктураДанных, УникальныйИдентификаторВладельца);
	
	КонецЕсли;
	
	Возврат АдресВХранилище;
КонецФункции

#КонецОбласти