
&НаКлиенте
Процедура ПакетнаяГенерацияПаролей(Команда)
	
	лМассивПользователей = ПолучитьМассивПользователейСервер();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Пользователи", лМассивПользователей);
	ПараметрыФормы.Вставить("ПутьКФайлу", "");
	
	ОткрытьФорму("Обработка.ДМ_ПакетнаяГенерацияПаролей.Форма",
	             ПараметрыФормы,
	             ЭтаФорма,
	             Новый УникальныйИдентификатор,
	             );
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивПользователейСервер()
	лМассив = Объект.ПредприятияИПользователи.Выгрузить().ВыгрузитьКолонку("Пользователь");
	Возврат лМассив;
КонецФункции
&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	#Если ВебКлиент Тогда
		Если Не РаботаСФайламиСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
			РаботаСФайламиСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСФайлами(Неопределено);
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выбор файла";
	Диалог.Фильтр = "Excel файлы(*.xls;*.xlsx)|*.xls;*.xlsx";
	Диалог.ИндексФильтра = 0;
	Диалог.ПредварительныйПросмотр = Ложь;
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.МножественныйВыбор = Ложь; 
	
	Диалог.Показать(Новый ОписаниеОповещения("ПутьКФайлуНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		Объект.ПутьКФайлу = Диалог.ПолноеИмяФайла;
	КонецЕсли;

КонецПроцедуры

//Кнопка загрузки
&НаКлиенте
Процедура ЗагрузитьДанныеИзФайла(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(СокрЛП(Объект.ПутьКФайлу));
	РасширениеФайла =  Файл.Расширение;
	ПолноеИмяФайла = Файл.ПолноеИмя;
		
	Если НЕ ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Вы не выбрали файл для загрузки.'; en = 'You did not select a file to upload.'"),
			,"ПутьКФайлу", "Объект"
		);
		Возврат;
	КонецЕсли;	
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РасширениеФайла", РасширениеФайла);
	
	//Сохранение файла во временное хранилище.
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьФайлВХранилище", ЭтаФорма, ДополнительныеПараметры);
	НачатьПомещениеФайла(ОписаниеОповещения, , ПолноеИмяФайла, ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент(), УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлВХранилище(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Не удалось открыть файл!';en='Could not open file!'"),
			,"ПутьКФайлу", "Объект"
		);
		Возврат;	
	КонецЕсли; 
	
	ЗагрузитьДанныеИзФайлаНаСервере(Адрес, ДополнительныеПараметры);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Загрузка завершена" );
	 
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеИзФайлаНаСервере(Знач АдресВХранилище,ДополнительныеПараметры)			
			
	ФайлВременногоХранилища = ПолучитьИзВременногоХранилища(АдресВХранилище);	
	лИмяФайла = ПолучитьИмяВременногоФайла(ДополнительныеПараметры.РасширениеФайла);
	ФайлВременногоХранилища.Записать(лИмяФайла);
	УдалитьИзВременногоХранилища(АдресВХранилище);
	
	ТабДокумент = Новый ТабличныйДокумент;
	Попытка
		ТабДокумент.Прочитать(лИмяФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);    
	Исключение
		лОписаниеОшибки = ОписаниеОшибки();
		Попытка
			УдалитьФайлы(лИмяФайла);
		Исключение
			лОписаниеОшибки = ОписаниеОшибки();
		КонецПопытки;
		ВызватьИсключение;
	КонецПопытки;
	
	Попытка
		УдалитьФайлы(лИмяФайла);
	Исключение
		лОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Если Объект.НачальныйНомерСтроки = 0 Тогда
		Объект.НачальныйНомерСтроки = 2;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим( Истина );
	
	лПустойПользователь = Справочники.Пользователи.ПустаяСсылка();
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	МинимальнаяДлинаПароля = ПолучитьМинимальнуюДлинуПаролейПользователей();
	Если МинимальнаяДлинаПароля <= 8 Тогда
		МинимальнаяДлинаПароля = 8;
	КонецЕсли;
	ПараметрыПароля = ПользователиСлужебный.ПараметрыПароля(МинимальнаяДлинаПароля, Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПраваПользователейВСистемеМеркурий.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПраваПользователейВСистемеМеркурий КАК ПраваПользователейВСистемеМеркурий
		|ГДЕ
		|	НЕ ПраваПользователейВСистемеМеркурий.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПраваПользователейВСистемеМеркурий.Предопределенный,
		|	ПраваПользователейВСистемеМеркурий.Наименование";
	
	МассивДоступныхПрав = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	
	КвоДок = 0;
	
	лВысотаТаблицы = ТабДокумент.ВысотаТаблицы;
	Для н = Объект.НачальныйНомерСтроки По лВысотаТаблицы Цикл
	
		лНомерПланта = СокрЛП(ТабДокумент.Область( н, 2 ).Текст);
		лИмя = СокрЛП(ТабДокумент.Область( н, 3 ).Текст);
		лИмя1 = лИмя;
		лИмя2 = СокрЛП(ТабДокумент.Область( н, 8 ).Текст);
		Если ПустаяСтрока(лИмя2) Тогда
			лИмя2 = лИмя1;
		КонецЕсли;
		лАдрес = СокрЛП(ТабДокумент.Область( н, 9 ).Текст);
		лИндекс = СокрЛП(ТабДокумент.Область( н, 11 ).Текст);
		лГород = СокрЛП(ТабДокумент.Область( н, 12 ).Текст);
		
		Если Объект.СокращатьНаименования Тогда
			
			//5000 RU
			//5100 RU
			//5500 RU
			лИмя = СокрЛП(Сред( лИмя, 8 ));
			
		КонецЕсли;
		
		лИмяДляВхода = "" + лНомерПланта + " " + лИмя;
		лПользователь = Пользователи.НайтиПоИмени( лИмяДляВхода );
		лОписаниеПользователя = Неопределено;
		
		НачатьТранзакцию();
		
		Если лПользователь = Неопределено Тогда
			//пользователь ИБ не найден
			ПользовательИБ = Неопределено;
			ИдентификаторПользователяИБ = лИмяДляВхода;
			лОписаниеПользователя = Пользователи.НовоеОписаниеПользователяИБ();
			
			#Область ЗаписатьПользователяИБ
			
			лОписаниеПользователя.Вставить("Имя", лИмяДляВхода);
			лОписаниеПользователя.Вставить("ПолноеИмя",					лИмя2);
			лОписаниеПользователя.Вставить("АутентификацияOpenID",      Ложь);
			лОписаниеПользователя.Вставить("АутентификацияСтандартная", Истина);
			лОписаниеПользователя.Вставить("ПоказыватьВСпискеВыбора",   Истина);
			лОписаниеПользователя.Вставить("СтарыйПароль",              Неопределено);
			лОписаниеПользователя.Вставить("Пароль",                    ПользователиСлужебный.СоздатьПароль(ПараметрыПароля,ГСЧ));
			лОписаниеПользователя.Вставить("СохраняемоеЗначениеПароля", Неопределено);
			лОписаниеПользователя.Вставить("ПарольУстановлен",          Истина);
			лОписаниеПользователя.Вставить("ЗапрещеноИзменятьПароль",   Ложь);
			лОписаниеПользователя.Вставить("АутентификацияОС",			Ложь);
			//лОписаниеПользователя.Вставить("ПредупреждатьОбОпасныхДействиях",      Ложь);
			лОписаниеПользователя.Вставить("ЗащитаОтОпасныхДействий",      Ложь);
			лОписаниеПользователя.Вставить("ПользовательОС",			"");
			//роли будут обновлены после включения пользователя в группу доступа
			
			Пользователи.УстановитьСвойстваПользователяИБ( ИдентификаторПользователяИБ, лОписаниеПользователя, Истина, Ложь );
			
			//Итог: создан пользователь ИБ
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(лИмяДляВхода);
			ИдентификаторПользователяИБ = ПользовательИБ.УникальныйИдентификатор;
			лОписаниеПользователя.Вставить("УникальныйИдентификатор",	ИдентификаторПользователяИБ);
			
			#КонецОбласти
			
			
		ИначеЕсли лПользователь = лПустойПользователь Тогда
			//пользователь ИБ найден
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(лИмяДляВхода);
			ИдентификаторПользователяИБ = ПользовательИБ.УникальныйИдентификатор;
			лОписаниеПользователя = Пользователи.СвойстваПользователяИБ(ИдентификаторПользователяИБ);
			лОписаниеПользователя.Вставить("УникальныйИдентификатор",	ИдентификаторПользователяИБ);
			
		Иначе
			//пользователь найден
			лТекстСообщения = НСтр("ru = 'Пользователь ""%1"" уже есть в базе данных. Номер строки файла: %2'");
			лТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				лТекстСообщения,
				лИмяДляВхода,
				н
			);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю( лТекстСообщения );
			ЗафиксироватьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		Если лОписаниеПользователя <> Неопределено Тогда
			
			лСтрокаТЧ = Объект.ПредприятияИПользователи.Добавить();
			
			лПредприятие = ДМ_СлужебныйПривилегированный.НайтиЭлементСправочникаПоРеквизиту( "Предприятия", "ДМ_НомерПланта", лНомерПланта );
			Если лПредприятие.Пустая() Тогда
			
				Если Объект.СоздаватьПредприятия Тогда
					лНовоеПредприятие = Справочники.Предприятия.СоздатьЭлемент();
					лНовоеПредприятие.Наименование = лИмя2;
					лНовоеПредприятие.НаименованиеНаАнглийскомЯзыке = лИмя1;
					//лНовоеПредприятие.ДМ_Организация = лОрганизация;
					лНовоеПредприятие.ДМ_НомерПланта = лНомерПланта;
					лНовоеПредприятие.СтранаРегистрации = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
					лНовоеПредприятие.Записать();
					лПредприятие = лНовоеПредприятие.Ссылка;
				Иначе
					лТекстСообщения = НСтр("ru = 'Предприятие ""%1"" с номером планта %2 не найдено в базе данных.
                                            |Пользователь %4 не будет загружен.
                                            |Номер строки файла: %3'");
					лТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						лТекстСообщения,
						лИмя2,
						лНомерПланта,
						н,
						лИмяДляВхода
					);
						
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю( лТекстСообщения );
					ОтменитьТранзакцию();
					Объект.ПредприятияИПользователи.Удалить( лСтрокаТЧ ); 
					Продолжить;
				КонецЕсли;
			
			КонецЕсли;
			лСтрокаТЧ.Предприятие = лПредприятие;
			
			//лОрганизация = ДМ_СлужебныйПривилегированный.НайтиЭлементСправочникаПоРеквизиту("Организации","ДМ_КодSAP",лНомерПланта );
			лОрганизация =  ДМ_ВызовСервераПовтИсп.ПолучитьОрганизациюПоПредприятию(лПредприятие);
			
			Если лОрганизация.Пустая() Тогда
				
					лТекстСообщения = НСтр("ru = 'Организация ""%1"" для предприятия с кодом SAP %2 не найдена в базе данных.
                                            |Пользователь %4 не будет загружен.
                                            |Номер строки файла: %3'");
					лТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						лТекстСообщения,
						лИмя1,
						лНомерПланта,
						н,
						лИмяДляВхода
					);
						
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю( лТекстСообщения );
					ОтменитьТранзакцию();
					Объект.ПредприятияИПользователи.Удалить( лСтрокаТЧ ); 
					Продолжить;
			
			КонецЕсли;
			лСтрокаТЧ.Организация = лОрганизация;
			
			#Область ЗаписатьПользователя
			
			лПользователь = Справочники.Пользователи.СоздатьЭлемент();
			лПользователь.ИдентификаторПользователяИБ	= лОписаниеПользователя.УникальныйИдентификатор;
			лПользователь.Наименование					= лИмяДляВхода;
			лПользователь.Комментарий					= лАдрес + Символы.ПС + лГород + Символы.ПС + лИндекс;
			лПользователь.ОсновнаяОрганизация			= лОрганизация;
			лПользователь.Подготовлен					= Истина;
			
			ПользовательМеркурий = Справочники.ПользователиСистемыМеркурий.ПустаяСсылка();
			СтрОтбНаим = Новый Структура("Наименование",лИмяДляВхода);
			ВыбПользМеркурий = Справочники.ПользователиСистемыМеркурий.Выбрать(,,СтрОтбНаим);
			Пока ВыбПользМеркурий.Следующий() Цикл
				Если Не ВыбПользМеркурий.ПометкаУдаления Тогда
					ПользовательМеркурий = ВыбПользМеркурий.Ссылка;
					Прервать;	
				КонецЕсли;	
			КонецЦикла;
			
			Если ПользовательМеркурий = Справочники.ПользователиСистемыМеркурий.ПустаяСсылка() Тогда
				ПользовательМеркурийО = Справочники.ПользователиСистемыМеркурий.СоздатьЭлемент();
				ПользовательМеркурийО.Наименование = лИмяДляВхода;
				ПользовательМеркурийО.Логин = лИмяДляВхода;
				ПользовательМеркурийО.СобственныйПользователь = Истина;
				ПользовательМеркурийО.НеИспользуетсяПриОбмене = Истина;
				
				ПользовательМеркурийО.Записать();
				ПользовательМеркурий = ПользовательМеркурийО.Ссылка;
			КонецЕсли;	
			
			лПользователь.ПользовательСистемыМеркурий = ПользовательМеркурий;
			
			
			лОписаниеПользователя.Вставить("Действие", "Записать");
			
			лПользователь.ДополнительныеСвойства.Вставить(
				"ОписаниеПользователяИБ", лОписаниеПользователя);
			
			лПользователь.Записать();
			лСтрокаТЧ.Пользователь = лПользователь.Ссылка;
			
			ГруппаПользователи = Справочники.ГруппыДоступа.Пользователи.ПолучитьОбъект();
			Если ГруппаПользователи.Пользователи.Найти(лПользователь.Ссылка, "Пользователь") = Неопределено Тогда
				НовПольз = ГруппаПользователи.Пользователи.Добавить();
				НовПольз.Пользователь = лПользователь.Ссылка;
				ГруппаПользователи.Записать();
			КонецЕсли;	
			
			
			лСтрокаТЧ.ГруппаДоступа = ГруппаПользователи.Ссылка;
			
			#КонецОбласти
			
			#Область ОбновитьГруппуДоступа
			
			лГруппаДоступа = Справочники.ГруппыДоступа.НайтиПоНаименованию( лИмяДляВхода );
			Если лГруппаДоступа.Пустая() Тогда
				лГруппаОбъект = Справочники.ГруппыДоступа.СоздатьЭлемент();
				лГруппаОбъект.Наименование = лИмяДляВхода;
				лГруппаОбъект.Профиль = УправлениеДоступом.ПоставляемыйПрофильПоИдентификатору( УправлениеДоступомДМ.ИдентификаторПрофиляПользователь() );
				
				лНоваяСтрока = лГруппаОбъект.Пользователи.Добавить();
				лНоваяСтрока.Пользователь = лПользователь.Ссылка;
				
				лНоваяСтрока = лГруппаОбъект.ВидыДоступа.Добавить();
				лНоваяСтрока.ВидДоступа = Справочники.Организации.ПустаяСсылка();
				лНоваяСтрока.ВсеРазрешены = Ложь;
				
				лНоваяСтрока = лГруппаОбъект.ЗначенияДоступа.Добавить();
				лНоваяСтрока.ВидДоступа = Справочники.Организации.ПустаяСсылка();
				лНоваяСтрока.ЗначениеДоступа = лОрганизация;
				
				лГруппаОбъект.Записать();
				лСтрокаТЧ.ГруппаДоступа = лГруппаОбъект.Ссылка;
			КонецЕсли;
			
			#КонецОбласти
			
			#Область НазначенияПредприятийОтветственнымЛицам
			
			лКонтрагент = ОбщегоНазначенияУВСВызовСервера.КонтрагентПоОрганизации(лОрганизация);
			
			СписокПредприятийКонтрагента = РегистрыСведений.СвязиМеждуКонтрагентамиИПредприятиями.ПредприятияПоКонтрагенту(лКонтрагент, Истина);
	
			ЗапрАдм = Новый Запрос;
			ЗапрАдм.Текст = "ВЫБРАТЬ
			                |	АдминистрированиеПользователей.Ссылка КАК ДокАдм
			                |ИЗ
			                |	Документ.АдминистрированиеПользователей.ТаблицаПользователейМеркурия КАК АдминистрированиеПользователейТаблицаПользователейМеркурия
			                |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АдминистрированиеПользователей КАК АдминистрированиеПользователей
			                |		ПО АдминистрированиеПользователейТаблицаПользователейМеркурия.Ссылка = АдминистрированиеПользователей.Ссылка
			                |ГДЕ
			                |	АдминистрированиеПользователей.Организация = &Организация
			                |	И АдминистрированиеПользователей.Контрагент = &Контрагент
			                |	И АдминистрированиеПользователей.ПометкаУдаления = ЛОЖЬ
			                |	И АдминистрированиеПользователей.Дата МЕЖДУ &НачДата И &КонДата
			                |	И АдминистрированиеПользователейТаблицаПользователейМеркурия.Пользователь = &Пользователь";
			
			ЗапрАдм.Параметры.Вставить("Организация",лОрганизация);
			ЗапрАдм.Параметры.Вставить("Контрагент",лКонтрагент);
			ЗапрАдм.Параметры.Вставить("НачДата",НачалоДня(ТекущаяДатаСеанса()));
			ЗапрАдм.Параметры.Вставить("КонДата",КонецДня(ТекущаяДатаСеанса()));
			ЗапрАдм.Параметры.Вставить("Пользователь",ПользовательМеркурий);
			
			ВыбЗапрАдм = ЗапрАдм.Выполнить().Выбрать();
			Если ВыбЗапрАдм.Следующий() Тогда
				лДокумент = ВыбЗапрАдм.ДокАдм.ПолучитьОбъект();
			Иначе	
				лДокумент = Документы.АдминистрированиеПользователей.СоздатьДокумент();
				лДокумент.Дата          = ТекущаяДатаСеанса();
				лДокумент.Организация   = лОрганизация;
				лДокумент.Контрагент    = лКонтрагент;
				лДокумент.Ответственный = Пользователи.АвторизованныйПользователь();
				лДокумент.Комментарий   = НСтр("ru = '#Документ создан по результатам загрузки EXCEL-файла'");
			КонецЕсли;	
			
			СтрокаПользователя = лДокумент.ТаблицаПользователейМеркурия.Найти(ПользовательМеркурий,"Пользователь");
			
			Если СтрокаПользователя = Неопределено Тогда
				СтрокаПользователя = лДокумент.ТаблицаПользователейМеркурия.Добавить();
				СтрокаПользователя.Пользователь = ПользовательМеркурий;
			КонецЕсли;	
			
			МассивПользователей = Новый Массив;
			МассивПользователей.Добавить(ПользовательМеркурий);
			
			
			//Заполним права пользователя
			Для Каждого ТекПраво Из МассивДоступныхПрав Цикл
				
				СтрокаПраво = лДокумент.ТаблицаПравПользователей.Добавить();
				СтрокаПраво.Пользователь = ПользовательМеркурий;
				СтрокаПраво.ПравоПользователя = ТекПраво;
				//Права по-умолчанию
				Если ТекПраво.Код = "MERCURY_HS_AUTHORIZED_APPLICANT"
						Или ТекПраво.Код = "ARGUS_HS_AUTHORIZED_APPLICANT" Тогда
					СтрокаПраво.Изменен = Истина;
					СтрокаПраво.Используется = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
			ЗаполнитьПредприятияДоступныеДляНазначения(ПользовательМеркурий,лДокумент);
			
			ИскТОПредпр = лДокумент.ТаблицаОбслуживаемыхПредприятий.Найти(лПредприятие,"Предприятие");
			Если ИскТОПредпр = Неопределено Тогда
				лТекстСообщения = НСтр("ru = 'Для Пользователя ""%1"" предприятие с Plant = ""%2"" не входит в число доступных к обслуживанию.
				|Номер строки файла: %4'");
				лТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				лТекстСообщения,
				лИмяДляВхода,
				лПредприятие.ДМ_НомерПланта,
				н
				);
			Иначе
				ИскТОПредпр.Изменен = Истина;
				ИскТОПредпр.Используется = Истина;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(лКонтрагент) Тогда
				
				лТекстСообщения = НСтр("ru = 'Для организации ""%1"" не найден связанный с ней Хозяйствующий Субъект (Контрагент). Пользователю ""%2"" не создано назначение предприятия ""%3"".
                                        |Номер строки файла: %4'");
				лТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					лТекстСообщения,
					лОрганизация,
					лИмяДляВхода,
					лПредприятие,
					н
				);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю( лТекстСообщения, лПользователь.Ссылка );
				лДокумент.Записать( РежимЗаписиДокумента.Запись );
				
			Иначе
				
				лДокумент.Записать( РежимЗаписиДокумента.Проведение );
				
			КонецЕсли;
			лСтрокаТЧ.НазначенияПредприятийОтветственнымЛицам = лДокумент.Ссылка;
			
			КвоДок = КвоДок + 1;
			
			#КонецОбласти
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим( Ложь );
	
КонецПроцедуры


&НаКлиенте
Процедура ПредприятияИПользователиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры


&НаКлиенте
Процедура ПредприятияИПользователиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаСервере
Процедура СписокПравДоступныхДляНазначения() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПраваПользователейВСистемеМеркурий.Ссылка КАК Ссылка,
		|	ПраваПользователейВСистемеМеркурий.Код КАК Код
		|ИЗ
		|	Справочник.ПраваПользователейВСистемеМеркурий КАК ПраваПользователейВСистемеМеркурий
		|ГДЕ
		|	НЕ ПраваПользователейВСистемеМеркурий.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПраваПользователейВСистемеМеркурий.Предопределенный,
		|	ПраваПользователейВСистемеМеркурий.Наименование";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокПравКНазначению.Добавить(Выборка.Ссылка);
		Если Выборка.Код = "MERCURY_HS_AUTHORIZED_APPLICANT"
			ИЛИ Выборка.Код = "ARGUS_HS_AUTHORIZED_APPLICANT" Тогда
			СписокПравПоУмолчанию.Добавить(Выборка.Ссылка);
			СписокНеДоступныхПрав.Добавить(Выборка.Ссылка);
		ИначеЕсли Выборка.Код = "MERCURY_HS_AUTHORIZED_ASSIGNMENT" Тогда
			СписокНеДоступныхПрав.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредприятияДоступныеДляНазначения(Пользователь,лДокумент)
	
	Для Каждого ТекПредприятие Из СписокПредприятийКонтрагента Цикл
		СтрокаПредприятия = лДокумент.ТаблицаОбслуживаемыхПредприятий.Добавить();
		СтрокаПредприятия.Пользователь = Пользователь;
		СтрокаПредприятия.Предприятие  = ТекПредприятие.Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию( "ПоказыватьНедоступныеКоманды" ) Тогда
		Элементы.СоздаватьПредприятия.Видимость = Ложь;
	КонецЕсли;
	
	Объект.СоздаватьОрганизации = Ложь;
	
	СписокПравДоступныхДляНазначения();
	
КонецПроцедуры




