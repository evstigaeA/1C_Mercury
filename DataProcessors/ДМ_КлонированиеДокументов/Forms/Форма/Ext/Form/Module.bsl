
&НаСервере
Процедура ПодготовитьДокументыДляКлонированияНаСервере()
	
	#Область Запрос
	
	лЗапрос = Новый Запрос(
	"ВЫБРАТЬ
	|	АннулированиеВСД.Ссылка КАК Ссылка,
	|	АннулированиеВСД.МоментВремени КАК МоментВремени,
	|	1 КАК ТипДанных
	|ИЗ
	|	Документ.АннулированиеВСД КАК АннулированиеВСД
	|ГДЕ
	|	АннулированиеВСД.Организация = &Организация
	|	И АннулированиеВСД.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АннулированиеВСДГрупповое.Ссылка,
	|	АннулированиеВСДГрупповое.МоментВремени,
	|	1
	|ИЗ
	|	Документ.АннулированиеВСДГрупповое КАК АннулированиеВСДГрупповое
	|ГДЕ
	|	АннулированиеВСДГрупповое.Организация = &Организация
	|	И АннулированиеВСДГрупповое.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВнесениеНомеровТранспортныхСредств.Ссылка,
	|	ВнесениеНомеровТранспортныхСредств.МоментВремени,
	|	1
	|ИЗ
	|	Документ.ВнесениеНомеровТранспортныхСредств КАК ВнесениеНомеровТранспортныхСредств
	|ГДЕ
	|	ВнесениеНомеровТранспортныхСредств.Организация = &Организация
	|	И ВнесениеНомеровТранспортныхСредств.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВнесениеНомеровТранспортныхСредствГрупповое.Ссылка,
	|	ВнесениеНомеровТранспортныхСредствГрупповое.МоментВремени,
	|	1
	|ИЗ
	|	Документ.ВнесениеНомеровТранспортныхСредствГрупповое КАК ВнесениеНомеровТранспортныхСредствГрупповое
	|ГДЕ
	|	ВнесениеНомеровТранспортныхСредствГрупповое.Организация = &Организация
	|	И ВнесениеНомеровТранспортныхСредствГрупповое.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	докВСД.Ссылка,
	|	докВСД.МоментВремени,
	|	1
	|ИЗ
	|	Документ.ВСД КАК докВСД
	|ГДЕ
	|	докВСД.Организация = &Организация
	|	И докВСД.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Инвентаризации.Ссылка,
	|	Инвентаризации.МоментВремени,
	|	1
	|ИЗ
	|	Документ.Инвентаризации КАК Инвентаризации
	|ГДЕ
	|	Инвентаризации.Организация = &Организация
	|	И Инвентаризации.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаОстатковЗаписейСкладскогоЖурнала.Ссылка,
	|	КорректировкаОстатковЗаписейСкладскогоЖурнала.МоментВремени,
	|	1
	|ИЗ
	|	Документ.КорректировкаОстатковЗаписейСкладскогоЖурнала КАК КорректировкаОстатковЗаписейСкладскогоЖурнала
	|ГДЕ
	|	КорректировкаОстатковЗаписейСкладскогоЖурнала.Организация = &Организация
	|	И КорректировкаОстатковЗаписейСкладскогоЖурнала.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбъединениеЗаписейСкладскогоЖурнала.Ссылка,
	|	ОбъединениеЗаписейСкладскогоЖурнала.МоментВремени,
	|	1
	|ИЗ
	|	Документ.ОбъединениеЗаписейСкладскогоЖурнала КАК ОбъединениеЗаписейСкладскогоЖурнала
	|ГДЕ
	|	ОбъединениеЗаписейСкладскогоЖурнала.Организация = &Организация
	|	И ОбъединениеЗаписейСкладскогоЖурнала.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриходныеОперации.Ссылка,
	|	ПриходныеОперации.МоментВремени,
	|	1
	|ИЗ
	|	Документ.ПриходныеОперации КАК ПриходныеОперации
	|ГДЕ
	|	ПриходныеОперации.Организация = &Организация
	|	И ПриходныеОперации.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриходныеОперацииСводно.Ссылка,
	|	ПриходныеОперацииСводно.МоментВремени,
	|	1
	|ИЗ
	|	Документ.ПриходныеОперацииСводно КАК ПриходныеОперацииСводно
	|ГДЕ
	|	ПриходныеОперацииСводно.Организация = &Организация
	|	И ПриходныеОперацииСводно.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПроизводственныеОперации.Ссылка,
	|	ПроизводственныеОперации.МоментВремени,
	|	1
	|ИЗ
	|	Документ.ПроизводственныеОперации КАК ПроизводственныеОперации
	|ГДЕ
	|	ПроизводственныеОперации.Организация = &Организация
	|	И ПроизводственныеОперации.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТранспортныеОперации.Ссылка,
	|	ТранспортныеОперации.МоментВремени,
	|	1
	|ИЗ
	|	Документ.ТранспортныеОперации КАК ТранспортныеОперации
	|ГДЕ
	|	ТранспортныеОперации.Организация = &Организация
	|	И ТранспортныеОперации.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СвойстваЗаписейСкладскогоЖурнала.Ссылка,
	|	СвойстваЗаписейСкладскогоЖурнала.ДатаВыработкиОкончание,
	|	2
	|ИЗ
	|	Справочник.СвойстваЗаписейСкладскогоЖурнала КАК СвойстваЗаписейСкладскогоЖурнала
	|ГДЕ
	|	СвойстваЗаписейСкладскогоЖурнала.Организация = &Организация
	|	И СвойстваЗаписейСкладскогоЖурнала.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	МоментВремени"
	);
	
	#КонецОбласти
	
	лЗапрос.УстановитьПараметр( "Организация", Объект.ИсходнаяОрганизация );
	лРезультатЗапроса = лЗапрос.Выполнить();
	Если лРезультатЗапроса.Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Нет данных для клонирования" );
		Возврат;
	КонецЕсли;
	
	ДанныеДляКлонирования.Загрузить( лРезультатЗапроса.Выгрузить() );
		
КонецПроцедуры

//&НаСервере
&НаКлиенте
Процедура ЦиклКлонированияДокументов()

	лСоответствиеСсылок = Новый Соответствие;
	Для каждого лВыборка Из ДанныеДляКлонирования Цикл
		лСоответствиеСсылок.Вставить(лВыборка.Ссылка, лВыборка.ТипДанных );
	КонецЦикла;
	
	Для каждого лСтрокаТЧ Из Объект.Организации Цикл
	
		Если Не лСтрокаТЧ.Обновлять
			Или лСтрокаТЧ.Организация = Объект.ИсходнаяОрганизация
			Тогда
			Продолжить;
		КонецЕсли;
		
		//НачатьТранзакцию();
		
		СкопироватьДокументыНаОрганизацию( лСтрокаТЧ.Организация, лСоответствиеСсылок );
		Обработано = Обработано + ДанныеДляКлонирования.Количество();
		
		лСтрокаТЧ.Выполнено = лСтрокаТЧ.Выполнено + 1;
		
		ВывестиПрогресс();
		
		ОбработкаПрерыванияПользователя();
		
		//ЗафиксироватьТранзакцию();
	
	КонецЦикла;

КонецПроцедуры // ЦиклКлонированияДокументов()

&НаСервере
Функция ПолучитьСписокРеквизитов( пМетаданные )

	лСписокРеквизитов = Новый Массив;
	Для каждого лРеквизит Из пМетаданные.Реквизиты Цикл
		лСписокРеквизитов.Добавить( лРеквизит.Имя );
	КонецЦикла;
	Возврат лСписокРеквизитов;

КонецФункции // ПолучитьСписокРеквизитов()


&НаСервере
Процедура СкопироватьДокументыНаОрганизацию( пОрганизация, пСоответствиеСсылок )

	НачатьТранзакцию();
	
	лСоответствиеСсылок = Новый Соответствие;;
	лСоответствиеСсылок.Вставить( Объект.ИсходнаяОрганизация, пОрганизация );
	лИсходноеПредприятие = ДМ_СлужебныйПривилегированный.ПолучитьПредприятиеПоОрганизации( Объект.ИсходнаяОрганизация );
	лКонечноеПредприятие = ДМ_СлужебныйПривилегированный.ПолучитьПредприятиеПоОрганизации( пОрганизация );
	лСоответствиеСсылок.Вставить( лИсходноеПредприятие, лКонечноеПредприятие );
	
	лСоответствиеМетаданных = Новый Соответствие;
	
	//Заполняем соответствие новыми будущими ссылками
	Для каждого лКлючИЗначение Из пСоответствиеСсылок Цикл
	
		лМенеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке( лКлючИЗначение.Ключ );
		лЭтоСправочник = (лКлючИЗначение.Значение=2);
		лСсылка = лМенеджер.ПолучитьСсылку( Новый УникальныйИдентификатор );
		лСоответствиеСсылок.Вставить( лКлючИЗначение.Ключ, лСсылка );
		лПустаяСсылка = лМенеджер.ПустаяСсылка();
		Если лСоответствиеМетаданных.Получить(лПустаяСсылка) = Неопределено Тогда
		
			лМетаданные = лСсылка.Метаданные();
			лСписокРеквизитов = ПолучитьСписокРеквизитов( лМетаданные );
			Если лЭтоСправочник Тогда
				лСписокРеквизитов.Добавить("Наименование");
				лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.ПроизводителиПродукции );
				лСоответствиеМетаданных.Вставить( "Справочник.СвойстваЗаписейСкладскогоЖурнала.ПроизводителиПродукции", лРевизитыТЧ );
				лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.СписокФизическихУпаковок );
				лСоответствиеМетаданных.Вставить( "Справочник.СвойстваЗаписейСкладскогоЖурнала.СписокФизическихУпаковок", лРевизитыТЧ );
			Иначе
				лСписокРеквизитов.Добавить("Дата");
				лСписокРеквизитов.Добавить("Проведен");
				лТипДокумента = ТипЗнч(лКлючИЗначение.Ключ);
				Если лТипДокумента = Тип("ДокументСсылка.АннулированиеВСДГрупповое") Тогда
					лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.СписокАннулируемыхВСД );
					лСоответствиеМетаданных.Вставить( "Документ.АннулированиеВСДГрупповое.СписокАннулируемыхВСД", лРевизитыТЧ );
				ИначеЕсли лТипДокумента = Тип("ДокументСсылка.ВнесениеНомеровТранспортныхСредств") Тогда
					лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.ТочкиПерегрузки );
					лСоответствиеМетаданных.Вставить( "Документ.ВнесениеНомеровТранспортныхСредств.ТочкиПерегрузки", лРевизитыТЧ );
				ИначеЕсли лТипДокумента = Тип("ДокументСсылка.ВнесениеНомеровТранспортныхСредствГрупповое") Тогда
					лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.ТочкиПерегрузки );
					лСоответствиеМетаданных.Вставить( "Документ.ВнесениеНомеровТранспортныхСредствГрупповое.ТочкиПерегрузки", лРевизитыТЧ );
				ИначеЕсли лТипДокумента = Тип("ДокументСсылка.ВСД") Тогда
					лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.ПроизводителиПродукции );
					лСоответствиеМетаданных.Вставить( "Документ.ВСД.ПроизводителиПродукции", лРевизитыТЧ );
					лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.СписокСвязанныхДокументов );
					лСоответствиеМетаданных.Вставить( "Документ.ВСД.СписокСвязанныхДокументов", лРевизитыТЧ );
					лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.СписокФизическихУпаковок );
					лСоответствиеМетаданных.Вставить( "Документ.ВСД.СписокФизическихУпаковок", лРевизитыТЧ );
					лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.ТаблицаМаршрутСледования );
					лСоответствиеМетаданных.Вставить( "Документ.ВСД.ТаблицаМаршрутСледования", лРевизитыТЧ );
					лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.УсловияПеремещенияПродукции );
					лСоответствиеМетаданных.Вставить( "Документ.ВСД.УсловияПеремещенияПродукции", лРевизитыТЧ );
				ИначеЕсли лТипДокумента = Тип("ДокументСсылка.Инвентаризации") Тогда
					лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.ТаблицаНовойПродукции );
					лСоответствиеМетаданных.Вставить( "Документ.Инвентаризации.ТаблицаНовойПродукции", лРевизитыТЧ );
					лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.ТаблицаПродукции );
					лСоответствиеМетаданных.Вставить( "Документ.Инвентаризации.ТаблицаПродукции", лРевизитыТЧ );
					лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.ТаблицаРезультат );
					лСоответствиеМетаданных.Вставить( "Документ.Инвентаризации.ТаблицаРезультат", лРевизитыТЧ );
					лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.ТаблицаПроизводителей );
					лСоответствиеМетаданных.Вставить( "Документ.Инвентаризации.ТаблицаПроизводителей", лРевизитыТЧ );
					лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.СписокФизическихУпаковокПродукция );
					лСоответствиеМетаданных.Вставить( "Документ.Инвентаризации.СписокФизическихУпаковокПродукция", лРевизитыТЧ );
					лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.СписокФизическихУпаковокНоваяПродукция );
					лСоответствиеМетаданных.Вставить( "Документ.Инвентаризации.СписокФизическихУпаковокНоваяПродукция", лРевизитыТЧ );
				ИначеЕсли лТипДокумента = Тип("ДокументСсылка.КорректировкаОстатковЗаписейСкладскогоЖурнала") Тогда
					лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.ТаблицаЗаписейСкладскогоЖурнала );
					лСоответствиеМетаданных.Вставить( "Документ.КорректировкаОстатковЗаписейСкладскогоЖурнала.ТаблицаЗаписейСкладскогоЖурнала", лРевизитыТЧ );
				ИначеЕсли лТипДокумента = Тип("ДокументСсылка.ОбъединениеЗаписейСкладскогоЖурнала") Тогда
					лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.ТаблицаПродукция );
					лСоответствиеМетаданных.Вставить( "Документ.ОбъединениеЗаписейСкладскогоЖурнала.ТаблицаПродукция", лРевизитыТЧ );
					лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.СписокФизическихУпаковок );
					лСоответствиеМетаданных.Вставить( "Документ.ОбъединениеЗаписейСкладскогоЖурнала.СписокФизическихУпаковок", лРевизитыТЧ );
				ИначеЕсли лТипДокумента = Тип("ДокументСсылка.ПриходныеОперации") Тогда
					лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.ПроизводителиПродукции );
					лСоответствиеМетаданных.Вставить( "Документ.ПриходныеОперации.ПроизводителиПродукции", лРевизитыТЧ );
					лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.СписокСвязанныхДокументов_Возврат );
					лСоответствиеМетаданных.Вставить( "Документ.ПриходныеОперации.СписокСвязанныхДокументов_Возврат", лРевизитыТЧ );
					лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.СписокФизическихУпаковок );
					лСоответствиеМетаданных.Вставить( "Документ.ПриходныеОперации.СписокФизическихУпаковок", лРевизитыТЧ );
					лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.СписокФизическихУпаковок_Возврат );
					лСоответствиеМетаданных.Вставить( "Документ.ПриходныеОперации.СписокФизическихУпаковок_Возврат", лРевизитыТЧ );
					лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.ТаблицаМаршрутСледования );
					лСоответствиеМетаданных.Вставить( "Документ.ПриходныеОперации.ТаблицаМаршрутСледования", лРевизитыТЧ );
					лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.УсловияПеремещенияПродукции );
					лСоответствиеМетаданных.Вставить( "Документ.ПриходныеОперации.УсловияПеремещенияПродукции", лРевизитыТЧ );
				ИначеЕсли лТипДокумента = Тип("ДокументСсылка.ПриходныеОперацииСводно") Тогда
					лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.ТаблицаДанных );
					лСоответствиеМетаданных.Вставить( "Документ.ПриходныеОперацииСводно.ТаблицаДанных", лРевизитыТЧ );
					лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.СписокФизическихУпаковок );
					лСоответствиеМетаданных.Вставить( "Документ.ПриходныеОперацииСводно.СписокФизическихУпаковок", лРевизитыТЧ );
				ИначеЕсли лТипДокумента = Тип("ДокументСсылка.ПроизводственныеОперации") Тогда
					лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.СписокФизическихУпаковокПродукция );
					лСоответствиеМетаданных.Вставить( "Документ.ПроизводственныеОперации.СписокФизическихУпаковокПродукция", лРевизитыТЧ );
					лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.СписокФизическихУпаковокСырье );
					лСоответствиеМетаданных.Вставить( "Документ.ПроизводственныеОперации.СписокФизическихУпаковокСырье", лРевизитыТЧ );
					лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.ТаблицаВСД );
					лСоответствиеМетаданных.Вставить( "Документ.ПроизводственныеОперации.ТаблицаВСД", лРевизитыТЧ );
					лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.ТаблицаПродукции );
					лСоответствиеМетаданных.Вставить( "Документ.ПроизводственныеОперации.ТаблицаПродукции", лРевизитыТЧ );
					лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.ТаблицаРезультат );
					лСоответствиеМетаданных.Вставить( "Документ.ПроизводственныеОперации.ТаблицаРезультат", лРевизитыТЧ );
					лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.ТаблицаСырье );
					лСоответствиеМетаданных.Вставить( "Документ.ПроизводственныеОперации.ТаблицаСырье", лРевизитыТЧ );
				ИначеЕсли лТипДокумента = Тип("ДокументСсылка.ТранспортныеОперации") Тогда
					лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.СписокСвязанныхДокументов );
					лСоответствиеМетаданных.Вставить( "Документ.ТранспортныеОперации.СписокСвязанныхДокументов", лРевизитыТЧ );
					лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.СписокФизическихУпаковок );
					лСоответствиеМетаданных.Вставить( "Документ.ТранспортныеОперации.СписокФизическихУпаковок", лРевизитыТЧ );
					лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.ТаблицаВСД );
					лСоответствиеМетаданных.Вставить( "Документ.ТранспортныеОперации.ТаблицаВСД", лРевизитыТЧ );
					лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.ТаблицаМаршрутСледования );
					лСоответствиеМетаданных.Вставить( "Документ.ТранспортныеОперации.ТаблицаМаршрутСледования", лРевизитыТЧ );
					лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.ТаблицаПродукция );
					лСоответствиеМетаданных.Вставить( "Документ.ТранспортныеОперации.ТаблицаПродукция", лРевизитыТЧ );
					лРевизитыТЧ = ПолучитьСписокРеквизитов( лМетаданные.ТабличныеЧасти.УсловияПеремещенияПродукции );
					лСоответствиеМетаданных.Вставить( "Документ.ТранспортныеОперации.УсловияПеремещенияПродукции", лРевизитыТЧ );
				КонецЕсли;
			КонецЕсли;
			лСоответствиеМетаданных.Вставить( лПустаяСсылка, лСписокРеквизитов );
		
		КонецЕсли;
	
	КонецЦикла;
	
	//копируем данные документов
	Для каждого лКлючИЗначение Из лСоответствиеСсылок Цикл
	
		лДокументМенеджер = 0;
		лСправочникМенеджер = 0;
		Если пСоответствиеСсылок.Получить( лКлючИЗначение.Ключ ) = 1 Тогда
			
			лДокументМенеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке( лКлючИЗначение.Ключ );
			лНовыйДокумент = лДокументМенеджер.СоздатьДокумент();
			лНовыйДокумент.УстановитьСсылкуНового( лКлючИЗначение.Значение );
			лТипДокумента = ТипЗнч(лКлючИЗначение.Ключ);
			лПустаяСсылка = лДокументМенеджер.ПустаяСсылка();
			ЗаполнитьОбъектИБ( лНовыйДокумент, лКлючИЗначение.Значение, лКлючИЗначение.Ключ.ПолучитьОбъект(), лСоответствиеМетаданных, лПустаяСсылка, лСоответствиеСсылок );
			лНовыйДокумент.УстановитьНовыйНомер();
			лНовыйДокумент.ОбменДанными.Загрузка = Истина;
			лНовыйДокумент.Записать();
			
		ИначеЕсли пСоответствиеСсылок.Получить( лКлючИЗначение.Ключ ) = 2 Тогда
			
			лСправочникМенеджер = Справочники.СвойстваЗаписейСкладскогоЖурнала;
			лНовыйЭлемент = лСправочникМенеджер.СоздатьЭлемент();
			лПустаяСсылка = лСправочникМенеджер.ПустаяСсылка();
			лНовыйЭлемент.УстановитьСсылкуНового( лКлючИЗначение.Значение );
			ЗаполнитьОбъектИБ( лНовыйЭлемент, лКлючИЗначение.Значение, лКлючИЗначение.Ключ.ПолучитьОбъект(), лСоответствиеМетаданных, лПустаяСсылка, лСоответствиеСсылок );
			лНовыйЭлемент.УстановитьНовыйКод();
			лНовыйЭлемент.ОбменДанными.Загрузка = Истина;
			лНовыйЭлемент.Записать();
			
		КонецЕсли;
	
	КонецЦикла;
	
	//клонируем регистры
	Для каждого лКлючИЗначение Из лСоответствиеСсылок Цикл
	
		лТип = ТипЗнч(лКлючИЗначение.Ключ);
		Если лТип = Тип("СправочникСсылка.СвойстваЗаписейСкладскогоЖурнала") Тогда
		
			лНаборЗаписейРС = РегистрыСведений.ВерсииЗаписейСкладскогоЖурнала.СоздатьНаборЗаписей();
			лНаборЗаписейРС.Отбор.ЗаписьСкладскогоЖурнала.Установить( лКлючИЗначение.Ключ );
			лНаборЗаписейРС.Прочитать();
			
			лНаборЗаписейРС.Отбор.ЗаписьСкладскогоЖурнала.Установить( лКлючИЗначение.Значение );
			Для каждого лЗапись Из лНаборЗаписейРС Цикл
				лЗапись.ЗаписьСкладскогоЖурнала = лКлючИЗначение.Значение;
				лЗапись.GUID_Меркурий = Строка( Новый УникальныйИдентификатор );
			КонецЦикла;
			лНаборЗаписейРС.ОбменДанными.Загрузка = Истина;
			лНаборЗаписейРС.Записывать = Истина;
			лНаборЗаписейРС.Записать( Ложь );
			
			лНаборЗаписейРС = РегистрыСведений.СвязиМеждуЗаписямиСкладскогоЖурналаИВСД.СоздатьНаборЗаписей();
			лНаборЗаписейРС.Отбор.ЗаписьСкладскогоЖурнала.Установить( лКлючИЗначение.Ключ );
			лНаборЗаписейРС.Отбор.Организация.Установить( Объект.ИсходнаяОрганизация );
			лНаборЗаписейРС.Прочитать();
			
			лНаборЗаписейРС.Отбор.ЗаписьСкладскогоЖурнала.Установить( лКлючИЗначение.Значение );
			лНаборЗаписейРС.Отбор.Организация.Установить( пОрганизация );
			Для каждого лЗапись Из лНаборЗаписейРС Цикл
				лЗапись.ЗаписьСкладскогоЖурнала = лКлючИЗначение.Значение;
				лЗапись.Организация = пОрганизация;
				лЗапись.ВСД = ПолучитьЗначениеРеквизита( лЗапись, "ВСД", лСоответствиеСсылок );
			КонецЦикла;
			лНаборЗаписейРС.ОбменДанными.Загрузка = Истина;
			лНаборЗаписейРС.Записывать = Истина;
			лНаборЗаписейРС.Записать( Ложь );
		
		ИначеЕсли лТип = Тип("ДокументСсылка.АннулированиеВСД") Тогда
		
			СкопироватьЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций( лКлючИЗначение.Ключ, лКлючИЗначение.Значение, лСоответствиеСсылок );
			СкопироватьДвижениеПродукции( лКлючИЗначение.Ключ, лКлючИЗначение.Значение, лСоответствиеСсылок, пОрганизация );
		
		ИначеЕсли лТип = Тип("ДокументСсылка.ВнесениеНомеровТранспортныхСредств") Тогда
		
			СкопироватьЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций( лКлючИЗначение.Ключ, лКлючИЗначение.Значение, лСоответствиеСсылок );
			
		ИначеЕсли лТип = Тип("ДокументСсылка.ВСД") Тогда
		
			лНаборЗаписейРС = РегистрыСведений.СтатусыВСД.СоздатьНаборЗаписей();
			лНаборЗаписейРС.Отбор.ВСД.Установить( лКлючИЗначение.Ключ );
			лНаборЗаписейРС.Прочитать();
			
			лНаборЗаписейРС.Отбор.ВСД.Установить( лКлючИЗначение.Значение );
			Для каждого лЗапись Из лНаборЗаписейРС Цикл
				лЗапись.ВСД = лКлючИЗначение.Значение;
			КонецЦикла;
			лНаборЗаписейРС.ОбменДанными.Загрузка = Истина;
			лНаборЗаписейРС.Записывать = Истина;
			лНаборЗаписейРС.Записать( Ложь );
			
		ИначеЕсли лТип = Тип("ДокументСсылка.Инвентаризации") Тогда
		
			СкопироватьЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций( лКлючИЗначение.Ключ, лКлючИЗначение.Значение, лСоответствиеСсылок );
			СкопироватьДвижениеПродукции( лКлючИЗначение.Ключ, лКлючИЗначение.Значение, лСоответствиеСсылок, пОрганизация );
		
		ИначеЕсли лТип = Тип("ДокументСсылка.КорректировкаОстатковЗаписейСкладскогоЖурнала") Тогда
		
			СкопироватьДвижениеПродукции( лКлючИЗначение.Ключ, лКлючИЗначение.Значение, лСоответствиеСсылок, пОрганизация );
		
		ИначеЕсли лТип = Тип("ДокументСсылка.ОбъединениеЗаписейСкладскогоЖурнала") Тогда
		
			СкопироватьЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций( лКлючИЗначение.Ключ, лКлючИЗначение.Значение, лСоответствиеСсылок );
			СкопироватьДвижениеПродукции( лКлючИЗначение.Ключ, лКлючИЗначение.Значение, лСоответствиеСсылок, пОрганизация );
		
		ИначеЕсли лТип = Тип("ДокументСсылка.ПриходныеОперации") Тогда
		
			СкопироватьЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций( лКлючИЗначение.Ключ, лКлючИЗначение.Значение, лСоответствиеСсылок );
			СкопироватьДвижениеПродукции( лКлючИЗначение.Ключ, лКлючИЗначение.Значение, лСоответствиеСсылок, пОрганизация );
		
		ИначеЕсли лТип = Тип("ДокументСсылка.ПроизводственныеОперации") Тогда
		
			СкопироватьЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций( лКлючИЗначение.Ключ, лКлючИЗначение.Значение, лСоответствиеСсылок );
			СкопироватьДвижениеПродукции( лКлючИЗначение.Ключ, лКлючИЗначение.Значение, лСоответствиеСсылок, пОрганизация );
		
		ИначеЕсли лТип = Тип("ДокументСсылка.ТранспортныеОперации") Тогда
		
			СкопироватьЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций( лКлючИЗначение.Ключ, лКлючИЗначение.Значение, лСоответствиеСсылок );
			СкопироватьДвижениеПродукции( лКлючИЗначение.Ключ, лКлючИЗначение.Значение, лСоответствиеСсылок, пОрганизация );
		
		КонецЕсли;
		
	
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();

КонецПроцедуры // СкопироватьДокументыНаОрганизацию()

&НаСервере
Процедура СкопироватьЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций( пИсходныйДокумент, пНовыйДокумент, пСоответствиеСсылок )

	лЗапрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Период КАК Период,
	|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Регистратор КАК Регистратор,
	|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Активность КАК Активность,
	|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ДокументСсылка КАК ДокументСсылка,
	|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Статус КАК Статус,
	|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ДатаВремяПолученияЗаявкиСервисом КАК ДатаВремяПолученияЗаявкиСервисом,
	|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ДатаВремяФормированияРезультата КАК ДатаВремяФормированияРезультата,
	|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ДатаВремяПолученияРезультатаВыполненияЗаявки КАК ДатаВремяПолученияРезультатаВыполненияЗаявки,
	|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.Текст КАК Текст,
	|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ОшибкиВыполнения КАК ОшибкиВыполнения
	|ИЗ
	|	РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций КАК ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций
	|ГДЕ
	|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ДокументСсылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.НомерСтроки"
	);
	лЗапрос.УстановитьПараметр( "ДокументСсылка", пИсходныйДокумент );
	лРезультат = лЗапрос.Выполнить();
	Если лРезультат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	лВыборка = лРезультат.Выбрать();
	Пока лВыборка.Следующий() Цикл
	
		лРегистратор = Документы.РегистраторЗаписи.СоздатьДокумент();
		лРегистратор.Дата = лВыборка.Период;
		лРегистратор.УстановитьНовыйНомер();
		лРегистратор.ОбменДанными.Загрузка = Истина;
		лРегистратор.Записать();
		
		лНаборЗаписейРС = РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.СоздатьНаборЗаписей();
		лНаборЗаписейРС.Отбор.Регистратор.Установить( лРегистратор.Ссылка );
		лЗапись = лНаборЗаписейРС.Добавить();
		ЗаполнитьЗначенияСвойств( лЗапись, лВыборка );
		лЗапись.Регистратор = лРегистратор.Ссылка;
		лЗапись.ДокументСсылка = пНовыйДокумент;
		лЗапись.GUID_Меркурий = Строка( лРегистратор.Ссылка.УникальныйИдентификатор() );
		//лНаборЗаписейРС.ОбменДанными.Загрузка = Истина;
		лНаборЗаписейРС.Записывать = Истина;
		лНаборЗаписейРС.Записать();
	
	КонецЦикла;

КонецПроцедуры // СкопироватьЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций()

&НаСервере
Процедура СкопироватьДвижениеПродукции( пИсходныйДокумент, пНовыйДокумент, пСоответствиеСсылок, пОрганизация )

	лЗапрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДвижениеПродукции.Период КАК Период,
	|	ДвижениеПродукции.Активность КАК Активность,
	|	ДвижениеПродукции.ВидДвижения КАК ВидДвижения,
	|	ДвижениеПродукции.Организация КАК Организация,
	|	ДвижениеПродукции.Предприятие КАК Предприятие,
	|	ДвижениеПродукции.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
	|	ДвижениеПродукции.Количество КАК Количество
	|ИЗ
	|	РегистрНакопления.ДвижениеПродукции КАК ДвижениеПродукции
	|ГДЕ
	|	ДвижениеПродукции.Регистратор = &Регистратор
	|	И ДвижениеПродукции.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДвижениеПродукции.НомерСтроки"
	);
	лЗапрос.УстановитьПараметр( "Регистратор", пИсходныйДокумент );
	лЗапрос.УстановитьПараметр( "Организация", Объект.ИсходнаяОрганизация );
	лРезультат = лЗапрос.Выполнить();
	Если лРезультат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	лНаборЗаписей = РегистрыНакопления.ДвижениеПродукции.СоздатьНаборЗаписей();
	лНаборЗаписей.Отбор.Регистратор.Установить( пНовыйДокумент );
	
	лВыборка = лРезультат.Выбрать();
	Пока лВыборка.Следующий() Цикл
	
		лЗапись = лНаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств( лЗапись, лВыборка );
		
		лЗапись.Регистратор = пНовыйДокумент;
		лЗапись.Организация = пОрганизация;
		лЗапись.ЗаписьСкладскогоЖурнала = ПолучитьЗначениеРеквизита( лЗапись, "ЗаписьСкладскогоЖурнала", пСоответствиеСсылок );
		
	КонецЦикла;
	
	//лНаборЗаписей.ОбменДанными.Загрузка = Истина;
	лНаборЗаписей.Записывать = Истина;
	лНаборЗаписей.Записать();

КонецПроцедуры // СкопироватьДвижениеПродукции()


&НаСервере
Процедура ЗаполнитьОбъектИБ( пНовыйОбъект, пСсылкаНовогоОбъекта, пОбъектИсточник, пСоответствиеМетаданных, пПустаяСсылка, пСоответствиеСсылок )

	лСписокРеквизитов = пСоответствиеМетаданных.Получить( пПустаяСсылка );
	Для каждого лРеквизит Из лСписокРеквизитов Цикл
	
		пНовыйОбъект[лРеквизит] = ПолучитьЗначениеРеквизита( пОбъектИсточник, лРеквизит, пСоответствиеСсылок );
	
	КонецЦикла;
	
	Если пПустаяСсылка = Справочники.СвойстваЗаписейСкладскогоЖурнала.ПустаяСсылка() Тогда
	
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Справочник.СвойстваЗаписейСкладскогоЖурнала.ПроизводителиПродукции" );
		СкопироватьТабличнуюЧасть( "ПроизводителиПродукции", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
		
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Справочник.СвойстваЗаписейСкладскогоЖурнала.СписокФизическихУпаковок" );
		СкопироватьТабличнуюЧасть( "СписокФизическихУпаковок", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
	
	ИначеЕсли пПустаяСсылка = Документы.АннулированиеВСДГрупповое.ПустаяСсылка() Тогда
	
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Документ.АннулированиеВСДГрупповое.СписокАннулируемыхВСД" );
		СкопироватьТабличнуюЧасть( "СписокАннулируемыхВСД", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
	
	ИначеЕсли пПустаяСсылка = Документы.ВнесениеНомеровТранспортныхСредств.ПустаяСсылка() Тогда
	
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Документ.ВнесениеНомеровТранспортныхСредств.ТочкиПерегрузки" );
		СкопироватьТабличнуюЧасть( "ТочкиПерегрузки", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
	
	ИначеЕсли пПустаяСсылка = Документы.ВнесениеНомеровТранспортныхСредствГрупповое.ПустаяСсылка() Тогда
	
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Документ.ВнесениеНомеровТранспортныхСредствГрупповое.ТочкиПерегрузки" );
		СкопироватьТабличнуюЧасть( "ТочкиПерегрузки", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
	
	ИначеЕсли пПустаяСсылка = Документы.ВСД.ПустаяСсылка() Тогда
	
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Документ.ВСД.ПроизводителиПродукции" );
		СкопироватьТабличнуюЧасть( "ПроизводителиПродукции", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Документ.ВСД.СписокСвязанныхДокументов" );
		СкопироватьТабличнуюЧасть( "СписокСвязанныхДокументов", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Документ.ВСД.СписокФизическихУпаковок" );
		СкопироватьТабличнуюЧасть( "СписокФизическихУпаковок", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Документ.ВСД.ТаблицаМаршрутСледования" );
		СкопироватьТабличнуюЧасть( "ТаблицаМаршрутСледования", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Документ.ВСД.УсловияПеремещенияПродукции" );
		СкопироватьТабличнуюЧасть( "УсловияПеремещенияПродукции", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
	
	ИначеЕсли пПустаяСсылка = Документы.Инвентаризации.ПустаяСсылка() Тогда
	
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Документ.Инвентаризации.ТаблицаНовойПродукции" );
		СкопироватьТабличнуюЧасть( "ТаблицаНовойПродукции", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Документ.Инвентаризации.ТаблицаПродукции" );
		СкопироватьТабличнуюЧасть( "ТаблицаПродукции", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Документ.Инвентаризации.ТаблицаРезультат" );
		СкопироватьТабличнуюЧасть( "ТаблицаРезультат", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Документ.Инвентаризации.ТаблицаПроизводителей" );
		СкопироватьТабличнуюЧасть( "ТаблицаПроизводителей", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Документ.Инвентаризации.СписокФизическихУпаковокПродукция" );
		СкопироватьТабличнуюЧасть( "СписокФизическихУпаковокПродукция", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Документ.Инвентаризации.СписокФизическихУпаковокНоваяПродукция" );
		СкопироватьТабличнуюЧасть( "СписокФизическихУпаковокНоваяПродукция", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
	
	ИначеЕсли пПустаяСсылка = Документы.КорректировкаОстатковЗаписейСкладскогоЖурнала.ПустаяСсылка() Тогда
	
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Документ.КорректировкаОстатковЗаписейСкладскогоЖурнала.ТаблицаЗаписейСкладскогоЖурнала" );
		СкопироватьТабличнуюЧасть( "ТаблицаЗаписейСкладскогоЖурнала", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
	
	ИначеЕсли пПустаяСсылка = Документы.ОбъединениеЗаписейСкладскогоЖурнала.ПустаяСсылка() Тогда
	
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Документ.ОбъединениеЗаписейСкладскогоЖурнала.ТаблицаПродукция" );
		СкопироватьТабличнуюЧасть( "ТаблицаПродукция", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Документ.ОбъединениеЗаписейСкладскогоЖурнала.СписокФизическихУпаковок" );
		СкопироватьТабличнуюЧасть( "СписокФизическихУпаковок", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
	
	ИначеЕсли пПустаяСсылка = Документы.ПриходныеОперации.ПустаяСсылка() Тогда
	
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Документ.ПриходныеОперации.ПроизводителиПродукции" );
		СкопироватьТабличнуюЧасть( "ПроизводителиПродукции", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Документ.ПриходныеОперации.СписокСвязанныхДокументов_Возврат" );
		СкопироватьТабличнуюЧасть( "СписокСвязанныхДокументов_Возврат", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Документ.ПриходныеОперации.СписокФизическихУпаковок" );
		СкопироватьТабличнуюЧасть( "СписокФизическихУпаковок", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Документ.ПриходныеОперации.СписокФизическихУпаковок_Возврат" );
		СкопироватьТабличнуюЧасть( "СписокФизическихУпаковок_Возврат", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Документ.ПриходныеОперации.ТаблицаМаршрутСледования" );
		СкопироватьТабличнуюЧасть( "ТаблицаМаршрутСледования", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Документ.ПриходныеОперации.УсловияПеремещенияПродукции" );
		СкопироватьТабличнуюЧасть( "УсловияПеремещенияПродукции", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
	
	ИначеЕсли пПустаяСсылка = Документы.ПриходныеОперацииСводно.ПустаяСсылка() Тогда
	
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Документ.ПриходныеОперацииСводно.ТаблицаДанных" );
		СкопироватьТабличнуюЧасть( "ТаблицаДанных", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Документ.ПриходныеОперацииСводно.СписокФизическихУпаковок" );
		СкопироватьТабличнуюЧасть( "СписокФизическихУпаковок", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
	
	ИначеЕсли пПустаяСсылка = Документы.ПроизводственныеОперации.ПустаяСсылка() Тогда
	
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Документ.ПроизводственныеОперации.СписокФизическихУпаковокПродукция" );
		СкопироватьТабличнуюЧасть( "СписокФизическихУпаковокПродукция", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Документ.ПроизводственныеОперации.СписокФизическихУпаковокСырье" );
		СкопироватьТабличнуюЧасть( "СписокФизическихУпаковокСырье", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Документ.ПроизводственныеОперации.ТаблицаВСД" );
		СкопироватьТабличнуюЧасть( "ТаблицаВСД", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Документ.ПроизводственныеОперации.ТаблицаПродукции" );
		СкопироватьТабличнуюЧасть( "ТаблицаПродукции", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Документ.ПроизводственныеОперации.ТаблицаРезультат" );
		СкопироватьТабличнуюЧасть( "ТаблицаРезультат", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Документ.ПроизводственныеОперации.ТаблицаСырье" );
		СкопироватьТабличнуюЧасть( "ТаблицаСырье", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
	
	ИначеЕсли пПустаяСсылка = Документы.ТранспортныеОперации.ПустаяСсылка() Тогда
	
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Документ.ТранспортныеОперации.СписокСвязанныхДокументов" );
		СкопироватьТабличнуюЧасть( "СписокСвязанныхДокументов", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Документ.ТранспортныеОперации.СписокФизическихУпаковок" );
		СкопироватьТабличнуюЧасть( "СписокФизическихУпаковок", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Документ.ТранспортныеОперации.ТаблицаВСД" );
		СкопироватьТабличнуюЧасть( "ТаблицаВСД", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Документ.ТранспортныеОперации.ТаблицаМаршрутСледования" );
		СкопироватьТабличнуюЧасть( "ТаблицаМаршрутСледования", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Документ.ТранспортныеОперации.ТаблицаПродукция" );
		СкопироватьТабличнуюЧасть( "ТаблицаПродукция", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
		лСписокРеквизитов = пСоответствиеМетаданных.Получить( "Документ.ТранспортныеОперации.УсловияПеремещенияПродукции" );
		СкопироватьТабличнуюЧасть( "УсловияПеремещенияПродукции", пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, лСписокРеквизитов );
	
	КонецЕсли;

КонецПроцедуры // ЗаполнитьОбъектИБ()

&НаСервере
Процедура СкопироватьТабличнуюЧасть( пИмяТЧ, пСоответствиеСсылок, пНовыйОбъект, пОбъектИсточник, пСписокРеквизитов )

	Для каждого лСтрокаТЧ Из пОбъектИсточник[пИмяТЧ] Цикл
		
		лНоваяСтрока = пНовыйОбъект[пИмяТЧ].Добавить();
		Для каждого лРеквизит Из пСписокРеквизитов Цикл
			лНоваяСтрока[лРеквизит] = ПолучитьЗначениеРеквизита( лСтрокаТЧ, лРеквизит, пСоответствиеСсылок );
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры // СкопироватьТабличнуюЧасть()

&НаСервере
Функция ПолучитьЗначениеРеквизита( пОбъектИсточник, пРеквизит, пСоответствиеСсылок )

	Если пРеквизит = "GUID_Меркурий" Тогда
		Возврат Строка( Новый УникальныйИдентификатор );
	Иначе
		лЗначение = пОбъектИсточник[пРеквизит];
		лЗначениеИзСоответствия = пСоответствиеСсылок.Получить(лЗначение);
		Если лЗначениеИзСоответствия = Неопределено Тогда
			Возврат лЗначение;
		Иначе
			Возврат лЗначениеИзСоответствия;
		КонецЕсли;
	КонецЕсли;

КонецФункции // ПолучитьЗначениеРеквизита()

&НаКлиенте
Процедура КлонироватьДокументы(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Клонирование документов начато " + ТекущаяДата() );
	
	Для каждого лСтрокаТЧ Из Объект.Организации Цикл
		лСтрокаТЧ.Выполнено = 0;
	КонецЦикла;
	
	ПодготовитьДокументыДляКлонированияНаСервере();
	
	Если Объект.КоличествоЦиклов = 0 Тогда
		лКоличествоЦиклов = 1;
	Иначе
		лКоличествоЦиклов = Объект.КоличествоЦиклов;
	КонецЕсли;
	
	лОтбор = Новый Структура( "Обновлять", Истина );
	лВыбраноОрганизаций = Объект.Организации.НайтиСтроки( лОтбор ).Количество();
	
	ВсегоДанных = лКоличествоЦиклов * ДанныеДляКлонирования.Количество() * лВыбраноОрганизаций;
	Обработано = 0;
	
	ВывестиПрогресс();
	
	Для н=1 По лКоличествоЦиклов Цикл
	
		ОбработкаПрерыванияПользователя();
		
		ЦиклКлонированияДокументов();
		
		Обработано = н*ДанныеДляКлонирования.Количество()*лВыбраноОрганизаций;
		ВывестиПрогресс();
		ОбновитьОтображениеДанных();
	
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Клонирование документов завершено (" + Формат(Обработано,"ЧДЦ=0") + ") " + ТекущаяДата() );
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиПрогресс()

	Состояние( "Обработано " + Формат(Обработано,"ЧДЦ=0"), Окр( Обработано/ВсегоДанных*100, 0 ), "Клонирование документов..." );

КонецПроцедуры // ВывестиПрогресс()


&НаСервере
Процедура ЗаполнитьТаблицуНаСервере()
	
	Объект.Организации.Очистить();
	лЗапрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.ДМ_КодSAP КАК ДМ_КодSAP,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ПометкаУдаления = ЛОЖЬ
	|	И Организации.ДМ_КодSAP > ""0""
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование"
	);
	лПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
	лРезультат = лЗапрос.Выполнить();
	Если лРезультат.Пустой() Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю( НСтр("ru = 'Нет организаций с кодом SAP'") );
		Возврат;
	
	КонецЕсли;
	
	лВыборка = лРезультат.Выбрать();
	Пока лВыборка.Следующий() Цикл
		
		лНоваяСтрока = Неопределено;
		
		Если Не ПустаяСтрока(лВыборка.ДМ_КодSAP) Тогда
			лНоваяСтрока = Объект.Организации.Добавить();
			лНоваяСтрока.Обновлять = Истина;
			лНоваяСтрока.Организация = лВыборка.Ссылка;
			лНоваяСтрока.Наименование = лВыборка.Наименование;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Объект.Организации.Количество() = 0 Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю( НСтр("ru = 'Нет подходящих данных для заполнения'") );
		Возврат;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицу(Команда)
	ЗаполнитьТаблицуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсе(Команда)
	
	Для каждого лСтрока Из Объект.Организации Цикл
		лСтрока.Обновлять = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	
	Для каждого лСтрока Из Объект.Организации Цикл
		лСтрока.Обновлять = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОрганизацииОрганизацияПриИзмененииНаСервере( пОрганизация )
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта( пОрганизация, "Наименование", Истина );
КонецФункции

&НаКлиенте
Процедура ОрганизацииОрганизацияПриИзменении(Элемент)
	
	Элементы.Организации.ТекущиеДанные.Наименование = ОрганизацииОрганизацияПриИзмененииНаСервере(Элементы.Организации.ТекущиеДанные.Организация);
	
КонецПроцедуры
