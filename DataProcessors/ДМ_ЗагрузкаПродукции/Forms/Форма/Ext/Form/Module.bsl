&НаСервереБезКонтекста
Функция ПолучитьСписокЛистов_EXCEL1C(Знач ФайлEXCEL)
	Перем ТабличныйДокумент, ОбластьТД;
	Перем СписокЛистов;
	
	СписокЛистов = Новый СписокЗначений;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Попытка
		ТабличныйДокумент.Прочитать(ФайлEXCEL);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат Новый СписокЗначений;
	КонецПопытки;
	
	Для Каждого ОбластьТД ИЗ ТабличныйДокумент.Области Цикл
		СписокЛистов.Добавить(ОбластьТД.Имя);
	КонецЦикла;
	
	Возврат СписокЛистов;
	
КонецФункции

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	#Если ВебКлиент Тогда
		Если Не РаботаСФайламиСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
			РаботаСФайламиСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСФайлами(Неопределено);
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выбор файла";
	Диалог.Фильтр = "Excel файлы(*.xls;*.xlsx)|*.xls;*.xlsx";
	Диалог.ИндексФильтра = 0;
	Диалог.ПредварительныйПросмотр = Ложь;
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.МножественныйВыбор = Ложь; 
	
	Диалог.Показать(Новый ОписаниеОповещения("ПутьКФайлуНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		Объект.ПутьКФайлу = Диалог.ПолноеИмяФайла;
	КонецЕсли;

КонецПроцедуры

//Кнопка загрузки
&НаКлиенте
Процедура ЗагрузитьДанныеИзФайла(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(СокрЛП(Объект.ПутьКФайлу));
	РасширениеФайла =  Файл.Расширение;
	ПолноеИмяФайла = Файл.ПолноеИмя;
		
	Если НЕ ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Вы не выбрали файл для загрузки.'; en = 'You did not select a file to upload.'"),
			,"ПутьКФайлу", "Объект"
		);
		Возврат;
	КонецЕсли;	
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РасширениеФайла", РасширениеФайла);
	
	//Сохранение файла во временное хранилище.
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьФайлВХранилище", ЭтаФорма, ДополнительныеПараметры);
	НачатьПомещениеФайла(ОписаниеОповещения, , ПолноеИмяФайла, Ложь, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлВХранилище(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Не удалось открыть файл!';en='Could not open file!'"),
			,"ПутьКФайлу", "Объект"
		);
		Возврат;	
	КонецЕсли; 
	
	ЗагрузитьДанныеИзФайлаНаСервере(Адрес, ДополнительныеПараметры);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Загрузка завершена" );
	 
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеИзФайлаНаСервере(Знач АдресВХранилище,ДополнительныеПараметры)			
	
	УстановитьПривилегированныйРежим( Истина );
	
	
	ФайлВременногоХранилища = ПолучитьИзВременногоХранилища(АдресВХранилище);	
	лИмяФайла = ПолучитьИмяВременногоФайла(ДополнительныеПараметры.РасширениеФайла);
	ФайлВременногоХранилища.Записать(лИмяФайла);
	УдалитьИзВременногоХранилища(АдресВХранилище);
	
	СписокЛистов = ПолучитьСписокЛистов_EXCEL1C(лИмяФайла);
	
	Если СписокЛистов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ТаблДок = Новый ТабличныйДокумент;
	Попытка
		ТаблДок.Прочитать(лИмяФайла);    
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецПопытки;
	
	КвоКолонок = 0;
	Для лл=0 по СписокЛистов.Количество()-1 Цикл 
		ИмяЛиста = СписокЛистов[лл].Значение;
		ОбластьФайла = ТаблДок.ПолучитьОбласть(ИмяЛиста);
		КолВоКолонокФайла = ОбластьФайла.ПолучитьРазмерОбластиДанныхПоГоризонтали();
		Если КвоКолонок <> 0 Тогда
			Если КолВоКолонокФайла <> КвоКолонок Тогда				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("На закладках разное количество колонок. Отмена загрузки");
				Возврат;
			КонецЕсли;
		КонецЕсли;	
		КвоКолонок = КолВоКолонокФайла;	
	КонецЦикла;
	
	
	КвоНов = 0;
	КвоОбн = 0;
	Для лл=0 по СписокЛистов.Количество()-1 Цикл 
		
		
		ИмяЛиста = СписокЛистов[лл].Значение;
		ОбластьФайла = ТаблДок.ПолучитьОбласть(ИмяЛиста);
		КолВоСтрокФайла = ОбластьФайла.ПолучитьРазмерОбластиДанныхПоВертикали();
		КолВоКолонокФайла = ОбластьФайла.ПолучитьРазмерОбластиДанныхПоГоризонтали();
		НачСтрока = 2;
		
		ТЗ = ДМ_РаботаСФайламиEXCEL1С.ЗагрузитьМетодом_EXCEL1C(лИмяФайла,ИмяЛиста,,НачСтрока);

		Если ТЗ.Количество() > (НачСтрока - 1) Тогда
			Для нс = НачСтрока по ТЗ.Количество()-(НачСтрока - 1) Цикл
				ТекТЗ = ТЗ.Получить(нс);
				НаимТипаПродукции = ТекТЗ["N5"];
				НеНайденТип = 0;
				Попытка
					ТипПродукции = Справочники.ТипыПродукции[НаимТипаПродукции];
				Исключение	
					НеНайденТип = 1;
					ТипПродукции = Справочники.ТипыПродукции.НайтиПоНаименованию(НаимТипаПродукции,Истина);
					Если ТипПродукции <> Справочники.ТипыПродукции.ПустаяСсылка() Тогда
						НеНайденТип = 0;
					КонецЕсли;	
				КонецПопытки;
				
				Если НеНайденТип = 1 Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Лист " + ИмяЛиста + ",№ строки " + нс + ": не найден тип продукции по наименованию = " + НаимТипаПродукции +". Строка пропущена");
					Продолжить;
				КонецЕсли;	
					
				GUIDВидаПродукции = ТекТЗ["N7"];
				Если СтрДлина(GUIDВидаПродукции) <> 36 Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Лист " + ИмяЛиста + ",№ строки " + нс + ": длина GUID вида продукции (" + GUIDВидаПродукции + ") не равна 36. Строка пропущена");
					Продолжить;
				КонецЕсли;
				НаимВидаПродукции = ТекТЗ["N6"];
			    GUIDПодвидаПродукции = ТекТЗ["N10"];
				Если СтрДлина(GUIDПодвидаПродукции) <> 36 Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Лист " + ИмяЛиста + ",№ строки " + нс + ": длина GUID подвида продукции (" + GUIDПодвидаПродукции + ") не равна 36. Строка пропущена");
					Продолжить;
				КонецЕсли;	
				НаимПодвидаПродукции = ТекТЗ["N9"];
				GUIDПродукции = ТекТЗ["N13"];
				Если СтрДлина(GUIDПродукции) <> 36 Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Лист " + ИмяЛиста + ",№ строки " + нс + ": длина GUID продукции (" + GUIDПродукции + ") не равна 36. Строка пропущена");
					Продолжить;
				КонецЕсли;	
			    НаимПродукции = ТекТЗ["N12"];
				АртикулПродукции = ТекТЗ["N4"];
				ВидПродукции = Справочники.ВидыПродукции.НайтиПоРеквизиту("GUID_Меркурий",GUIDВидаПродукции,,ТипПродукции);
				Если ВидПродукции = Справочники.ВидыПродукции.ПустаяСсылка() Тогда
					ВидПродукцииО = Справочники.ВидыПродукции.СоздатьЭлемент();
					ВидПродукцииО.GUID_Меркурий = GUIDВидаПродукции;
					ВидПродукцииО.Наименование = НаимВидаПродукции;
					ВидПродукцииО.Владелец = ТипПродукции;
					ВидПродукцииО.Записать();
					ВидПродукции = ВидПродукцииО.Ссылка;
				КонецЕсли;	
				ПодвидПродукции = Справочники.ПодвидыПродукции.НайтиПоРеквизиту("GUID_Меркурий",GUIDПодвидаПродукции,,ВидПродукции);
				Если ПодвидПродукции = Справочники.ПодвидыПродукции.ПустаяСсылка() Тогда
					ПодвидПродукцииО = Справочники.ПодвидыПродукции.СоздатьЭлемент();
					ПодвидПродукцииО.GUID_Меркурий = GUIDПодвидаПродукции;
					ПодвидПродукцииО.Наименование = НаимПодвидаПродукции;
					ПодвидПродукцииО.Владелец = ВидПродукции;
					ПодвидПродукцииО.Записать();
					ПодвидПродукции = ПодвидПродукцииО.Ссылка;
				КонецЕсли;
				Продукция = Справочники.Продукция.НайтиПоРеквизиту("GUID_Меркурий",GUIDПродукции,,ПодвидПродукции);
				Если Продукция = Справочники.Продукция.ПустаяСсылка() Тогда
					ПродукцияО = Справочники.Продукция.СоздатьЭлемент();
					ПродукцияО.GUID_Меркурий = GUIDПродукции;
					ПродукцияО.Наименование = НаимПродукции;
					ПродукцияО.Артикул = АртикулПродукции;
					ПродукцияО.НаименованиеПолное = НаимПродукции;
					ПродукцияО.Владелец = ПодвидПродукции;
					ПродукцияО.Записать();
					ПродукцияО = ПродукцияО.Ссылка;
					КвоНов = КвоНов + 1;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Создан " + НаимПродукции + ", артикул " + АртикулПродукции);
				ИначеЕсли Не Объект.НеОбновлять Тогда
					ПродукцияО = Продукция.ПолучитьОбъект();
					ПродукцияО.Наименование = НаимПродукции;
					ПродукцияО.Артикул = АртикулПродукции;
					ПродукцияО.НаименованиеПолное = НаимПродукции;
					ПродукцияО.Владелец = ПодвидПродукции;
					ПродукцияО.Записать();
					Продукция = ПродукцияО.Ссылка;
					КвоОбн = КвоОбн + 1;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;	
		
	КонецЦикла;
	
	Попытка
		УдалитьФайлы(лИмяФайла); 
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецПопытки;

	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("------------------------------------");
	Если КвоНов > 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Создано " + КвоНов + " элементов продукции");
	КонецЕсли;				
	Если КвоОбн > 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Обновлено " + КвоОбн + " элементов продукции");
	КонецЕсли;				
	
	УстановитьПривилегированныйРежим( Ложь );
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

