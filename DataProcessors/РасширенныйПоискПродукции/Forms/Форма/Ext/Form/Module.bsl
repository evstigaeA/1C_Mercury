#Область ОписаниеПеременных

&НаКлиенте
Перем ПодтверждениеЗакрытияФормы;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Предприятие") Тогда
		Предприятие = Параметры.Предприятие;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Элементы.ШагиЗагрузки.ТекущаяСтраница <> Элементы.ОжиданиеЗагрузки 
		Или ПодтверждениеЗакрытияФормы = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЗакрытиеФормыЗавершение", ЭтотОбъект);
	Текст = НСтр("ru = 'Прервать загрузку списка продукции?'");
	ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ВидОперации = 1 Тогда
		ИсключаемыеРеквизиты = Новый Массив;
		ИсключаемыеРеквизиты.Добавить("ТипПродукции");
		ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, ИсключаемыеРеквизиты);
		ПроверяемыеРеквизиты.Добавить("СписокИдентификаторовПродукции");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийШапкиФормы

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ТаблицаПродукции.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеПриИзменении(Элемент)
	
	ТаблицаПродукции.Очистить();

КонецПроцедуры

&НаКлиенте
Процедура ТипПродукцииПриИзменении(Элемент)
	
	ВидПродукции = Неопределено;
	ПодвидПродукции = Неопределено;
	ТаблицаПродукции.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ВидПродукцииПриИзмененииНаСервере()
	
	ПодвидПродукции = Неопределено;
	
	Если ВидПродукции = Справочники.ВидыПродукции.ПустаяСсылка() Тогда
		Возврат;
	КонецЕсли;
	
	ТипПродукции = ВидПродукции.Владелец;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииПриИзменении(Элемент)
	
	ВидПродукцииПриИзмененииНаСервере();
	ТаблицаПродукции.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ПодвидПродукцииПриИзмененииНаСервере()

	Если ПодвидПродукции = Справочники.ПодвидыПродукции.ПустаяСсылка() Тогда
		Возврат;
	КонецЕсли;
	
	ВидПродукции = ПодвидПродукции.Владелец;
	ТипПродукции = ВидПродукции.Владелец;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодвидПродукцииПриИзменении(Элемент)
	
	ПодвидПродукцииПриИзмененииНаСервере();
	ТаблицаПродукции.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокИдентификаторовПродукцииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
	ПараметрыФормы.Вставить("СписокЗначений", СписокИдентификаторовПродукции);
	ПараметрыФормы.Вставить("СписокТипов"   , Новый ОписаниеТипов("Строка"));
	ПараметрыФормы.Вставить("Представление" , НСтр("ru = 'Указание списка идентификаторов продукции.'"));
	ПараметрыФормы.Вставить("Сценарий"      , "ЗагрузкаИдентификаторов");
	
	Оповещение = Новый ОписаниеОповещения("СписокИдентификаторовПродукцииОкончаниеВыбора", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВводЗначенийСписком", ПараметрыФормы, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокИдентификаторовПродукцииОкончаниеВыбора(МассивИдентификаторов, ДополнительныеПараметры) Экспорт
	
	Если МассивИдентификаторов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(МассивИдентификаторов) = Тип("Массив") Тогда
		СписокИдентификаторовПродукции.ЗагрузитьЗначения(МассивИдентификаторов);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НайтиПродукцию(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФильтра = Новый Структура;
	Если ВидОперации = 0 Тогда
		ПараметрыФильтра.Вставить("ТипПродукции"                 , ТипПродукции);
		ПараметрыФильтра.Вставить("ВидПродукции"                 , ВидПродукции);
		ПараметрыФильтра.Вставить("ПодвидПродукции"              , ПодвидПродукции);
		ПараметрыФильтра.Вставить("КонтрагентДобавившийПродукцию", КонтрагентДобавившийПродукцию);
		ПараметрыФильтра.Вставить("Контрагент"                   , Контрагент);
		ПараметрыФильтра.Вставить("Предприятие"                  , Предприятие);
	Иначе
		ПараметрыФильтра.Вставить("СписокИдентификаторовПродукции", СписокИдентификаторовПродукции);
	КонецЕсли;
	
	ОчиститьСообщения();
	
	// Переключаем режим - страницу.
	Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.ОжиданиеЗагрузки;
	ТекстСостоянияЗагрузки = НСтр("ru = 'Загрузка данных из ИС ""Меркурий""...'");
	
	ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ПрогрессВыполнения", ЭтотОбъект);
	Задание = ЗапуститьФоновуюЗагрузкуССайтаНаСервере(ПараметрыФильтра, УникальныйИдентификатор);
	
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
	НастройкиОжидания.ПолучатьРезультат = Истина;
	НастройкиОжидания.ОповещениеОПрогрессеВыполнения = ОповещениеОПрогрессеВыполнения;
	
	Обработчик = Новый ОписаниеОповещения("ПослеФоновойЗагрузкиССайта", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Задание, Обработчик, НастройкиОжидания);
	
	ИдентификаторЗадания = Задание.ИдентификаторЗадания;
	
	// Запущенное
	Элементы.ПрерватьЗагрузку.Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеФоновойЗагрузкиССайта(Задание, ДополнительныеПараметры) Экспорт

	Если Задание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Задание.Статус = "Ошибка" Тогда
		ТекстОшибки = НСтр("ru = 'Поиск продукции по фильтру не выполнен. Произошла ошибка: '") + Символы.ПС + Задание.КраткоеПредставлениеОшибки;
		ВывестиСообщениеОбОшибке(ТекстОшибки);
	ИначеЕсли Задание.Статус = "Выполнено" Тогда
		МассивСообщенийОбОшибках = Новый Массив;
		ОбработатьРезультат(Задание.АдресРезультата, МассивСообщенийОбОшибках);
		
		Если МассивСообщенийОбОшибках.Количество() > 0 Тогда
			
			ТекстВсехОшибок = Новый ТекстовыйДокумент;
			ТекстВсехОшибок.ДобавитьСтроку(НСтр("ru = 'Получение продукции завершено с ошибками:'"));
			Для Каждого ТекстЭтойОшибки Из МассивСообщенийОбОшибках Цикл
				ТекстВсехОшибок.ДобавитьСтроку("");
				ТекстВсехОшибок.ДобавитьСтроку(ТекстЭтойОшибки);
			КонецЦикла;
			ТекстВсехОшибок.Показать(НСтр("ru = 'Отчет об ошибках.'"));
		КонецЕсли;
		
		ЗавершениеЗагрузки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСообщениеОбОшибке(Знач ТекстОшибки)
	ОчиститьСообщения();
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.ЗагрузкаПродукции;
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультат(АдресРезультата, МассивСообщенийОбОшибках)
	
	РезультатВыполненияОперации = ПолучитьИзВременногоХранилища(АдресРезультата);
	КоличествоНайденных         = РезультатВыполненияОперации.КоличествоНайденных;
	Если КоличествоНайденных = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ничего не найдено. Уточните реквизиты для поиска.'"));
		
	Иначе
		
		ОбработатьРезультатВыполненияОперации(РезультатВыполненияОперации.Результат);
		
		Если РезультатВыполненияОперации.Свойство("МассивСообщенийОбОшибках") Тогда
			МассивСообщенийОбОшибках = РезультатВыполненияОперации.МассивСообщенийОбОшибках;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеЗагрузки()
	
	Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.ЗагрузкаПродукции;
	
	Возврат;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапуститьФоновуюЗагрузкуССайтаНаСервере(ПараметрыФильтра, УникальныйИдентификатор)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка списка продукции'");

	Если ПараметрыФильтра.Свойство("СписокИдентификаторовПродукции") Тогда
		
		ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне("ИнтеграцияВетисAPIПродукция.ФоновоеЗаданиеПолучениеСпискаПродукцииПоСПискуИдентификаторов",
			ПараметрыФильтра, ПараметрыВыполнения);
			
	Иначе
		
		ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне("ИнтеграцияВетисAPIПродукция.ФоновоеЗаданиеПолучениеСпискаПродукцииПоФильтру",
			ПараметрыФильтра, ПараметрыВыполнения);
		
	КонецЕсли;
		
	Возврат ФоновоеЗадание;
КонецФункции

&НаКлиенте
Процедура ПрогрессВыполнения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Статус = "Выполняется" Тогда
		Прогресс = ПрочитатьПрогресс(Результат.ИдентификаторЗадания);
		Если Прогресс <> Неопределено Тогда
			ТекстСостоянияЗагрузки = Прогресс.Текст;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрочитатьПрогресс(ИдентификаторЗадания)
	Возврат ДлительныеОперации.ПрочитатьПрогресс(ИдентификаторЗадания);
КонецФункции

&НаКлиенте
Процедура ПрерватьЗагрузку(Команда)
	
	Если ИдентификаторЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПрерватьЗагрузкуСервер();
	ПодтверждениеЗакрытияФормы = Неопределено;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	Для Каждого ТекСтрока Из ТаблицаПродукции Цикл
		ТекСтрока.Загружать = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	Для Каждого ТекСтрока Из ТаблицаПродукции Цикл
		ТекСтрока.Загружать = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВыбранные(Команда)
	
	ЗагрузитьВыбранныеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВыбранныеНаСервере()
	
	ПродукцияДляЗагрузки = ТаблицаПродукции.НайтиСтроки(Новый Структура("Загружать", Истина));
	
	Если ПродукцияДляЗагрузки.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбрана продукция для загрузки.'"));
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	
	ИнтеграцияВетисAPIПродукция.СоздатьОбновитьДанныеПродукции(ПродукцияДляЗагрузки, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ПредставлениеОшибки = НСтр("ru = 'При загрузке продукции произошли ошибки:'") + Символы.ПС + ТекстОшибки;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПредставлениеОшибки);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Загрузка продукции завершена.'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицаПродукции

&НаКлиенте
Процедура ТаблицаПродукцииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные= Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Продукция) Тогда
		ПоказатьЗначение(, ТекущиеДанные.Продукция);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбработатьРезультатВыполненияОперации(ПолученнаяПродукция)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПолученнаяПродукция.GUID_Меркурий КАК GUID_Меркурий,
		|	ПолученнаяПродукция.НаименованиеПолное КАК НаименованиеПолное,
		|	ПолученнаяПродукция.ТипПродукции КАК ТипПродукции,
		|	ПолученнаяПродукция.ВидПродукции КАК ВидПродукции,
		|	ПолученнаяПродукция.ПодвидПродукции КАК ПодвидПродукции,
		|	ПолученнаяПродукция.GTIN КАК GTIN,
		|	ПолученнаяПродукция.Артикул КАК Артикул,
		|	ПолученнаяПродукция.ГОСТ КАК ГОСТ,
		|	ПолученнаяПродукция.ОписаниеОбъекта КАК ОписаниеОбъекта
		|ПОМЕСТИТЬ ВТ_ПолученнаяПродукция
		|ИЗ
		|	&ПолученнаяПродукция КАК ПолученнаяПродукция
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПолученнаяПродукция.GUID_Меркурий КАК GUID_Меркурий,
		|	ВТ_ПолученнаяПродукция.НаименованиеПолное КАК Наименование,
		|	ВТ_ПолученнаяПродукция.GTIN КАК GTIN,
		|	ВТ_ПолученнаяПродукция.Артикул КАК Артикул,
		|	ВТ_ПолученнаяПродукция.ГОСТ КАК ГОСТ,
		|	ВТ_ПолученнаяПродукция.ОписаниеОбъекта КАК ОписаниеОбъекта,
		|	ТипыПродукции.Ссылка КАК ТипПродукции,
		|	ВидыПродукции.Ссылка КАК ВидПродукции,
		|	ПодвидыПродукции.Ссылка КАК ПодвидПродукции,
		|	ЕСТЬNULL(Продукция.Ссылка, ЗНАЧЕНИЕ(Справочник.Продукция.ПустаяСсылка)) КАК Продукция
		|ИЗ
		|	ВТ_ПолученнаяПродукция КАК ВТ_ПолученнаяПродукция
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыПродукции КАК ТипыПродукции
		|		ПО ВТ_ПолученнаяПродукция.ТипПродукции = ТипыПродукции.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыПродукции КАК ВидыПродукции
		|		ПО ВТ_ПолученнаяПродукция.ВидПродукции = ВидыПродукции.GUID_Меркурий
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодвидыПродукции КАК ПодвидыПродукции
		|		ПО ВТ_ПолученнаяПродукция.ПодвидПродукции = ПодвидыПродукции.GUID_Меркурий
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Продукция КАК Продукция
		|		ПО ВТ_ПолученнаяПродукция.GUID_Меркурий = Продукция.GUID_Меркурий";
		
	Запрос.УстановитьПараметр("ПолученнаяПродукция", ПолученнаяПродукция);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПродукции.Загрузить(РезультатЗапроса.Выгрузить());
КонецПроцедуры

// Завершение диалога закрытия формы.
&НаКлиенте
Процедура ЗакрытиеФормыЗавершение(Знач РезультатВопроса, Знач ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПодтверждениеЗакрытияФормы = Истина;
		ПрерватьЗагрузкуСервер();
		Закрыть();
	Иначе 
		ПодтверждениеЗакрытияФормы = Неопределено;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПрерватьЗагрузкуСервер()
	
	МодульДлительныеОперации = ОбщегоНазначения.ОбщийМодуль("ДлительныеОперации");
	МодульДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементов()
	
	Элементы.ГруппаОтборыПоФильтру.Видимость = ВидОперации = 0;
	Элементы.ГруппаОтборПоСпискуИдентификаторовПродукции.Видимость = ВидОперации = 1;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаПродукцииПродукция.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаПродукции.Продукция");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Продукция.ПустаяСсылка();

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<в базе не обнаружена>'"));
	
КонецПроцедуры

#КонецОбласти