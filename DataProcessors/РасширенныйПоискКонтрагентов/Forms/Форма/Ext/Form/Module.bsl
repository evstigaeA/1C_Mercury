#Область ОписаниеПеременных

&НаКлиенте
Перем ПодтверждениеЗакрытияФормы;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиАдреса = Обработки.РасширенныйВводКонтактнойИнформации.СписокРеквизитовНаселенныйПункт( , "ФИАС");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Элементы.ШагиЗагрузки.ТекущаяСтраница <> Элементы.ОжиданиеЗагрузки 
		Или ПодтверждениеЗакрытияФормы = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЗакрытиеФормыЗавершение", ЭтотОбъект);
	Текст = НСтр("ru = 'Прервать загрузку списка хозяйствующих субъектов?'");
	ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	УстановитьДоступностьРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОГРНПриИзменении(Элемент)
	
	УстановитьДоступностьРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура СтранаРегистрацииПриИзменении(Элемент)
	
	ОчиститьДочерниеПоляАдреса(0);
	
КонецПроцедуры

&НаКлиенте
Процедура РегионПриИзменении()
	
	Если Регион = "" Или Регион = Неопределено Тогда
		ОчиститьЧастьАдреса("Регион");
		ОчиститьДочерниеПоляАдреса(1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РегионНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	АдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РегионОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РайонПриИзменении()
	
	Если Район = "" Или Район = Неопределено Тогда
		ОчиститьЧастьАдреса("Район");
		ОчиститьДочерниеПоляАдреса(3);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РайонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	АдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РайонОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГородПриИзменении(Элемент)
	
	Если Город = "" Или Город = Неопределено Тогда
		ОчиститьЧастьАдреса("Город");
		ОчиститьДочерниеПоляАдреса(4);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГородНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	АдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГородОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГородАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	АдресАвтоПодбор(Текст, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГородОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	АдресОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НаселенныйПунктПриИзменении(Элемент)
	
	Если НаселенныйПункт = "" Или НаселенныйПункт = Неопределено Тогда
		ОчиститьЧастьАдреса("НаселенныйПункт");
		ОчиститьДочерниеПоляАдреса(6);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаселенныйПунктНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	АдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НаселенныйПунктОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НаселенныйПунктАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	АдресАвтоПодбор(Текст, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НаселенныйПунктОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	АдресОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УлицаПриИзменении(Элемент)
	
	Если Улица = "" Тогда
		ОчиститьЧастьАдреса("Улица");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УлицаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	АдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УлицаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УлицаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	АдресАвтоПодбор(Текст, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УлицаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	АдресОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(СтранаРегистрации) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указана страна.'"));
		Возврат;
	КонецЕсли;
	
	// Если пришли впрямую после редактирования, то сбрасываем значение части адреса.
	Если Элемент.ТекстРедактирования <> ЭтотОбъект[Элемент.Имя] Тогда
		УстановитьЗначениеЧастиАдреса(Элемент, Элемент.ТекстРедактирования);
	КонецЕсли;
	
	ЧастьАдреса = ЧастьАдресаЭлемента(Элемент);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ФорматАдреса", "ФИАС");
	ПараметрыОткрытия.Вставить("СкрыватьНеактуальныеАдреса", Истина);
	
	ПараметрыОткрытия.Вставить("Уровень",  ЧастьАдреса.Уровень);
	ПараметрыОткрытия.Вставить("Родитель", ИдентификаторРодителяЧастиАдресаЭлемента(ЧастьАдреса, ЧастиАдреса));
	
	// Текущий элемент
	ПараметрыОткрытия.Вставить("Идентификатор", ЧастьАдреса.Идентификатор);
	Представление = ?(ПустаяСтрока(ЧастьАдреса.Представление),ЧастьАдреса.Заголовок, ЧастьАдреса.Представление);
	ПараметрыОткрытия.Вставить("Представление", Представление);
	
	ОткрытьФорму("Обработка.РасширенныйВводКонтактнойИнформации.Форма.ВыборАдресаПоУровню", ПараметрыОткрытия, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура АдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОчиститьДочерниеПоляАдреса(ЧастиАдреса[Элемент.Имя].Уровень);
	ВыбранноеЗначение = УстановитьЗначениеЧастиАдреса(Элемент, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресАвтоПодбор(Текст, Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) < 3 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ФорматАдреса", "ФИАС");
	ДополнительныеПараметры.Вставить("СкрыватьНеактуальные", Истина);
	
	ДанныеКлассификатора = СписокАвтоподбораЧастиАдреса(Текст, Элемент.Имя, ЧастиАдреса, ДополнительныеПараметры);
	
	Если ДанныеКлассификатора.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = ДанныеКлассификатора.Данные;
	
	// Стандартную обработку отключаем, только если есть наши варианты.
	Если ДанныеВыбора.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УстановитьЗначениеЧастиАдреса(Элемент, Текст);
	
КонецПроцедуры

&НаКлиенте
Функция УстановитьЗначениеЧастиАдреса(Элемент, ВыбранноеЗначение)

	Результат = УправлениеКонтактнойИнформациейКлиентСервер.УстановитьЗначениеЧастиАдреса(
		Элемент.Имя, ЧастиАдреса, ВыбранноеЗначение);
		
	ЭтотОбъект[Элемент.Имя] = Результат;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ОчиститьДочерниеПоляАдреса(УровеньВыбранногоПоля)
	
	Если УровеньВыбранногоПоля < 7 Тогда
		Улица = "";
		ОчиститьЧастьАдреса("Улица");
	КонецЕсли;
	
	Если УровеньВыбранногоПоля < 6 Тогда
		НаселенныйПункт = "";
		ОчиститьЧастьАдреса("НаселенныйПункт");
	КонецЕсли;
	
	Если УровеньВыбранногоПоля < 4 Тогда
		Город = "";
		ОчиститьЧастьАдреса("Город");
	КонецЕсли;
	
	Если УровеньВыбранногоПоля < 3 Тогда
		Район = "";
		ОчиститьЧастьАдреса("Район");
	КонецЕсли;

	Если УровеньВыбранногоПоля < 1 Тогда
		Регион = "";
		ОчиститьЧастьАдреса("Регион");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЧастьАдреса(ИмяЧасти)
	ЧастиАдреса[ИмяЧасти].Наименование  = Неопределено;
	ЧастиАдреса[ИмяЧасти].Идентификатор = Неопределено;
	ЧастиАдреса[ИмяЧасти].Представление = Неопределено;
	ЧастиАдреса[ИмяЧасти].Сокращение    = Неопределено;
КонецПроцедуры

&НаКлиенте
Функция ЧастьАдресаЭлемента(Элемент)
	
	Возврат ЧастиАдреса[Элемент.Имя];
	
КонецФункции

&НаСервере
Функция ИдентификаторРодителяЧастиАдресаЭлемента(ЧастьАдреса, ЧастиАдреса)
	
	Идентификатор = Неопределено;
	
	Если ЧастьАдреса.Заголовок = "Регион" Тогда
		
		Идентификатор = Новый УникальныйИдентификатор(СтранаРегистрации.GUID_Меркурий);
		
	Иначе
		ЕстьЧастьАдресаБезИдентификатора = ЕстьЛиИдентификаторРодителяЧастиАдресаЭлемента(ЧастиАдреса, ЧастьАдреса, Идентификатор);
		
		Если ЕстьЧастьАдресаБезИдентификатора Тогда
			Обработки.РасширенныйВводКонтактнойИнформации.ЗаполнитьИдентификаторыНаселенногоПункта(ЧастиАдреса);
			ЕстьЧастьАдресаБезИдентификатора = ЕстьЛиИдентификаторРодителяЧастиАдресаЭлемента(ЧастиАдреса, ЧастьАдреса, Идентификатор);
			Если ЕстьЧастьАдресаБезИдентификатора Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Идентификатор;
КонецФункции

&НаСервере
Функция ЕстьЛиИдентификаторРодителяЧастиАдресаЭлемента(ЧастиАдреса, ЧастьАдреса, Идентификатор)
	
	ЕстьЧастьАдресаБезИдентификатора = Ложь;
	ЧастиАдресаВышеПоУровню = Новый Структура;
	УровеньАдреса = 0;
	Для Каждого КлючЗначение Из ЧастиАдреса Цикл
		Часть = КлючЗначение.Значение;
		Если Часть.Уровень < ЧастьАдреса.Уровень И НЕ ПустаяСтрока(Часть.Представление) Тогда
			ЧастиАдресаВышеПоУровню.Вставить(КлючЗначение.Ключ, Часть);
			Если ЗначениеЗаполнено(КлючЗначение.Значение.Идентификатор) Тогда
				Если УровеньАдреса < КлючЗначение.Значение.Уровень Тогда
					Идентификатор = КлючЗначение.Значение.Идентификатор;
					УровеньАдреса = КлючЗначение.Значение.Уровень;
				КонецЕсли;
			Иначе
				ЕстьЧастьАдресаБезИдентификатора = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат ЕстьЧастьАдресаБезИдентификатора;
КонецФункции

&НаСервереБезКонтекста
Функция СписокАвтоподбораЧастиАдреса(Текст, ИмяЧастиАдреса, ЧастиАдреса, ДополнительныеПараметры)

	Возврат Обработки.РасширенныйВводКонтактнойИнформации.СписокАвтоподбораЧастиАдреса(Текст, ИмяЧастиАдреса, ЧастиАдреса, ДополнительныеПараметры);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НайтиКонтрагентов(Команда)
	
	Контрагенты.Очистить();
	
	ПараметрыФильтра = Новый Структура;
	// Основные данные
	ПараметрыФильтра.Вставить("GUID_Меркурий"     , GUID_Меркурий);
	ПараметрыФильтра.Вставить("Наименование"      , Наименование);
	ПараметрыФильтра.Вставить("ПолноеНаименование", ПолноеНаименование);
	ПараметрыФильтра.Вставить("ИНН"               , ИНН);
	ПараметрыФильтра.Вставить("ОГРН"              , ОГРН);
	ПараметрыФильтра.Вставить("КПП"               , КПП);
	ПараметрыФильтра.Вставить("ФИО"               , ФИО);
	// Адрес
	ПараметрыФильтра.Вставить("СтранаРегистрации" , СтранаРегистрации);
	ПараметрыФильтра.Вставить("Регион"            , Строка(ЧастиАдреса.Регион.Идентификатор));
	ПараметрыФильтра.Вставить("Район"             , Строка(ЧастиАдреса.Район.Идентификатор));
	ПараметрыФильтра.Вставить("Город"             , Строка(ЧастиАдреса.Город.Идентификатор));
	ПараметрыФильтра.Вставить("НаселенныйПункт"   , Строка(ЧастиАдреса.НаселенныйПункт.Идентификатор));
	ПараметрыФильтра.Вставить("Улица"             , Строка(ЧастиАдреса.Улица.Идентификатор));
	ПараметрыФильтра.Вставить("НомерСтроения"     , НомерСтроения);
	ПараметрыФильтра.Вставить("НомерДома"         , НомерДома);
	ПараметрыФильтра.Вставить("НомерКвартиры"     , НомерКвартиры);
	ПараметрыФильтра.Вставить("ПочтовыйИндекс"    , ПочтовыйИндекс);
	
	ОчиститьСообщения();
	
	// Переключаем режим - страницу.
	Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.ОжиданиеЗагрузки;
	ТекстСостоянияЗагрузки = НСтр("ru = 'Загрузка данных из ИС ""Меркурий""...'");
	
	ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ПрогрессВыполнения", ЭтотОбъект);
	Задание = ЗапуститьФоновуюЗагрузкуССайтаНаСервере(ПараметрыФильтра, УникальныйИдентификатор);
	
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
	НастройкиОжидания.ПолучатьРезультат = Истина;
	НастройкиОжидания.ОповещениеОПрогрессеВыполнения = ОповещениеОПрогрессеВыполнения;
	
	Обработчик = Новый ОписаниеОповещения("ПослеФоновойЗагрузкиССайта", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Задание, Обработчик, НастройкиОжидания);

	ИдентификаторЗадания = Задание.ИдентификаторЗадания;
	
	// Запущенное
	Элементы.ПрерватьЗагрузку.Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеФоновойЗагрузкиССайта(Задание, ДополнительныеПараметры) Экспорт

	Если Задание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Задание.Статус = "Ошибка" Тогда
		ТекстОшибки = НСтр("ru = 'Поиск хозяйствующих субъектов по фильтру не выполнен. Произошла ошибка: '") + Символы.ПС + Задание.КраткоеПредставлениеОшибки;
		ВывестиСообщениеОбОшибке(ТекстОшибки);
	ИначеЕсли Задание.Статус = "Выполнено" Тогда
		ОбработатьРезультат(Задание.АдресРезультата);
		ЗавершениеЗагрузки();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВывестиСообщениеОбОшибке(Знач ТекстОшибки)
	ОчиститьСообщения();
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.ЗагрузкаКонтрагентов;
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультат(АдресРезультата)
	
	РезультатВыполненияОперации = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если РезультатВыполненияОперации.КоличествоНайденных = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ничего не найдено. Уточните реквизиты для поиска.'"));
	Иначе
		ОбработатьРезультатВыполненияОперации(РезультатВыполненияОперации.Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеЗагрузки()
	
	Элементы.ШагиЗагрузки.ТекущаяСтраница = Элементы.ЗагрузкаКонтрагентов;
	
	Возврат;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапуститьФоновуюЗагрузкуССайтаНаСервере(ПараметрыФильтра, УникальныйИдентификатор)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка списка хозяйствующих субъектов'");

	ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне("ИнтеграцияВетисAPIКонтрагентыПредприятия.ФоновоеЗаданиеПолучениеСпискаКонтрагентовПоФильтру",
		ПараметрыФильтра, ПараметрыВыполнения);
		
	Возврат ФоновоеЗадание;
КонецФункции

&НаКлиенте
Процедура ПрогрессВыполнения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Статус = "Выполняется" Тогда
		Прогресс = ПрочитатьПрогресс(Результат.ИдентификаторЗадания);
		Если Прогресс <> Неопределено Тогда
			ТекстСостоянияЗагрузки = Прогресс.Текст;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрочитатьПрогресс(ИдентификаторЗадания)
	Возврат ДлительныеОперации.ПрочитатьПрогресс(ИдентификаторЗадания);
КонецФункции

&НаКлиенте
Процедура ПрерватьЗагрузку(Команда)
	
	Если ИдентификаторЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПрерватьЗагрузкуСервер();
	ПодтверждениеЗакрытияФормы = Неопределено;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	Для Каждого ТекСтрока Из Контрагенты Цикл
		ТекСтрока.Загружать = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	Для Каждого ТекСтрока Из Контрагенты Цикл
		ТекСтрока.Загружать = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВыбранные()

	ЗагрузитьВыбранныеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВыбранныеНаСервере()
	
	КонтрагентыДляЗагрузки = Контрагенты.НайтиСтроки(Новый Структура("Загружать", Истина));
	
	Если КонтрагентыДляЗагрузки.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбраны хозяйствующие субъекты для загрузки.'"));
		Возврат;
	КонецЕсли;
	
	ИнтеграцияВетисAPIКонтрагентыПредприятия.СоздатьОбновитьДанныеКонтрагентов(КонтрагентыДляЗагрузки);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Загрузка хозяйствующих субъектов завершена.'"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбработатьРезультатВыполненияОперации(ТаблицаКонтрагентов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаКонтрагентов.GUID_Меркурий,
		|	ТаблицаКонтрагентов.Наименование,
		|	ТаблицаКонтрагентов.ПолноеНаименование,
		|	ТаблицаКонтрагентов.ИНН,
		|	ТаблицаКонтрагентов.КПП,
		|	ТаблицаКонтрагентов.ОГРН,
		|	ТаблицаКонтрагентов.ТипПредприятия,
		|	ТаблицаКонтрагентов.НомерПаспорта,
		|	ТаблицаКонтрагентов.ЮридическийАдрес,
		|	ТаблицаКонтрагентов.ОписаниеОбъекта
		|ПОМЕСТИТЬ ВТ_ТаблицаКонтрагентов
		|ИЗ
		|	&ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаКонтрагентов.GUID_Меркурий,
		|	ВТ_ТаблицаКонтрагентов.Наименование,
		|	ВТ_ТаблицаКонтрагентов.ПолноеНаименование,
		|	ВТ_ТаблицаКонтрагентов.КПП,
		|	ВТ_ТаблицаКонтрагентов.ИНН,
		|	ВТ_ТаблицаКонтрагентов.ОГРН,
		|	ТипыПредприятий.Ссылка КАК ТипПредприятия,
		|	ВТ_ТаблицаКонтрагентов.НомерПаспорта,
		|	ВТ_ТаблицаКонтрагентов.ЮридическийАдрес,
		|	ВТ_ТаблицаКонтрагентов.ОписаниеОбъекта
		|ИЗ
		|	ВТ_ТаблицаКонтрагентов КАК ВТ_ТаблицаКонтрагентов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыПредприятий КАК ТипыПредприятий
		|		ПО ВТ_ТаблицаКонтрагентов.ТипПредприятия = ТипыПредприятий.Код";
	
	Запрос.УстановитьПараметр("ТаблицаКонтрагентов", ТаблицаКонтрагентов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Контрагенты.Загрузить(РезультатЗапроса.Выгрузить());

КонецПроцедуры

// Завершение диалога закрытия формы.
&НаКлиенте
Процедура ЗакрытиеФормыЗавершение(Знач РезультатВопроса, Знач ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПодтверждениеЗакрытияФормы = Истина;
		ПрерватьЗагрузкуСервер();
		Закрыть();
	Иначе 
		ПодтверждениеЗакрытияФормы = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьРеквизитов()
	
	Элементы.ИНН.Доступность  = Не ЗначениеЗаполнено(ОГРН);
	Элементы.ОГРН.Доступность = Не ЗначениеЗаполнено(ИНН);
	
КонецПроцедуры

&НаСервере
Процедура ПрерватьЗагрузкуСервер()
	
	МодульДлительныеОперации = ОбщегоНазначения.ОбщийМодуль("ДлительныеОперации");
	МодульДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

#КонецОбласти