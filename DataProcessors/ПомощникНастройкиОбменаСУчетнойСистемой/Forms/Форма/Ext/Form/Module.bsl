

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Устанавливаем текущую таблицу переходов.
	ТаблицаПереходовПоСценарию1();
	
	// Позиционируемся на первом шаге помощника.
	УстановитьПорядковыйНомерПерехода(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ТекстПредупреждения = НСтр("ru = 'Закрыть помощник?'");
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияПроизвольнойФормы(
		ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, "ЗакрытьФормуБезусловно");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	ЗакрытьФормуБезусловно = Истина;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Поставляемая часть

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	
	ПорядковыйНомерПерехода = Значение;
	
	Если ПорядковыйНомерПерехода < 0 Тогда
		
		ПорядковыйНомерПерехода = 0;
		
	КонецЕсли;
	
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Выполняем обработчики событий перехода.
	ВыполнитьОбработчикиСобытийПерехода(ЭтоПереходДалее);
	
	// Устанавливаем отображение страниц.
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяСтраницыДекорации) Тогда
		
		Элементы.ПанельДекорации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыДекорации];
		
	КонецЕсли;
	
	// Устанавливаем текущую кнопку по умолчанию.
	КнопкаДалее = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаДалее");
	
	Если КнопкаДалее <> Неопределено Тогда
		
		КнопкаДалее.КнопкаПоУмолчанию = Истина;
		
	Иначе
		
		КнопкаГотово = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаГотово");
		
		Если КнопкаГотово <> Неопределено Тогда
			
			КнопкаГотово.КнопкаПоУмолчанию = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПереходДалее И СтрокаПереходаТекущая.ДлительнаяОперация Тогда
		
		ПодключитьОбработчикОжидания("ВыполнитьОбработчикДлительнойОперации", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикиСобытийПерехода(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов.
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		
		Если СтрокиПерехода.Количество() > 0 Тогда
			
			СтрокаПерехода = СтрокиПерехода[0];
			
			// Обработчик ПриПереходеДалее.
			Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее)
				И Не СтрокаПерехода.ДлительнаяОперация Тогда
				
				ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
				ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
				
				Отказ = Ложь;
				
				Результат = Вычислить(ИмяПроцедуры);
				
				Если Отказ Тогда
					
					ПорядковыйНомерПерехода = ПорядковыйНомерПерехода - 1;
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() > 0 Тогда
			
			СтрокаПерехода = СтрокиПерехода[0];
			
			// Обработчик ПриПереходеНазад.
			Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад)
				И Не СтрокаПерехода.ДлительнаяОперация Тогда
				
				ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
				ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
				
				Отказ = Ложь;
				
				Результат = Вычислить(ИмяПроцедуры);
				
				Если Отказ Тогда
					
					ПорядковыйНомерПерехода = ПорядковыйНомерПерехода + 1;
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Если СтрокаПереходаТекущая.ДлительнаяОперация И Не ЭтоПереходДалее Тогда
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
		Возврат;
	КонецЕсли;
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		Результат = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			ПорядковыйНомерПерехода = ПорядковыйНомерПерехода - 1;
			Возврат;
			
		ИначеЕсли ПропуститьСтраницу Тогда
			
			Если ЭтоПереходДалее Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				Возврат;
				
			Иначе
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикДлительнойОперации()
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// Обработчик ОбработкаДлительнойОперации.
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПерейтиДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации);
		
		Отказ = Ложь;
		ПерейтиДалее = Истина;
		
		Результат = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			ПорядковыйНомерПерехода = ПорядковыйНомерПерехода - 1;
			Возврат;
			
		ИначеЕсли ПерейтиДалее Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКнопкуФормыПоИмениКоманды(ЭлементФормы, ИмяКоманды)
	
	Для Каждого Элемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			
			ЭлементФормыПоИмениКоманды = ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);
			
			Если ЭлементФормыПоИмениКоманды <> Неопределено Тогда
				
				Возврат ЭлементФормыПоИмениКоманды;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы")
			И СтрНайти(Элемент.ИмяКоманды, ИмяКоманды) > 0 Тогда
			
			Возврат Элемент;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть - Обработчики событий переходов.

#Область СтраницаНастройкаПодключения

// Обработчик перехода далее (на следующую страницу) при уходе со страницы помощника "СтраницаНастройкаПодключения".
//
// Параметры:
// Отказ - Булево - флаг отказа от выполнения перехода далее;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
&НаКлиенте
Функция Подключаемый_СтраницаНастройкаПодключения_ПриПереходеДалее(Отказ)
	
	Если Не ЗначениеЗаполнено(УчетнаяСистемаНастройкаПодключения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Необходимо указать настройки подключения.'"),, "НастройкаПодключения");
		Отказ = Истина;
	КонецЕсли;
	
КонецФункции

// Обработчик выполняется при открытии страницы помощника "СтраницаНастройкаПодключения".
//
// Параметры:
//
//  Отказ - Булево - флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад).
//
//  ПропуститьСтраницу - Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад).
//
//  ЭтоПереходДалее (только чтение) - Булево - флаг определяет направление перехода.
//			Истина - выполняется переход далее; Ложь - выполняется переход назад.
//
&НаКлиенте
Функция Подключаемый_СтраницаНастройкаПодключения_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	СтраницаНастройкаПодключения_ПриОткрытииНаСервере();
КонецФункции

&НаСервере
Функция СтраницаНастройкаПодключения_ПриОткрытииНаСервере()
	УчетнаяСистемаНастройкаПодключения = Константы.УчетнаяСистемаНастройкаПодключения.Получить();
КонецФункции

&НаКлиенте
Процедура НастройкаПодключенияПриИзменении(Элемент)
	ЗаписатьОбщиеДанные("УчетнаяСистемаНастройкаПодключения");
КонецПроцедуры

#КонецОбласти

#Область СтраницаЗагрузкаНСИ

// Обработчик перехода далее (на следующую страницу) при уходе со страницы помощника "СтраницаЗагрузкаНСИ".
//
// Параметры:
// Отказ - Булево - флаг отказа от выполнения перехода далее;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
&НаКлиенте
Функция Подключаемый_СтраницаЗагрузкаНСИ_Ожидание(Отказ, ПерейтиДалее)
	
	ЗагрузкаНСИНаСервере();
	
КонецФункции

&НаСервере
Процедура ЗагрузкаНСИНаСервере()
	
	ОбменУВСУчетнаяСистемаСервер.ЗагрузкаНСИУчетнойСистемы();
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаЗначенияПоумолчанию

// Обработчик перехода далее (на следующую страницу) при уходе со страницы помощника "СтраницаЗначенияПоумолчанию".
//
// Параметры:
// Отказ - Булево - флаг отказа от выполнения перехода далее;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
&НаКлиенте
Функция Подключаемый_СтраницаЗначенияПоумолчанию_ПриПереходеДалее(Отказ)
	
	Если Не ЗначениеЗаполнено(УчетнаяСистемаВидНоменклатурыПоУмолчанию) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Необходимо указать вид номенклатуры по умолчанию.'"),, "УчетнаяСистемаВидНоменклатурыПоУмолчанию");
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(УчетнаяСистемаСкладПоУмолчанию) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Необходимо указать склад по умолчанию.'"),, "УчетнаяСистемаСкладПоУмолчанию");
		Отказ = Истина;
	КонецЕсли;
	
КонецФункции

// Обработчик выполняется при открытии страницы помощника "СтраницаЗначенияПоумолчанию".
//
// Параметры:
//
//  Отказ - Булево - флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад).
//
//  ПропуститьСтраницу - Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад).
//
//  ЭтоПереходДалее (только чтение) - Булево - флаг определяет направление перехода.
//			Истина - выполняется переход далее; Ложь - выполняется переход назад.
//
&НаКлиенте
Функция Подключаемый_СтраницаЗначенияПоумолчанию_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	ЗаполнитьЗначенияПоУмолчанию();
КонецФункции

&НаСервере
Функция ЗаполнитьЗначенияПоУмолчанию()
	УчетнаяСистемаВидНоменклатурыПоУмолчанию = Константы.УчетнаяСистемаВидНоменклатурыПоУмолчанию.Получить();
	УчетнаяСистемаСкладПоУмолчанию = Константы.УчетнаяСистемаСкладПоУмолчанию.Получить();
КонецФункции

&НаКлиенте
Процедура ВидНоменклатурыПоУмолчаниюПриИзменении(Элемент)
	ЗаписатьОбщиеДанные("УчетнаяСистемаВидНоменклатурыПоУмолчанию");
КонецПроцедуры

&НаКлиенте
Процедура СкладПоУмолчаниюПриИзменении(Элемент)
	ЗаписатьОбщиеДанные("УчетнаяСистемаСкладПоУмолчанию");
КонецПроцедуры

#КонецОбласти

#Область СтраницаНастройкаРЗЗагрузкаНСИУчетнойСистемы

// Обработчик выполняется при открытии страницы помощника "СтраницаНастройкаРЗЗагрузкаНСИУчетнойСистемы".
//
// Параметры:
//
//  Отказ - Булево - флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад).
//
//  ПропуститьСтраницу - Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад).
//
//  ЭтоПереходДалее (только чтение) - Булево - флаг определяет направление перехода.
//			Истина - выполняется переход далее; Ложь - выполняется переход назад.
//
&НаКлиенте
Функция Подключаемый_СтраницаНастройкаРЗЗагрузкаНСИУчетнойСистемы_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	СписокКлючейРЗ = Новый СписокЗначений;
	СписокКлючейРЗ.Добавить("ЗагрузкаНСИУчетнойСистемы");
	
	ЗаполнитьТаблицуРегламентныхЗаданий(СписокКлючейРЗ);
КонецФункции

&НаКлиенте
Процедура ТаблицаРегламентныеЗаданияНСИВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ТаблицаРегламентныеЗаданияНСИ.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "РЗНСИНаименование" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Идентификатор"	, ТекущиеДанные.Идентификатор);
		ПараметрыФормы.Вставить("Действие"		, "Изменить");
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Идентификатор", ТекущиеДанные.Идентификатор);
		ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ТекущиеДанные.ПолучитьИдентификатор());
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьНастройкиРегламентногоЗаданияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.РегламентноеЗадание", ПараметрыФормы, ЭтаФорма, Ложь,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли Поле.Имя = "РЗНСИРасписание" Тогда
		Диалог = Новый ДиалогРасписанияРегламентногоЗадания(
			ПолучитьРасписание(ТекущиеДанные.Идентификатор));
		
		Диалог.Показать(Новый ОписаниеОповещения(
			"ОткрытьРасписаниеЗавершение", ЭтотОбъект, ТекущиеДанные));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРегламентныхЗаданий(СписокКлючейРЗ)
	
	ТаблицаРегламентныеЗадания.Очистить();
	
	Для каждого КлючРегламентногоЗадания Из СписокКлючейРЗ Цикл
		МассивРеглментныхЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Новый Структура("Метаданные", КлючРегламентногоЗадания.Значение));
		Если МассивРеглментныхЗаданий.Количество() > 0 Тогда
			ЗаполнитьСтрокуТаблицыРегламентныхЗаданий(МассивРеглментныхЗаданий[0])
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуТаблицыРегламентныхЗаданий(РегламентноеЗадание)
	СтрокаТЗ = ТаблицаРегламентныеЗадания.Добавить();
	СтрокаТЗ.Идентификатор = Строка(РегламентноеЗадание.УникальныйИдентификатор);
	СтрокаТЗ.Наименование = Строка(РегламентноеЗадание.Наименование);
	СтрокаТЗ.Использование = РегламентноеЗадание.Использование;
	СтрокаТЗ.Расписание = Строка(РегламентноеЗадание.Расписание);
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтрокуТаблицыРегламентныхЗаданий(Идентификатор, ИдентификаторСтроки)
	СтрокаТЗ = ТаблицаРегламентныеЗадания.НайтиПоИдентификатору(ИдентификаторСтроки);
	РегламентноеЗадание = РегламентныеЗаданияСервер.ПолучитьРегламентноеЗадание(Идентификатор);
	СтрокаТЗ.Идентификатор = Строка(РегламентноеЗадание.УникальныйИдентификатор);
	СтрокаТЗ.Наименование = Строка(РегламентноеЗадание.Наименование);
	СтрокаТЗ.Использование = РегламентноеЗадание.Использование;
	СтрокаТЗ.Расписание = Строка(РегламентноеЗадание.Расписание);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиРегламентногоЗаданияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьСтрокуТаблицыРегламентныхЗаданий(ДополнительныеПараметры.Идентификатор, ДополнительныеПараметры.ИдентификаторСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасписаниеЗавершение(НовоеРасписание, ТекущиеДанные) Экспорт
	
	Если НовоеРасписание <> Неопределено Тогда
		УстановитьРасписание(ТекущиеДанные.Идентификатор, НовоеРасписание);
		ТекущиеДанные.Расписание = Строка(НовоеРасписание);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРасписание(Знач ИдентификаторРегламентногоЗадания)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат РегламентныеЗаданияСервер.РасписаниеРегламентногоЗадания(
		ИдентификаторРегламентногоЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьРасписание(Знач ИдентификаторРегламентногоЗадания, Знач Расписание)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегламентныеЗаданияСервер.УстановитьРасписаниеРегламентногоЗадания(
		ИдентификаторРегламентногоЗадания,
		Расписание);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаписатьОбщиеДанные(ИмяРеквизита)
	Константы[ИмяРеквизита].Установить(ЭтаФорма[ИмяРеквизита]);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть - Инициализация переходов помощника.

// Процедура определяет таблицу переходов по сценарию №1.
//
&НаКлиенте
Процедура ТаблицаПереходовПоСценарию1()
	
	ТаблицаПереходов.Очистить();
	
	Переход = ТаблицаПереходов.Добавить();
	Переход.ПорядковыйНомерПерехода = 1;
	Переход.ИмяОсновнойСтраницы     = "СтраницаНастройкаПодключения";
	Переход.ИмяСтраницыНавигации    = "СтраницаНавигацииЗагрузкаНСИ";
	Переход.ИмяСтраницыДекорации    = "СтраницаДекорацииНачало";
	Переход.ИмяОбработчикаПриОткрытии = "СтраницаНастройкаПодключения_ПриОткрытии";
	Переход.ИмяОбработчикаПриПереходеДалее = "СтраницаНастройкаПодключения_ПриПереходеДалее";
	
	Переход = ТаблицаПереходов.Добавить();
	Переход.ПорядковыйНомерПерехода = 2;
	Переход.ИмяОсновнойСтраницы     = "СтраницаЗагрузкаНСИ";
	Переход.ИмяСтраницыНавигации    = "СтраницаНавигацииОжидание";
	Переход.ИмяСтраницыДекорации    = "СтраницаДекорацииПродолжение";
	Переход.ДлительнаяОперация      = Истина;
	Переход.ИмяОбработчикаДлительнойОперации = "СтраницаЗагрузкаНСИ_Ожидание";
	
	Переход = ТаблицаПереходов.Добавить();
	Переход.ПорядковыйНомерПерехода = 3;
	Переход.ИмяОсновнойСтраницы     = "СтраницаЗначенияПоумолчанию";
	Переход.ИмяСтраницыНавигации    = "СтраницаНавигацииПродолжение";
	Переход.ИмяСтраницыДекорации    = "СтраницаДекорацииПродолжение";
	Переход.ИмяОбработчикаПриОткрытии = "СтраницаЗначенияПоумолчанию_ПриОткрытии";
	Переход.ИмяОбработчикаПриПереходеДалее = "СтраницаЗначенияПоумолчанию_ПриПереходеДалее";
	
	Переход = ТаблицаПереходов.Добавить();
	Переход.ПорядковыйНомерПерехода = 4;
	Переход.ИмяОсновнойСтраницы     = "СтраницаНастройкаРЗЗагрузкаНСИУчетнойСистемы";
	Переход.ИмяСтраницыНавигации    = "СтраницаНавигацииОкончание";
	Переход.ИмяСтраницыДекорации    = "СтраницаДекорацииОкончание";
	Переход.ИмяОбработчикаПриОткрытии = "СтраницаНастройкаРЗЗагрузкаНСИУчетнойСистемы_ПриОткрытии";
	
КонецПроцедуры

#КонецОбласти
