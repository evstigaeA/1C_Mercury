
&НаСервереБезКонтекста
Функция ЕстьЗаписиВРегистре()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДМ_Принтеры.Принтер КАК Принтер
	|ИЗ
	|	РегистрСведений.ДМ_Принтеры КАК ДМ_Принтеры";
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат Не РезультатЗапроса.Пустой();

КонецФункции // ЕстьЗаписиВРегистре()


&НаКлиенте
Процедура ПерезаписьПодтверждена(Знач Оповещение)
	
	Если ЕстьЗаписиВРегистре() Тогда
		
		Ответ = Неопределено;

		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПерезаписьПодтвержденаЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), "Таблица будет перезаполнена. Продолжить?", РежимДиалогаВопрос.ДаНет, , , "Внимание!");
        Возврат;
		
	КонецЕсли;

	ПерезаписьПодтвержденаФрагмент(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПерезаписьПодтвержденаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Оповещение = ДополнительныеПараметры.Оповещение;
	
	
	Ответ = РезультатВопроса;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		ВыполнитьОбработкуОповещения(Оповещение, Ложь);
		Возврат;
	КонецЕсли;
	
	
	ПерезаписьПодтвержденаФрагмент(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПерезаписьПодтвержденаФрагмент(Знач Оповещение)
	
	ВыполнитьОбработкуОповещения(Оповещение, Истина);
	Возврат;

КонецПроцедуры


&НаСервере
Процедура ЗагрузитьНаСервере(Знач АдресВХранилище, ДополнительныеПараметры)
	
	лОбработка = ДанныеФормыВЗначение( Объект, Тип("ОбработкаОбъект.ДМ_ЗагрузкаПринтеров" ) );
	Если ПустаяСтрока( Объект.ИмяФайлаПротоколаЗагрузки ) Тогда
		ВОкноСообщений = Истина;
	Иначе
		ВОкноСообщений = Ложь;
	КонецЕсли;
	лРезультат = лОбработка.ЗагрузитьДанныеИзФайла(АдресВХранилище, ДополнительныеПараметры, ВОкноСообщений);
	ПротоколЗагрузки = лРезультат;
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ПротоколЗагрузки = "";
	
	ПерезаписьПодтверждена(Новый ОписаниеОповещения("ЗагрузитьЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗавершение(Результат, ДополнительныеПараметры1) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(СокрЛП(Объект.ИмяФайла));
	
	Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ЗагрузитьЗавершениеЗавершение", ЭтотОбъект, Новый Структура("Файл", Файл)));

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗавершениеЗавершение(Существует, ДополнительныеПараметры2) Экспорт
	
	Файл = ДополнительныеПараметры2.Файл;
	
	
	Если НЕ Существует Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		НСтр("ru = 'Файл для загрузки не найден'"),
		,"ИмяФайла", "Объект"
		);
		Возврат;
	КонецЕсли;
	
	РасширениеФайла =  Файл.Расширение;
	ПолноеИмяФайла = Файл.ПолноеИмя;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РасширениеФайла", РасширениеФайла);
	ДополнительныеПараметры.Вставить("ИмяФайлаИсточника", СокрЛП(Объект.ИмяФайла));
	
	//Сохранение файла во временное хранилище.
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьФайлВХранилище", ЭтаФорма, ДополнительныеПараметры);
	НачатьПомещениеФайла(ОписаниеОповещения, , ПолноеИмяФайла, Ложь, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлВХранилище(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Не удалось открыть файл!';en='Could not open file!'"),
			,"ИмяФайла", "Объект"
		);
		Возврат;	
	КонецЕсли; 
	
	ЗагрузитьНаСервере(Адрес, ДополнительныеПараметры);
	
	Если Не ПустаяСтрока( Объект.ИмяФайлаПротоколаЗагрузки ) И Не ПустаяСтрока( ПротоколЗагрузки ) Тогда
	
		лТекстовыйДокумент = Новый ТекстовыйДокумент;
		лТекстовыйДокумент.УстановитьТекст( ПротоколЗагрузки );
		лТекстовыйДокумент.Записать( Объект.ИмяФайлаПротоколаЗагрузки, КодировкаТекста.UTF8 );
	
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Загрузка завершена" );
	 
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	#Если ВебКлиент Тогда
		Если Не РаботаСФайламиСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
			РаботаСФайламиСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСФайлами(Неопределено);
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выбор файла";
	Диалог.Фильтр = "Excel файлы(*.xls;*.xlsx)|*.xls;*.xlsx";
	Диалог.ИндексФильтра = 0;
	Диалог.ПредварительныйПросмотр = Ложь;
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.МножественныйВыбор = Ложь; 
	
	Диалог.Показать(Новый ОписаниеОповещения("ПутьКФайлуНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		Объект.ИмяФайла = Диалог.ПолноеИмяФайла;
	КонецЕсли;

КонецПроцедуры


&НаСервере
Процедура СохранитьПараметрыРегламентногоЗаданияНаСервере()
	
	лПараметрыМассив = Новый Массив;
	лПараметрыМассив.Добавить( Объект.ИмяФайла );
	лПараметрыМассив.Добавить( Объект.ИмяФайлаПротоколаЗагрузки );
	
	лИзменяемыеПараметры = Новый Структура( "Параметры", лПараметрыМассив );
	РегламентныеЗаданияСервер.УстановитьПараметрыРегламентногоЗадания( Метаданные.РегламентныеЗадания.ДМ_ЗагрузкаПринтеров, лИзменяемыеПараметры );
	УстановитьПривилегированныйРежим( Истина );
	ЭтотОбъект.РегламентноеЗаданиеАктивно = РегламентныеЗаданияСервер.РегламентноеЗаданиеИспользуется( Метаданные.РегламентныеЗадания.ДМ_ЗагрузкаПринтеров );
	
КонецПроцедуры


&НаКлиенте
Процедура СохранитьПараметрыРегламентногоЗадания(Команда)
	СохранитьПараметрыРегламентногоЗаданияНаСервере();
КонецПроцедуры


&НаСервере
Процедура АктивироватьРегламентноеЗаданиеНаСервере()
	лИзменяемыеПараметры = Новый Структура( "Использование", Истина );
	РегламентныеЗаданияСервер.УстановитьПараметрыРегламентногоЗадания( Метаданные.РегламентныеЗадания.ДМ_ЗагрузкаПринтеров, лИзменяемыеПараметры );
	УстановитьПривилегированныйРежим( Истина );
	ЭтотОбъект.РегламентноеЗаданиеАктивно = РегламентныеЗаданияСервер.РегламентноеЗаданиеИспользуется( Метаданные.РегламентныеЗадания.ДМ_ЗагрузкаПринтеров );
КонецПроцедуры


&НаКлиенте
Процедура АктивироватьРегламентноеЗадание(Команда)
	АктивироватьРегламентноеЗаданиеНаСервере();
КонецПроцедуры


&НаСервере
Процедура ДеактивироватьРегламентноеЗаданиеНаСервере()
	лИзменяемыеПараметры = Новый Структура( "Использование", Ложь );
	РегламентныеЗаданияСервер.УстановитьПараметрыРегламентногоЗадания( Метаданные.РегламентныеЗадания.ДМ_ЗагрузкаПринтеров, лИзменяемыеПараметры );
	УстановитьПривилегированныйРежим( Истина );
	ЭтотОбъект.РегламентноеЗаданиеАктивно = РегламентныеЗаданияСервер.РегламентноеЗаданиеИспользуется( Метаданные.РегламентныеЗадания.ДМ_ЗагрузкаПринтеров );
КонецПроцедуры


&НаКлиенте
Процедура ДеактивироватьРегламентноеЗадание(Команда)
	ДеактивироватьРегламентноеЗаданиеНаСервере();
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УстановитьПривилегированныйРежим( Истина );
	ЭтотОбъект.РегламентноеЗаданиеАктивно = РегламентныеЗаданияСервер.РегламентноеЗаданиеИспользуется( Метаданные.РегламентныеЗадания.ДМ_ЗагрузкаПринтеров );
КонецПроцедуры

