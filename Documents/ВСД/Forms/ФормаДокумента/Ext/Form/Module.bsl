#Область ОписаниеПеременных

// СтандартныеПодсистемы.ОценкаПроизводительности
&НаКлиенте
Перем ИдентификаторЗамераПроведение, ИдентификаторЗамераПроведениеНеНужнаРегистрацияОшибки;
// Конец СтандартныеПодсистемы.ОценкаПроизводительности

&НаКлиенте
Перем ПроизводительДоНачалаИзменения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФорм

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	СтатусВСД = РегистрыСведений.СтатусыВСД.ТекущийСтатусДокумента(Объект.Ссылка);
	
	Если Не СтатусВСД = Неопределено Тогда 
		ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	КонецЕсли;
	
	Элементы.СписокСвязанныхДокументовТипСвязанногоДокумента.РежимВыбораИзСписка = Истина;
	Элементы.СписокСвязанныхДокументовТипСвязанногоДокумента.СписокВыбора.ЗагрузитьЗначения(Справочники.ТипыТТН.СписокРазрешенныхДокументовОтгрузки());
	
	ТипПродукцииЖивыеЖивотные = ИнтеграцияВетисAPIВызовСервера.ПродукцияПринадлежитТипуЖивыхЖивотных(Объект.Продукция);
	
	УстановитьОформлениеЭлементовФормы();
	
	Если НЕ ЗначениеЗаполнено(Объект.КоличествоМесяцевНахожденияЖивотныхНаТерриторииТС) Тогда
		Элементы.КоличествоМесяцевНахожденияЖивотныхНаТерриторииТС.ОграничениеТипа = ОбщегоНазначения.ОписаниеТипаЧисло(10, 1);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПриЧтенииСозданииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	СтатусВСД = РегистрыСведений.СтатусыВСД.ТекущийСтатусДокумента(Объект.Ссылка);
	Если Не СтатусВСД = Неопределено Тогда 
		ЭтаФорма.ТолькоПросмотр = Истина;
		Элементы.ФормаОформить.Доступность = Ложь;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.ТипВСД <> ПредопределенноеЗначение("Справочник.ТипыВСД.ПроизводственныйВСД") Тогда
		ОбщегоНазначенияУВСКлиент.УстановитьВидимостьДанныхПоТипуПеревозки(ЭтотОбъект);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбновитьДоступностьВетеринарныхМероприятий", 1);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ДанныеЗаполненияСтрок = Новый Структура;
	ДанныеЗаполненияСтрок.Вставить("ЛабораторныеИсследования", ЗаполнениеРеквизитовОбъектов.ПолучитьЗначенияРеквизитовТабличнойЧасти(Объект, "ЛабораторныеИсследования"));
	ДанныеЗаполненияСтрок.Вставить("Иммунизация", ЗаполнениеРеквизитовОбъектов.ПолучитьЗначенияРеквизитовТабличнойЧасти(Объект, "Иммунизация"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ИдентификаторЗамераПроведение = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ПроведениеДокументаОшибка");
		ОценкаПроизводительностиКлиент.УстановитьПризнакОшибкиЗамера(ИдентификаторЗамераПроведение, Истина);
				
		ИдентификаторЗамераПроведениеНеНужнаРегистрацияОшибки = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(ИдентификаторЗамераПроведение, "ПроведениеДокумента");
		ОценкаПроизводительностиКлиент.УстановитьПризнакОшибкиЗамера(ИдентификаторЗамераПроведение, Ложь);
		
		ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(ИдентификаторЗамераПроведениеНеНужнаРегистрацияОшибки, "ПроведениеДокументаНеНужнаРегистрацияОшибки");
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Если Не РегистрыСведений.СтатусыВСД.ТекущийСтатусДокумента(Объект.Ссылка) = Неопределено Тогда 
		// Обработчик подсистемы запрета редактирования реквизитов объектов.
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов") Тогда
			МодульЗапретРедактированияРеквизитовОбъектов = ОбщегоНазначения.ОбщийМодуль("ЗапретРедактированияРеквизитовОбъектов");
			МодульЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Оформить(Команда)
	
	Если Модифицированность Или Параметры.Ключ.Пустая() ТОгда
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ОформитьЗавершение", ЭтотОбъект), "Перед оформлением требуется записать документ. Продолжить?", Режим, 0);
	    Возврат;
	КонецЕсли;
	
	ОформитьФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(), Объект.Ссылка);
		Возврат;
	КонецПопытки;
	
	ОформитьФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ОформитьФрагмент()
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ОформитьНаСервере();
	
	Прочитать();

	Оповестить("ИзменениеСтатусаЗаявкиНаОформлениеОперации");
	
КонецПроцедуры

&НаСервере
Процедура ОформитьНаСервере()
	
	Документы.ВСД.ОформитьНаСервере(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов") Тогда
		МодульЗапретРедактированияРеквизитовОбъектовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЗапретРедактированияРеквизитовОбъектовКлиент");
		МодульЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОбработчикиСобытий_Органиазация

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Объект.КонтрагентПолучатель = ОбщегоНазначенияУВСВызовСервера.КонтрагентПоОрганизации(Объект.Организация);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_КонтрагентОтправитель

&НаКлиенте
Процедура КонтрагентОтправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.КонтрагентНачалоВыбора(Элемент, СтандартнаяОбработка,, Объект.ПредприятиеОтправитель);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОтправительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.КонтрагентАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка,, Объект.ПредприятиеОтправитель, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОтправительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.КонтрагентОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка,, Объект.ПредприятиеОтправитель, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_ПредприятиеОтправитель

&НаКлиенте
Процедура ПредприятиеОтправительПриИзменении(Элемент)
	
	Если Объект.ТипВСД <> ПредопределенноеЗначение("Справочник.ТипыВСД.ПроизводственныйВСД") Тогда
		ОбщегоНазначенияУВСКлиент.УстановитьЗначениеРеквизитовПоТипуПеревозки(Объект);
		ОбщегоНазначенияУВСКлиент.УстановитьВидимостьДанныхПоТипуПеревозки(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеОтправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.ПредприятиеНачалоВыбора(Элемент, СтандартнаяОбработка,, Объект.КонтрагентОтправитель, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеОтправительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.ПредприятиеАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка,, Объект.КонтрагентОтправитель, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеОтправительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.ПредприятиеОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка,, Объект.КонтрагентОтправитель, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_ПредприятиеПолучатель

&НаКлиенте
Процедура ПредприятиеПолучательПриИзменении(Элемент)
	
	ОбщегоНазначенияУВСКлиент.ПредприятиеПриИзменении(Объект.КонтрагентПолучатель, Объект.ПредприятиеПолучатель);
	Если Объект.ТипВСД <> ПредопределенноеЗначение("Справочник.ТипыВСД.ПроизводственныйВСД") Тогда
		ОбщегоНазначенияУВСКлиент.УстановитьЗначениеРеквизитовПоТипуПеревозки(Объект);
		ОбщегоНазначенияУВСКлиент.УстановитьВидимостьДанныхПоТипуПеревозки(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.ПредприятиеНачалоВыбора(Элемент, СтандартнаяОбработка, Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеПолучательАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.ПредприятиеАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеПолучательОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.ПредприятиеОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
	
КонецПроцедуры

#КонецОбласти

#Область ПриИзмененииРеквизитов

&НаКлиенте
Процедура СкоропортящаясяПродукцияПриИзменении(Элемент)
	
	ИнтеграцияВетисAPIКлиент.ПриИзмененииПризнакаСкоропортящейсяПродукции(Объект);
	
	ЭтаФорма.ПредставлениеДатыВыработки = ИнтеграцияВетисAPIКлиентСервер.СформироватьПредставлениеДатыВыработки(Объект);
	ЭтаФорма.ПредставлениеСрокаГодности = ИнтеграцияВетисAPIКлиентСервер.СформироватьПредставлениеСрокаГодности(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПриИзменении(Элемент)
	
	ПродукцияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПродукцияПриИзмененииНаСервере()
	
	СвойстваПродукции = ОбщегоНазначенияУВССервер.ПолучитьСвойстваПродукции(Объект.Продукция);
	ЗаполнитьЗначенияСвойств(Объект, СвойстваПродукции);
	
	ТипПродукцииЖивыеЖивотные = ИнтеграцияВетисAPIВызовСервера.ПродукцияПринадлежитТипуЖивыхЖивотных(Объект.Продукция);
	
	ИнтеграцияВетисAPIСервер.УстановитьСвойстваПродукции(Объект, ТипПродукцииЖивыеЖивотные);
	
	ЭтотОбъект.ПредставлениеДатыВыработки = ИнтеграцияВетисAPIКлиентСервер.СформироватьПредставлениеДатыВыработки(Объект);
	ЭтотОбъект.ПредставлениеСрокаГодности = ИнтеграцияВетисAPIКлиентСервер.СформироватьПредставлениеСрокаГодности(Объект);
	
	Элементы.ГруппаЖивыеЖивотные.Видимость         = ТипПродукцииЖивыеЖивотные;
	Элементы.ПроводиласьВетсанэкспертиза.Видимость = НЕ ТипПродукцииЖивыеЖивотные;
	Элементы.ОсуществленКонтрольВрачом.Видимость   = НЕ ТипПродукцииЖивыеЖивотные;
	Элементы.ГиперссылкаПерейтиУпаковкиЗаписейСкладскогоЖурнала.Доступность = НЕ ТипПродукцииЖивыеЖивотные;
	Элементы.ГруппаИммунизация.Видимость           = ТипПродукцииЖивыеЖивотные;
	Элементы.ГруппаПризнакиПродукции.Доступность   = НЕ ТипПродукцииЖивыеЖивотные;
	Элементы.СкоропортящаясяПродукция.Доступность  = Не ТипПродукцииЖивыеЖивотные;
	
	Если ТипПродукцииЖивыеЖивотные Тогда
		Объект.ОсуществленКонтрольВрачом           = Ложь;
		Объект.ПроводиласьВетсанэкспертиза         = Неопределено;
		Объект.СкоропортящаясяПродукция            = Ложь;
		Объект.НекачественныйГруз                  = Ложь;
		Объект.СписокФизическихУпаковок.Очистить();
		Элементы.ГиперссылкаПерейтиУпаковкиЗаписейСкладскогоЖурнала.Заголовок = ОбщегоНазначенияУВСКлиентСервер.СформироватьПредставлениеСпискаУпаковок(Объект);
	Иначе
		Объект.ПериодНахожденияЖивотныхНаТерриторииТС = Неопределено;
		Объект.КоличествоМесяцевНахожденияЖивотныхНаТерриторииТС = "";
		Объект.МестоПроведенияКарантинирования     = Неопределено;
		Объект.ДатаКарантинирования                = Неопределено;
		Объект.СрокДействияКарантина               = 0;
		Объект.ДополнительныеСведенияОКарантинировании = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипТТНПриИзменении(Элемент)
	
	ОбщегоНазначенияУВСКлиентСервер.УстановитьСвойстваЭлементовФормыДанныхТТН(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерТТНПриИзменении(Элемент)
	
	ОбщегоНазначенияУВСКлиентСервер.УстановитьСвойстваЭлементовФормыДанныхТТН(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаТТНПриИзменении(Элемент)
	
	ОбщегоНазначенияУВСКлиентСервер.УстановитьСвойстваЭлементовФормыДанныхТТН(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ПроисхождениеПродукции

#Область СтранаПроисхождения

&НаКлиенте
Процедура СтранаПроисхожденияПриИзменении(Элемент)
	
	Объект.ПроизводителиПродукции.Очистить();
	Элементы.ПроизводителиПродукции.Доступность = ЗначениеЗаполнено(Объект.СтранаПроисхождения);
	Объект.ПродукцияПроизводителя = Неопределено;
	Элементы.ПродукцияПроизводителя.Доступность = ЗначениеЗаполнено(Объект.СтранаПроисхождения);
	
КонецПроцедуры

#КонецОбласти

#Область ПродукцияПроизводителя

&НаКлиенте
Процедура ПродукцияПроизводителяПриИзменении(Элемент)
	
	Объект.ПроизводителиПродукции.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПроизводителяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияВетисAPIКлиент.ПродукцияПроизводителяНачалоВыбора(
		Объект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПроизводителяАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ИнтеграцияВетисAPIКлиент.ПродукцияПроизводителяАвтоПодбор(
		Объект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПроизводителяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ИнтеграцияВетисAPIКлиент.ПродукцияПроизводителяОкончаниеВводаТекста(
		Объект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ПроизводителиПродукции

&НаКлиенте
Процедура ПроизводителиПродукцииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ИнтеграцияВетисAPIКлиент.ПроизводителиПродукцииПередНачаломДобавления(Элементы.ПроизводителиПродукцииПроизводитель);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводителиПродукцииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ИнтеграцияВетисAPIКлиент.ПроизводителиПродукцииПриНачалеРедактирования(
		Элементы, "ПроизводителиПродукции", Элементы.ПроизводителиПродукцииПроизводитель, НоваяСтрока, Копирование, ПроизводительДоНачалаИзменения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводителиПродукцииПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ИнтеграцияВетисAPIКлиент.ПроизводителиПродукцииПередОкончаниемРедактирования(
		ЭтаФорма, "ПроизводителиПродукции", ПроизводительДоНачалаИзменения, Элемент, НоваяСтрока, ОтменаРедактирования, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводителиПродукцииПроизводительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПроизводителиПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияВетисAPIКлиент.ПроизводителиПродукцииПроизводительНачалоВыбора(Объект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводителиПродукцииПроизводительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПроизводителиПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение = Тип("СправочникСсылка.Предприятия") Тогда
		
		ИнтеграцияВетисAPIКлиент.ПроизводителиПродукцииПроизводительОбработкаВыбора(
			Объект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроизводителиПродукцииПроизводительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПроизводителиПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.Производитель) = Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияВетисAPIКлиент.ПроизводителиПродукцииПроизводительАвтоПодбор(
		Объект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводителиПродукцииПроизводительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПроизводителиПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.Производитель) = Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияВетисAPIКлиент.ПроизводителиПродукцииПроизводительОкончаниеВводаТекста(
		Объект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий_МаршрутСледования

&НаКлиенте
Процедура ТаблицаМаршрутСледованияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Элементы.ТаблицаМаршрутСледованияИнформацияОСледующемТранспорте.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Транспорт");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМаршрутСледованияПередНачаломИзменения(Элемент, Отказ)
	
	Элементы.ТаблицаМаршрутСледованияИнформацияОСледующемТранспорте.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Транспорт");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМаршрутСледованияОсуществляетсяПерегрузкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаМаршрутСледования.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ОсуществляетсяПерегрузка Тогда
		ТекущиеДанные.ИнформацияОСледующемТранспорте = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_УсловияПеремещенияПродукции

&НаКлиенте
Процедура УсловияПеремещенияПродукцииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.УсловияПеремещенияПродукции.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные.УсловиеПеремещения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_ЛабораторныеИсследованияи

&НаКлиенте
Процедура ЛабораторныеИсследованияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ЛабораторныеИсследования.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока И Не Копирование Тогда
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеЗаполненияСтрок.ЛабораторныеИсследования);
		Если Элементы.ЛабораторныеИсследованияРезультатИсследования.СписокВыбора.НайтиПоЗначению(ДанныеЗаполненияСтрок.ЛабораторныеИсследования.РезультатИсследования) = Неопределено Тогда
			ТекущиеДанные.РезультатИсследования = ПредопределенноеЗначение("Справочник.РезультатыЛабораторногоИсследования.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_Иммунизация

&НаКлиенте
Процедура ИммунизацияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Иммунизация.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеЗаполненияСтрок.Иммунизация);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьДоступностьВетеринарныхМероприятий()
	
	Элементы.ГруппаЛабораторныеИсследования.ТолькоПросмотр = ЭтаФорма.ТолькоПросмотр;
	Элементы.ГруппаИммунизация.ТолькоПросмотр = ЭтаФорма.ТолькоПросмотр;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеЭлементовФормы()
	
	МассивЭлементовФормы = Новый Массив;
	Если Объект.ТипВСД = Справочники.ТипыВСД.ПроизводственныйВСД Тогда
		
		Элементы.ГруппаОтправитель.Заголовок = НСтр("ru = 'Производитель'");
		
		МассивЭлементовФормы.Добавить("ГруппаЖивыеЖивотные");
		МассивЭлементовФормы.Добавить("ГруппаБумажныйВСД");
		МассивЭлементовФормы.Добавить("ГруппаТранспортировка");
		МассивЭлементовФормы.Добавить("ГруппаСвязанныхДокументов");
		МассивЭлементовФормы.Добавить("УсловияПеремещения");
		МассивЭлементовФормы.Добавить("ГруппаПолучатель");
		МассивЭлементовФормы.Добавить("БлагополучиеМестности");
		МассивЭлементовФормы.Добавить("НазначениеГруза");
		МассивЭлементовФормы.Добавить("ГруппаЛабораторныеИсследования");
		МассивЭлементовФормы.Добавить("ГруппаИммунизация");
		
	Иначе
		
		МассивЭлементовФормы.Добавить("ПроизводствоЗавершено");
		
		Если Не ТипПродукцииЖивыеЖивотные Тогда
			МассивЭлементовФормы.Добавить("ГруппаЖивыеЖивотные");
			МассивЭлементовФормы.Добавить("ГруппаИммунизация");
		КонецЕсли;
		
		Если Объект.ТипДокумента <> Справочники.ТипыДокументов.ЭлектронныйДокумент Тогда
			МассивЭлементовФормы.Добавить("УсловияПеремещения");
		КонецЕсли;
		
		Элементы.ПроизводителиПродукции.Доступность    = ЗначениеЗаполнено(Объект.СтранаПроисхождения);
		Элементы.ПродукцияПроизводителя.Доступность    = ЗначениеЗаполнено(Объект.СтранаПроисхождения);
		Элементы.ВыдавшийВСД.АвтоОтметкаНезаполненного = Объект.ТипДокумента = Справочники.ТипыДокументов.БумажныйДокумент;
		Элементы.НомерВСД.АвтоОтметкаНезаполненного    = Объект.ТипДокумента = Справочники.ТипыДокументов.БумажныйДокумент;
		Элементы.СкоропортящаясяПродукция.Доступность  = Не ТипПродукцииЖивыеЖивотные;
		
	КонецЕсли;
	
	Для Каждого ТекЭлемент Из МассивЭлементовФормы Цикл
		НайденныйЭлемент = Элементы.Найти(ТекЭлемент);
		Если НайденныйЭлемент <> Неопределено Тогда
			НайденныйЭлемент.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ИнтеграцияВетисAPIСервер.УстановитьОформлениеЭлементовФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиУпаковкиЗаписейСкладскогоЖурналаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбщегоНазначенияУВСКлиент.ПродукцияУпаковкиВыбор(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеДатыВыработкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнтеграцияВетисAPIКлиент.ОткрытьФормуЗаданияДат(ЭтотОбъект, Объект, Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСрокаГодностиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнтеграцияВетисAPIКлиент.ОткрытьФормуЗаданияДат(ЭтотОбъект, Объект, Элемент, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//Маршрут следования
	ОбработкаТабличнойЧастиСервер.УстановитьУсловноеОформлениеМаршрутаСледования(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти