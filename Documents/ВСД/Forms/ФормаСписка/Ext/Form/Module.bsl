
#Область ОбработчикиСобытийФорм

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Заголовок") Тогда
		ЭтаФорма.АвтоЗаголовок = Ложь;
		ЭтаФорма.Заголовок = Параметры.Заголовок;
	КонецЕсли;
	
	Если Параметры.Свойство("ВидВСД") Тогда
		ВидВСД = Параметры.ВидВСД;
	КонецЕсли;
	
	УстановитьСвойстваЭлементовФормы();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ОбновитьСписок", 90);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеСтатусаЗаявкиНаОформлениеОперации" Тогда
		ОбновитьСписок()
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если ВидВСД <> ПредопределенноеЗначение("Перечисление.ВидыВСД.Входящий") И ВидВСД <> ПредопределенноеЗначение("Перечисление.ВидыВСД.ПустаяСсылка") Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьСписок()
	Элементы.Список.Обновить();
КонецПроцедуры

&НаСервере
Процедура НастроитьДинамическийСписок(УстановитьОтбор)
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДокументВСД.Ссылка КАК Ссылка,
		|	ДокументВСД.ПометкаУдаления КАК ПометкаУдаления,
		|	ДокументВСД.Номер КАК Номер,
		|	ДокументВСД.Дата КАК Дата,
		|	ДокументВСД.Проведен КАК Проведен,
		|	ДокументВСД.GUID_Меркурий КАК GUID_Меркурий,
		|	ДокументВСД.БлагополучиеМестности КАК БлагополучиеМестности,
		|	ДокументВСД.ВидПродукции КАК ВидПродукции,
		|	ДокументВСД.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ДокументВСД.КоличествоМесяцевНахожденияЖивотныхНаТерриторииТС КАК КоличествоМесяцевНахожденияЖивотныхНаТерриторииТС,
		|	ДокументВСД.Организация КАК Организация,
		|	ДокументВСД.КонтрагентОтправитель КАК КонтрагентОтправитель,
		|	ДокументВСД.КонтрагентПолучатель КАК КонтрагентПолучатель,
		|	ДокументВСД.НазначениеГруза КАК НазначениеГруза,
		|	ДокументВСД.ОсобыеОтметки КАК ОсобыеОтметки,
		|	ДокументВСД.ОсуществленКонтрольВрачом КАК ОсуществленКонтрольВрачом,
		|	ДокументВСД.ПериодНахожденияЖивотныхНаТерриторииТС КАК ПериодНахожденияЖивотныхНаТерриторииТС,
		|	ДокументВСД.ПодвидПродукции КАК ПодвидПродукции,
		|	ДокументВСД.Посредник КАК Посредник,
		|	ДокументВСД.ПредприятиеОтправитель КАК ПредприятиеОтправитель,
		|	ДокументВСД.ПредприятиеПолучатель КАК ПредприятиеПолучатель,
		|	ДокументВСД.ПроводиласьВетсанэкспертиза КАК ПроводиласьВетсанэкспертиза,
		|	ДокументВСД.Продукция КАК Продукция,
		|	ДокументВСД.СерияВСД КАК СерияВСД,
		|	ДокументВСД.СпособХраненияПриПеревозке КАК СпособХраненияПриПеревозке,
		|	ДокументВСД.ТипВСД КАК ТипВСД,
		|	ДокументВСД.ТипДокумента КАК ТипДокумента,
		|	ДокументВСД.ТипПродукции КАК ТипПродукции,
		|	ДокументВСД.Транспорт КАК Транспорт,
		|	ДокументВСД.ФормаВСД КАК ФормаВСД,
		|	ДокументВСД.ВидВСД КАК ВидВСД,
		|	ЕСТЬNULL(ВСДБезТранспорта.НеУказанТранспорт, ЛОЖЬ) КАК НеуказаноТС,
		|	ДокументВСД.ФорматДатыВыработки КАК ФорматДатыВыработки,
		|	ДокументВСД.ФорматСрокаГодности КАК ФорматСрокаГодности,
		|	СтатусыВСДСрезПоследних.СтатусВСД КАК Статус
		|ИЗ
		|	Документ.ВСД КАК ДокументВСД
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыВСД.СрезПоследних КАК СтатусыВСДСрезПоследних
		|		ПО (СтатусыВСДСрезПоследних.ВСД = ДокументВСД.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ВСДТаблицаМаршрутСледования.Ссылка КАК ВСД,
		|			ИСТИНА КАК НеУказанТранспорт
		|		ИЗ
		|			Документ.ВСД.ТаблицаМаршрутСледования КАК ВСДТаблицаМаршрутСледования
		|		ГДЕ
		|			ВСДТаблицаМаршрутСледования.ОсуществляетсяПерегрузка
		|			И ВСДТаблицаМаршрутСледования.ИнформацияОСледующемТранспорте ССЫЛКА Справочник.ТипыТранспортныхСредств
		|			И ВСДТаблицаМаршрутСледования.Ссылка.ТипВСД <> ЗНАЧЕНИЕ(Справочник.ТипыВСД.ПроизводственныйВСД)) КАК ВСДБезТранспорта
		|		ПО ДокументВСД.Ссылка = ВСДБезТранспорта.ВСД";
		
	Если УстановитьОтбор Тогда
	
		ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ
			|	(ДокументВСД.ВидВСД = ЗНАЧЕНИЕ(Перечисление.ВидыВСД.Исходящий)
			|		ИЛИ ДокументВСД.ВидВСД = ЗНАЧЕНИЕ(Перечисление.ВидыВСД.НаПеремещение))
			|	И (ДокументВСД.Организация, ДокументВСД.КонтрагентПолучатель) В
			|		(ВЫБРАТЬ
			|				УполномоченноеГашение.Организация КАК Организация,
			|				УполномоченноеГашение.Контрагент КАК Контрагент
			|			ИЗ
			|				РегистрСведений.УполномоченноеГашение КАК УполномоченноеГашение)";
		
	КонецЕсли;
	
	СвойстваСписка.ОсновнаяТаблица  = "Документ.ВСД";
	СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
	СвойстваСписка.ТекстЗапроса = ТекстЗапроса;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.Список, СвойстваСписка);
	
КонецПроцедуры

&НаКлиенте
Процедура УполномоченноеГашение(Команда)
	
	Элементы.ФормаУполномоченноеГашение.Пометка = Не Элементы.ФормаУполномоченноеГашение.Пометка;
	
	НастроитьДинамическийСписок(Элементы.ФормаУполномоченноеГашение.Пометка);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список.Дата", Элементы.Дата.Имя);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовФормы()
	
	Если ВидВСД <> Перечисления.ВидыВСД.ПустаяСсылка() Тогда
		
		МассивЭлементовФормы = Новый Массив;
		Если ВидВСД <> Перечисления.ВидыВСД.Входящий Тогда
			
			МассивЭлементовФормы.Добавить("СписокСоздать");
			МассивЭлементовФормы.Добавить("СписокСкопировать");
			МассивЭлементовФормы.Добавить("СписокКонтекстноеМенюСоздать");
			МассивЭлементовФормы.Добавить("СписокКонтекстноеМенюСкопировать");
			
		КонецЕсли;
		
		Если ВидВСД = Перечисления.ВидыВСД.Производственный Тогда
			
			Элементы.ГруппаОтправитель.Заголовок = НСтр("ru = 'Производитель'");
			МассивЭлементовФормы.Добавить("ГруппаПолучатель");
			МассивЭлементовФормы.Добавить("НеуказаноТС");
			
		КонецЕсли;
		
		Если ВидВСД <> Перечисления.ВидыВСД.Исходящий Тогда
			МассивЭлементовФормы.Добавить("ФормаУполномоченноеГашение");
		КонецЕсли;
		
		Для Каждого ТекЭлемент Из МассивЭлементовФормы Цикл
			НайденныйЭлемент = Элементы.Найти(ТекЭлемент);
			Если НайденныйЭлемент <> Неопределено Тогда
				НайденныйЭлемент.Видимость = Ложь;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти