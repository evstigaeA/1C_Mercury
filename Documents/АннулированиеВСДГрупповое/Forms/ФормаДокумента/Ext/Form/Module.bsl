#Область ОписаниеПеременных

// СтандартныеПодсистемы.ОценкаПроизводительности
&НаКлиенте
Перем ИдентификаторЗамераПроведение, ИдентификаторЗамераПроведениеНеНужнаРегистрацияОшибки;
// Конец СтандартныеПодсистемы.ОценкаПроизводительности

#КонецОбласти

#Область ОбработчикиСобытийФорм

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	
	Если Объект.Проведен И Объект.Статус = Перечисления.СтатусыСводныхДокументов.УспешноПогашено Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Статус = Перечисления.СтатусыСводныхДокументов.Новая;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ИдентификаторЗамераПроведение = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ПроведениеДокументаОшибка");
		ОценкаПроизводительностиКлиент.УстановитьПризнакОшибкиЗамера(ИдентификаторЗамераПроведение, Истина);
				
		ИдентификаторЗамераПроведениеНеНужнаРегистрацияОшибки = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(ИдентификаторЗамераПроведение, "ПроведениеДокумента");
		ОценкаПроизводительностиКлиент.УстановитьПризнакОшибкиЗамера(ИдентификаторЗамераПроведение, Ложь);
		
		ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(ИдентификаторЗамераПроведениеНеНужнаРегистрацияОшибки, "ПроведениеДокументаНеНужнаРегистрацияОшибки");
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Если Не РегистрыСведений.СтатусыВСД.ТекущийСтатусДокумента(Объект.Ссылка) = Неопределено Тогда 
		// Обработчик подсистемы запрета редактирования реквизитов объектов.
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов") Тогда
			МодульЗапретРедактированияРеквизитовОбъектов = ОбщегоНазначения.ОбщийМодуль("ЗапретРедактированияРеквизитовОбъектов");
			МодульЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.ТранспортныеОперации.Форма.ФормаВыбора" Тогда
		
		ЗаполнитьДанныеТабличнойЧасти(ВыбранноеЗначение, "ТраснпортныеОперации");
		
	Иначе
		
		ЗаполнитьДанныеТабличнойЧасти(ВыбранноеЗначение, "ВСД");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_Органиазация

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Объект.Контрагент = ОбщегоНазначенияУВСВызовСервера.КонтрагентПоОрганизации(Объект.Организация);
	Объект.СписокАннулируемыхВСД.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_Предприятие

&НаКлиенте
Процедура ПредприятиеПриИзменении(Элемент)
	
	ОбщегоНазначенияУВСКлиент.ПредприятиеПриИзменении(Объект.Контрагент, Объект.Предприятие);
	Объект.СписокАннулируемыхВСД.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.ПредприятиеНачалоВыбора(Элемент, СтандартнаяОбработка, Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.ПредприятиеАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.ПредприятиеОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличнойЧасти

&НаКлиенте
Процедура СписокАннулируемыхВСДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокАннулируемыхВСД.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "СписокАннулируемыхВСДВСД" Тогда
		ПоказатьЗначение(, ТекущиеДанные.ВСД);
	ИначеЕсли Поле.Имя = "СписокАннулируемыхВСДТранспортнаяОперация" Тогда
		ПоказатьЗначение(, ТекущиеДанные.ТранспортнаяОперация);
	ИначеЕсли Поле.Имя = "СписокАннулируемыхВСДЗаписьСкладскогоЖурнала" Тогда
		ПоказатьЗначение(, ТекущиеДанные.ЗаписьСкладскогоЖурнала);
	ИначеЕсли Поле.Имя = "СписокАннулируемыхВСДДокументАннулированиеВСД" Тогда
		ПоказатьЗначение(, ТекущиеДанные.ДокументАннулированиеВСД);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборВСД(Команда)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Организация"           , Объект.Организация);
	ПараметрыОтбора.Вставить("КонтрагентОтправитель" , Объект.Контрагент);
	ПараметрыОтбора.Вставить("ПредприятиеОтправитель", Объект.Предприятие);
    ПараметрыОтбора.Вставить("ТипДокумента"          , ПредопределенноеЗначение("Справочник.ТипыДокументов.ЭлектронныйДокумент"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормы.Вставить("РежимВыбора"       , Истина);
	ПараметрыФормы.Вставить("Отбор"             , ПараметрыОтбора);
	
	ОткрытьФорму("Документ.ВСД.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТранспортныхОпераций(Команда)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Организация"           , Объект.Организация);
	ПараметрыОтбора.Вставить("КонтрагентОтправитель" , Объект.Контрагент);
	ПараметрыОтбора.Вставить("ПредприятиеОтправитель", Объект.Предприятие);
	ПараметрыОтбора.Вставить("Статус"                , ПредопределенноеЗначение("Справочник.СтатусыЗаявок.УспешноОбработана"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормы.Вставить("РежимВыбора"       , Истина);
	ПараметрыФормы.Вставить("Отбор"             , ПараметрыОтбора);
	
	ОткрытьФорму("Документ.ТранспортныеОперации.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрупповоеЗаполнениеРеквизитов(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗаполненияРеквизитов", ЭтотОбъект);
	
	ОткрытьФорму("Документ.АннулированиеВСДГрупповое.Форма.ФормаГрупповогоЗаполненияЗначений",, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаполненияРеквизитов(ДанныеЗаполнения, ДополнительныеПараметры) Экспорт
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект.СписокАннулируемыхВСД Цикл
		
		Для Каждого ТекЗначение Из ДанныеЗаполнения Цикл
			ТекСтрока[ТекЗначение.Ключ] = ТекЗначение.Значение;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьАннулированиеВСДНаСервере()
	
	Если НЕ ПроверитьЗаполнение() Тогда
		
		Возврат;

	КонецЕсли;
	
	НачатьТранзакцию();
	
	МассивЗапрещенныхСтатусов = ОбщегоНазначенияУВСВызовСервера.МассивСтатусовСЗапретомРедактированияФормы();
	
	Для Каждого Строка Из Объект.СписокАннулируемыхВСД Цикл
		
		Если ЗначениеЗаполнено(Строка.ДокументАннулированиеВСД) Тогда
			ТекущийСтатус    = РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ТекущийСтатусДокумента(Строка.ДокументАннулированиеВСД);
			Если МассивЗапрещенныхСтатусов.Найти(ТекущийСтатус) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДокАннулирование = Строка.ДокументАннулированиеВСД.ПолучитьОбъект();
		Иначе
			ДокАннулирование = Документы.АннулированиеВСД.СоздатьДокумент();
		КонецЕсли;
		
		ДокАннулирование.Дата                         = ТекущаяДата();
		ДокАннулирование.Организация                  = Объект.Организация;
		ДокАннулирование.Контрагент                   = Объект.Контрагент;
		ДокАннулирование.Предприятие                  = Объект.Предприятие;
		ДокАннулирование.Комментарий                  = Объект.Комментарий;
		ДокАннулирование.ВСД                          = Строка.ВСД;
		ДокАннулирование.ЗаписьСкладскогоЖурнала      = Строка.ЗаписьСкладскогоЖурнала;
		ДокАннулирование.ТранспортнаяОперация         = Строка.ТранспортнаяОперация;
		ДокАннулирование.Количество                   = Строка.ВСД.Количество;
		ДокАннулирование.ПричинаАннулирования         = Строка.ПричинаАннулирования;
		ДокАннулирование.ОтветственныйЗаАннулирование = Строка.ОтветственныйЗаАннулирование;
		ДокАннулирование.Ответственный                = Пользователи.ТекущийПользователь();
		
		Попытка
			ДокАннулирование.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(), Объект.Ссылка);
			Продолжить;
		КонецПопытки;
		
		Строка.ДокументАннулированиеВСД = ДокАннулирование.Ссылка;
		
	КонецЦикла;
	
	Попытка
		Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьАннулированиеВСД(Команда)
	
	Если Модифицированность Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОформитьАннулированиеВСДЗавершение", ЭтотОбъект), "Перед заполнением, требуется документ записать. Продолжить?", Режим, 0);
		
	Иначе
		ОформитьАннулированиеВСДНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьАннулированиеВСДЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОформитьАннулированиеВСДНаСервере();
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьДанныеТабличнойЧасти(МассивДокументов, ТипПодбора)
	
	Если ТипПодбора = "ТраснпортныеОперации" Тогда
		
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТранспортныеОперацииТаблицаВСД.Ссылка КАК ТранспортнаяОперация,
			|	ТранспортныеОперацииТаблицаВСД.ВСД КАК ВСД,
			|	АннулированиеВСД.Ссылка КАК ДокументАннулированиеВСД,
			|	СвязиМеждуЗаписямиСкладскогоЖурналаИВСД.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала
			|ИЗ
			|	Документ.ТранспортныеОперации.ТаблицаВСД КАК ТранспортныеОперацииТаблицаВСД
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиМеждуЗаписямиСкладскогоЖурналаИВСД КАК СвязиМеждуЗаписямиСкладскогоЖурналаИВСД
			|		ПО ТранспортныеОперацииТаблицаВСД.ВСД = СвязиМеждуЗаписямиСкладскогоЖурналаИВСД.ВСД
			|			И ТранспортныеОперацииТаблицаВСД.Ссылка.Организация = СвязиМеждуЗаписямиСкладскогоЖурналаИВСД.Организация
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыВСД.СрезПоследних КАК СтатусыВСДСрезПоследних
			|		ПО ТранспортныеОперацииТаблицаВСД.ВСД = СтатусыВСДСрезПоследних.ВСД
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АннулированиеВСД КАК АннулированиеВСД
			|		ПО ТранспортныеОперацииТаблицаВСД.ВСД = АннулированиеВСД.ВСД
			|			И ТранспортныеОперацииТаблицаВСД.Ссылка.Организация = АннулированиеВСД.Организация
			|ГДЕ
			|	ТранспортныеОперацииТаблицаВСД.Ссылка В(&МассивДокументов)
			|	И ТранспортныеОперацииТаблицаВСД.ВСД.ТипВСД <> ЗНАЧЕНИЕ(Справочник.ТипыВСД.ПроизводственныйВСД)
			|	И СтатусыВСДСрезПоследних.СтатусВСД = ЗНАЧЕНИЕ(Справочник.СтатусыВСД.Оформлен)";
		
	Иначе
		
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВСДДокумент.Ссылка КАК ВСД,
			|	СвязиМеждуЗаписямиСкладскогоЖурналаИВСД.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
			|	ТранспортныеОперацииТаблицаВСД.Ссылка КАК ТранспортнаяОперация,
			|	АннулированиеВСД.Ссылка КАК ДокументАннулированиеВСД
			|ИЗ
			|	Документ.ВСД КАК ВСДДокумент
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиМеждуЗаписямиСкладскогоЖурналаИВСД КАК СвязиМеждуЗаписямиСкладскогоЖурналаИВСД
			|		ПО ВСДДокумент.Ссылка = СвязиМеждуЗаписямиСкладскогоЖурналаИВСД.ВСД
			|			И ВСДДокумент.Организация = СвязиМеждуЗаписямиСкладскогоЖурналаИВСД.Организация
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТранспортныеОперации.ТаблицаВСД КАК ТранспортныеОперацииТаблицаВСД
			|		ПО ВСДДокумент.Ссылка = ТранспортныеОперацииТаблицаВСД.ВСД
			|			И ВСДДокумент.Организация = ТранспортныеОперацииТаблицаВСД.Ссылка.Организация
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АннулированиеВСД КАК АннулированиеВСД
			|		ПО ВСДДокумент.Ссылка = АннулированиеВСД.ВСД
			|			И ВСДДокумент.Организация = АннулированиеВСД.Организация
			|ГДЕ
			|	ВСДДокумент.Ссылка В(&МассивДокументов)";
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокиТЧ = Объект.СписокАннулируемыхВСД.НайтиСтроки(Новый Структура("ВСД", Выборка.ВСД));
		
		Если СтрокиТЧ.Количество() = 0 Тогда
			
			СтрокаТЧ = Объект.СписокАннулируемыхВСД.Добавить();
			
		Иначе 
			
			СтрокаТЧ = СтрокиТЧ[0];
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, Выборка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти