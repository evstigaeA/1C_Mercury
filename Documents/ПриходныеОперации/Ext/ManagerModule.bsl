#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Возвращает описание блокируемых реквизитов.
//
// Возвращаемое значение:
//  Массив - содержит строки в формате ИмяРеквизита[;ИмяЭлементаФормы,...]
//           где ИмяРеквизита - имя реквизита объекта, ИмяЭлементаФормы - имя элемента формы,
//           связанного с реквизитом.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	
	Возврат Результат;
	
КонецФункции

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.ВСД";
	КомандаПечати.Идентификатор = "ПолнаяИнформация";
	КомандаПечати.Представление = НСтр("ru = 'Ветеринарная справка (формат pdf)'");
	КомандаПечати.Картинка = БиблиотекаКартинок.ФорматPDF;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюУВСКлиент.СформироватьПечатнуюФормуВетеринарнойСправки";
	КомандаПечати.Порядок = 1;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "";
	КомандаПечати.Идентификатор = "НастройкаПечатиДокументов";
	КомандаПечати.Представление = НСтр("ru = 'Настройка печати документов'");
	КомандаПечати.СписокФорм = "ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюУВСКлиент.НастройкаПечатиДокументов";
	КомандаПечати.Порядок = 2;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.ПриходныеОперации";
	КомандаПечати.Идентификатор = "СжатоеСИнформацией";
	КомандаПечати.Представление = НСтр("ru = 'Штрих-коды ВСД с дополнительной информацией'");
	КомандаПечати.Картинка = БиблиотекаКартинок.ФорматMXL;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 3;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.ПриходныеОперации";
	КомандаПечати.Идентификатор = "Сжатое";
	КомандаПечати.Представление = НСтр("ru = 'Штрих-коды ВСД'");
	КомандаПечати.Картинка = БиблиотекаКартинок.ФорматMXL;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 4;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СжатоеСИнформацией") Тогда
	    // Формируем табличный документ и добавляем его в коллекцию печатных форм.
	    УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
	        "СжатоеСИнформацией", "Штрих-коды ВСД с дополнительной информацией", Документы.ВСД.СформироватьПечатнуюФормуСжатогоВСДСИнформацией(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Сжатое") Тогда
	    // Формируем табличный документ и добавляем его в коллекцию печатных форм.
	    УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
	        "Сжатое", "Штрих-коды ВСД", Документы.ВСД.СформироватьПечатнуюФормуСжатогоВСД(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;

КонецПроцедуры

// Добавляет команду создания документа "Приходная операция".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеПриходныхОпераций") Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ПриходныеОперации.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ИнтеграцияВетисAPIСервер.ПредставлениеОбъекта(Метаданные.Документы.ПриходныеОперации);
		КомандаСоздатьНаОсновании.ПараметрыФормы = Новый Структура("УполномоченноеГашение", Ложь);
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Добавляет команду создания документа "Приходная операция уполномоченное гашение".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОснованииУполномоченноеГашение(КомандыСозданияНаОсновании) Экспорт
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеДокументовУполномоченногоГашения") Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Обработчик    = "СозданиеНаОснованииКлиент.СозданиеНаОснованииУполномоченноеГашение";
		КомандаСоздатьНаОсновании.Идентификатор = "УполномоченноеГашение";
		КомандаСоздатьНаОсновании.Представление = НСтр("ru = 'Уполномоченное гашение'");
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Ссылка");
	Поля.Добавить("Номер");
	Поля.Добавить("Дата");
	Поля.Добавить("УполномоченноеГашение");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	Если Данные.УполномоченноеГашение Тогда
		СтандартнаяОбработка = Ложь;
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Уполномоченное гашение %1 от %2'"),
			Данные.Номер,
			Данные.Дата);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаСписка" Тогда
		
		Если Параметры.Свойство("ТекущаяСтрока") И ЗначениеЗаполнено(Параметры.ТекущаяСтрока) Тогда
			
			УполномоченноеГашение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ТекущаяСтрока, "УполномоченноеГашение");
			
			СтандартнаяОбработка = Ложь;
			Параметры.Вставить("УполномоченноеГашение", УполномоченноеГашение);
			
			ВыбраннаяФорма = "Документ.ПриходныеОперации.Форма.ФормаСписка"
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Монопольный обработчик обновления 2.0.5.1
// Заполняет реквизит ""Формат срока годности"", а так же проверяет корректность заполнения реквизита ""Формат даты выработки""
Процедура ЗаполнитьФорматыДатПродукции() Экспорт
	
	ОбработаныВсеПриходные = Ложь;
	
	Пока Не ОбработаныВсеПриходные Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1000
			|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.ДокументСсылка КАК Ссылка
			|ИЗ
			|	РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.СрезПоследних(, ДокументСсылка ССЫЛКА Документ.ПриходныеОперации) КАК ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних
			|ГДЕ
			|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.Статус <> ЗНАЧЕНИЕ(Справочник.СтатусыЗаявок.УспешноОбработана)
			|	И ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.ДокументСсылка.ФорматСрокаГодности = ЗНАЧЕНИЕ(Перечисление.СпособыЗаданияДаты.ПустаяСсылка)";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СвойстваПараметровДат = ОбновлениеИнформационнойБазыУВС.СвойстваПараметровДат();
			ЗаполнитьЗначенияСвойств(СвойстваПараметровДат, Выборка.Ссылка);
			
			ПриходнаяОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ОбновлениеИнформационнойБазыУВС.УстановитьЗначенияФорматовДатОбъекта(ПриходнаяОбъект, СвойстваПараметровДат);
			
			Попытка
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПриходнаяОбъект);
			Исключение
				ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ТекстИсключения = НСтр("ru = 'Не удалось выполнить обновление форматов дат по причине: %ПредставлениеОшибки%.'");
				ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПредставлениеОшибки%", ПредставлениеОшибки);
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Документы.ПриходныеОперации,
					Выборка.Ссылка,
					ТекстИсключения);
			КонецПопытки;
			
		КонецЦикла;
			
		КоличествоСсылок = Выборка.Количество();
		Если КоличествоСсылок < 1000 Тогда
			ОбработаныВсеПриходные = Истина;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Регистрирует данные для обработчика обновления 2.0.5.1
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПриходныеОперации.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПриходныеОперации КАК ПриходныеОперации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.СрезПоследних(, ДокументСсылка ССЫЛКА Документ.ПриходныеОперации) КАК ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних
		|		ПО ПриходныеОперации.Ссылка = ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.ДокументСсылка
		|ГДЕ
		|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыЗаявок.УспешноОбработана)
		|	И ПриходныеОперации.ФорматСрокаГодности = ЗНАЧЕНИЕ(Перечисление.СпособыЗаданияДаты.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПриходныеОперации.Дата УБЫВ";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.ПриходныеОперации";
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			ПриходнаяОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ПриходнаяОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			
			СвойстваПараметровДат = ОбновлениеИнформационнойБазыУВС.СвойстваПараметровДат();
			ЗаполнитьЗначенияСвойств(СвойстваПараметровДат, Выборка.Ссылка);
			
			ОбновлениеИнформационнойБазыУВС.УстановитьЗначенияФорматовДатОбъекта(ПриходнаяОбъект, СвойстваПараметровДат);
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПриходнаяОбъект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУВС.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Записывает записи движений продукции в регистр "ДвижениеПродукции"
//
// Параметры:
// СсылкаНаДокумент - ссылка на документ регистратор
Процедура ЗаписатьДвиженияПродукции(СсылкаНаДокумент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПодготовитьДанныеДокумента(СсылкаНаДокумент, Запрос);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВТ_ТаблицаПродукция.Период КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ВТ_ТаблицаПродукция.Организация КАК Организация,
		|	ВТ_ТаблицаПродукция.Предприятие КАК Предприятие,
		|	ВТ_ТаблицаПродукция.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
		|	ВТ_ТаблицаПродукция.Количество КАК Количество
		|ИЗ
		|	ВТ_ТаблицаПродукция КАК ВТ_ТаблицаПродукция
		|ГДЕ
		|	НЕ ВТ_ТаблицаПродукция.Количество = 0";
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда

		НаборЗаписей = РегистрыНакопления.ДвижениеПродукции.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(СсылкаНаДокумент);
		НаборЗаписей.Записывать = Истина;
		НаборЗаписей.Очистить();
		НаборЗаписей.Загрузить(РезультатЗапроса.Выгрузить());
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьДанныеДокумента(СсылкаНаДокумент, Запрос)

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПриходныеОперации.Организация КАК Организация,
		|	ПриходныеОперации.ПредприятиеПолучатель КАК Предприятие,
		|	ПриходныеОперации.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
		|	ПриходныеОперации.Количество КАК Количество,
		|	ПриходныеОперации.Дата КАК Период
		|ПОМЕСТИТЬ ВТ_ТаблицаПродукция
		|ИЗ
		|	Документ.ПриходныеОперации КАК ПриходныеОперации
		|ГДЕ
		|	ПриходныеОперации.Ссылка = &Ссылка";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);

	Запрос.Выполнить();
	
КонецПроцедуры

// Устанавливает статус документа "ПриходныеОперацииСводно" в зависимости от того,
// сколько приходных операций успешно обработано.
// Вызывается перед установкой статуса УспешноОбработана приходной операции,
// т.о., как минимум одна операция из группового документа "УспешноОбработана", но статус ей еще не присвоен
Процедура УстановитьСтатусыСводныхДокументов(СсылкаНаДокумент) Экспорт
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПриходныеОперацииСводноТаблицаДанных.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_СводныеДокументы
		|ИЗ
		|	Документ.ПриходныеОперацииСводно.ТаблицаДанных КАК ПриходныеОперацииСводноТаблицаДанных
		|ГДЕ
		|	ПриходныеОперацииСводноТаблицаДанных.ПриходнаяОперация = &ПриходнаяОперация
		|	И ПриходныеОперацииСводноТаблицаДанных.Ссылка.Проведен = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.ДокументСсылка) КАК Количество,
		|	ПриходныеОперацииСводноТаблицаДанных.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПриходныеОперацииСводно.ТаблицаДанных КАК ПриходныеОперацииСводноТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.ДокументСсылка КАК ДокументСсылка
		|		ИЗ
		|			РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.СрезПоследних КАК ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних
		|		ГДЕ
		|			ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.Статус <> &Статус) КАК ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних
		|		ПО ПриходныеОперацииСводноТаблицаДанных.ПриходнаяОперация = ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.ДокументСсылка
		|ГДЕ
		|	ПриходныеОперацииСводноТаблицаДанных.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТ_СводныеДокументы.Ссылка
		|			ИЗ
		|				ВТ_СводныеДокументы КАК ВТ_СводныеДокументы)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПриходныеОперацииСводноТаблицаДанных.Ссылка";
	
	Запрос.УстановитьПараметр("ПриходнаяОперация", СсылкаНаДокумент);
	Запрос.УстановитьПараметр("Статус", Справочники.СтатусыЗаявок.УспешноОбработана);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		СсылкиНаДокументы = РезультатЗапроса.Выгрузить();
		Для Каждого СводныйДокумент Из СсылкиНаДокументы Цикл
			Если СводныйДокумент.Количество = 1 Тогда
				ОбъектСводнойПО = СводныйДокумент.Ссылка.ПолучитьОбъект();
				ОбъектСводнойПО.Статус = Перечисления.СтатусыСводныхДокументов.УспешноПогашено;
					Попытка
						ОбъектСводнойПО.Записать(РежимЗаписиДокумента.Запись);
					Исключение
					КонецПопытки;
			ИначеЕсли СводныйДокумент.Ссылка.Статус = Перечисления.СтатусыСводныхДокументов.Новая Тогда
				ОбъектСводнойПО = СводныйДокумент.Ссылка.ПолучитьОбъект();
				ОбъектСводнойПО.Статус = Перечисления.СтатусыСводныхДокументов.ЧастичноПогашено;
				Попытка
					ОбъектСводнойПО.Записать(РежимЗаписиДокумента.Запись);
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецЕсли