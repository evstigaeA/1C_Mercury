#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("Ответственный") Тогда
		ДополнительныеСвойства.Свойство("Ответственный", Ответственный);
	Иначе
		Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаписьСкладскогоЖурнала = Неопределено;
	ВСД 					= Неопределено;
	ВСД_Возврат             = Неопределено;
	
	РеквизитПроверки = ?(УполномоченноеГашение, "ПредприятиеОтправитель", "ПредприятиеПолучатель");
	
	ЕстьПравоОбслуживания = ИнтеграцияВетисAPIСервер.ПроверитьОграниченияПользователя(Организация, ЭтотОбъект[РеквизитПроверки]);
	
	Если НЕ ЕстьПравоОбслуживания Тогда
		ЭтотОбъект[РеквизитПроверки] = Неопределено;
	КонецЕсли;
	
	Если УполномоченноеГашение Тогда
		
		Если НЕ РегистрыСведений.УполномоченноеГашение.ВозможностьОформленияУполномоченногоГашения(Организация, КонтрагентПолучатель) Тогда
			
			КонтрагентПолучатель  = Неопределено;
			ПредприятиеПолучатель = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ИнтеграцияВетисAPIСервер.УстановитьСтатусПодготовлен(Ссылка);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("ДокументОснование")
			И (ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ВСД")) Тогда
			
			ДанныеЗаполнения.Свойство("ДокументОснование"    , ВСД);
			ДанныеЗаполнения.Свойство("УполномоченноеГашение", УполномоченноеГашение);
			
			ЗаполнитьДокументНаОснованииВСД(ДанныеЗаполнения.ДокументОснование);
			
		Иначе
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВСД") Тогда
		
		ЗаполнитьДокументНаОснованииВСД(ДанныеЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	ИнтеграцияВетисAPIСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ);
	
	Для Каждого ТекТочка Из ТаблицаМаршрутСледования Цикл
		Если ТекТочка.ОсуществляетсяПерегрузка И ТипЗнч(ТекТочка.ИнформацияОСледующемТранспорте) <> Тип("СправочникСсылка.Транспорт") Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не указан транспорт в строке %1 списка ""Маршрут следования"".
						|Необходимо проверить наличие номеров транспортных средств в ВСД и перезаполнить документ.'"), ТекТочка.НомерСтроки),
					ЭтотОбъект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ТаблицаМаршрутСледования", ТекТочка.НомерСтроки, "ИнформацияОСледующемТранспорте"),
					,
					Отказ);
			
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СменаВладельцаБезПеревозки = ПредприятиеОтправитель = ПредприятиеПолучатель;
	КонечныйТранспортДоставки  = Справочники.Транспорт.ПустаяСсылка();
	ИсключаемыеРеквизиты       = Новый Массив;
	
	Если СменаВладельцаБезПеревозки Тогда
		ИсключаемыеРеквизиты.Добавить("Транспорт");
		ИсключаемыеРеквизиты.Добавить("СпособХраненияПриПеревозке");
	Иначе
		Если ЗначениеЗаполнено(ТипТТН) Тогда
			ПроверяемыеРеквизиты.Добавить("НомерТТН");
			ПроверяемыеРеквизиты.Добавить("ДатаТТН");
		КонецЕсли;
		Если ЗначениеЗаполнено(НомерТТН) Или ЗначениеЗаполнено(ДатаТТН) Тогда
			ПроверяемыеРеквизиты.Добавить("ТипТТН");
		КонецЕсли;
		
		//Если это мультимодальная перевозка, то транспорт должен быть указан из последней точки перегрузки
		//иначе берем из шапки документа
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВСДТаблицаМаршрутСледования.ИнформацияОСледующемТранспорте КАК ИнформацияОСледующемТранспорте,
			|	ВСДТаблицаМаршрутСледования.ИнформацияОСледующемТранспорте.ТипТС КАК ТипТС
			|ИЗ
			|	(ВЫБРАТЬ
			|		МАКСИМУМ(ВСДТаблицаМаршрутСледования.НомерСтроки) КАК НомерСтроки
			|	ИЗ
			|		Документ.ВСД.ТаблицаМаршрутСледования КАК ВСДТаблицаМаршрутСледования
			|	ГДЕ
			|		ВСДТаблицаМаршрутСледования.Ссылка = &ВСД
			|		И ВСДТаблицаМаршрутСледования.ОсуществляетсяПерегрузка) КАК ПоследняяТочкаПерегрузки
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВСД.ТаблицаМаршрутСледования КАК ВСДТаблицаМаршрутСледования
			|		ПО ПоследняяТочкаПерегрузки.НомерСтроки = ВСДТаблицаМаршрутСледования.НомерСтроки
			|ГДЕ
			|	ВСДТаблицаМаршрутСледования.Ссылка = &ВСД";
		
		Запрос.УстановитьПараметр("ВСД", ВСД);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			
			КонечныйТранспортДоставки = ВСД.Транспорт;
			
		Иначе
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			КонечныйТранспортДоставки = Выборка.ИнформацияОСледующемТранспорте;

		КонецЕсли;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбменЧерезУниверсальныйФормат") Тогда
		ПроверяемыеРеквизиты.Добавить("НоменклатураУчетнойСистемы");
	КонецЕсли;
	
	Если РезультатДокументарногоКонтроля = Справочники.РезультатыКонтроляПоставки.ГрузОтличается Тогда
		ПроверяемыеРеквизиты.Добавить("ПричинаСоставленияАктаНесоответствия");
	КонецЕсли;
	
	Если РешениеОПриемеВходнойПартии <> Справочники.РешенияОПриемеВходнойПартии.ПринятьВсюПоставку Тогда
		
		ПроверяемыеРеквизиты.Добавить("НазначениеГруза_Возврат");
		ПроверяемыеРеквизиты.Добавить("ДатаВСД_Возврат");
		
		Если Не СменаВладельцаБезПеревозки Тогда
			
			Если ЭтотОбъект.Транспорт <> КонечныйТранспортДоставки Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						НСтр("ru = 'Транспорт в сведениях о возврате продукции должен совпадать с указанным в ветеринарно-сопроводительном документе.'"),
						ЭтотОбъект,
						"Транспорт",
						,
						Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТекстОшибки = НСтр("ru = 'Данные реквизита ""%1"" в сведениях о возврате продукции должны совпадать с указанными в ветеринарно-сопроводительном документе.'");
		
		СписокПроверяемыхДат = Новый СписокЗначений;
		СписокПроверяемыхДат.Добавить("ФорматДатыВыработки"   , "Формат даты выработки");
		СписокПроверяемыхДат.Добавить("ДатаВыработкиНачало"   , "Дата выработки начало");
		СписокПроверяемыхДат.Добавить("ДатаВыработкиОкончание", "Дата выработки окончание");
		СписокПроверяемыхДат.Добавить("ДатаВыработкиСтрокой"  , "Дата выработки");
		ПроверитьКорректностьДат(СписокПроверяемыхДат, "ПредставлениеДатыВыработки", ТекстОшибки, Отказ);
		
		СписокПроверяемыхДат = Новый СписокЗначений;
		СписокПроверяемыхДат.Добавить("ФорматСрокаГодности"                , "Формат срока годности");
		СписокПроверяемыхДат.Добавить("ДатаОкончанияСрокаГодностиНачало"   , "Дата окончания срока годности начало");
		СписокПроверяемыхДат.Добавить("ДатаОкончанияСрокаГодностиОкончание", "Дата окончания срока годности окончание");
		СписокПроверяемыхДат.Добавить("ДатаСрокаГодностиСтрокой"           , "Дата срока годности");
		ПроверитьКорректностьДат(СписокПроверяемыхДат, "ПредставлениеСрокаГодности", ТекстОшибки, Отказ);
		
		СписокПроверяемыхРеквизитовВозврат = Новый СписокЗначений;
		СписокПроверяемыхРеквизитовВозврат.Добавить("ТипТТН"  , "Тип ТТН");
		СписокПроверяемыхРеквизитовВозврат.Добавить("ДатаТТН" , "Дата ТТН");
		СписокПроверяемыхРеквизитовВозврат.Добавить("НомерТТН", "Номер ТТН");
		СписокПроверяемыхРеквизитовВозврат.Добавить("СерияТТН", "Серия ТТН");
		
		Для Каждого ТекРеквизит Из СписокПроверяемыхРеквизитовВозврат Цикл
			Если ЭтотОбъект[ТекРеквизит.Значение + "_Возврат"] <> ВСД[ТекРеквизит.Значение] Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ТекРеквизит.Представление),
						ЭтотОбъект,
						ТекРеквизит.Значение + "_Возврат",
						,
						Отказ);
				
			КонецЕсли;
		КонецЦикла;
		
		Если СписокСвязанныхДокументов_Возврат.Количество() > 5 Тогда
		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							НСтр("ru = 'Можно указать не более 5 связанных документов'"),
							ЭтотОбъект,
							"СписокСвязанныхДокументов_Возврат",
							,
							Отказ);
								
		КонецЕсли;
		
	КонецЕсли;
	
	Если РешениеОПриемеВходнойПартии = Справочники.РешенияОПриемеВходнойПартии.ОформитьВозвратНаВсюПоставку Тогда
		
		Если Количество > 0 Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							НСтр("ru = 'При полном возврате фактическое количество должно быть равно нулю.'"),
							ЭтотОбъект,
							"Количество",
							,
							Отказ);
			
		КонецЕсли;
		
		Если Количество_Возврат <> ВСД.Количество Тогда
		
			Если ВычислитьПроцентОтклонения(Количество_Возврат, ВСД.Количество) > 5 Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						НСтр("ru = 'Количество в сведениях о возврате продукции отличается от указанного в ВСД более чем на 5%.'"),
						ЭтотОбъект,
						"Количество_Возврат",
						,
						Отказ);
				
			КонецЕсли;
		
		КонецЕсли;
		
		ИсключаемыеРеквизиты.Добавить("Количество");
		ИсключаемыеРеквизиты.Добавить("ЕдиницаИзмерения");
		
	Иначе
		
		Если ТипТТН <> ВСД.ТипТТН Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							НСтр("ru = 'Тип ТТН в сведениях о принимаемой партии должен совпадать с указанным в ветеринарно-сопроводительном документе.'"),
							ЭтотОбъект,
							"ТипТТН",
							,
							Отказ);
							
		КонецЕсли;
		
		Если Не (ВСД.ФорматДатыВыработки = Перечисления.СпособыЗаданияДаты.Строка
				И ЭтотОбъект.ФорматДатыВыработки <> Перечисления.СпособыЗаданияДаты.Строка) Тогда
				
			ТекстОшибки = НСтр("ru = 'Данные реквизита ""%1"" отличны от данных указанных в ВСД.'");
			
			СписокПроверяемыхДат = Новый СписокЗначений;
			СписокПроверяемыхДат.Добавить("ФорматДатыВыработки"   , "Формат даты выработки");
			СписокПроверяемыхДат.Добавить("ДатаВыработкиНачало"   , "Дата выработки начало");
			СписокПроверяемыхДат.Добавить("ДатаВыработкиОкончание", "Дата выработки окончание");
			СписокПроверяемыхДат.Добавить("ДатаВыработкиСтрокой"  , "Дата выработки");
			ПроверитьКорректностьДат(СписокПроверяемыхДат, "ПредставлениеДатыВыработки", ТекстОшибки, Отказ);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПричинаСоставленияАктаНесоответствия) Тогда
			
			ТекстОшибки = НСтр("ru = 'Данные реквизита ""%1"" отличны от данных указанных в ВСД. Необходимо указать причину в акте несоответствия.'");
			
			Если Не (ВСД.ФорматСрокаГодности = Перечисления.СпособыЗаданияДаты.Строка
					И ЭтотОбъект.ФорматСрокаГодности <> Перечисления.СпособыЗаданияДаты.Строка) Тогда
				СписокПроверяемыхДат = Новый СписокЗначений;
				СписокПроверяемыхДат.Добавить("ФорматСрокаГодности"                , "Формат срока годности");
				СписокПроверяемыхДат.Добавить("ДатаОкончанияСрокаГодностиНачало"   , "Дата окончания срока годности начало");
				СписокПроверяемыхДат.Добавить("ДатаОкончанияСрокаГодностиОкончание", "Дата окончания срока годности окончание");
				СписокПроверяемыхДат.Добавить("ДатаСрокаГодностиСтрокой"           , "Дата срока годности");
				ПроверитьКорректностьДат(СписокПроверяемыхДат, "ПредставлениеСрокаГодности", ТекстОшибки, Отказ);
			КонецЕсли;
			
			СписокПроверяемыхРеквизитов = Новый СписокЗначений;
			
			Если НЕ СменаВладельцаБезПеревозки Тогда
				
				СписокПроверяемыхРеквизитов.Добавить("ДатаТТН"  , "Дата ТТН");
				СписокПроверяемыхРеквизитов.Добавить("НомерТТН" , "Номер ТТН");
				СписокПроверяемыхРеквизитов.Добавить("СерияТТН" , "Серия ТТН");
				
				Если ЭтотОбъект.Транспорт.ТипТС <> КонечныйТранспортДоставки.ТипТС Тогда
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							НСтр("ru = 'Тип транспорта в сведениях о принимаемой партии должен совпадать с указанным в ветеринарно-сопроводительном документе.'"),
							ЭтотОбъект,
							"Транспорт",
							,
							Отказ);
							
				Иначе
					
					Если ЭтотОбъект.Транспорт <> КонечныйТранспортДоставки Тогда
						
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, "Транспорт"),
							ЭтотОбъект,
							"Транспорт",
							,
							Отказ);
							
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СписокПроверяемыхРеквизитов.Добавить("Продукция"  , "Продукция");
			СписокПроверяемыхРеквизитов.Добавить("НомерПартии", "Номер производственной партии");
			
			Для Каждого ТекРеквизит Из СписокПроверяемыхРеквизитов Цикл
				Если ЭтотОбъект[ТекРеквизит.Значение] <> ВСД[ТекРеквизит.Значение] Тогда
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ТекРеквизит.Представление),
							ЭтотОбъект,
							ТекРеквизит.Значение,
							,
							Отказ);
					
				КонецЕсли;
			КонецЦикла;
			
			Если РешениеОПриемеВходнойПартии = Справочники.РешенияОПриемеВходнойПартии.ПринятьВсюПоставку Тогда
				
				Если ВычислитьПроцентОтклонения(Количество, ВСД.Количество) > 5 Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							НСтр("ru = 'Фактическое количество отличается от указанного в ВСД более чем на 5%. Необходимо указать причину в акте несоответствия.'"),
							ЭтотОбъект,
							"Количество",
							,
							Отказ);
				КонецЕсли;
				
			Иначе
				
				Если Количество + Количество_Возврат > ВСД.Количество Тогда
					Если ВычислитьПроцентОтклонения(Количество + Количество_Возврат, ВСД.Количество) > 5 Тогда
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							НСтр("ru = 'Сумма фактического и возвращаемого количества отличается от указанного в ВСД более чем на 5%. Необходимо указать причину в акте несоответствия.'"),
							ЭтотОбъект,
							"Количество_Возврат",
							,
							Отказ);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;
	
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, ИсключаемыеРеквизиты);
	
КонецПроцедуры

Процедура ПроверитьКорректностьДат(СписокРеквизитов, ПредставлениеПоля, ТекстОшибки, Отказ)
	
	Ошибки = Неопределено;
	Для Каждого ТекРеквизит Из СписокРеквизитов Цикл
		Если ЭтотОбъект[ТекРеквизит.Значение] <> ВСД[ТекРеквизит.Значение] Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ТекРеквизит.Представление),
				ЭтотОбъект,
				,
				ПредставлениеПоля,
				Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьДокументНаОснованииВСД(Знач ДокументОснование)
	
	ТекстОшибки = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА &УполномоченноеГашение
		|			ТОГДА ДокументВСД.Организация
		|		ИНАЧЕ НастройкиПодключенияКВетисAPI.Организация
		|	КОНЕЦ КАК Организация,
		|	ДокументВСД.КонтрагентОтправитель КАК КонтрагентОтправитель,
		|	ДокументВСД.ПредприятиеОтправитель КАК ПредприятиеОтправитель,
		|	ДокументВСД.КонтрагентПолучатель КАК КонтрагентПолучатель,
		|	ДокументВСД.ПредприятиеПолучатель КАК ПредприятиеПолучатель,
		|	ДокументВСД.ТипВСД КАК ТипВСД,
		|	ЕСТЬNULL(СтатусыВСДСрезПоследних.СтатусВСД, ""Отсутствует"") КАК Статус,
		|	ВЫБОР
		|		КОГДА УполномоченноеГашение.Контрагент ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОшибкаУполномоченногоГашения
		|ИЗ
		|	Документ.ВСД КАК ДокументВСД
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УполномоченноеГашение КАК УполномоченноеГашение
		|		ПО ДокументВСД.Организация = УполномоченноеГашение.Организация
		|			И ДокументВСД.КонтрагентПолучатель = УполномоченноеГашение.Контрагент
		|			И (&УполномоченноеГашение = ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиПодключенияКВетисAPI КАК НастройкиПодключенияКВетисAPI
		|		ПО ДокументВСД.КонтрагентПолучатель = НастройкиПодключенияКВетисAPI.Контрагент
		|			И (НЕ НастройкиПодключенияКВетисAPI.ПометкаУдаления)
		|			И (&УполномоченноеГашение = ЛОЖЬ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыВСД.СрезПоследних(, ВСД = &ДокументОснование) КАК СтатусыВСДСрезПоследних
		|		ПО ДокументВСД.Ссылка = СтатусыВСДСрезПоследних.ВСД
		|ГДЕ
		|	ДокументВСД.Ссылка = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование"    , ДокументОснование);
	Запрос.УстановитьПараметр("УполномоченноеГашение", УполномоченноеГашение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если Выборка.Статус <> Справочники.СтатусыВСД.Оформлен Тогда
		
		ТекстОшибки = НСтр("ru='ВСД %Документ% находится в статусе ""%Статус%"". Ввод на основании разрешен только в статусе ""Оформлен"".'");
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДокументОснование);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%"  , Выборка.Статус);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Если Выборка.ТипВСД = Справочники.ТипыВСД.ПроизводственныйВСД Тогда
		
		ВызватьИсключение НСтр("ru = 'ВСД должен быть транспортным. Ввод на основании запрещен.'");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.Организация) Тогда
		
		Если УполномоченноеГашение Тогда
			
			Если Выборка.ОшибкаУполномоченногоГашения Тогда
				
				ТекстОшибки = НСтр("ru='Хоз. субъект получатель %Контрагент% не доступен для оформления уполномоченного гашения. Ввод на основании запрещен.'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Контрагент%", Выборка.КонтрагентПолучатель);
				
				ВызватьИсключение ТекстОшибки;
				
			КонецЕсли;
			
			ПредприятиеПроверки = Выборка.ПредприятиеОтправитель;
			
		Иначе
			
			ПредприятиеПроверки = Выборка.ПредприятиеПолучатель;
			
		КонецЕсли;
		
		Если Не ИнтеграцияВетисAPIСервер.ПроверитьОграниченияПользователя(Выборка.Организация, ПредприятиеПроверки,, ТекстОшибки) Тогда
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
	Иначе
		
		ТекстОшибки = НСтр("ru='Хоз. субъект получатель %Контрагент% не является обслуживаемым. Ввод на основании запрещен.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Контрагент%", Выборка.КонтрагентПолучатель);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ЗаполнитьДокументПоВСД(ДокументОснование);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьДокументПоВСД(ВходящийВСД) Экспорт
	
	Для Каждого ТочкаМаршрута Из ВходящийВСД.ТаблицаМаршрутСледования Цикл
		Если ТочкаМаршрута.ОсуществляетсяПерегрузка И 
			Не ЗначениеЗаполнено(ТочкаМаршрута.ИнформацияОСледующемТранспорте) Или ТипЗнч(ТочкаМаршрута.ИнформацияОСледующемТранспорте) = Тип("СправочникСсылка.ТипыТранспортныхСредств") Тогда
				ВызватьИсключение СтрЗаменить(НСтр("ru = 'В строке %1 не указан транспорт в точке перегрузки. Необходимо указать все номера ТС в ВСД.'"), "%1", ТочкаМаршрута.НомерСтроки);
		КонецЕсли;
	КонецЦикла;
	
	ВСД = ВходящийВСД;
	ДанныеЗаполнения = ОбщегоНазначенияУВССервер.ПолучитьДанныеДляЗаполненияПриходнойОперацииПоВСД(ВСД);
	Для Каждого ТабЧасть Из ЭтотОбъект.Метаданные().ТабличныеЧасти Цикл
		ЭтотОбъект[ТабЧасть.Имя].Очистить();
	КонецЦикла;
	
	ВыборкаШапка = ДанныеЗаполнения[4].Выбрать();
	ВыборкаШапка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	
	ПоследнийТранспортПерегрузки = Справочники.Транспорт.ПустаяСсылка();
	ВыборкаМаршрутСледования = ДанныеЗаполнения[5].Выбрать();
	Пока ВыборкаМаршрутСледования.Следующий() Цикл
		НоваяСтрока = ТаблицаМаршрутСледования.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаМаршрутСледования);
		Если ВыборкаМаршрутСледования.ОсуществляетсяПерегрузка Тогда
			ПоследнийТранспортПерегрузки = ВыборкаМаршрутСледования.ИнформацияОСледующемТранспорте;
		КонецЕсли;
	КонецЦикла;
	
	Если ПоследнийТранспортПерегрузки <> Справочники.Транспорт.ПустаяСсылка() Тогда
		Транспорт = ПоследнийТранспортПерегрузки;
	КонецЕсли;
		
	ВыборкаПроизводителиПродукции = ДанныеЗаполнения[6].Выбрать();
	Пока ВыборкаПроизводителиПродукции.Следующий() Цикл
		НоваяСтрока = ПроизводителиПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПроизводителиПродукции);
	КонецЦикла;
	
	ВыборкаУпаковки = ДанныеЗаполнения[7].Выбрать();
	Пока ВыборкаУпаковки.Следующий() Цикл
		НоваяСтрока = СписокФизическихУпаковок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаУпаковки);
	КонецЦикла;
	
КонецПроцедуры

Функция ВычислитьПроцентОтклонения(Число1, Число2)
	
	Если Число1 = 0 И Число2 = 0 Тогда
		Возврат 0;
	ИначеЕсли Число2 = 0 Тогда
		Возврат 100;
	Иначе
		Итог = 100 - (Число1 * 100/Число2);
		Возврат Макс(Итог, -Итог);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецЕсли