#Область ОписаниеПеременных

// СтандартныеПодсистемы.ОценкаПроизводительности
&НаКлиенте
Перем ИдентификаторЗамераПроведение, ИдентификаторЗамераПроведениеНеНужнаРегистрацияОшибки;
// Конец СтандартныеПодсистемы.ОценкаПроизводительности

#КонецОбласти

#Область ОбработчикиСобытийФорм

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбщегоНазначенияУВСКлиентСервер.ДополнительныеДействияСФормой(ЭтаФорма);
	
	ПриЧтенииСозданииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ДанныеЗаполненияСтрок = Новый Структура;
	ДанныеЗаполненияСтрок.Вставить("ЛабораторныеИсследования", ЗаполнениеРеквизитовОбъектов.ПолучитьЗначенияРеквизитовТабличнойЧасти(Объект, "ЛабораторныеИсследования"));
	ДанныеЗаполненияСтрок.Вставить("Иммунизация", ЗаполнениеРеквизитовОбъектов.ПолучитьЗначенияРеквизитовТабличнойЧасти(Объект, "Иммунизация"));
	
	ЗаполнитьВспомогательныеРеквизиты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ИдентификаторЗамераПроведение = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ПроведениеДокументаОшибка");
		ОценкаПроизводительностиКлиент.УстановитьПризнакОшибкиЗамера(ИдентификаторЗамераПроведение, Истина);
		
		ИдентификаторЗамераПроведениеНеНужнаРегистрацияОшибки = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(ИдентификаторЗамераПроведение, "ПроведениеДокумента");
		ОценкаПроизводительностиКлиент.УстановитьПризнакОшибкиЗамера(ИдентификаторЗамераПроведение, Ложь);
		
		ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(ИдентификаторЗамераПроведениеНеНужнаРегистрацияОшибки, "ПроведениеДокументаНеНужнаРегистрацияОшибки");
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	ОбщегоНазначенияУВСКлиентСервер.ДополнительныеДействияСФормой(ЭтаФорма);
	Оповестить("ИзменениеСтатусаЗаявкиНаОформлениеОперации");
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьВспомогательныеРеквизиты();
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов.
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов") Тогда
		МодульЗапретРедактированияРеквизитовОбъектов = ОбщегоНазначения.ОбщийМодуль("ЗапретРедактированияРеквизитовОбъектов");
		МодульЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияУВСКлиент.ОповеститьДокументы(ИмяСобытия, Параметр, Источник, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусНажатие(Элемент, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.ОткрытьФормуЖурналаСостоянияЗаявок(ЭтотОбъект, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_Органиазация

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Объект.Контрагент = ОбщегоНазначенияУВСВызовСервера.КонтрагентПоОрганизации(Объект.Организация);
	ОчиститьТабличныеЧасти();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_Предприятие

&НаКлиенте
Процедура ПредприятиеПриИзменении(Элемент)
	
	ОбщегоНазначенияУВСКлиент.ПредприятиеПриИзменении(Объект.Контрагент, Объект.Предприятие);
	ОчиститьТабличныеЧасти();

КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.ПредприятиеНачалоВыбора(Элемент, СтандартнаяОбработка, Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.ПредприятиеАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.ПредприятиеОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
	
КонецПроцедуры

#КонецОбласти

#Область ТаблицаЗаписейСкладскогоЖурнала

&НаКлиенте
Процедура ТаблицаПродукцииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ТаблицаПродукцииЗаписьСкладскогоЖурнала" Тогда
		
		ПоказатьЗначение(, ТекущиеДанные.ЗаписьСкладскогоЖурнала);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцииПриАктивизацииСтроки(Элемент)
	
	Данные = Элементы.ТаблицаПродукции.ТекущиеДанные;
	Если Данные = Неопределено Тогда
    	Возврат;
	КонецЕсли;
	
	Элементы.ЛабораторныеИсследования.ОтборСтрок = Новый ФиксированнаяСтруктура("ЗаписьСкладскогоЖурнала", Данные.ЗаписьСкладскогоЖурнала);
	Элементы.Иммунизация.ОтборСтрок = Новый ФиксированнаяСтруктура("ЗаписьСкладскогоЖурнала", Данные.ЗаписьСкладскогоЖурнала);
	
	Элементы.ГруппаИммунизация.Доступность = ИнтеграцияВетисAPIВызовСервера.ПродукцияПринадлежитТипуЖивыхЖивотных(Данные.ЗаписьСкладскогоЖурнала, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцииПередУдалением(Элемент, Отказ)
	
	МассивСвязанныхТЧ = Новый Массив;
	МассивСвязанныхТЧ.Добавить("Иммунизация");
	МассивСвязанныхТЧ.Добавить("ЛабораторныеИсследования");
	
	ОбработкаТабличнойЧастиКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭтаФорма, "ТаблицаПродукции", МассивСвязанныхТЧ, "ЗаписьСкладскогоЖурнала");
	
КонецПроцедуры

#КонецОбласти

#Область ЛабораторныеИсследования

&НаКлиенте
Процедура ЛабораторныеИсследованияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Данные = Элементы.ТаблицаПродукции.ТекущиеДанные;
	
	ТекущиеДанные = Элементы.ЛабораторныеИсследования.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.ЗаписьСкладскогоЖурнала = Данные.ЗаписьСкладскогоЖурнала;
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеЗаполненияСтрок.ЛабораторныеИсследования);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛабораторныеИсследованияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Данные = Элементы.ТаблицаПродукции.ТекущиеДанные;
    Если Данные = Неопределено Тогда
        Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Иммунизация

&НаКлиенте
Процедура ИммунизацияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Данные = Элементы.ТаблицаПродукции.ТекущиеДанные;
	
	ТекущиеДанные = Элементы.Иммунизация.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.ЗаписьСкладскогоЖурнала = Данные.ЗаписьСкладскогоЖурнала;
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеЗаполненияСтрок.Иммунизация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИммунизацияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Данные = Элементы.ТаблицаПродукции.ТекущиеДанные;
    Если Данные = Неопределено Тогда
        Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подбор_ТаблицаПродукция(Команда)
	
	АдресХраненияДанных = ОбщегоНазначенияУВСВызовСервера.ПоместитьТаблицуФормыВоВременноеХранилище(Объект.ТаблицаПродукции, Новый УникальныйИдентификатор);
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор продукции в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'внесение сведений о лабораторных исследованиях'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресХраненияДанных", АдресХраненияДанных);
	ПараметрыФормы.Вставить("Дата"               , Объект.Дата);
	ПараметрыФормы.Вставить("Документ"           , Объект.Ссылка);
	ПараметрыФормы.Вставить("Организация"        , Объект.Организация);
	ПараметрыФормы.Вставить("Предприятие"        , Объект.Предприятие);
	ПараметрыФормы.Вставить("Заголовок"          , ПараметрЗаголовок);
	
	Оповещение = Новый ОписаниеОповещения("Подбор_ТаблицаПродукцияЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ПодборЗаписейСкладскогоЖурналаДляВнесенияМероприятий.Форма.ФормаПодбора", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор_ТаблицаПродукцияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ОбработатьРезультатПодбора(Результат);

КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатПодбора(АдресХранения)

	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранения);
	
	ТаблицаПродукции = СтруктураДанных.Продукция;
	Для Каждого ТекДанные Из ТаблицаПродукции Цикл
		
		НайденныеСтроки = Объект.ТаблицаПродукции.НайтиСтроки(Новый Структура("ЗаписьСкладскогоЖурнала", ТекДанные.ЗаписьСкладскогоЖурнала));
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.ТаблицаПродукции.Добавить();
			НоваяСтрока.ЗаписьСкладскогоЖурнала = ТекДанные.ЗаписьСкладскогоЖурнала;
			НоваяСтрока.ТипПродукции = ТекДанные.ЗаписьСкладскогоЖурнала.ТипПродукции;
			НоваяСтрока.ТипПродукцииЖивыеЖивотные = ИнтеграцияВетисAPIВызовСервера.ПродукцияПринадлежитТипуЖивыхЖивотных(ТекДанные.ЗаписьСкладскогоЖурнала, Ложь);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаЛабораторныхИсследований = СтруктураДанных.ЛабораторныеИсследования;
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаЛабораторныхИсследований, Объект.ЛабораторныеИсследования);
	
	ТаблицаСведенийОбИммунизации = СтруктураДанных.Иммунизация;
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаСведенийОбИммунизации, Объект.Иммунизация);

	ИндексСтроки = Объект.ТаблицаПродукции.Количество() - 1;
	Если ИндексСтроки >= 0 Тогда
		Элементы.ТаблицаПродукции.ТекущаяСтрока = Объект.ТаблицаПродукции[ИндексСтроки].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОчиститьТабличныеЧасти()
	
	Объект.ЛабораторныеИсследования.Очистить();
	Объект.Иммунизация.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВспомогательныеРеквизиты()

	МассивЗаписей = Объект.ТаблицаПродукции.Выгрузить(, "ЗаписьСкладскогоЖурнала");
	ПринадлежностьЗаписейЖивымЖивотным = ИнтеграцияВетисAPIВызовСервера.ПродукцияПринадлежитТипуЖивыхЖивотных(МассивЗаписей, Ложь);
	
	Для Каждого ТекСтрока Из Объект.ТаблицаПродукции Цикл
		
		ТекСтрока.ТипПродукцииЖивыеЖивотные = ПринадлежностьЗаписейЖивымЖивотным.Получить(ТекСтрока.ЗаписьСкладскогоЖурнала);
		ТекСтрока.ТипПродукции = ТекСтрока.ЗаписьСкладскогоЖурнала.ТипПродукции;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти