#Область ОписаниеПеременных

// СтандартныеПодсистемы.ОценкаПроизводительности
&НаКлиенте
Перем ИдентификаторЗамераПроведение, ИдентификаторЗамераПроведениеНеНужнаРегистрацияОшибки;
// Конец СтандартныеПодсистемы.ОценкаПроизводительности

#КонецОбласти

#Область ОбработчикиСобытийФорм

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	ОбщегоНазначенияУВСКлиентСервер.ДополнительныеДействияСФормой(ЭтаФорма);
	УстановитьВидимостьЭлементовФормы();
	
	ПриЧтенииСозданииНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПриЧтенииСозданииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ДанныеЗаполненияСтрок = ЗаполнениеРеквизитовОбъектов.ПолучитьЗначенияРеквизитовТабличнойЧасти(Объект, "ТаблицаПродукции");
	
	ИспользоватьКонтрольПартийПриНезавершенномПроизводстве = ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольПартийПриНезавершенномПроизводстве");
	
	ЗаполнитьВспомогательныеРеквизиты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ИдентификаторЗамераПроведение = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ПроведениеДокументаОшибка");
		ОценкаПроизводительностиКлиент.УстановитьПризнакОшибкиЗамера(ИдентификаторЗамераПроведение, Истина);
				
		ИдентификаторЗамераПроведениеНеНужнаРегистрацияОшибки = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(ИдентификаторЗамераПроведение, "ПроведениеДокумента");
		ОценкаПроизводительностиКлиент.УстановитьПризнакОшибкиЗамера(ИдентификаторЗамераПроведение, Ложь);
		
		ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(ИдентификаторЗамераПроведениеНеНужнаРегистрацияОшибки, "ПроведениеДокументаНеНужнаРегистрацияОшибки");
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	ОбщегоНазначенияУВСКлиентСервер.ДополнительныеДействияСФормой(ЭтаФорма);
	Оповестить("ИзменениеСтатусаЗаявкиНаОформлениеОперации");
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьВспомогательныеРеквизиты();
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов.
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов") Тогда
		МодульЗапретРедактированияРеквизитовОбъектов = ОбщегоНазначения.ОбщийМодуль("ЗапретРедактированияРеквизитовОбъектов");
		МодульЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ОбщегоНазначенияУВСКлиент.ОповеститьДокументы(ИмяСобытия, Параметр, Источник, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СтатусНажатие(Элемент, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.ОткрытьФормуЖурналаСостоянияЗаявок(ЭтотОбъект, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_Органиазация

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Объект.Контрагент = ОбщегоНазначенияУВСВызовСервера.КонтрагентПоОрганизации(Объект.Организация);
	ОчиститьТабличныеЧасти();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_Предприятие

&НаКлиенте
Процедура ПредприятиеПриИзменении(Элемент)
	
	ОбщегоНазначенияУВСКлиент.ПредприятиеПриИзменении(Объект.Контрагент, Объект.Предприятие);
	ОчиститьТабличныеЧасти();

КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.ПредприятиеНачалоВыбора(Элемент, СтандартнаяОбработка, Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.ПредприятиеАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.ПредприятиеОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_НезавершенноеПроизводство

&НаКлиенте
Процедура НезавершенноеПроизводствоПриИзменении(Элемент)
	
	Объект.ИдентификаторТранзакции = Неопределено;
	Объект.ЗавершитьПроизводство = Ложь;
	
	Если ИспользоватьКонтрольПартийПриНезавершенномПроизводстве Тогда
		Для Каждого ТекСтрока Из Объект.ТаблицаПродукции Цикл
			ТекСтрока.НомерПартии = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьВидимостьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторТранзакцииПриИзменении(Элемент)
	
	Если ИспользоватьКонтрольПартийПриНезавершенномПроизводстве Тогда
		Для Каждого ТекСтрока Из Объект.ТаблицаПродукции Цикл
			ТекСтрока.НомерПартии = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличнойЧасти

#Область ТаблицаСырье

&НаКлиенте
Процедура ТаблицаСырьеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаСырье.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ТаблицаСырьеУпаковки" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Не ЭтаФорма.ТолькоПросмотр Тогда
			Если ПустаяСтрока(ТекущиеДанные.GUIDСтроки) Тогда
				ТекущиеДанные.GUIDСтроки = Строка(Новый УникальныйИдентификатор());
			КонецЕсли;
		КонецЕсли;
		GUIDСтроки = ТекущиеДанные.GUIDСтроки;
		
		Если ТекущиеДанные.ТипПродукцииЖивыеЖивотные Тогда
			Возврат;
		КонецЕсли;
			
		ОбщегоНазначенияУВСКлиент.ПродукцияУпаковкиВыбор(ЭтотОбъект, ТекущиеДанные, GUIDСтроки, "СписокФизическихУпаковокСырье");
		
	ИначеЕсли Поле.Имя = "ТаблицаСырьеЗаписьСкладскогоЖурнала" Тогда
		
		ПоказатьЗначение(, ТекущиеДанные.ЗаписьСкладскогоЖурнала);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСырьеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСырьеПередУдалением(Элемент, Отказ)
	
	МассивСвязанныхТЧ = Новый Массив;
	МассивСвязанныхТЧ.Добавить("СписокФизическихУпаковокСырье");

	ОбработкаТабличнойЧастиКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭтаФорма, "ТаблицаСырье", МассивСвязанныхТЧ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСырьеНоменклатураУчетнойСистемыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаСырье.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУВСКлиент.НоменклатураУчетнойСистемыНачалоВыбора(Элемент, СтандартнаяОбработка, ТекущиеДанные.ЗаписьСкладскогоЖурнала);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСырьеНоменклатураУчетнойСистемыАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаСырье.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУВСКлиент.НоменклатураУчетнойСистемыАвтоПодбор(ДанныеВыбора, Текст, СтандартнаяОбработка, ТекущиеДанные.ЗаписьСкладскогоЖурнала);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСырьеНоменклатураУчетнойСистемыОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаСырье.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУВСКлиент.НоменклатураУчетнойСистемыОкончаниеВводаТекста(ДанныеВыбора, Текст, СтандартнаяОбработка, ТекущиеДанные.ЗаписьСкладскогоЖурнала);
	
КонецПроцедуры

#КонецОбласти

#Область ТаблицаПродукции

&НаКлиенте
Процедура ТаблицаПродукцииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ТаблицаПродукцииУпаковки" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Не ЭтаФорма.ТолькоПросмотр Тогда
			Если ПустаяСтрока(ТекущиеДанные.GUIDСтроки) Тогда
				ТекущиеДанные.GUIDСтроки = Строка(Новый УникальныйИдентификатор());
			КонецЕсли;
		КонецЕсли;
		GUIDСтроки = ТекущиеДанные.GUIDСтроки;
		
		Если ТекущиеДанные.ТипПродукцииЖивыеЖивотные Тогда
			Возврат;
		КонецЕсли;
		
		ОбщегоНазначенияУВСКлиент.ПродукцияУпаковкиВыбор(ЭтотОбъект, ТекущиеДанные, GUIDСтроки, "СписокФизическихУпаковокПродукция");
		
	ИначеЕсли Поле.Имя = "ТаблицаПродукцииПредставлениеДатыВыработки" Тогда
		
		ИнтеграцияВетисAPIКлиент.ОткрытьФормуЗаданияДат(ЭтотОбъект, ТекущиеДанные, Элемент, Истина);
		
	ИначеЕсли Поле.Имя = "ТаблицаПродукцииПредставлениеСрокаГодности" Тогда
		
		ИнтеграцияВетисAPIКлиент.ОткрытьФормуЗаданияДат(ЭтотОбъект, ТекущиеДанные, Элемент, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцииПередУдалением(Элемент, Отказ)
	
	МассивСвязанныхТЧ = Новый Массив;
	МассивСвязанныхТЧ.Добавить("СписокФизическихУпаковокПродукция");

	ОбработкаТабличнойЧастиКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭтаФорма, "ТаблицаПродукции", МассивСвязанныхТЧ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.ТаблицаПродукции.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		GUIDКопируемойСтроки     = ТекущаяСтрока.GUIDСтроки;
		ТекущаяСтрока.GUIDСтроки = Строка(Новый УникальныйИдентификатор());
		Если Копирование Тогда
			// Необходимо скопировать данные в подчиненных табличных частях
			МассивСвязанныхТЧ = Новый Массив;
			МассивСвязанныхТЧ.Добавить("СписокФизическихУпаковокПродукция");
			ОбработкаТабличнойЧастиКлиент.СкопироватьПодчиненныеТабличныеЧасти(ЭтаФорма, ТекущаяСтрока.GUIDСтроки, GUIDКопируемойСтроки, МассивСвязанныхТЧ);
		Иначе
			ТекущаяСтрока.Упаковки = НСтр("ru = 'Без упаковок'");
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ДанныеЗаполненияСтрок);
			
			ТекущаяСтрока.ПредставлениеДатыВыработки = ИнтеграцияВетисAPIКлиентСервер.СформироватьПредставлениеДатыВыработки(ТекущаяСтрока);
			ТекущаяСтрока.ПредставлениеСрокаГодности = ИнтеграцияВетисAPIКлиентСервер.СформироватьПредставлениеСрокаГодности(ТекущаяСтрока);
		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцииПродукцияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеПродукцииНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	
	МассивСвязанныхТЧ = Новый Массив;
	МассивСвязанныхТЧ.Добавить("СписокФизическихУпаковокПродукция");
	
	Если ТекущиеДанные.ТипПродукцииЖивыеЖивотные Тогда
		ОбработкаТабличнойЧастиКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭтаФорма, "ТаблицаПродукции", МассивСвязанныхТЧ);
		ТекущиеДанные.Упаковки = НСтр("ru = 'Без упаковок'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеПродукцииНаСервере(ИдентификаторСтроки)
	
	СтрокаТабличнойЧасти = Объект.ТаблицаПродукции.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьИзменениеПродукции(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцииПродукцияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Контрагент",  Объект.Контрагент);
	ПараметрыФормы.Вставить("Предприятие", Объект.Предприятие);
	ПараметрыФормы.Вставить("ЗарегистрированнаяПродукция", Истина);
	ОткрытьФорму("Справочник.Продукция.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцииПродукцияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Контрагент",  Объект.Контрагент);
	ПараметрыПодбора.Вставить("Предприятие", Объект.Предприятие);
	ПараметрыПодбора.Вставить("ЗарегистрированнаяПродукция");
	ОбработкаТабличнойЧастиКлиент.ПродукцияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, ПараметрыПодбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцииПродукцияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Контрагент",  Объект.Контрагент);
	ПараметрыПодбора.Вставить("Предприятие", Объект.Предприятие);
	ПараметрыПодбора.Вставить("ЗарегистрированнаяПродукция");
	ОбработкаТабличнойЧастиКлиент.ПродукцияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, ПараметрыПодбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцииСкоропортящаясяПродукцияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ПриИзмененииПризнакаСкоропортящейсяПродукции(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцииНомерПартииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ИспользоватьКонтрольПартийПриНезавершенномПроизводстве Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("Предприятие", Объект.Предприятие);
		ПараметрыФормы.Вставить("ИдентификаторТранзакции", Объект.ИдентификаторТранзакции);
		ПараметрыФормы.Вставить("ИспользоватьКонтрольПартийПриНезавершенномПроизводстве", ИспользоватьКонтрольПартийПриНезавершенномПроизводстве);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.НомераПроизводственныхПартий.ФормаВыбора", ПараметрыФормы, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцииНоменклатураУчетнойСистемыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУВСКлиент.НоменклатураУчетнойСистемыНачалоВыбора(Элемент, СтандартнаяОбработка, ТекущиеДанные.Продукция);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцииНоменклатураУчетнойСистемыАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУВСКлиент.НоменклатураУчетнойСистемыАвтоПодбор(ДанныеВыбора, Текст, СтандартнаяОбработка, ТекущиеДанные.Продукция);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцииНоменклатураУчетнойСистемыОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУВСКлиент.НоменклатураУчетнойСистемыОкончаниеВводаТекста(ДанныеВыбора, Текст, СтандартнаяОбработка, ТекущиеДанные.Продукция);
	
КонецПроцедуры

#КонецОбласти

#Область ТаблицаВСД

&НаКлиенте
Процедура ТаблицаВСДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьЗначение(, Элементы.ТаблицаВСД.ТекущиеДанные.ВСД);
КонецПроцедуры

#КонецОбласти

#Область ТаблицаРезультат

&НаКлиенте
Процедура ТаблицаРезультатВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьЗначение(, Элементы.ТаблицаРезультат.ТекущиеДанные.ЗаписьСкладскогоЖурнала);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов") Тогда
		МодульЗапретРедактированияРеквизитовОбъектовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЗапретРедактированияРеквизитовОбъектовКлиент");
		МодульЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор_ТаблицаСырье(Команда)
	
	АдресХраненияДанных   = ОбщегоНазначенияУВСВызовСервера.ПоместитьТаблицуФормыВоВременноеХранилище(Объект.ТаблицаСырье, Новый УникальныйИдентификатор);
	АдресХраненияУпаковок = ОбщегоНазначенияУВСВызовСервера.ПоместитьТаблицуФормыВоВременноеХранилище(Объект.СписокФизическихУпаковокСырье, Новый УникальныйИдентификатор);
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор продукции в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'производственную операцию'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресХраненияДанных"  , АдресХраненияДанных);
	ПараметрыФормы.Вставить("АдресХраненияУпаковок", АдресХраненияУпаковок);
	ПараметрыФормы.Вставить("Дата"                 , Объект.Дата);
	ПараметрыФормы.Вставить("Документ"             , Объект.Ссылка);
	ПараметрыФормы.Вставить("Организация"          , Объект.Организация);
	ПараметрыФормы.Вставить("Предприятие"          , Объект.Предприятие);
	ПараметрыФормы.Вставить("Заголовок"            , ПараметрЗаголовок);
	ПараметрыФормы.Вставить("КонтрольОстатков"     , Истина);
	
	Оповещение = Новый ОписаниеОповещения("Подбор_ТаблицаСырьеЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ПодборЗаписейСкладскогоЖурнала.Форма.ФормаПодбора", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор_ТаблицаСырьеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ОбработатьРезультатПодбораСырье(Результат);

КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатПодбораСырье(АдресХранения)

	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранения);
	Объект.СписокФизическихУпаковокСырье.Загрузить(СтруктураДанных.СписокФизическихУпаковок);
	
	ТаблицаДанных = СтруктураДанных.Продукция;
	
	Для Каждого ТекДанные Из ТаблицаДанных Цикл
		
		МассивСтрокТЧТаблицаСырье = Объект.ТаблицаСырье.НайтиСтроки(Новый Структура("GUIDСтроки", ТекДанные.GUIDСтроки));
		
		Если МассивСтрокТЧТаблицаСырье.Количество() = 0 Тогда
			
			СтрокаТЧТаблицаСырье = Объект.ТаблицаСырье.Добавить();
			
		Иначе
			
			СтрокаТЧТаблицаСырье = МассивСтрокТЧТаблицаСырье[0];
		
		КонецЕсли;
		
		Если ТекДанные.ЭтоСтрокаИзДокумента Тогда
			
			СтрокаТЧТаблицаСырье.Количество = ТекДанные.Количество;
			СтрокаТЧТаблицаСырье.Упаковки   = ТекДанные.Упаковки;
			
		Иначе
			
			ЗаполнитьЗначенияСвойств(СтрокаТЧТаблицаСырье, ТекДанные);
			СтрокаТЧТаблицаСырье.ТипПродукцииЖивыеЖивотные = ИнтеграцияВетисAPIВызовСервера.ПродукцияПринадлежитТипуЖивыхЖивотных(СтрокаТЧТаблицаСырье.ЗаписьСкладскогоЖурнала, Ложь);
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор_ТаблицаПродукции(Команда)
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор продукции в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'производственную операцию'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ"   , Объект.Ссылка);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Предприятие", Объект.Предприятие);
	ПараметрыФормы.Вставить("Контрагент" , Объект.Контрагент);
	ПараметрыФормы.Вставить("Заголовок"  , ПараметрЗаголовок);
	
	Оповещение = Новый ОписаниеОповещения("Подбор_ТаблицаПродукцииЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ПодборПродукции.Форма.ФормаПодбора", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор_ТаблицаПродукцииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат
	КонецЕсли;

	ОбработатьРезультатПодбораПродукции(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатПодбораПродукции(АдресХранения)
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранения);
	
	ТаблицаДанных   = СтруктураДанных.Продукция;
	ТаблицаУпаковок = СтруктураДанных.СписокФизическихУпаковок;
	
	Для Каждого ТекДанные Из ТаблицаДанных Цикл
		
		СтрокаТЧТаблицаПродукции = Объект.ТаблицаПродукции.Добавить();
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуПродукции(Объект,
			СтрокаТЧТаблицаПродукции,
			ТекДанные,
			ДанныеЗаполненияСтрок,
			ТаблицаУпаковок,
			"СписокФизическихУпаковокПродукция");

	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрупповоеЗаполнениеРеквизитов(Команда)
	
	ПараметрыКонтроляПартий = Новый Структура;
	ПараметрыКонтроляПартий.Вставить("Организация", Объект.Организация);
	ПараметрыКонтроляПартий.Вставить("Предприятие", Объект.Предприятие);
	ПараметрыКонтроляПартий.Вставить("ИдентификаторТранзакции", Объект.ИдентификаторТранзакции);
	ПараметрыКонтроляПартий.Вставить("ИспользоватьКонтрольПартийПриНезавершенномПроизводстве", ИспользоватьКонтрольПартийПриНезавершенномПроизводстве);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПараметрыКонтроляПартий", ПараметрыКонтроляПартий);
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗаполненияРеквизитов", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ПроизводственныеОперации.Форма.ФормаГрупповогоЗаполненияЗначений", ПараметрыФормы, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаполненияРеквизитов(ДанныеЗаполнения, ДополнительныеПараметры) Экспорт
	
	ОбработкаТабличнойЧастиКлиент.ГрупповоеЗаполнениеСтрокДокумента(ДанныеЗаполнения, Объект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьВидимостьЭлементовФормы()
	
	Элементы.ИдентификаторТранзакции.Видимость = Объект.НезавершенноеПроизводство;
	Элементы.ЗавершитьПроизводство.Видимость   = Объект.НезавершенноеПроизводство;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВспомогательныеРеквизиты()
	
	МассивЗаписей = Объект.ТаблицаСырье.Выгрузить(, "ЗаписьСкладскогоЖурнала");
	ПринадлежностьЗаписейЖивымЖивотным = ИнтеграцияВетисAPIВызовСервера.ПродукцияПринадлежитТипуЖивыхЖивотных(МассивЗаписей, Ложь);
	
	Для Каждого ТекЗапись Из Объект.ТаблицаСырье Цикл
		
		ТекЗапись.ТипПродукцииЖивыеЖивотные = ПринадлежностьЗаписейЖивымЖивотным.Получить(ТекЗапись.ЗаписьСкладскогоЖурнала);
		ТекЗапись.Упаковки = ОбщегоНазначенияУВСКлиентСервер.СформироватьПредставлениеСпискаУпаковок(Объект, ТекЗапись.GUIDСтроки, "СписокФизическихУпаковокСырье");
		
	КонецЦикла;
	
	МассивПродукции = Объект.ТаблицаПродукции.Выгрузить(, "Продукция");
	ПринадлежностьПродукцииЖивымЖивотным = ИнтеграцияВетисAPIВызовСервера.ПродукцияПринадлежитТипуЖивыхЖивотных(МассивПродукции);
	
	Для Каждого ТекПродукция Из Объект.ТаблицаПродукции Цикл
		
		ТекПродукция.ТипПродукцииЖивыеЖивотные  = ПринадлежностьПродукцииЖивымЖивотным.Получить(ТекПродукция.Продукция);
		ТекПродукция.ПредставлениеДатыВыработки = ИнтеграцияВетисAPIКлиентСервер.СформироватьПредставлениеДатыВыработки(ТекПродукция);
		ТекПродукция.ПредставлениеСрокаГодности = ИнтеграцияВетисAPIКлиентСервер.СформироватьПредставлениеСрокаГодности(ТекПродукция);
		ТекПродукция.Упаковки = ОбщегоНазначенияУВСКлиентСервер.СформироватьПредставлениеСпискаУпаковок(Объект, ТекПродукция.GUIDСтроки, "СписокФизическихУпаковокПродукция");
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.НезавершенноеПроизводство");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаПродукцииНомерПартии.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	ОбработкаТабличнойЧастиСервер.УстановитьУсловноеОформлениеВетЭкспертизы(ЭтаФорма, "ТаблицаПродукции");
	ОбработкаТабличнойЧастиСервер.УстановитьУсловноеОформлениеСкоропортящейсяПродукции(ЭтаФорма, "ТаблицаПродукции");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличныеЧасти()
	
	Объект.ТаблицаПродукции.Очистить();
	Объект.ТаблицаСырье.Очистить();
	
КонецПроцедуры

#КонецОбласти