#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("Ответственный") Тогда 
		ДополнительныеСвойства.Свойство("Ответственный", Ответственный);
	Иначе	
		Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ТаблицаРезультат.Очистить();
	ТаблицаВСД.Очистить();
	
	ЕстьПравоОбслуживания = ИнтеграцияВетисAPIСервер.ПроверитьОграниченияПользователя(Организация, Предприятие);
	
	Если НЕ ЕстьПравоОбслуживания Тогда
		Предприятие = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ИнтеграцияВетисAPIСервер.УстановитьСтатусПодготовлен(Ссылка);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	УспешноОбработана = Ложь;
	Если РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ТекущийСтатусДокумента(Ссылка) = Справочники.СтатусыЗаявок.УспешноОбработана Тогда
		УспешноОбработана = Истина;
	КонецЕсли;
	
	Запрос.Текст = Документы.ПроизводственныеОперации.ПолучитьТекстЗапросаДляПродукции(УспешноОбработана);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Движения.ДвижениеПродукции.Записывать = Истина;
	Движения.ДвижениеПродукции.Очистить();
	Движения.ДвижениеПродукции.БлокироватьДляИзменения = Истина;
	Движения.ДвижениеПродукции.Загрузить(Запрос.Выполнить().Выгрузить());
	Движения.Записать();

	// проверяем остатки 
	Если УспешноОбработана Тогда
		Возврат;
	КонецЕсли;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокТЧ.НомерСтроки КАК НомерСтроки,
		|	ДокТЧ.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
		|	ДокТЧ.ЗаписьСкладскогоЖурнала.Представление КАК ЗаписьСкладскогоЖурналаПредставление,
		|	ДокТЧ.Предприятие.Представление КАК Предприятие,
		|	ЕСТЬNULL(ДокТЧ.ЗаписьСкладскогоЖурнала.ЕдиницаИзмерения.Представление, """") КАК ЕдиницаИзмерения,
		|	-ДвижениеПродукцииОстатки.КоличествоОстаток КАК КоличествоОстаток,
		|	ДокТЧ.Организация.Представление КАК Организация
		|ИЗ
		|	ДокТЧ КАК ДокТЧ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДвижениеПродукции.Остатки(
		|				&ТочкаИтогов,
		|				(Организация, Предприятие, ЗаписьСкладскогоЖурнала) В
		|					(ВЫБРАТЬ
		|						ДокТЧ.Организация,
		|						ДокТЧ.Предприятие,
		|						ДокТЧ.ЗаписьСкладскогоЖурнала
		|					ИЗ
		|						ДокТЧ КАК ДокТЧ)) КАК ДвижениеПродукцииОстатки
		|		ПО ДокТЧ.ЗаписьСкладскогоЖурнала = ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала
		|			И ДокТЧ.Предприятие = ДвижениеПродукцииОстатки.Предприятие
		|ГДЕ
		|	ДвижениеПродукцииОстатки.КоличествоОстаток < 0";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТочкаИтогов", Новый Граница(МоментВремени(), ВидГраницы.Включая));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ШаблонСообщения = НСтр("ru = 'В строке № %1 не достаточно сырья ""%2"".
					|По организации ""%3"" и предприятию ""%4"" не хватает %5 ""%6""'");
		
		ПолеКоличество = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ТаблицаСырье", Выборка.НомерСтроки, "Количество");
		
		ШаблонСообщения = СтрШаблон(
							ШаблонСообщения,
							Выборка.НомерСтроки,
							Выборка.ЗаписьСкладскогоЖурналаПредставление,
							Выборка.Организация,
							Выборка.Предприятие,
							Выборка.КоличествоОстаток,
							Выборка.ЕдиницаИзмерения);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							ШаблонСообщения,
							ЭтотОбъект,
							ПолеКоличество,
							,
							Отказ);
		
	КонецЦикла;
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ИнтеграцияВетисAPIСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ);
	
	Если НезавершенноеПроизводство Тогда
		ПроверяемыеРеквизиты.Добавить("ИдентификаторТранзакции");
	КонецЕсли;
	
	Если ТаблицаСырье.Количество() = 0 И ТаблицаПродукции.Количество() = 0  И ЗавершитьПроизводство = Ложь Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								НСтр("ru = 'Пустая производственная операция. Должны быть указаны данные по сырью или продукции.'"),
								Ссылка,
								,
								,
								Отказ);
	КонецЕсли;
	
	ПроверитьКорректностьЗаполненияСырья(Отказ);
	ПроверитьКорректностьЗаполненияВырабатываемойПродукции(Отказ);
	ПроверитьКорректностьЗависимостиВырабатываемойПродукцииОтСырья(Отказ);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольПартийПриНезавершенномПроизводстве") Тогда
		КонтрольПартийНезавершенногоПроизводства(Отказ);
	КонецЕсли;
	КонтрольНезавершенногоПроизводства(Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьКорректностьЗаполненияСырья(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаСырья.НомерСтроки КАК НомерСтроки,
		|	ВЫРАЗИТЬ(ТаблицаСырья.ЗаписьСкладскогоЖурнала КАК Справочник.СвойстваЗаписейСкладскогоЖурнала) КАК ЗаписьСкладскогоЖурнала
		|ПОМЕСТИТЬ ВТ_ТаблицаСырья
		|ИЗ
		|	&ТаблицаСырья КАК ТаблицаСырья
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаСырья.НомерСтроки КАК НомерСтроки,
		|	ВТ_ТаблицаСырья.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
		|	ВТ_ТаблицаСырья.ЗаписьСкладскогоЖурнала.НеИспользуется КАК ЗаписьСкладскогоЖурналаНеИспользуется,
		|	ВерсииЗаписейСкладскогоЖурнала.СтатусВерсииЗаписиСкладскогоЖурнала КАК СтатусВерсииЗаписиСкладскогоЖурнала
		|ИЗ
		|	ВТ_ТаблицаСырья КАК ВТ_ТаблицаСырья
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВерсииЗаписейСкладскогоЖурнала КАК ВерсииЗаписейСкладскогоЖурнала
		|		ПО ВТ_ТаблицаСырья.ЗаписьСкладскогоЖурнала = ВерсииЗаписейСкладскогоЖурнала.ЗаписьСкладскогоЖурнала
		|			И ВТ_ТаблицаСырья.ЗаписьСкладскогоЖурнала.GUID_Меркурий = ВерсииЗаписейСкладскогоЖурнала.GUID_Меркурий";
	
	Запрос.УстановитьПараметр("ТаблицаСырья", ТаблицаСырье.Выгрузить(, "НомерСтроки, ЗаписьСкладскогоЖурнала"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ИнтеграцияВетисAPIСервер.ПроверитьКорректностьСвойствЗаписиСкладскогоЖурнала(ЭтотОбъект, Выборка, "ТаблицаСырье", "Сырье", Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьКорректностьЗаполненияВырабатываемойПродукции(Отказ)
	
	МассивИдентификаторов = ИнтеграцияВетисAPIСлужебныйПовтИсп.ПродукцияИсключениеИзТипаЖивыеЖивотные();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыПродукции.Ссылка КАК ВидПродукции
		|ПОМЕСТИТЬ ВТ_ИсключенияИзЖивыхЖивотных
		|ИЗ
		|	Справочник.ВидыПродукции КАК ВидыПродукции
		|ГДЕ
		|	ВидыПродукции.GUID_Меркурий В(&МассивИдентификаторов)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидПродукции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПродукция.НомерСтроки КАК НомерСтроки,
		|	ВЫРАЗИТЬ(ТаблицаПродукция.Продукция КАК Справочник.Продукция) КАК Продукция,
		|	ТаблицаПродукция.ТипПродукции КАК ТипПродукции,
		|	ТаблицаПродукция.ВидПродукции КАК ВидПродукции,
		|	ТаблицаПродукция.СкоропортящаясяПродукция КАК СкоропортящаясяПродукция,
		|	ТаблицаПродукция.ФорматДатыВыработки КАК ФорматДатыВыработки,
		|	ТаблицаПродукция.ДатаВыработкиНачало КАК ДатаВыработкиНачало,
		|	ТаблицаПродукция.ДатаВыработкиОкончание КАК ДатаВыработкиОкончание,
		|	ТаблицаПродукция.ФорматСрокаГодности КАК ФорматСрокаГодности,
		|	ТаблицаПродукция.ДатаОкончанияСрокаГодностиНачало КАК ДатаОкончанияСрокаГодностиНачало,
		|	ТаблицаПродукция.ДатаОкончанияСрокаГодностиОкончание КАК ДатаОкончанияСрокаГодностиОкончание,
		|	ТаблицаПродукция.ПроводиласьВетсанэкспертиза КАК ПроводиласьВетсанэкспертиза,
		|	ТаблицаПродукция.НомерПартии КАК НомерПартии
		|ПОМЕСТИТЬ ВТ_ТаблицаПродукция
		|ИЗ
		|	&ТаблицаПродукция КАК ТаблицаПродукция
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПроизводственныеОперацииТаблицаПродукции.НомерСтроки КАК НомерСтроки,
		|	ПроизводственныеОперацииТаблицаПродукции.Продукция КАК Продукция,
		|	ПроизводственныеОперацииТаблицаПродукции.Продукция.GUID_Меркурий КАК ПродукцияGUID,
		|	ПроизводственныеОперацииТаблицаПродукции.СкоропортящаясяПродукция КАК СкоропортящаясяПродукция,
		|	ПроизводственныеОперацииТаблицаПродукции.ФорматДатыВыработки КАК ФорматДатыВыработки,
		|	ПроизводственныеОперацииТаблицаПродукции.ДатаВыработкиНачало КАК ДатаВыработкиНачало,
		|	ПроизводственныеОперацииТаблицаПродукции.ДатаВыработкиОкончание КАК ДатаВыработкиОкончание,
		|	ПроизводственныеОперацииТаблицаПродукции.ФорматСрокаГодности КАК ФорматСрокаГодности,
		|	ПроизводственныеОперацииТаблицаПродукции.ДатаОкончанияСрокаГодностиНачало КАК ДатаОкончанияСрокаГодностиНачало,
		|	ПроизводственныеОперацииТаблицаПродукции.ДатаОкончанияСрокаГодностиОкончание КАК ДатаОкончанияСрокаГодностиОкончание,
		|	ПроизводственныеОперацииТаблицаПродукции.ПроводиласьВетсанэкспертиза КАК ПроводиласьВетсанэкспертиза,
		|	ПроизводственныеОперацииТаблицаПродукции.НомерПартии КАК НомерПартии,
		|	ВЫБОР
		|		КОГДА ПроизводственныеОперацииТаблицаПродукции.ТипПродукции = ЗНАЧЕНИЕ(Справочник.ТипыПродукции.ЖивыеЖивотные)
		|				И НЕ ПроизводственныеОперацииТаблицаПродукции.ВидПродукции В
		|						(ВЫБРАТЬ
		|							ВТ_ИсключенияИзЖивыхЖивотных.ВидПродукции КАК ВидПродукции
		|						ИЗ
		|							ВТ_ИсключенияИзЖивыхЖивотных КАК ВТ_ИсключенияИзЖивыхЖивотных)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоЖивоеЖивотное
		|ИЗ
		|	ВТ_ТаблицаПродукция КАК ПроизводственныеОперацииТаблицаПродукции";
	
	Запрос.УстановитьПараметр("ТаблицаПродукция", ТаблицаПродукции.Выгрузить());
	Запрос.УстановитьПараметр("МассивИдентификаторов", МассивИдентификаторов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ШаблонСообщения = НСтр("ru='В строке %1 списка ""Продукция"" ошибка в данных: ""%2"".'");
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.ПродукцияGUID) Тогда
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ТаблицаПродукции", Выборка.НомерСтроки, "Продукция");
			
			ТекстСообщения = СтрШаблон(
					ШаблонСообщения,
					Выборка.НомерСтроки,
					"Указана не зарегистрированная продукция");
					
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
			
		КонецЕсли;
		
		Если Ссылка.НезавершенноеПроизводство И Не ЗначениеЗаполнено(Выборка.НомерПартии) Тогда
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ТаблицаПродукции", Выборка.НомерСтроки, "НомерПартии");
			
			ТекстСообщения = СтрШаблон(
					ШаблонСообщения,
					Выборка.НомерСтроки,
					"Не заполнена колонка ""Номер партии""");
					
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
			
		КонецЕсли;
		
		Если НЕ Выборка.ЭтоЖивоеЖивотное И НЕ ЗначениеЗаполнено(Выборка.ПроводиласьВетсанэкспертиза) Тогда
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ТаблицаПродукции", Выборка.НомерСтроки, "ПроводиласьВетсанэкспертиза");
			
			ТекстСообщения = СтрШаблон(
					ШаблонСообщения,
					Выборка.НомерСтроки,
					"Не заполнена колонка ""Проводилась ветсанэкспертиза""");
					
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
		
		КонецЕсли;
		
		ИнтеграцияВетисAPIСервер.ПроверитьКорректностьЗаполненияДат(ЭтотОбъект, Выборка, "ТаблицаПродукции", "Продукция", Отказ);
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьКорректностьЗависимостиВырабатываемойПродукцииОтСырья(Отказ)
	
	// Проверка имеет смысл только в случае производства продукции из сырья
	Если ТаблицаСырье.Количество() = 0 Или ТаблицаПродукции.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПродукция.НомерСтроки КАК НомерСтроки,
		|	ТаблицаПродукция.Продукция КАК Продукция,
		|	ТаблицаПродукция.ТипПродукции КАК ТипПродукции
		|ПОМЕСТИТЬ ВТ_ТаблицаПродукция
		|ИЗ
		|	&ТаблицаПродукция КАК ТаблицаПродукция
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаСырье.ЗаписьСкладскогоЖурнала КАК Справочник.СвойстваЗаписейСкладскогоЖурнала) КАК ЗаписьСкладскогоЖурнала
		|ПОМЕСТИТЬ ВТ_ТаблицаСырье
		|ИЗ
		|	&ТаблицаСырье КАК ТаблицаСырье
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПроизводственныеОперацииТаблицаСырье.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
		|	ПроизводственныеОперацииТаблицаСырье.ЗаписьСкладскогоЖурнала.ТипПродукции КАК ТипПродукции,
		|	ПроизводственныеОперацииТаблицаСырье.ЗаписьСкладскогоЖурнала.ВидПродукции КАК ВидПродукции
		|ПОМЕСТИТЬ ВТ_Сырье
		|ИЗ
		|	ВТ_ТаблицаСырье КАК ПроизводственныеОперацииТаблицаСырье
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Сырье.ТипПродукции КАК ЗаписьСкладскогоЖурналаТипПродукции
		|ПОМЕСТИТЬ ВТ_ТипыИспользуемогоСырья
		|ИЗ
		|	ВТ_Сырье КАК ВТ_Сырье
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Сырье.ТипПродукции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ВТ_Сырье.ВидПродукции = &КишечноеСырье
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ЕстьКишечноеСырье
		|ПОМЕСТИТЬ ВТ_КишечноеСырье
		|ИЗ
		|	ВТ_Сырье КАК ВТ_Сырье
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗависимостиВырабатываемойПродукцииОтСырья.ТипПродукции КАК ТипПродукции
		|ПОМЕСТИТЬ РазрешенныеТипыПродукции
		|ИЗ
		|	РегистрСведений.ЗависимостиВырабатываемойПродукцииОтСырья КАК ЗависимостиВырабатываемойПродукцииОтСырья
		|ГДЕ
		|	ЗависимостиВырабатываемойПродукцииОтСырья.ТипСырья В
		|			(ВЫБРАТЬ
		|				ВТ_ТипыИспользуемогоСырья.ЗаписьСкладскогоЖурналаТипПродукции
		|			ИЗ
		|				ВТ_ТипыИспользуемогоСырья КАК ВТ_ТипыИспользуемогоСырья)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПроизводственныеОперацииТаблицаПродукции.НомерСтроки КАК НомерСтроки,
		|	ПроизводственныеОперацииТаблицаПродукции.НомерСтроки - 1 КАК ИндексСтроки,
		|	ПРЕДСТАВЛЕНИЕ(ПроизводственныеОперацииТаблицаПродукции.Продукция) КАК Продукция,
		|	ВТ_КишечноеСырье.ЕстьКишечноеСырье КАК ЕстьКишечноеСырье
		|ИЗ
		|	ВТ_ТаблицаПродукция КАК ПроизводственныеОперацииТаблицаПродукции,
		|	ВТ_КишечноеСырье КАК ВТ_КишечноеСырье
		|ГДЕ
		|	НЕ ПроизводственныеОперацииТаблицаПродукции.ТипПродукции В
		|				(ВЫБРАТЬ
		|					РазрешенныеТипыПродукции.ТипПродукции
		|				ИЗ
		|					РазрешенныеТипыПродукции КАК РазрешенныеТипыПродукции)
		|	И НЕ ВЫБОР
		|				КОГДА ПроизводственныеОперацииТаблицаПродукции.ТипПродукции = ЗНАЧЕНИЕ(Справочник.ТипыПродукции.ПищевыеПродукты)
		|					ТОГДА ВЫБОР
		|							КОГДА ВТ_КишечноеСырье.ЕстьКишечноеСырье
		|								ТОГДА ИСТИНА
		|							ИНАЧЕ ЛОЖЬ
		|						КОНЕЦ
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ";
		
	
	// При производсте "пищевых продуктов" из "непищевых продуктов и другое" проверка идет не по типу, а по виду продукции
	// Разрешенный вид продукции "кишечное сырье", поэтому отдельно добавим его в запрос
	КишечноеСырье = Справочники.ВидыПродукции.НайтиПоРеквизиту("GUID_Меркурий", "3d9d2186-9fc7-c7d0-e5f1-f4c75f5488e5");
	
	Запрос.УстановитьПараметр("КишечноеСырье", КишечноеСырье);
	Запрос.УстановитьПараметр("ТаблицаПродукция", ТаблицаПродукции.Выгрузить(,"НомерСтроки, Продукция, ТипПродукции"));
	Запрос.УстановитьПараметр("ТаблицаСырье", ТаблицаСырье.Выгрузить(,"ЗаписьСкладскогоЖурнала"));
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = НСтр("ru = 'В строке %1 указана продукция %2 для которой не указано сырье, из которого может быть выработана данная продукция.'");
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Путь = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ТаблицаПродукции", Выборка.НомерСтроки, "Продукция");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Выборка.НомерСтроки, Выборка.Продукция),
								Ссылка,
								Путь,
								,
								Отказ);
	КонецЦикла;
	
КонецПроцедуры

Процедура КонтрольПартийНезавершенногоПроизводства(Отказ)
	
	Если Не НезавершенноеПроизводство Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроизводственныеОперацииТаблицаПродукции.Ссылка.Организация,
		|	ПроизводственныеОперацииТаблицаПродукции.Ссылка.Предприятие,
		|	ПроизводственныеОперацииТаблицаПродукции.Ссылка.ИдентификаторТранзакции,
		|	ПроизводственныеОперацииТаблицаПродукции.НомерСтроки,
		|	ПроизводственныеОперацииТаблицаПродукции.НомерПартии
		|ПОМЕСТИТЬ ДанныеПоНомерамПартий
		|ИЗ
		|	Документ.ПроизводственныеОперации.ТаблицаПродукции КАК ПроизводственныеОперацииТаблицаПродукции
		|ГДЕ
		|	ПроизводственныеОперацииТаблицаПродукции.Ссылка = &Ссылка
		|	И ПроизводственныеОперацииТаблицаПродукции.НомерПартии <> ЗНАЧЕНИЕ(Справочник.НомераПроизводственныхПартий.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПоНомерамПартий.НомерСтроки КАК НомерСтроки,
		|	ДанныеПоНомерамПартий.НомерСтроки - 1 КАК ИндексСтроки,
		|	ДанныеПоНомерамПартий.НомерПартии,
		|	ПроизводственныеПартииСрезПоследних.ИдентификаторТранзакции,
		|	ПроизводственныеПартииСрезПоследних.ЗавершеноПроизводство
		|ИЗ
		|	ДанныеПоНомерамПартий КАК ДанныеПоНомерамПартий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПроизводственныеПартии.СрезПоследних(
		|				,
		|				НЕ ИдентификаторТранзакции В
		|								(ВЫБРАТЬ
		|									ДанныеПоНомерамПартий.ИдентификаторТранзакции
		|								ИЗ
		|									ДанныеПоНомерамПартий КАК ДанныеПоНомерамПартий)
		|						И (Организация, Предприятие, НомерПартии) В
		|							(ВЫБРАТЬ
		|								ДанныеПоНомерамПартий.Организация,
		|								ДанныеПоНомерамПартий.Предприятие,
		|								ДанныеПоНомерамПартий.НомерПартии
		|							ИЗ
		|								ДанныеПоНомерамПартий КАК ДанныеПоНомерамПартий)
		|					ИЛИ ИдентификаторТранзакции В
		|							(ВЫБРАТЬ
		|								ДанныеПоНомерамПартий.ИдентификаторТранзакции
		|							ИЗ
		|								ДанныеПоНомерамПартий КАК ДанныеПоНомерамПартий)
		|						И ЗавершеноПроизводство) КАК ПроизводственныеПартииСрезПоследних
		|		ПО ДанныеПоНомерамПартий.НомерПартии = ПроизводственныеПартииСрезПоследних.НомерПартии
		|			И ДанныеПоНомерамПартий.Предприятие = ПроизводственныеПартииСрезПоследних.Предприятие
		|			И ДанныеПоНомерамПартий.Организация = ПроизводственныеПартииСрезПоследних.Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = НСтр("ru = 'В строке %1 указан номер партии ""%2"", %3. Идентификатор транзакции: ""%4"".'");
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЗавершеноПроизводство Тогда
			ОписаниеОшибки = "по которой производство завершено";
		Иначе
			ОписаниеОшибки = "относящийся к иной транзакции";
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Выборка.НомерСтроки, Выборка.НомерПартии, ОписаниеОшибки, Выборка.ИдентификаторТранзакции),
								Ссылка,
								"ТаблицаПродукции[" + Выборка.ИндексСтроки + "].НомерПартии"
								,
								,
								Отказ);
		
	КонецЦикла;
		
КонецПроцедуры

Процедура КонтрольНезавершенногоПроизводства(Отказ)
		
	Если Не ЗавершитьПроизводство Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПроизводственныеОперации.Ссылка,
		|	ПроизводственныеОперации.Представление
		|ИЗ
		|	Документ.ПроизводственныеОперации КАК ПроизводственныеОперации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.СрезПоследних(, Статус = ЗНАЧЕНИЕ(Справочник.СтатусыЗаявок.УспешноОбработана)) КАК ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних
		|		ПО (ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.ДокументСсылка = ПроизводственныеОперации.Ссылка)
		|ГДЕ
		|	НЕ ПроизводственныеОперации.ПометкаУдаления
		|	И ПроизводственныеОперации.НезавершенноеПроизводство
		|	И ПроизводственныеОперации.ИдентификаторТранзакции = &ИдентификаторТранзакции
		|	И ПроизводственныеОперации.Организация = &Организация
		|	И ПроизводственныеОперации.Предприятие = &Предприятие
		|	И ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.ДокументСсылка ЕСТЬ NULL
		|	И ПроизводственныеОперации.Ссылка <> &Ссылка";
	
	Запрос.УстановитьПараметр("Организация",             Организация);
	Запрос.УстановитьПараметр("Предприятие",             Предприятие);
	Запрос.УстановитьПараметр("Ссылка",         	     Ссылка);
	Запрос.УстановитьПараметр("ИдентификаторТранзакции", ИдентификаторТранзакции);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Невозможно закрыть производство, т.к. следующие документы имеют неподтвержденный статус:'"));
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								Выборка.Представление,
								Выборка.Ссылка,
								,
								,
								Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли