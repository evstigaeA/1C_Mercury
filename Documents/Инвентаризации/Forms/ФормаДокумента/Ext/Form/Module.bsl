#Область ОписаниеПеременных

// СтандартныеПодсистемы.ОценкаПроизводительности
&НаКлиенте
Перем ИдентификаторЗамераПроведение, ИдентификаторЗамераПроведениеНеНужнаРегистрацияОшибки;
// Конец СтандартныеПодсистемы.ОценкаПроизводительности

#КонецОбласти

#Область ОбработчикиСобытийФорм

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ИспользоватьОбменЧерезУниверсальныйФормат = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЧерезУниверсальныйФормат");
	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	ОбщегоНазначенияУВСКлиентСервер.ДополнительныеДействияСФормой(ЭтаФорма);
	
	ПриЧтенииСозданииНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ДанныеЗаполненияСтрок = ЗаполнениеРеквизитовОбъектов.ПолучитьЗначенияРеквизитовТабличнойЧасти(Объект, "ТаблицаНовойПродукции");
	
	ЗаполнитьВспомогательныеРеквизиты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ИдентификаторЗамераПроведение = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ПроведениеДокументаОшибка");
		ОценкаПроизводительностиКлиент.УстановитьПризнакОшибкиЗамера(ИдентификаторЗамераПроведение, Истина);
				
		ИдентификаторЗамераПроведениеНеНужнаРегистрацияОшибки = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(ИдентификаторЗамераПроведение, "ПроведениеДокумента");
		ОценкаПроизводительностиКлиент.УстановитьПризнакОшибкиЗамера(ИдентификаторЗамераПроведение, Ложь);
		
		ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(ИдентификаторЗамераПроведениеНеНужнаРегистрацияОшибки, "ПроведениеДокументаНеНужнаРегистрацияОшибки");
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	ОбщегоНазначенияУВСКлиентСервер.ДополнительныеДействияСФормой(ЭтаФорма);
	Оповестить("ИзменениеСтатусаЗаявкиНаОформлениеОперации");
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ЗаполнитьВспомогательныеРеквизиты();
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов.
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов") Тогда
		МодульЗапретРедактированияРеквизитовОбъектов = ОбщегоНазначения.ОбщийМодуль("ЗапретРедактированияРеквизитовОбъектов");
		МодульЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияУВСКлиент.ОповеститьДокументы(ИмяСобытия, Параметр, Источник, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусНажатие(Элемент, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.ОткрытьФормуЖурналаСостоянияЗаявок(ЭтотОбъект, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_Органиазация

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Объект.Контрагент = ОбщегоНазначенияУВСВызовСервера.КонтрагентПоОрганизации(Объект.Организация);
	ОчиститьТабличныеЧасти();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_Предприятие

&НаКлиенте
Процедура ПредприятиеПриИзменении(Элемент)
	
	ОбщегоНазначенияУВСКлиент.ПредприятиеПриИзменении(Объект.Контрагент, Объект.Предприятие);
	ОчиститьТабличныеЧасти();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.ПредприятиеНачалоВыбора(Элемент, СтандартнаяОбработка, Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.ПредприятиеАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.ПредприятиеОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличнойЧасти

#Область ТаблицаПродукции

&НаКлиенте
Процедура ТаблицаПродукцииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ТаблицаПродукцииУпаковки" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Не ЭтаФорма.ТолькоПросмотр Тогда
			Если ПустаяСтрока(ТекущиеДанные.GUIDСтроки) Тогда
				ТекущиеДанные.GUIDСтроки = Строка(Новый УникальныйИдентификатор());
			КонецЕсли;
		КонецЕсли;
		GUIDСтроки = ТекущиеДанные.GUIDСтроки;
		
		Если ТекущиеДанные.ТипПродукцииЖивыеЖивотные Тогда
			Возврат;
		КонецЕсли;
		
		ОбщегоНазначенияУВСКлиент.ПродукцияУпаковкиВыбор(ЭтотОбъект, ТекущиеДанные, GUIDСтроки, "СписокФизическихУпаковокПродукция");
		
	ИначеЕсли Поле.Имя = "ТаблицаПродукцииЗаписьСкладскогоЖурнала" Тогда
		
		ПоказатьЗначение(, ТекущиеДанные.ЗаписьСкладскогоЖурнала);

	ИначеЕсли Поле.Имя = "ТаблицаПродукцииПредставлениеДатыВыработки" Тогда
		
		ИнтеграцияВетисAPIКлиент.ОткрытьФормуЗаданияДат(ЭтотОбъект, ТекущиеДанные, Элемент, Истина);
		
	ИначеЕсли Поле.Имя = "ТаблицаПродукцииПредставлениеСрокаГодности" Тогда
		
		ИнтеграцияВетисAPIКлиент.ОткрытьФормуЗаданияДат(ЭтотОбъект, ТекущиеДанные, Элемент, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцииПередУдалением(Элемент, Отказ)
	
	МассивСвязанныхТЧ = Новый Массив;
	МассивСвязанныхТЧ.Добавить("СписокФизическихУпаковокПродукция");

	ОбработкаТабличнойЧастиКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭтаФорма, "ТаблицаПродукции", МассивСвязанныхТЧ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцииПродукцияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаПродукции.ТекущиеДанные;
	
	СтруктураСвойств = ОбщегоНазначенияУВСВызовСервера.ПолучитьСвойстваПродукции(ТекущиеДанные.Продукция);
	
	ТекущиеДанные.ПодвидПродукции = СтруктураСвойств.ПодвидПродукции;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцииПродукцияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ТаблицаПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидПродукции", ТекущиеДанные.ВидПродукции);
	
	ОткрытьФорму("Справочник.Продукция.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцииПродукцияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаПродукции.ТекущиеДанные;
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ВидПродукции", ТекущиеДанные.ВидПродукции);
	ОбработкаТабличнойЧастиКлиент.ПродукцияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, ПараметрыПодбора);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцииПродукцияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаПродукции.ТекущиеДанные;

	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ВидПродукции", ТекущиеДанные.ВидПродукции);
	ОбработкаТабличнойЧастиКлиент.ПродукцияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, ПараметрыПодбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцииСкоропортящаясяПродукцияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ПриИзмененииПризнакаСкоропортящейсяПродукции(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцииКоличествоФактПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаПродукции.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.КоличествоОтклонение = ТекущиеДанные.Количество - ТекущиеДанные.КоличествоУчет;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцииНоменклатураУчетнойСистемыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУВСКлиент.НоменклатураУчетнойСистемыНачалоВыбора(Элемент, СтандартнаяОбработка, ТекущиеДанные.Продукция);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцииНоменклатураУчетнойСистемыАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУВСКлиент.НоменклатураУчетнойСистемыАвтоПодбор(ДанныеВыбора, Текст, СтандартнаяОбработка, ТекущиеДанные.Продукция);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцииНоменклатураУчетнойСистемыОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУВСКлиент.НоменклатураУчетнойСистемыОкончаниеВводаТекста(ДанныеВыбора, Текст, СтандартнаяОбработка, ТекущиеДанные.Продукция);
	
КонецПроцедуры

#КонецОбласти

#Область ТаблицаНовойПродукции

&НаКлиенте
Процедура ТаблицаНовойПродукцииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаНовойПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтаФорма.ТолькоПросмотр Тогда
		Если ПустаяСтрока(ТекущиеДанные.GUIDСтроки) Тогда
			ТекущиеДанные.GUIDСтроки = Строка(Новый УникальныйИдентификатор());
		КонецЕсли;
	КонецЕсли;
		
	Если Поле.Имя = "ТаблицаНовойПродукцииУпаковки" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		GUIDСтроки = ТекущиеДанные.GUIDСтроки;
		
		Если ТекущиеДанные.ТипПродукцииЖивыеЖивотные Тогда
			Возврат;
		КонецЕсли;
		
		ОбщегоНазначенияУВСКлиент.ПродукцияУпаковкиВыбор(ЭтотОбъект, ТекущиеДанные, GUIDСтроки, "СписокФизическихУпаковокНоваяПродукция");
		
	ИначеЕсли Поле.Имя = "ТаблицаНовойПродукцииПроизводитель" Тогда
		
		GUIDСтроки = ТекущиеДанные.GUIDСтроки;
		
		АдресХранения = АдресХраненияТаблицыПроизводителей(GUIDСтроки);
		
		ПараметрЗаголовок = НСтр("ru = 'Подбор производителей в %Документ%'");
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
		Иначе
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'инвентаризацию'"));
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("АдресХранения"         , АдресХранения);
		ПараметрыФормы.Вставить("ТолькоПросмотр"        , ЭтаФорма.ТолькоПросмотр);
		ПараметрыФормы.Вставить("Заголовок"             , ПараметрЗаголовок);
		ПараметрыФормы.Вставить("СтранаПроисхождения"   , ТекущиеДанные.СтранаПроисхождения);
		ПараметрыФормы.Вставить("ПродукцияПроизводителя", ТекущиеДанные.ПродукцияПроизводителя);
		
		Описание = Новый ОписаниеОповещения("ТаблицаНовойПродукцииПроизводительВыборЗавершение", ЭтотОбъект, GUIDСтроки);
		
		ОткрытьФорму("ОбщаяФорма.ФормаПодбораПроизводителей", ПараметрыФормы,,,,, Описание, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Поле.Имя = "ТаблицаНовойПродукцииПредставлениеДатыВыработки" Тогда
		
		ИнтеграцияВетисAPIКлиент.ОткрытьФормуЗаданияДат(ЭтотОбъект, ТекущиеДанные, Элемент, Истина);
		
	ИначеЕсли Поле.Имя = "ТаблицаНовойПродукцииПредставлениеСрокаГодности" Тогда
		
		ИнтеграцияВетисAPIКлиент.ОткрытьФормуЗаданияДат(ЭтотОбъект, ТекущиеДанные, Элемент, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНовойПродукцииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.ТаблицаНовойПродукции.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если НоваяСтрока Тогда
		GUIDКопируемойСтроки     = ТекущаяСтрока.GUIDСтроки;
		ТекущаяСтрока.GUIDСтроки = Строка(Новый УникальныйИдентификатор());
		Если Копирование Тогда
			// Необходимо скопировать данные в подчиненных табличных частях
			МассивСвязанныхТЧ = Новый Массив;
			МассивСвязанныхТЧ.Добавить("СписокФизическихУпаковокНоваяПродукция");
			МассивСвязанныхТЧ.Добавить("ТаблицаПроизводителей");
			ОбработкаТабличнойЧастиКлиент.СкопироватьПодчиненныеТабличныеЧасти(ЭтаФорма, ТекущаяСтрока.GUIDСтроки, GUIDКопируемойСтроки, МассивСвязанныхТЧ);
		Иначе
			ТекущаяСтрока.Упаковки = НСтр("ru = 'Без упаковок'");
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ДанныеЗаполненияСтрок);
			ТекущаяСтрока.ПредставлениеДатыВыработки = ИнтеграцияВетисAPIКлиентСервер.СформироватьПредставлениеДатыВыработки(ТекущаяСтрока);
			ТекущаяСтрока.ПредставлениеСрокаГодности = ИнтеграцияВетисAPIКлиентСервер.СформироватьПредставлениеСрокаГодности(ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНовойПродукцииПередУдалением(Элемент, Отказ)
	
	МассивСвязанныхТЧ = Новый Массив;
	МассивСвязанныхТЧ.Добавить("СписокФизическихУпаковокНоваяПродукция");
	МассивСвязанныхТЧ.Добавить("ТаблицаПроизводителей");

	ОбработкаТабличнойЧастиКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭтаФорма, "ТаблицаНовойПродукции", МассивСвязанныхТЧ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНовойПродукцииСкоропортящаясяПродукцияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаНовойПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ПриИзмененииПризнакаСкоропортящейсяПродукции(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНовойПродукцииПродукцияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаНовойПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеПродукцииНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	
	МассивСвязанныхТЧ = Новый Массив;
	МассивСвязанныхТЧ.Добавить("СписокФизическихУпаковокПродукция");
	
	Если ТекущиеДанные.ТипПродукцииЖивыеЖивотные Тогда
		ОбработкаТабличнойЧастиКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭтаФорма, "ТаблицаНовойПродукции", МассивСвязанныхТЧ);
		ТекущиеДанные.Упаковки = НСтр("ru = 'Без упаковок'");
	КонецЕсли;
	
	Если ИспользоватьОбменЧерезУниверсальныйФормат Тогда
			
		ТекущиеДанные.НоменклатураУчетнойСистемы = ПолучитьНоменклатуруУчетнойСистемы(ТекущиеДанные.Продукция);
			
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеПродукцииНаСервере(ИдентификаторСтроки)
	
	СтрокаТабличнойЧасти = Объект.ТаблицаНовойПродукции.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьИзменениеПродукции(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНоменклатуруУчетнойСистемы(Продукция)
	
	Возврат Справочники.НоменклатураУчетнойСистемы.ПолучитьНоменклатуруУчетнойСитсемы(Продукция);
	
КонецФункции

&НаКлиенте
Процедура ТаблицаНовойПродукцииПроизводительВыборЗавершение(ТаблицаПроизводителей, ДополнительныеПараметры) Экспорт
	
	Если ТаблицаПроизводителей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = Объект.ТаблицаПроизводителей.НайтиСтроки(Новый Структура("GUIDСтроки", ДополнительныеПараметры));
	Для Каждого ТекСтрока Из НайденныеСтроки Цикл
		Объект.ТаблицаПроизводителей.Удалить(ТекСтрока);
	КонецЦикла;
	
	МассивПредприятий = Новый Массив;
	Для Каждого ТекПроизводитель Из ТаблицаПроизводителей Цикл
		НоваяСтрока = Объект.ТаблицаПроизводителей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекПроизводитель);
		НоваяСтрока.GUIDСтроки = ДополнительныеПараметры;
		МассивПредприятий.Добавить(ТекПроизводитель.Производитель);
	КонецЦикла;
	
	ПроизводителиСтрока = СтрСоединить(МассивПредприятий,";");
	
	Элементы.ТаблицаНовойПродукции.ТекущиеДанные.Производитель = ПроизводителиСтрока;
	
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Функция АдресХраненияТаблицыПроизводителей(ИдентификаторСтроки)
	
	ПроизводителиПоСтроке = Объект.ТаблицаПроизводителей.Выгрузить(Новый Структура("GUIDСтроки", ИдентификаторСтроки));
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(ПроизводителиПоСтроке, Новый УникальныйИдентификатор());
	
	Возврат АдресВХранилище;
КонецФункции

&НаКлиенте
Процедура ТаблицаНовойПродукцииНоменклатураУчетнойСистемыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаНовойПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУВСКлиент.НоменклатураУчетнойСистемыНачалоВыбора(Элемент, СтандартнаяОбработка, ТекущиеДанные.Продукция);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНовойПродукцииНоменклатураУчетнойСистемыАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаНовойПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУВСКлиент.НоменклатураУчетнойСистемыАвтоПодбор(ДанныеВыбора, Текст, СтандартнаяОбработка, ТекущиеДанные.Продукция);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНовойПродукцииНоменклатураУчетнойСистемыОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаНовойПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУВСКлиент.НоменклатураУчетнойСистемыОкончаниеВводаТекста(ДанныеВыбора, Текст, СтандартнаяОбработка, ТекущиеДанные.Продукция);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНовойПродукцииСтранаПроисхожденияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаНовойПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ПродукцияПроизводителя = ПредопределенноеЗначение("Справочник.Продукция.ПустаяСсылка");
	
	МассивСвязанныхТЧ = Новый Массив;
	МассивСвязанныхТЧ.Добавить("ТаблицаПроизводителей");
	
	ОбработкаТабличнойЧастиКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭтаФорма, "ТаблицаНовойПродукции", МассивСвязанныхТЧ);
	
	ТекущиеДанные.Производитель = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНовойПродукцииПродукцияПроизводителяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаНовойПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСвязанныхТЧ = Новый Массив;
	МассивСвязанныхТЧ.Добавить("ТаблицаПроизводителей");
	
	ОбработкаТабличнойЧастиКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭтаФорма, "ТаблицаНовойПродукции", МассивСвязанныхТЧ);
	
	ТекущиеДанные.Производитель = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНовойПродукцииПродукцияПроизводителяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаНовойПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияВетисAPIКлиент.ПродукцияПроизводителяНачалоВыбора(
		ТекущиеДанные, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНовойПродукцииПродукцияПроизводителяАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаНовойПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияВетисAPIКлиент.ПродукцияПроизводителяАвтоПодбор(
		ТекущиеДанные, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНовойПродукцииПродукцияПроизводителяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаНовойПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияВетисAPIКлиент.ПродукцияПроизводителяОкончаниеВводаТекста(
		ТекущиеДанные, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ТаблицаРезультат

&НаКлиенте
Процедура ТаблицаРезультатВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьЗначение(, Элементы.ТаблицаРезультат.ТекущиеДанные.ЗаписьСкладскогоЖурнала);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов") Тогда
		МодульЗапретРедактированияРеквизитовОбъектовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЗапретРедактированияРеквизитовОбъектовКлиент");
		МодульЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	Документы.Инвентаризации.ЗаполнитьДокументПоОстаткам(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервереИзФайла()
	
	Документы.Инвентаризации.ЗаполнитьДокументПоОстаткамИзФайла(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНаСервереПоОСГ()
	
	Документы.Инвентаризации.ТаблицаПродукцииУдалитьХорошийОСГ(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНаСервереНеЗакрытое()
	
	Документы.Инвентаризации.ТаблицаПродукцииУдалитьНаСервереНеЗакрытое(Объект);
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьНаСервереНГ()
	
	Документы.Инвентаризации.ТаблицаПродукцииЗаполнитьНаСервереНГ(Объект);
	
КонецПроцедуры


&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСТр("ru = 'Не заполнено обязательное поле ""Организация""'"),, "Объект.Организация");
			
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСТр("ru = 'Не заполнено обязательное поле ""Хозяйствующий субъект""'"),, "Объект.Контрагент");
			
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Предприятие) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСТр("ru = 'Не заполнено обязательное поле ""Предприятие""'"),, "Объект.Предприятие");
			
		Возврат;
	КонецЕсли;
	
	Если Объект.ТаблицаПродукции.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеОтветаНаВопрос", ЭтотОбъект);
		
		ТекстВопроса = НСтр("ru = 'Табличная часть будет очищена. Продолжить?'");
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ЗаполнитьНаСервере();
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопрос(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры  

&НаКлиенте
Процедура ПослеОтветаНаВопросИзФайла(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьНаСервереИзФайла();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцииПодбор(Команда)
	
	АдресХраненияДанных   = ОбщегоНазначенияУВСВызовСервера.ПоместитьТаблицуФормыВоВременноеХранилище(Объект.ТаблицаПродукции, Новый УникальныйИдентификатор);
	АдресХраненияУпаковок = ОбщегоНазначенияУВСВызовСервера.ПоместитьТаблицуФормыВоВременноеХранилище(Объект.СписокФизическихУпаковокПродукция, Новый УникальныйИдентификатор);
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор продукции в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'инвентаризацию'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресХраненияДанных"  , АдресХраненияДанных);
	ПараметрыФормы.Вставить("АдресХраненияУпаковок", АдресХраненияУпаковок);
	ПараметрыФормы.Вставить("Дата"                 , Объект.Дата);
	ПараметрыФормы.Вставить("Документ"             , Объект.Ссылка);
	ПараметрыФормы.Вставить("Организация"          , Объект.Организация);
	ПараметрыФормы.Вставить("Предприятие"          , Объект.Предприятие);
	ПараметрыФормы.Вставить("Заголовок"            , ПараметрЗаголовок);
	
	Оповещение = Новый ОписаниеОповещения("Подбор_ТаблицаПродукцияЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ПодборЗаписейСкладскогоЖурнала.Форма.ФормаПодбора", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор_ТаблицаПродукцияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ОбработатьРезультатПодбора(Результат);

КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатПодбора(АдресХранения)

	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранения);
	Объект.СписокФизическихУпаковокПродукция.Загрузить(СтруктураДанных.СписокФизическихУпаковок);
	
	ТаблицаДанных = СтруктураДанных.Продукция;
	
	Для Каждого ТекДанные Из ТаблицаДанных Цикл
		
		МассивСтрокТЧТаблицаПродукции = Объект.ТаблицаПродукции.НайтиСтроки(Новый Структура("GUIDСтроки", ТекДанные.GUIDСтроки));
		
		Если МассивСтрокТЧТаблицаПродукции.Количество() = 0 Тогда
			
			СтрокаТЧТаблицаПродукции = Объект.ТаблицаПродукции.Добавить();
			
		Иначе
			
			СтрокаТЧТаблицаПродукции = МассивСтрокТЧТаблицаПродукции[0];
		
		КонецЕсли;
		
		Если Не ТекДанные.ЭтоСтрокаИзДокумента Тогда
			
			ЗаполнитьЗначенияСвойств(СтрокаТЧТаблицаПродукции, ТекДанные);
			ЗаполнитьЗначенияСвойств(СтрокаТЧТаблицаПродукции, СтрокаТЧТаблицаПродукции.ЗаписьСкладскогоЖурнала);
			Если ЗначениеЗаполнено(СтрокаТЧТаблицаПродукции.НомерПартии) Тогда
				СтрокаТЧТаблицаПродукции.ЕстьПартияВЗаписи = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТЧТаблицаПродукции.Упаковки                   = ТекДанные.Упаковки;
		СтрокаТЧТаблицаПродукции.Количество                 = ТекДанные.Количество;
		СтрокаТЧТаблицаПродукции.КоличествоУчет             = ТекДанные.КоличествоМаксимум;
		СтрокаТЧТаблицаПродукции.КоличествоОтклонение       = СтрокаТЧТаблицаПродукции.Количество - СтрокаТЧТаблицаПродукции.КоличествоУчет;
		СтрокаТЧТаблицаПродукции.ТипПродукцииЖивыеЖивотные  = ИнтеграцияВетисAPIВызовСервера.ПродукцияПринадлежитТипуЖивыхЖивотных(СтрокаТЧТаблицаПродукции.ЗаписьСкладскогоЖурнала, Ложь);
		СтрокаТЧТаблицаПродукции.ПредставлениеДатыВыработки = ИнтеграцияВетисAPIКлиентСервер.СформироватьПредставлениеДатыВыработки(СтрокаТЧТаблицаПродукции);
		СтрокаТЧТаблицаПродукции.ПредставлениеСрокаГодности = ИнтеграцияВетисAPIКлиентСервер.СформироватьПредставлениеСрокаГодности(СтрокаТЧТаблицаПродукции);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцииНоваяПродукция(Команда)
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор продукции в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'инвентаризацию'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ"   , Объект.Ссылка);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Предприятие", Объект.Предприятие);
	ПараметрыФормы.Вставить("Контрагент" , Объект.Контрагент);
	ПараметрыФормы.Вставить("Заголовок"  , ПараметрЗаголовок);
	
	Оповещение = Новый ОписаниеОповещения("Подбор_ТаблицаНовойПродукцииЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ПодборПродукции.Форма.ФормаПодбора", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор_ТаблицаНовойПродукцииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат
	КонецЕсли;

	ОбработатьРезультатПодбораНовойПродукции(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатПодбораНовойПродукции(АдресХранения)
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранения);
	
	ТаблицаДанных   = СтруктураДанных.Продукция;
	ТаблицаУпаковок = СтруктураДанных.СписокФизическихУпаковок;
	
	Для Каждого ТекДанные Из ТаблицаДанных Цикл
		
		СтрокаТЧТаблицаПродукции = Объект.ТаблицаНовойПродукции.Добавить();
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуПродукции(Объект,
			СтрокаТЧТаблицаПродукции,
			ТекДанные,
			ДанныеЗаполненияСтрок,
			ТаблицаУпаковок,
			"СписокФизическихУпаковокНоваяПродукция");
			
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрупповоеЗаполнениеРеквизитов(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗаполненияРеквизитов", ЭтотОбъект);
	
	ОткрытьФорму("Документ.Инвентаризации.Форма.ФормаГрупповогоЗаполненияЗначений",, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаполненияРеквизитов(ДанныеЗаполнения, ДополнительныеПараметры) Экспорт
	
	ОбработкаТабличнойЧастиКлиент.ГрупповоеЗаполнениеСтрокДокумента(ДанныеЗаполнения, Объект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьВспомогательныеРеквизиты()
	
	МассивЗаписей = Объект.ТаблицаПродукции.Выгрузить(, "ЗаписьСкладскогоЖурнала");
	ПринадлежностьЗаписейЖивымЖивотным = ИнтеграцияВетисAPIВызовСервера.ПродукцияПринадлежитТипуЖивыхЖивотных(МассивЗаписей, Ложь);
	
	Для Каждого ТекЗапись Из Объект.ТаблицаПродукции Цикл
		
		ТекЗапись.ТипПродукцииЖивыеЖивотные = ПринадлежностьЗаписейЖивымЖивотным.Получить(ТекЗапись.ЗаписьСкладскогоЖурнала);
		ТекЗапись.Упаковки = ОбщегоНазначенияУВСКлиентСервер.СформироватьПредставлениеСпискаУпаковок(Объект, ТекЗапись.GUIDСтроки, "СписокФизическихУпаковокПродукция");
		ТекЗапись.ВидПродукции = ТекЗапись.ЗаписьСкладскогоЖурнала.ВидПродукции;
		ТекЗапись.КоличествоОтклонение = ТекЗапись.Количество - ТекЗапись.КоличествоУчет;
		Если ЗначениеЗаполнено(ТекЗапись.ЗаписьСкладскогоЖурнала.НомерПартии) Тогда
			ТекЗапись.ЕстьПартияВЗаписи = Истина;
		КонецЕсли;
		ТекЗапись.ПредставлениеДатыВыработки = ИнтеграцияВетисAPIКлиентСервер.СформироватьПредставлениеДатыВыработки(ТекЗапись);
		ТекЗапись.ПредставлениеСрокаГодности = ИнтеграцияВетисAPIКлиентСервер.СформироватьПредставлениеСрокаГодности(ТекЗапись);
		
	КонецЦикла;
	
	МассивПродукции = Объект.ТаблицаНовойПродукции.Выгрузить(, "Продукция");
	ПринадлежностьПродукцииЖивымЖивотным = ИнтеграцияВетисAPIВызовСервера.ПродукцияПринадлежитТипуЖивыхЖивотных(МассивПродукции);
	
	Для Каждого ТекПродукция Из Объект.ТаблицаНовойПродукции Цикл
		
		ТекПродукция.ТипПродукцииЖивыеЖивотные  = ПринадлежностьПродукцииЖивымЖивотным.Получить(ТекПродукция.Продукция);
		ТекПродукция.Упаковки = ОбщегоНазначенияУВСКлиентСервер.СформироватьПредставлениеСпискаУпаковок(Объект, ТекПродукция.GUIDСтроки, "СписокФизическихУпаковокНоваяПродукция");
		ТекПродукция.ПредставлениеДатыВыработки = ИнтеграцияВетисAPIКлиентСервер.СформироватьПредставлениеДатыВыработки(ТекПродукция);
		ТекПродукция.ПредставлениеСрокаГодности = ИнтеграцияВетисAPIКлиентСервер.СформироватьПредставлениеСрокаГодности(ТекПродукция);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТаблицаПродукции.ЕстьПартияВЗаписи");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаПродукцииНомерПартии.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТаблицаНовойПродукции.Производитель");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаНовойПродукцииПроизводитель.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Необходимо указать'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ГруппаЭлементовОтбораДанных = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбораДанных.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ГруппаЭлементовОтбораДанных.Использование = Истина;
	
	ЭлементОтбора = ГруппаЭлементовОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТаблицаПродукции.ДатаБумажногоВСД");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементОтбора = ГруппаЭлементовОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТаблицаПродукции.НомерБумажногоВСД");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаПродукцииНомерБумажногоВСД.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаПродукцииДатаБумажногоВСД.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ГруппаЭлементовОтбораДанных = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбораДанных.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ГруппаЭлементовОтбораДанных.Использование = Истина;
	
	ЭлементОтбора = ГруппаЭлементовОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТаблицаНовойПродукции.ДатаБумажногоВСД");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементОтбора = ГруппаЭлементовОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТаблицаНовойПродукции.НомерБумажногоВСД");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаНовойПродукцииНомерБумажногоВСД.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаНовойПродукцииДатаБумажногоВСД.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	ОбработкаТабличнойЧастиСервер.УстановитьУсловноеОформлениеСкоропортящейсяПродукции(ЭтаФорма, "ТаблицаПродукции");
	ОбработкаТабличнойЧастиСервер.УстановитьУсловноеОформлениеСкоропортящейсяПродукции(ЭтаФорма, "ТаблицаНовойПродукции");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличныеЧасти()
	
	Объект.ТаблицаПродукции.Очистить();
	Объект.ТаблицаНовойПродукции.Очистить();
	Объект.ТаблицаПроизводителей.Очистить();
	Объект.ТаблицаРезультат.Очистить();
	Объект.СписокФизическихУпаковокПродукция.Очистить();
	Объект.СписокФизическихУпаковокНоваяПродукция.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеФайлаЗагрузить(Команда)
		
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(СокрЛП(Объект.ПутьКФайлу));
	РасширениеФайла =  Файл.Расширение;
	ПолноеИмяФайла = Файл.ПолноеИмя;
		
	Если НЕ ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Вы не выбрали файл для загрузки.'; en = 'You did not select a file to upload.'"),
			,"ПутьКФайлу", "Объект"
		);
		Возврат;
	КонецЕсли;	
	
	Объект.ДанныеФайла.Очистить();
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РасширениеФайла", РасширениеФайла);	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьФайлВХранилище", ЭтаФорма, ДополнительныеПараметры);
	НачатьПомещениеФайла(ОписаниеОповещения, , ПолноеИмяФайла, Ложь, УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	#Если ВебКлиент Тогда
		Если Не РаботаСФайламиСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
			РаботаСФайламиСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСФайлами(Неопределено);
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выбор файла";
	Диалог.Фильтр = "CSV файлы(*.csv)|*.csv";
	Диалог.ИндексФильтра = 0;
	Диалог.ПредварительныйПросмотр = Ложь;
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.МножественныйВыбор = Ложь; 
	
	Диалог.Показать(Новый ОписаниеОповещения("ПутьКФайлуНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("Диалог", Диалог)));
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		Объект.ПутьКФайлу = Диалог.ПолноеИмяФайла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлВХранилище(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Не удалось открыть файл!';en='Could not open file!'"),
			,"ПутьКФайлу", "Объект"
		);
		Возврат;	
	КонецЕсли; 
	
	ЗагрузитьДанныеИзФайлаНаСервере(Адрес, ДополнительныеПараметры);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю( "Загрузка завершена" );
	 
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеИзФайлаНаСервере(Знач АдресВХранилище,ДополнительныеПараметры)			
	
	УстановитьПривилегированныйРежим(Истина);
	
	
	ФайлВременногоХранилища = ПолучитьИзВременногоХранилища(АдресВХранилище);	
	ИмяФайлаЗаписей = ПолучитьИмяВременногоФайла(ДополнительныеПараметры.РасширениеФайла);
	ФайлВременногоХранилища.Записать(ИмяФайлаЗаписей);
	УдалитьИзВременногоХранилища(АдресВХранилище);
	
	
	ДанныеФайла = Новый ТекстовыйДокумент;
    ДанныеФайла.Прочитать(ИмяФайлаЗаписей);
	спСчетчик = 1;
	спПорядок = 1;
	
	Для нС = 1 По ДанныеФайла.КоличествоСтрок() Цикл
		СтрокаФайла = ДанныеФайла.ПолучитьСтроку(нС);
		НоваяСтрочка = Объект.ДанныеФайла.Добавить();
		НоваяСтрочка.НомерЗаписиЖурнала =  СтрокаФайла;
		НоваяСтрочка.Порядок = спПорядок;
		спСчетчик = спСчетчик + 1;
		Если спСчетчик > 1000 Тогда
			спПорядок = спПорядок + 1;
			спСчетчик = 1;
		КонецЕсли;			
	КонецЦикла;
	
	УстановитьПривилегированныйРежим( Ложь );
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцииЗаполнитьИзФайла(Команда)
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСТр("ru = 'Не заполнено обязательное поле ""Организация""'"),, "Объект.Организация");
			
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСТр("ru = 'Не заполнено обязательное поле ""Хозяйствующий субъект""'"),, "Объект.Контрагент");
			
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Предприятие) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСТр("ru = 'Не заполнено обязательное поле ""Предприятие""'"),, "Объект.Предприятие");
			
		Возврат;
	КонецЕсли;
	
	Если Объект.ТаблицаПродукции.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеОтветаНаВопросИзФайла", ЭтотОбъект);
		
		ТекстВопроса = НСтр("ru = 'Табличная часть будет очищена. Продолжить?'");
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ЗаполнитьНаСервереИзФайла();
	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцииОчистить(Команда)
	Объект.ТаблицаПродукции.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ДанныеФайлаОчистить(Команда)
	Объект.ДанныеФайла.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцииОбнулить(Команда)
	Для Каждого СтрокаЗаписи Из Объект.ТаблицаПродукции Цикл	
		СтрокаЗаписи.Количество = 0;
		СтрокаЗаписи.КоличествоОтклонение = СтрокаЗаписи.Количество - СтрокаЗаписи.КоличествоУчет;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцииУдалитьОСГ(Команда)	
	УдалитьНаСервереПоОСГ();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцииУдалитьНеЗакрытое(Команда)
	УдалитьНаСервереНеЗакрытое();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцияЗаполнитьНГ(Команда)
	ЗаполнитьНаСервереНГ();
КонецПроцедуры

#КонецОбласти