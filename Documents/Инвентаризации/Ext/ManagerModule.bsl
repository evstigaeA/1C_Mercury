#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Возвращает описание блокируемых реквизитов.
//
// Возвращаемое значение:
//  Массив - содержит строки в формате ИмяРеквизита[;ИмяЭлементаФормы,...]
//           где ИмяРеквизита - имя реквизита объекта, ИмяЭлементаФормы - имя элемента формы,
//           связанного с реквизитом.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	
	Возврат Результат;
	
КонецФункции

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Монопольный обработчик обновления 2.0.5.1
// Заполняет реквизит ""Формат срока годности"", а так же проверяет корректность заполнения реквизита ""Формат даты выработки""
Процедура ЗаполнитьФорматыДатПродукции() Экспорт
	
	ОбработаныВсеИнвентаризации = Ложь;
	
	Пока Не ОбработаныВсеИнвентаризации Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
			|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.ДокументСсылка КАК Ссылка
			|ИЗ
			|	РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.СрезПоследних(, ДокументСсылка ССЫЛКА Документ.Инвентаризации) КАК ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Инвентаризации КАК Инвентаризации
			|		ПО ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.ДокументСсылка = Инвентаризации.Ссылка
			|ГДЕ
			|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.Статус <> ЗНАЧЕНИЕ(Справочник.СтатусыЗаявок.УспешноОбработана)
			|	И (Инвентаризации.ТаблицаНовойПродукции.ФорматСрокаГодности = ЗНАЧЕНИЕ(Перечисление.СпособыЗаданияДаты.ПустаяСсылка)
			|			ИЛИ Инвентаризации.ТаблицаПродукции.ФорматСрокаГодности = ЗНАЧЕНИЕ(Перечисление.СпособыЗаданияДаты.ПустаяСсылка))";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ИнвентаризацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Для Каждого СтрокаНовойПродукции Из ИнвентаризацияОбъект.ТаблицаНовойПродукции Цикл
				СвойстваПараметровДат = ОбновлениеИнформационнойБазыУВС.СвойстваПараметровДат();
				ЗаполнитьЗначенияСвойств(СвойстваПараметровДат, СтрокаНовойПродукции);
				ОбновлениеИнформационнойБазыУВС.УстановитьЗначенияФорматовДатОбъекта(СтрокаНовойПродукции, СвойстваПараметровДат);
			КонецЦикла;
			
			Для Каждого СтрокаПродукции Из ИнвентаризацияОбъект.ТаблицаПродукции Цикл
				СвойстваПараметровДат = ОбновлениеИнформационнойБазыУВС.СвойстваПараметровДат();
				ЗаполнитьЗначенияСвойств(СвойстваПараметровДат, СтрокаПродукции);
				ОбновлениеИнформационнойБазыУВС.УстановитьЗначенияФорматовДатОбъекта(СтрокаПродукции, СвойстваПараметровДат);
			КонецЦикла;
			
			Попытка
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ИнвентаризацияОбъект);
			Исключение
				ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ТекстИсключения = НСтр("ru = 'Не удалось выполнить обновление форматов дат по причине: %ПредставлениеОшибки%.'");
				ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПредставлениеОшибки%", ПредставлениеОшибки);
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Документы.Инвентаризации,
					Выборка.Ссылка,
					ТекстИсключения);
			КонецПопытки;
			
		КонецЦикла;
			
		КоличествоСсылок = Выборка.Количество();
		Если КоличествоСсылок < 1000 Тогда
			ОбработаныВсеИнвентаризации = Истина;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Регистрирует данные для обработчика обновления 2.0.5.1
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Инвентаризации.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Инвентаризации КАК Инвентаризации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.СрезПоследних(, ДокументСсылка ССЫЛКА Документ.Инвентаризации) КАК ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних
		|		ПО Инвентаризации.Ссылка = ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.ДокументСсылка
		|ГДЕ
		|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыЗаявок.УспешноОбработана)
		|	И (Инвентаризации.ТаблицаНовойПродукции.ФорматСрокаГодности = ЗНАЧЕНИЕ(Перечисление.СпособыЗаданияДаты.ПустаяСсылка)
		|			ИЛИ Инвентаризации.ТаблицаПродукции.ФорматСрокаГодности = ЗНАЧЕНИЕ(Перечисление.СпособыЗаданияДаты.ПустаяСсылка))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Инвентаризации.Дата УБЫВ";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.Инвентаризации";
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			ИнвентаризацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ИнвентаризацияОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			
			Для Каждого СтрокаНовойПродукции Из ИнвентаризацияОбъект.ТаблицаНовойПродукции Цикл
				СвойстваПараметровДат = ОбновлениеИнформационнойБазыУВС.СвойстваПараметровДат();
				ЗаполнитьЗначенияСвойств(СвойстваПараметровДат, СтрокаНовойПродукции);
				ОбновлениеИнформационнойБазыУВС.УстановитьЗначенияФорматовДатОбъекта(СтрокаНовойПродукции, СвойстваПараметровДат);
			КонецЦикла;
			
			Для Каждого СтрокаПродукции Из ИнвентаризацияОбъект.ТаблицаПродукции Цикл
				СвойстваПараметровДат = ОбновлениеИнформационнойБазыУВС.СвойстваПараметровДат();
				ЗаполнитьЗначенияСвойств(СвойстваПараметровДат, СтрокаПродукции);
				ОбновлениеИнформационнойБазыУВС.УстановитьЗначенияФорматовДатОбъекта(СтрокаПродукции, СвойстваПараметровДат);
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ИнвентаризацияОбъект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУВС.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

// Записывает движения регистра "ДвиженияПродукции" при обновлении на версию "2.0.7.1"
Процедура ЗаполнитьЗаписиДвиженияТоваровПриОбновлении(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнвентаризацииТаблицаПродукции.Ссылка.Дата КАК Период,
		|	ИнвентаризацииТаблицаПродукции.Ссылка.Организация КАК Организация,
		|	ИнвентаризацииТаблицаПродукции.Ссылка.Предприятие КАК Предприятие,
		|	ИнвентаризацииТаблицаПродукции.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
		|	МИНИМУМ(ИнвентаризацииТаблицаПродукции.НомерСтроки) КАК НомерСтроки,
		|	СУММА(ИнвентаризацииТаблицаПродукции.Количество - ИнвентаризацииТаблицаПродукции.КоличествоУчет) КАК Количество
		|ПОМЕСТИТЬ ВТ_ТаблицаПродукция
		|ИЗ
		|	Документ.Инвентаризации.ТаблицаПродукции КАК ИнвентаризацииТаблицаПродукции
		|ГДЕ
		|	ИнвентаризацииТаблицаПродукции.Ссылка = &Ссылка
		|	И ИнвентаризацииТаблицаПродукции.Количество - ИнвентаризацииТаблицаПродукции.КоличествоУчет < 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ИнвентаризацииТаблицаПродукции.Ссылка.Предприятие,
		|	ИнвентаризацииТаблицаПродукции.ЗаписьСкладскогоЖурнала,
		|	ИнвентаризацииТаблицаПродукции.Ссылка.Организация,
		|	ИнвентаризацииТаблицаПродукции.Ссылка.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаПродукция.Период КАК Период,
		|	ВТ_ТаблицаПродукция.Организация КАК Организация,
		|	ВТ_ТаблицаПродукция.Предприятие КАК Предприятие,
		|	ВТ_ТаблицаПродукция.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
		|	ВЫБОР
		|		КОГДА ВТ_ТаблицаПродукция.Количество > 0
		|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	КОНЕЦ КАК ВидДвижения,
		|	ВЫБОР
		|		КОГДА ВТ_ТаблицаПродукция.Количество > 0
		|			ТОГДА ВТ_ТаблицаПродукция.Количество
		|		ИНАЧЕ -ВТ_ТаблицаПродукция.Количество
		|	КОНЕЦ КАК Количество
		|ИЗ
		|	ВТ_ТаблицаПродукция КАК ВТ_ТаблицаПродукция";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		НаборЗаписей = РегистрыНакопления.ДвижениеПродукции.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
		НаборЗаписей.Записывать = Истина;
		НаборЗаписей.Очистить();
		НаборЗаписей.Загрузить(РезультатЗапроса.Выгрузить());
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		Исключение
			ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстШаблона = НСтр("ru = 'Не удалось записать движения документа по причине: %1.'");
			ТекстИсключения = СтрШаблон(ТекстШаблона, ПредставлениеОшибки);
			ЗаписьЖурналаРегистрации("Ошибка выполнения",
									 УровеньЖурналаРегистрации.Ошибка,
									 ДокументСсылка.Метаданные(),
									 ДокументСсылка,
									 ТекстИсключения);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьДокументПоОстаткам(Объект) Экспорт
	
	Объект.ТаблицаПродукции.Очистить();
	Объект.СписокФизическихУпаковокПродукция.Очистить();
	
	МассивИдентификаторов = ИнтеграцияВетисAPIСлужебныйПовтИсп.ПродукцияИсключениеИзТипаЖивыеЖивотные();
	ИспользоватьОбменЧерезУниверсальныйФормат = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЧерезУниверсальныйФормат");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыПродукции.Ссылка КАК ВидПродукции
		|ПОМЕСТИТЬ ВТ_ИсключенияИзЖивыхЖивотных
		|ИЗ
		|	Справочник.ВидыПродукции КАК ВидыПродукции
		|ГДЕ
		|	ВидыПродукции.GUID_Меркурий В(&МассивИдентификаторов)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидПродукции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1000
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ТипПродукции КАК ТипПродукции,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ВидПродукции КАК ВидПродукции,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ПодвидПродукции КАК ПодвидПродукции,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.Продукция КАК Продукция,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ДатаВыработкиНачало КАК ДатаВыработкиНачало,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ДатаВыработкиОкончание КАК ДатаВыработкиОкончание,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ДатаВыработкиСтрокой КАК ДатаВыработкиСтрокой,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ДатаОкончанияСрокаГодностиНачало КАК ДатаОкончанияСрокаГодностиНачало,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ДатаОкончанияСрокаГодностиОкончание КАК ДатаОкончанияСрокаГодностиОкончание,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ДатаСрокаГодностиСтрокой КАК ДатаСрокаГодностиСтрокой,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.НекачественныйГруз КАК НекачественныйГруз,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.СкоропортящаясяПродукция КАК СкоропортящаясяПродукция,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ФорматДатыВыработки КАК ФорматДатыВыработки,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ФорматСрокаГодности КАК ФорматСрокаГодности,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.НомерПартии КАК НомерПартии,
		|	ВЫБОР
		|		КОГДА ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.НомерПартии <> """"
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьПартияВЗаписи,
		|	ВЫБОР
		|		КОГДА ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ТипПродукции = ЗНАЧЕНИЕ(Справочник.ТипыПродукции.ЖивыеЖивотные)
		|				И НЕ ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ВидПродукции В
		|						(ВЫБРАТЬ
		|							ВТ_ИсключенияИзЖивыхЖивотных.ВидПродукции КАК ВидПродукции
		|						ИЗ
		|							ВТ_ИсключенияИзЖивыхЖивотных КАК ВТ_ИсключенияИзЖивыхЖивотных)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТипПродукцииЖивыеЖивотные,
		|	ДвижениеПродукцииОстатки.КоличествоОстаток КАК КоличествоУчет,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.СписокФизическихУпаковок.(
		|		Ссылка КАК Поле1,
		|		НомерСтроки КАК Поле2,
		|		КоличествоУпаковок КАК Поле3,
		|		НаименованиеМаркировки КАК Поле4,
		|		ТипМаркировки КАК Поле5,
		|		Упаковка КАК Поле6,
		|		УровеньУпаковки КАК Поле7
		|	) КАК СписокФизическихУпаковок
		|ИЗ
		|	РегистрНакопления.ДвижениеПродукции.Остатки(
		|			,
		|			Организация = &Организация
		|				И Предприятие = &Предприятие) КАК ДвижениеПродукцииОстатки
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаписьСкладскогоЖурнала";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Предприятие", Объект.Предприятие);
	Запрос.УстановитьПараметр("МассивИдентификаторов", МассивИдентификаторов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЗапись = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаЗапись.Следующий() Цикл
		
		СтрокаПродукции = Объект.ТаблицаПродукции.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаПродукции, ВыборкаЗапись);
		СтрокаПродукции.GUIDСтроки = Строка(Новый УникальныйИдентификатор());
		СтрокаПродукции.КоличествоОтклонение = СтрокаПродукции.Количество - СтрокаПродукции.КоличествоУчет;
		
		Если ИспользоватьОбменЧерезУниверсальныйФормат Тогда
			СтрокаПродукции.НоменклатураУчетнойСистемы = Справочники.НоменклатураУчетнойСистемы.ПолучитьНоменклатуруУчетнойСитсемы(ВыборкаЗапись.ЗаписьСкладскогоЖурнала);
		КонецЕсли;
		
		СтруктураДанныхВыработки = Новый Структура("ФорматДатыВыработки, СкоропортящаясяПродукция,
			|ДатаВыработкиНачало, ДатаВыработкиОкончание, ДатаВыработкиСтрокой");
		ЗаполнитьЗначенияСвойств(СтруктураДанныхВыработки, ВыборкаЗапись);
		
		СтрокаПродукции.ПредставлениеДатыВыработки = ИнтеграцияВетисAPIКлиентСервер.СформироватьПредставлениеДатыВыработки(СтруктураДанныхВыработки);
		
		СтруктураДанныхСрокаГодности = Новый Структура("ФорматСрокаГодности, СкоропортящаясяПродукция,
			|ДатаОкончанияСрокаГодностиНачало, ДатаОкончанияСрокаГодностиОкончание, ДатаСрокаГодностиСтрокой");
		ЗаполнитьЗначенияСвойств(СтруктураДанныхСрокаГодности, ВыборкаЗапись);
		
		СтрокаПродукции.ПредставлениеСрокаГодности = ИнтеграцияВетисAPIКлиентСервер.СформироватьПредставлениеСрокаГодности(СтруктураДанныхСрокаГодности);
		//
		//УпаковкиВыборка = ВыборкаЗапись.СписокФизическихУпаковок.Выбрать();
		//Если УпаковкиВыборка.Количество() = 0 Тогда
		//	СтрокаПродукции.Упаковки = НСтр("ru = 'Без упаковок'");
		//Иначе
		//	СтрокаПродукции.Упаковки = НСтр("ru = 'Введены данные по упаковкам'");
		//	Пока УпаковкиВыборка.Следующий() Цикл
		//		СтрокаУпаковки = Объект.СписокФизическихУпаковокПродукция.Добавить();
		//		ЗаполнитьЗначенияСвойств(СтрокаУпаковки, УпаковкиВыборка);
		//		СтрокаУпаковки.GUIDСтроки = СтрокаПродукции.GUIDСтроки;
		//	КонецЦикла;
		//КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоОстаткамИзФайла(Объект) Экспорт
	
	Объект.ТаблицаПродукции.Очистить();
	Объект.СписокФизическихУпаковокПродукция.Очистить();
	
	МассивИдентификаторов = ИнтеграцияВетисAPIСлужебныйПовтИсп.ПродукцияИсключениеИзТипаЖивыеЖивотные();
	ИспользоватьОбменЧерезУниверсальныйФормат = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЧерезУниверсальныйФормат");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыПродукции.Ссылка КАК ВидПродукции
		|ПОМЕСТИТЬ ВТ_ИсключенияИзЖивыхЖивотных
		|ИЗ
		|	Справочник.ВидыПродукции КАК ВидыПродукции
		|ГДЕ
		|	ВидыПродукции.GUID_Меркурий В(&МассивИдентификаторов)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидПродукции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ТипПродукции КАК ТипПродукции,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ВидПродукции КАК ВидПродукции,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ПодвидПродукции КАК ПодвидПродукции,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.Продукция КАК Продукция,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ДатаВыработкиНачало КАК ДатаВыработкиНачало,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ДатаВыработкиОкончание КАК ДатаВыработкиОкончание,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ДатаВыработкиСтрокой КАК ДатаВыработкиСтрокой,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ДатаОкончанияСрокаГодностиНачало КАК ДатаОкончанияСрокаГодностиНачало,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ДатаОкончанияСрокаГодностиОкончание КАК ДатаОкончанияСрокаГодностиОкончание,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ДатаСрокаГодностиСтрокой КАК ДатаСрокаГодностиСтрокой,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.НекачественныйГруз КАК НекачественныйГруз,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.СкоропортящаясяПродукция КАК СкоропортящаясяПродукция,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ФорматДатыВыработки КАК ФорматДатыВыработки,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ФорматСрокаГодности КАК ФорматСрокаГодности,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.НомерПартии КАК НомерПартии,
		|	ВЫБОР
		|		КОГДА ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.НомерПартии <> """"
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьПартияВЗаписи,
		|	ВЫБОР
		|		КОГДА ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ТипПродукции = ЗНАЧЕНИЕ(Справочник.ТипыПродукции.ЖивыеЖивотные)
		|				И НЕ ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ВидПродукции В
		|						(ВЫБРАТЬ
		|							ВТ_ИсключенияИзЖивыхЖивотных.ВидПродукции КАК ВидПродукции
		|						ИЗ
		|							ВТ_ИсключенияИзЖивыхЖивотных КАК ВТ_ИсключенияИзЖивыхЖивотных)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТипПродукцииЖивыеЖивотные,
		|	ДвижениеПродукцииОстатки.КоличествоОстаток КАК КоличествоУчет,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.СписокФизическихУпаковок КАК СписокФизическихУпаковок
		|ИЗ
		|	РегистрНакопления.ДвижениеПродукции.Остатки(
		|			,
		|			Организация = &Организация
		|			И ЗаписьСкладскогоЖурнала.НомерЗаписиЖурнала В (&ВТ_НомерЗаписиЖурнала)
		|				И Предприятие = &Предприятие) КАК ДвижениеПродукцииОстатки
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаписьСкладскогоЖурнала";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Предприятие", Объект.Предприятие);
	Запрос.УстановитьПараметр("МассивИдентификаторов", МассивИдентификаторов);
	
	Если Объект.Порядок = 0 Тогда
		Запрос.УстановитьПараметр("ВТ_НомерЗаписиЖурнала", Объект.ДанныеФайла.Выгрузить(,"НомерЗаписиЖурнала"));
	Иначе
		Запрос.УстановитьПараметр("ВТ_НомерЗаписиЖурнала", Объект.ДанныеФайла.Выгрузить(Новый Структура("Порядок", Объект.Порядок),"НомерЗаписиЖурнала"));
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЗапись = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаЗапись.Следующий() Цикл
		
		СтрокаПродукции = Объект.ТаблицаПродукции.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаПродукции, ВыборкаЗапись);
		СтрокаПродукции.GUIDСтроки = Строка(Новый УникальныйИдентификатор());
		СтрокаПродукции.Количество = 0;
		СтрокаПродукции.КоличествоОтклонение = СтрокаПродукции.Количество - СтрокаПродукции.КоличествоУчет;
		
		Если ИспользоватьОбменЧерезУниверсальныйФормат Тогда
			СтрокаПродукции.НоменклатураУчетнойСистемы = Справочники.НоменклатураУчетнойСистемы.ПолучитьНоменклатуруУчетнойСитсемы(ВыборкаЗапись.ЗаписьСкладскогоЖурнала);
		КонецЕсли;
		
		СтруктураДанныхВыработки = Новый Структура("ФорматДатыВыработки, СкоропортящаясяПродукция,
			|ДатаВыработкиНачало, ДатаВыработкиОкончание, ДатаВыработкиСтрокой");
		ЗаполнитьЗначенияСвойств(СтруктураДанныхВыработки, ВыборкаЗапись);
		
		СтрокаПродукции.ПредставлениеДатыВыработки = ИнтеграцияВетисAPIКлиентСервер.СформироватьПредставлениеДатыВыработки(СтруктураДанныхВыработки);
		
		СтруктураДанныхСрокаГодности = Новый Структура("ФорматСрокаГодности, СкоропортящаясяПродукция,
			|ДатаОкончанияСрокаГодностиНачало, ДатаОкончанияСрокаГодностиОкончание, ДатаСрокаГодностиСтрокой");
		ЗаполнитьЗначенияСвойств(СтруктураДанныхСрокаГодности, ВыборкаЗапись);
		
		СтрокаПродукции.ПредставлениеСрокаГодности = ИнтеграцияВетисAPIКлиентСервер.СформироватьПредставлениеСрокаГодности(СтруктураДанныхСрокаГодности);
		
		УпаковкиВыборка = ВыборкаЗапись.СписокФизическихУпаковок.Выбрать();
		Если УпаковкиВыборка.Количество() = 0 Тогда
			СтрокаПродукции.Упаковки = НСтр("ru = 'Без упаковок'");
		Иначе
			СтрокаПродукции.Упаковки = НСтр("ru = 'Введены данные по упаковкам'");
			Пока УпаковкиВыборка.Следующий() Цикл
				СтрокаУпаковки = Объект.СписокФизическихУпаковокПродукция.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаУпаковки, УпаковкиВыборка);
				СтрокаУпаковки.GUIDСтроки = СтрокаПродукции.GUIDСтроки;
			КонецЦикла;
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

// Возвращает текст запроса для выборки продукции в регистр "ДвижениеПродукции"
// Параметры:
// ТекстЗапроса - текст запроса для выборки продукции в регистр "ДвижениеПродукции"
// СсылкаНаДокумент - ссылка на документ
// УспешноОбработана - если Истина, то в запросе выбираются все движения,
//                     в противном случае выбираются только минусовые движения ("резервируется продукция")
Процедура ПолучитьТекстЗапросаДвиженияПродукции(ТекстЗапроса, СсылкаНаДокумент, УспешноОбработана = Ложь) Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ИнвентаризацииТаблицаПродукции.Ссылка.Дата КАК Период,
		|	ИнвентаризацииТаблицаПродукции.Ссылка.Организация КАК Организация,
		|	ИнвентаризацииТаблицаПродукции.Ссылка.Предприятие КАК Предприятие,
		|	ИнвентаризацииТаблицаПродукции.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
		|	МИНИМУМ(ИнвентаризацииТаблицаПродукции.НомерСтроки) КАК НомерСтроки,
		|	СУММА(ИнвентаризацииТаблицаПродукции.Количество - ИнвентаризацииТаблицаПродукции.КоличествоУчет) КАК Количество
		|ПОМЕСТИТЬ ВТ_ТаблицаПродукция
		|ИЗ
		|	Документ.Инвентаризации.ТаблицаПродукции КАК ИнвентаризацииТаблицаПродукции
		|ГДЕ
		|	ИнвентаризацииТаблицаПродукции.Ссылка = &Ссылка
		|	И ИнвентаризацииТаблицаПродукции.Количество - ИнвентаризацииТаблицаПродукции.КоличествоУчет < 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ИнвентаризацииТаблицаПродукции.Ссылка.Предприятие,
		|	ИнвентаризацииТаблицаПродукции.ЗаписьСкладскогоЖурнала,
		|	ИнвентаризацииТаблицаПродукции.Ссылка.Организация,
		|	ИнвентаризацииТаблицаПродукции.Ссылка.Дата";
	
	// Если статус заявки "УспешноОбработана" - выбираем все движения,
	// в противном случае выбираем только минусовые движения ("резервируем продукцию")
	Если УспешноОбработана Тогда
		ТекстЗапроса = СтрЗаменить(
									ТекстЗапроса,
									"ИнвентаризацииТаблицаПродукции.КоличествоУчет < 0",
									"ИнвентаризацииТаблицаПродукции.КоличествоУчет <> 0");
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИнвентаризацияТаблицаРезультат.Ссылка.Дата,
		|	ИнвентаризацияТаблицаРезультат.Ссылка.Организация,
		|	ИнвентаризацияТаблицаРезультат.Ссылка.Предприятие,
		|	ИнвентаризацияТаблицаРезультат.ЗаписьСкладскогоЖурнала,
		|	ИнвентаризацияТаблицаРезультат.НомерСтроки КАК НомерСтроки,
		|	ИнвентаризацияТаблицаРезультат.Количество
		|ИЗ
		|	Документ.Инвентаризации.ТаблицаРезультат КАК ИнвентаризацияТаблицаРезультат
		|ГДЕ
		|	ИнвентаризацияТаблицаРезультат.Ссылка = &Ссылка";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаПродукция.Период КАК Период,
		|	ВТ_ТаблицаПродукция.Организация КАК Организация,
		|	ВТ_ТаблицаПродукция.Предприятие КАК Предприятие,
		|	ВТ_ТаблицаПродукция.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
		|	ВЫБОР
		|		КОГДА ВТ_ТаблицаПродукция.Количество > 0
		|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	КОНЕЦ КАК ВидДвижения,
		|	ВЫБОР
		|		КОГДА ВТ_ТаблицаПродукция.Количество > 0
		|			ТОГДА ВТ_ТаблицаПродукция.Количество
		|		ИНАЧЕ -ВТ_ТаблицаПродукция.Количество
		|	КОНЕЦ КАК Количество
		|ИЗ
		|	ВТ_ТаблицаПродукция КАК ВТ_ТаблицаПродукция";
	
	
КонецПроцедуры

// Записывает записи движений продукции в регистр "ДвижениеПродукции"
//
// Параметры:
// СсылкаНаДокумент - ссылка на документ регистратор
Процедура ЗаписатьДвиженияПродукции(СсылкаНаДокумент) Экспорт
	
	Запрос = Новый Запрос;
	
	// Получаем текст запроса данных для движений по регистру "ДвиженияПродукции"
	ПолучитьТекстЗапросаДвиженияПродукции(Запрос.Текст, СсылкаНаДокумент, Истина);
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ДвижениеПродукции");
	ЭлементБлокировки.УстановитьЗначение("Организация", СсылкаНаДокумент.Организация);
	ЭлементБлокировки.УстановитьЗначение("Предприятие", СсылкаНаДокумент.Предприятие);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = СсылкаНаДокумент.ТаблицаПродукции;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ЗаписьСкладскогоЖурнала", "ЗаписьСкладскогоЖурнала");
	Блокировка.Заблокировать();
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		НаборЗаписей = РегистрыНакопления.ДвижениеПродукции.СоздатьНаборЗаписей();
		НаборЗаписей.Очистить();
		НаборЗаписей.Загрузить(РезультатЗапроса.Выгрузить());
		НаборЗаписей.Записывать = Истина;
		НаборЗаписей.Отбор.Регистратор.Установить(СсылкаНаДокумент);
		НаборЗаписей.Записать();
	КонецЕсли;

КонецПроцедуры

Процедура ТаблицаПродукцииУдалитьХорошийОСГ(Объект) Экспорт	
	Для Каждого СтрокаЗаписи Из Объект.ТаблицаПродукции Цикл	
		Если СтрокаЗаписи.ДатаОкончанияСрокаГодностиНачало < Объект.ДатаУдаления Тогда
			СтрокаЗаписи.НадоУдалить = Истина;
		Иначе
			СтрокаЗаписи.НадоУдалить = Ложь;
		КонецЕсли;
	КонецЦикла;
	Оставляем = Объект.ТаблицаПродукции.Выгрузить(Новый Структура("НадоУдалить", Истина));
	Объект.ТаблицаПродукции.Очистить();
	Объект.ТаблицаПродукции.Загрузить(Оставляем);
	
КонецПроцедуры

Функция НайтиСвязьСВСД(ТаблицаЗаписей, ОрганизацияЗаписей)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СвязиМеждуЗаписямиСкладскогоЖурналаИВСД.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала
	|ИЗ
	|	РегистрСведений.СвязиМеждуЗаписямиСкладскогоЖурналаИВСД КАК СвязиМеждуЗаписямиСкладскогоЖурналаИВСД
	|ГДЕ
	|	СвязиМеждуЗаписямиСкладскогоЖурналаИВСД.Организация = &Организация
	|	И СвязиМеждуЗаписямиСкладскогоЖурналаИВСД.ЗаписьСкладскогоЖурнала В(&ТаблицаЗаписей)
	|	И НЕ СвязиМеждуЗаписямиСкладскогоЖурналаИВСД.ВСД.ПроизводствоЗавершено";
	
	Запрос.УстановитьПараметр("Организация", ОрганизацияЗаписей);
	Запрос.УстановитьПараметр("ТаблицаЗаписей", ТаблицаЗаписей);
	
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции

Процедура ТаблицаПродукцииУдалитьНаСервереНеЗакрытое(Объект) Экспорт
	
	НайтиСвязьСВСД = НайтиСвязьСВСД(Объект.ТаблицаПродукции.Выгрузить(,"ЗаписьСкладскогоЖурнала"), Объект.Организация);

	Для Каждого СтрокаЗаписи Из Объект.ТаблицаПродукции Цикл	
		СтрокаЗаписи.НадоУдалить = Ложь;
		ПроизводствоЗавершено =  НайтиСвязьСВСД.Найти(СтрокаЗаписи.ЗаписьСкладскогоЖурнала, "ЗаписьСкладскогоЖурнала");
		Если ПроизводствоЗавершено <> Неопределено Тогда
			СтрокаЗаписи.НадоУдалить = Ложь;
		Иначе
			СтрокаЗаписи.НадоУдалить = Истина;
		КонецЕсли;
	КонецЦикла;
	Оставляем = Объект.ТаблицаПродукции.Выгрузить(Новый Структура("НадоУдалить", Истина));
	Объект.ТаблицаПродукции.Очистить();
	Объект.ТаблицаПродукции.Загрузить(Оставляем);	
КонецПроцедуры

Процедура ТаблицаПродукцииЗаполнитьНаСервереНГ(Объект) Экспорт
	 Объект.ТаблицаПродукции.Очистить();
	Объект.СписокФизическихУпаковокПродукция.Очистить();
	
	МассивИдентификаторов = ИнтеграцияВетисAPIСлужебныйПовтИсп.ПродукцияИсключениеИзТипаЖивыеЖивотные();
	ИспользоватьОбменЧерезУниверсальныйФормат = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЧерезУниверсальныйФормат");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыПродукции.Ссылка КАК ВидПродукции
		|ПОМЕСТИТЬ ВТ_ИсключенияИзЖивыхЖивотных
		|ИЗ
		|	Справочник.ВидыПродукции КАК ВидыПродукции
		|ГДЕ
		|	ВидыПродукции.GUID_Меркурий В(&МассивИдентификаторов)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидПродукции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1000
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ТипПродукции КАК ТипПродукции,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ВидПродукции КАК ВидПродукции,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ПодвидПродукции КАК ПодвидПродукции,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.Продукция КАК Продукция,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ДатаВыработкиНачало КАК ДатаВыработкиНачало,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ДатаВыработкиОкончание КАК ДатаВыработкиОкончание,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ДатаВыработкиСтрокой КАК ДатаВыработкиСтрокой,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ДатаОкончанияСрокаГодностиНачало КАК ДатаОкончанияСрокаГодностиНачало,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ДатаОкончанияСрокаГодностиОкончание КАК ДатаОкончанияСрокаГодностиОкончание,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ДатаСрокаГодностиСтрокой КАК ДатаСрокаГодностиСтрокой,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.НекачественныйГруз КАК НекачественныйГруз,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.СкоропортящаясяПродукция КАК СкоропортящаясяПродукция,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ФорматДатыВыработки КАК ФорматДатыВыработки,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ФорматСрокаГодности КАК ФорматСрокаГодности,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.НомерПартии КАК НомерПартии,
		|	ВЫБОР
		|		КОГДА ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.НомерПартии <> """"
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьПартияВЗаписи,
		|	ВЫБОР
		|		КОГДА ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ТипПродукции = ЗНАЧЕНИЕ(Справочник.ТипыПродукции.ЖивыеЖивотные)
		|				И НЕ ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.ВидПродукции В
		|						(ВЫБРАТЬ
		|							ВТ_ИсключенияИзЖивыхЖивотных.ВидПродукции КАК ВидПродукции
		|						ИЗ
		|							ВТ_ИсключенияИзЖивыхЖивотных КАК ВТ_ИсключенияИзЖивыхЖивотных)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТипПродукцииЖивыеЖивотные,
		|	ДвижениеПродукцииОстатки.КоличествоОстаток КАК КоличествоУчет,
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.СписокФизическихУпаковок.(
		|		Ссылка КАК Поле1,
		|		НомерСтроки КАК Поле2,
		|		КоличествоУпаковок КАК Поле3,
		|		НаименованиеМаркировки КАК Поле4,
		|		ТипМаркировки КАК Поле5,
		|		Упаковка КАК Поле6,
		|		УровеньУпаковки КАК Поле7
		|	) КАК СписокФизическихУпаковок
		|ИЗ
		|	РегистрНакопления.ДвижениеПродукции.Остатки(
		|			,
		|			Организация = &Организация
		|				И Предприятие = &Предприятие) КАК ДвижениеПродукцииОстатки
		|ГДЕ
		|	ДвижениеПродукцииОстатки.ЗаписьСкладскогоЖурнала.НекачественныйГруз
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаписьСкладскогоЖурнала";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Предприятие", Объект.Предприятие);
	Запрос.УстановитьПараметр("МассивИдентификаторов", МассивИдентификаторов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЗапись = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаЗапись.Следующий() Цикл
		
		СтрокаПродукции = Объект.ТаблицаПродукции.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаПродукции, ВыборкаЗапись);
		СтрокаПродукции.GUIDСтроки = Строка(Новый УникальныйИдентификатор());
		СтрокаПродукции.КоличествоОтклонение = СтрокаПродукции.Количество - СтрокаПродукции.КоличествоУчет;
		
		Если ИспользоватьОбменЧерезУниверсальныйФормат Тогда
			СтрокаПродукции.НоменклатураУчетнойСистемы = Справочники.НоменклатураУчетнойСистемы.ПолучитьНоменклатуруУчетнойСитсемы(ВыборкаЗапись.ЗаписьСкладскогоЖурнала);
		КонецЕсли;
		
		СтруктураДанныхВыработки = Новый Структура("ФорматДатыВыработки, СкоропортящаясяПродукция,
			|ДатаВыработкиНачало, ДатаВыработкиОкончание, ДатаВыработкиСтрокой");
		ЗаполнитьЗначенияСвойств(СтруктураДанныхВыработки, ВыборкаЗапись);
		
		СтрокаПродукции.ПредставлениеДатыВыработки = ИнтеграцияВетисAPIКлиентСервер.СформироватьПредставлениеДатыВыработки(СтруктураДанныхВыработки);
		
		СтруктураДанныхСрокаГодности = Новый Структура("ФорматСрокаГодности, СкоропортящаясяПродукция,
			|ДатаОкончанияСрокаГодностиНачало, ДатаОкончанияСрокаГодностиОкончание, ДатаСрокаГодностиСтрокой");
		ЗаполнитьЗначенияСвойств(СтруктураДанныхСрокаГодности, ВыборкаЗапись);
		
		СтрокаПродукции.ПредставлениеСрокаГодности = ИнтеграцияВетисAPIКлиентСервер.СформироватьПредставлениеСрокаГодности(СтруктураДанныхСрокаГодности);
					
	КонецЦикла;

КонецПроцедуры
#КонецОбласти

#КонецЕсли