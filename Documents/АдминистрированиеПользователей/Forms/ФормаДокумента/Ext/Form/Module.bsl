
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СписокПравДоступныхДляНазначения();
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СписокПредприятийКонтрагента = РегистрыСведений.СвязиМеждуКонтрагентамиИПредприятиями.ПредприятияПоКонтрагенту(Объект.Контрагент, Истина);
	
	Если Объект.Ссылка.Пустая() Тогда
		ЗаполнитьТекущиеДаныеПользователей();
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	//ЗаполнитьВспомогательныеРеквизиты();
	//ЗаполнитьДеревоЭтаповОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПриЧтенииСозданииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Объект.ТаблицаПользователейМеркурия.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПослеОтветаНаВопросИзменениеОрганизации", ЭтотОбъект);
		
		ТекстВопроса = НСтр("ru = 'Документ будет перезаполнен. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОрганизацияПриИзмененииЗавершение();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросИзменениеОрганизации(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацияПриИзмененииЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзмененииЗавершение()
	
	Объект.Контрагент            = ОбщегоНазначенияУВСВызовСервера.КонтрагентПоОрганизации(Объект.Организация);
	СписокПредприятийКонтрагента = ОбщегоНазначенияУВСВызовСервера.ПредприятияПоКонтрагенту(Объект.Контрагент, Истина);
	
	ЗаполнитьДокумент();
	ЗаполнитьВспомогательныеРеквизиты();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТаблицаПользователейМеркурияПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаПользователейМеркурия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ТекущиеДанные);
	
	Элементы.ТаблицаПравПользователей.ОтборСтрок        = Новый ФиксированнаяСтруктура("Пользователь", ТекущиеДанные.Пользователь);
	Элементы.ТаблицаОбслуживаемыхПредприятий.ОтборСтрок = Новый ФиксированнаяСтруктура("Пользователь", ТекущиеДанные.Пользователь);
	Элементы.ТаблицаЗонОбслуживания.ОтборСтрок          = Новый ФиксированнаяСтруктура("Пользователь", ТекущиеДанные.Пользователь);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПользователейМеркурияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеСозданияПользователя", ЭтотОбъект);
	
	ОткрытьФорму("Документ.АдминистрированиеПользователей.Форма.ФормаСозданияНовогоПользователя",, Элемент,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПользователейМеркурияПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ВыделенныеСтроки = ЭтотОбъект.Элементы.ТаблицаПользователейМеркурия.ВыделенныеСтроки;
	
	МассивСвязанныхТЧ = Новый Массив;
	МассивСвязанныхТЧ.Добавить("ТаблицаОбслуживаемыхПредприятий");
	МассивСвязанныхТЧ.Добавить("ТаблицаПравПользователей");
	МассивСвязанныхТЧ.Добавить("ТаблицаЗонОбслуживания");
	МассивСвязанныхТЧ.Добавить("ЭтапыВыполненияОбмена");
	
	Для Каждого ИдентификаторВыделеннойСтроки Из ВыделенныеСтроки Цикл
		
		СтрокаТЧ = Объект.ТаблицаПользователейМеркурия.НайтиПоИдентификатору(ИдентификаторВыделеннойСтроки);
		
		Если СтрокаТЧ.Заблокирован Тогда
			
			Состояние(СтрЗаменить(НСтр("ru = 'По пользователю %1 есть завершенные этапы обмена. Редактирование отменено.'"), "%1", СтрокаТЧ.Пользователь));
			
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура("Пользователь", СтрокаТЧ.Пользователь);
		
		Для Каждого СвязаннаяТЧ Из МассивСвязанныхТЧ Цикл
			
			ПодчиненнаяТЧ = Объект[СвязаннаяТЧ];
			НайденныеСтроки = ПодчиненнаяТЧ.НайтиСтроки(ПараметрыОтбора);
			
			НайденныеСтроки = ПодчиненнаяТЧ.НайтиСтроки(ПараметрыОтбора);
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				ПодчиненнаяТЧ.Удалить(ТекСтрока);
			КонецЦикла;
			
		КонецЦикла;
		
		Объект.ТаблицаПользователейМеркурия.Удалить(СтрокаТЧ);
		
	КонецЦикла;
	
	ЗаполнитьДеревоЭтаповОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПравПользователейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПравПользователейПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПравПользователейИспользуетсяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаПравПользователей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Изменен = Не ТекущиеДанные.Изменен;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОбслуживаемыхПредприятийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОбслуживаемыхПредприятийПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОбслуживаемыхПредприятийИспользуетсяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаОбслуживаемыхПредприятий.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Изменен = Не ТекущиеДанные.Изменен;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗонОбслуживанияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ТаблицаПользователейМеркурия.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаНовогоАдреса", ЭтотОбъект, ТекущиеДанные.Пользователь);
	
	ОткрытьФорму("Документ.АдминистрированиеПользователей.Форма.ФормаВводаАдреса",, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗонОбслуживанияПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаЗонОбслуживания.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияПолей", ТекущиеДанные.ЗначенияПолей);
	
	Оповещение = Новый ОписаниеОповещения("ПослеРедактированияАдреса", ЭтотОбъект, ТекущиеДанные);
	
	ОткрытьФорму("Документ.АдминистрированиеПользователей.Форма.ФормаВводаАдреса", ПараметрыФормы, Элемент,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаНовогоАдреса(ДанныеАдреса, Пользователь) Экспорт
	
	Если ДанныеАдреса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаЗонаОтветственности = Объект.ТаблицаЗонОбслуживания.Добавить();
	СтрокаЗонаОтветственности.Пользователь = Пользователь;
	
	ЗаполнитьДанныеАдреса(СтрокаЗонаОтветственности, ДанныеАдреса);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеРедактированияАдреса(ДанныеАдреса, СтрокаЗоныОтветственности) Экспорт
	
	Если ДанныеАдреса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеАдреса(СтрокаЗоныОтветственности, ДанныеАдреса);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеАдреса(СтрокаЗоныОтветственности, ДанныеАдреса)
	
	ЗаполнитьЗначенияСвойств(СтрокаЗоныОтветственности, ДанныеАдреса);
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьВсеПрава(Команда)
	
	УстановитьОтметки("ТаблицаПравПользователей", Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеПрава(Команда)
	
	УстановитьОтметки("ТаблицаПравПользователей", Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсеПредприятия(Команда)
	
	УстановитьОтметки("ТаблицаОбслуживаемыхПредприятий", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуСоВсехПредприятий(Команда)
	
	УстановитьОтметки("ТаблицаОбслуживаемыхПредприятий", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтметки(ОбрабатываемаяТЧ, Отметка, ПроверкаПрав = Ложь)
	
	ТекущиеДанные = Элементы.ТаблицаПользователейМеркурия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = Объект[ОбрабатываемаяТЧ].НайтиСтроки(Новый Структура("Пользователь", ТекущиеДанные.Пользователь));
	
	Если ПроверкаПрав Тогда
		
		Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
			Если СписокНеДоступныхПрав.НайтиПоЗначению(ТекущаяСтрока.ПравоПользователя) = Неопределено Тогда
				Если ТекущаяСтрока.Используется <> Отметка Тогда
					ТекущаяСтрока.Используется = Отметка;
					ТекущаяСтрока.Изменен      = Не ТекущаяСтрока.Изменен;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
			Если ТекущаяСтрока.Используется <> Отметка Тогда
				ТекущаяСтрока.Используется = Отметка;
				ТекущаяСтрока.Изменен      = Не ТекущаяСтрока.Изменен;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСвязь(Команда)
	
	ВыделенныеСтроки = Элементы.ТаблицаПользователейМеркурия.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИдентификатораСтроки Из ВыделенныеСтроки Цикл
		
		ТекСтрока = Объект.ТаблицаПользователейМеркурия.НайтиПоИдентификатору(ИдентификатораСтроки);
		Если ТекСтрока.УстановкаСвязи Или ТекСтрока.РегистрацияНового Или ТекСтрока.Заблокирован Тогда
			Продолжить;
		КонецЕсли;
		ТекСтрока.УдалениеСвязи = НЕ ТекСтрока.УдалениеСвязи;
		ТекСтрока.НомерКартинки = ?(ТекСтрока.УдалениеСвязи, 0, 1);
		
	КонецЦикла;
	
	ТекущиеДанные = Элементы.ТаблицаПользователейМеркурия.ТекущиеДанные;
	
	НастроитьЗависимыеЭлементыФормы(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеСозданияПользователя(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьДанныеПользователя(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПользователей(Команда)
	
	Отбор = Новый Структура;
	Отбор.Вставить("СобственныйПользователь", Истина);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	
	Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеПодбораПользователей", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.ПользователиСистемыМеркурий.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеПодбораПользователей(РезультатПодбора, ДополнительынеПараметры) Экспорт
	
	Если РезультатПодбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТекущиеДаныеПользователей(РезультатПодбора);
	
	ИндексПоследнейСтроки = Объект.ТаблицаПользователейМеркурия.Количество() - 1;
	
	//Спозиционируемся на последеней строке
	Элементы.ТаблицаПользователейМеркурия.ТекущаяСтрока = Объект.ТаблицаПользователейМеркурия.Получить(ИндексПоследнейСтроки).ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьДокумент(Команда)
	
	ЗаполнитьДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокумент()
	
	Объект.ТаблицаПользователейМеркурия.Очистить();
	Объект.ТаблицаПравПользователей.Очистить();
	Объект.ТаблицаОбслуживаемыхПредприятий.Очистить();
	Объект.ТаблицаЗонОбслуживания.Очистить();
	Объект.ЭтапыВыполненияОбмена.Очистить();
	ДеревоЭтаповОбмена.ПолучитьЭлементы().Очистить();
	
	ЗаполнитьТекущиеДаныеПользователей();
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ПолучениеСпискаПользователей

&НаКлиенте
Процедура ПолучитьСписокПользователей(Команда)
	
	Если ЕстьОшибкиЗаполнения() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОперации = ПараметрыВыполненияДлительнойОперации();
	ПараметрыОперации.ИмяПроцедуры                = "ИнтеграцияВетисAPIПользователи.СписокПользователейКонтрагента";
	ПараметрыОперации.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение списка пользователей хозяйствующего субъекта.'");
	ПараметрыОперации.ТекстСообщения              = НСтр("ru = 'Происходит получение списка пользователей...'");
	ПараметрыОперации.ВыводитьОкноОжидания        = Истина;
	ПараметрыОперации.ДополнительныйРезультат     = Истина;
	
	ПараметрыОбмена = ПараметрыОбмена();
	ПараметрыОбмена.ВидОперации = ПредопределенноеЗначение("Справочник.ВидыОперацийОбменаAPI.ПолучениеСпискаПользователейКонтрагента");
	
	НачатьВыполненияОбменаВетисAPI(ПараметрыОперации, ПараметрыОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеПоЛогину(Команда)
	
	Если ЕстьОшибкиЗаполнения() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтотОбъект.ТолькоПросмотр);
	ПараметрыФормы.Вставить("СписокТипов"   , Новый ОписаниеТипов("Строка"));
	ПараметрыФормы.Вставить("Представление" , НСтр("ru = 'Укажите логины пользователей.'"));
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаСпискаЛогинов", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ВводЗначенийСписком", ПараметрыФормы, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаСпискаЛогинов(МассивЛогинов, ДополнительныеПараметры) Экспорт
	
	Если МассивЛогинов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОперации = ПараметрыВыполненияДлительнойОперации();
	ПараметрыОперации.ИмяПроцедуры                = "ИнтеграцияВетисAPIПользователи.ПолучениеДанныхПользователей";
	ПараметрыОперации.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение данных пользователей по логину.'");
	ПараметрыОперации.ТекстСообщения              = НСтр("ru = 'Происходит получение данных пользователей по логину...'");
	ПараметрыОперации.ВыводитьОкноОжидания        = Истина;
	ПараметрыОперации.ВыводитьПрогрессВыполнения  = Истина;
	
	ПараметрыОбмена = ПараметрыОбмена();
	ПараметрыОбмена.ВидОперации = ПредопределенноеЗначение("Справочник.ВидыОперацийОбменаAPI.ПолучениеДанныхПользователя");
	ПараметрыОбмена.Вставить("РеквизитыОперации", МассивЛогинов);
	
	НачатьВыполненияОбменаВетисAPI(ПараметрыОперации, ПараметрыОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеСопоставленияПользователей(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДанныеПользователя Из Результат Цикл
		
		Пользователь      = ДанныеПользователя.Пользователь;
		ПраваПользователя = ДанныеПользователя.ПраваПользователя;
		
		ТекущиеПраваПользователя = ИнтеграцияВетисAPIВызовСервера.ТекущиеПраваПользователя(Объект.Организация, Пользователь);
		
		СтруктураПоиска = Новый Структура("Пользователь", Пользователь);
		НайденныеСтроки = Объект.ТаблицаПользователейМеркурия.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			СтрокаПользователя = Объект.ТаблицаПользователейМеркурия.Добавить();
			СтрокаПользователя.Пользователь  = Пользователь;
			СтрокаПользователя.НомерКартинки = 1;
			
			ЗаполнитьПредприятияДоступныеДляНазначения(Пользователь);
			
		Иначе
			
			СтрокаПользователя = НайденныеСтроки[0];
			
			//По пользователю был обмен пропустим его
			Если СтрокаПользователя.Заблокирован Тогда
				Продолжить;
			КонецЕсли;
			
			НазначаемыеПраваПользователя = Объект.ТаблицаПравПользователей.НайтиСтроки(СтруктураПоиска);
			Для Каждого ТекСтрока Из НазначаемыеПраваПользователя Цикл
				Объект.ТаблицаПравПользователей.Удалить(ТекСтрока);
			КонецЦикла;
			
		КонецЕсли;
		
		//Обновим права по данным меркурия
		Для Каждого ТекПраво Из СписокПравКНазначению Цикл
			
			СтрокаПрава = Объект.ТаблицаПравПользователей.Добавить();
			СтрокаПрава.Пользователь       = Пользователь;
			СтрокаПрава.ПравоПользователя  = ТекПраво.Значение;
			Если СписокПравПоУмолчанию.НайтиПоЗначению(ТекПраво.Значение) <> Неопределено Тогда
				СтрокаПрава.Используется = Истина;
			ИначеЕсли ПраваПользователя.Найти(ТекПраво.Значение) <> Неопределено Тогда
				СтрокаПрава.Используется = Истина;
			Иначе
				СтрокаПрава.Используется = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьОшибкиЗаполнения()
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Организация"" не заполнено.'"),
			Объект.Ссылка,
			,
			"Объект.Организация",
			Отказ);
		
	КонецЕсли;
	
	Возврат Отказ;
КонецФункции

#КонецОбласти

#Область ВыполнениеОбменаПоЭтапам

&НаКлиенте
Процедура ВыполнитьОбмен(Команда)
	
	Если Модифицированность Или Объект.Ссылка.Пустая() Или Не Объект.Проведен Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПослеОтветаНаВопрос", ЭтотОбъект);
		
		ТекстВопроса = НСтр("ru = 'Документ изменен. Провести?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОбработатьКомандуВыполненияОбмена();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьЗаписатьДокумент();
	
	Если Не Модифицированность И Объект.Проведен Тогда
		
		ОбработатьКомандуВыполненияОбмена();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКомандуВыполненияОбмена()
	
	ТаблицаЭтапов.Очистить();
	
	ОпределитьЭтапыВыполненияОбмена();
	
	Если ТребуемыеОперацииОбмена.Количество() = 0 Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Нет операций, по которым необходимо выполнить обмен!'"));
		
		Возврат;
	КонецЕсли;
	
	Если ЕстьЭтапыВыполненияОбмена(Объект.ЭтапыВыполненияОбмена,,, Ложь,, Истина) Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	КонецЕсли;
	
	ТекстОписанияЭтаповЗагрузки = "";
	
	// Переключаем режим - страницу.
	Элементы.СтраницыДокумента.ТекущаяСтраница = Элементы.СтраницаОжидание;
	
	НачатьВыполнениеЭтапа();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаписатьДокумент()
	
	Если ПроверитьЗаполнение() Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьВыполнениеЭтапа()
	
	ТекущийЭтап = ТекущийЭтапВыполнения();
	
	Если ТекущийЭтап <> Неопределено Тогда
		
		ДанныеТекущегоЭтапа = Новый Массив;
		Если ЕстьЭтапыВыполненияОбмена(Объект.ЭтапыВыполненияОбмена, ТекущийЭтап,, Ложь, ДанныеТекущегоЭтапа) Тогда
			
			ТекстОписанияЭтаповЗагрузки = ТекстОписанияЭтаповЗагрузки + СтрЗаменить(НСтр("ru = 'Выполняется этап: %1.'"), "%1", ТекущийЭтап) + Символы.ПС;
			
			ДанныеПользователей = ПолучитьДанныеПользователей(ТекущийЭтап, ДанныеТекущегоЭтапа);
			
			Если ДанныеПользователей.Количество() <> 0 Тогда
				НачатьВыполнениеЭтапаОбменВетисAPI(ТекущийЭтап, ДанныеПользователей);
			КонецЕсли;
			
		Иначе
			
			ЗавершитьВыполнениеТекущегоЭтапа();
			
		КонецЕсли;
		
	Иначе
		
		ЗавершитьВыполнениеОбмена();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьВыполнениеЭтапаОбменВетисAPI(ЭтапОбмена, ДанныеПользователей)
	
	ПараметрыОперации = ПараметрыВыполненияДлительнойОперации();
	
	ПараметрыОперации.ИмяПроцедуры = "ИнтеграцияВетисAPIПользователи.ВыполнитьЗаявкуНаИзменениеСвойствПользователей";
	
	Если ЭтапОбмена = ПредопределенноеЗначение("Справочник.ВидыОперацийОбменаAPI.РегистрацияПривязкаПользователей") Тогда
		ПараметрыОперации.НаименованиеФоновогоЗадания = НСтр("ru = 'Регистрация пользователей хозяйствующего субъекта.'");
	ИначеЕсли ЭтапОбмена = ПредопределенноеЗначение("Справочник.ВидыОперацийОбменаAPI.НазначениеПравПользователей") Тогда
		ПараметрыОперации.НаименованиеФоновогоЗадания = НСтр("ru = 'Назначение прав пользователям хозяйствующего субъекта.'");
	ИначеЕсли ЭтапОбмена = ПредопределенноеЗначение("Справочник.ВидыОперацийОбменаAPI.НазначениеЗонОтветственностиПользователей") Тогда
		ПараметрыОперации.НаименованиеФоновогоЗадания = НСтр("ru = 'Назначение зон ответственности пользователям хозяйствующего субъекта.'");
	ИначеЕсли ЭтапОбмена = ПредопределенноеЗначение("Справочник.ВидыОперацийОбменаAPI.УдалениеСвязиПользователяСКонтрагентом") Тогда
		ПараметрыОперации.НаименованиеФоновогоЗадания = НСтр("ru = 'Удаление связи между пользователями и хозяйствующим субъектом.'");
	КонецЕсли;
	
	РеквизитыОперации = Новый Структура;
	РеквизитыОперации.Вставить("ДанныеПользователей", ДанныеПользователей);
	РеквизитыОперации.Вставить("Документ"           , Объект.Ссылка);
	
	ПараметрыОбмена = ПараметрыОбмена();
	ПараметрыОбмена.ВидОперации = ЭтапОбмена;
	ПараметрыОбмена.Вставить("РеквизитыОперации", РеквизитыОперации);
	
	НачатьВыполненияОбменаВетисAPI(ПараметрыОперации, ПараметрыОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВыполнениеТекущегоЭтапа(РезультатОперации = Неопределено)
	
	Если РезультатОперации <> Неопределено Тогда
		
		НоваяСтрока = ТаблицаЭтапов.Добавить();
		НоваяСтрока.ВидОперации  = РезультатОперации.ВидОперации;
		
		Если РезультатОперации.СтатусЗаявки = ПредопределенноеЗначение("Справочник.СтатусыЗаявок.УспешноОбработана") Тогда
			
			НоваяСтрока.ЭтапЗавершен = Истина;
			
		Иначе
			
			Если ЗначениеЗаполнено(РезультатОперации.ОшибкиВыполненияОбмена) Тогда
				НоваяСтрока.ОписаниеОшибки = РезультатОперации.ОшибкиВыполненияОбмена;
			Иначе
				НоваяСтрока.ОписаниеОшибки = СтрЗаменить(НСтр("ru = 'Операция не выполнена. Статус операции: %1.'"), "%1", РезультатОперации.СтатусЗаявки);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НоваяСтрока.ЭтапЗавершен Тогда
			
			ОписаниеЗавершенияЭтапа = НСтр("ru = 'Этап звершен успешно.'");
			
		Иначе
			
			ОписаниеЗавершенияЭтапа = НСтр("ru = 'Этап не завершен, во время выполнения возникли ошибки.'");
			
		КонецЕсли;
		
		ТекстОписанияЭтаповЗагрузки = ТекстОписанияЭтаповЗагрузки + ОписаниеЗавершенияЭтапа + Символы.ПС;
		
		ТребуемыеОперацииОбмена.Удалить(0);
		НачатьВыполнениеЭтапа();
		
	Иначе
		
		ЗавершитьВыполнениеОбмена();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВыполнениеОбмена()
	
	ЗавершитьВыполнениеОбменаСервер();
	ЭтотОбъект.Прочитать();
	ЗавершениеЗагрузки();
	НастроитьЗависимыеЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьВыполнениеОбменаСервер()
	
	Документы.АдминистрированиеПользователей.ОбработатьРезультатыВыполненияОбмена(Объект.Ссылка, ТаблицаЭтапов);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьДанныеПользователей(ТекущийЭтап, ДанныеТекущегоЭтапа)
	
	ДанныеПользователей = Новый Массив;
	
	Если ТекущийЭтап = ПредопределенноеЗначение("Справочник.ВидыОперацийОбменаAPI.РегистрацияПривязкаПользователей")
		ИЛИ ТекущийЭтап = ПредопределенноеЗначение("Справочник.ВидыОперацийОбменаAPI.НазначениеПравПользователей") Тогда
		
		Для Каждого ТекДанные Из ДанныеТекущегоЭтапа Цикл
			
			Пользователь      = ТекДанные.Пользователь;
			ПраваПользователя = Новый Массив;
			
			НазначаемыеПраваПользователя = Объект.ТаблицаПравПользователей.НайтиСтроки(Новый Структура("Пользователь, Используется", Пользователь, Истина));
			
			Для Каждого ТекПраво Из НазначаемыеПраваПользователя Цикл
				ПраваПользователя.Добавить(ТекПраво.ПравоПользователя);
			КонецЦикла;
			
			СтруктураДанныхПользователя = Новый Структура;
			СтруктураДанныхПользователя.Вставить("Пользователь", Пользователь);
			СтруктураДанныхПользователя.Вставить("ПраваПользователяДляНазначения", ПраваПользователя);
			
			ДанныеПользователей.Добавить(СтруктураДанныхПользователя);
			
		КонецЦикла;
		
	ИначеЕсли ТекущийЭтап = ПредопределенноеЗначение("Справочник.ВидыОперацийОбменаAPI.НазначениеЗонОтветственностиПользователей") Тогда
		
		Для Каждого ТекДанные Из ДанныеТекущегоЭтапа Цикл
			
			Пользователь                    = ТекДанные.Пользователь;
			ПредприятияПользователя         = Новый Массив;
			ЗоныОтветственностиПользователя = Новый Массив;
			
			НазначаемыеПредприятияПользователя = Объект.ТаблицаОбслуживаемыхПредприятий.НайтиСтроки(Новый Структура("Пользователь, Используется", Пользователь, Истина));
			
			Для Каждого ТекПредприятие Из НазначаемыеПредприятияПользователя Цикл
				ПредприятияПользователя.Добавить(ТекПредприятие.Предприятие);
			КонецЦикла;
			
			НазначаемыеЗоныОтветственностиПользователя = Объект.ТаблицаЗонОбслуживания.НайтиСтроки(Новый Структура("Пользователь", Пользователь));
			
			Для Каждого ТекЗонаОтветственности Из НазначаемыеЗоныОтветственностиПользователя Цикл
				СтруктураДанныхЗоны = Новый Структура("СтранаИдентификатор, РегионИдентификатор, РайонИдентификатор, ГородИдентификатор, НаселенныйПунктИдентификатор");
				ЗаполнитьЗначенияСвойств(СтруктураДанныхЗоны, ТекЗонаОтветственности);
				ЗоныОтветственностиПользователя.Добавить(СтруктураДанныхЗоны);
			КонецЦикла;
			
			СтруктураДанныхПользователя = Новый Структура;
			СтруктураДанныхПользователя.Вставить("Пользователь"                    , Пользователь);
			СтруктураДанныхПользователя.Вставить("ПредприятияДляНазначения"        , ПредприятияПользователя);
			СтруктураДанныхПользователя.Вставить("ЗоныОтветственностиДляНазначения", ЗоныОтветственностиПользователя);
			
			ДанныеПользователей.Добавить(СтруктураДанныхПользователя);
			
		КонецЦикла;
		
	ИначеЕсли ТекущийЭтап = ПредопределенноеЗначение("Справочник.ВидыОперацийОбменаAPI.УдалениеСвязиПользователяСКонтрагентом") Тогда
		
		Для Каждого ТекДанные Из ДанныеТекущегоЭтапа Цикл
			
			ДанныеПользователей.Добавить(ТекДанные.Пользователь);
			
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат ДанныеПользователей;
КонецФункции

&НаКлиенте
Функция ТекущийЭтапВыполнения()
	
	Если ТребуемыеОперацииОбмена.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат ТребуемыеОперацииОбмена.Получить(0).Значение;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ВыполненияОбменаВетисAPI

&НаКлиенте
Процедура НачатьВыполненияОбменаВетисAPI(ПараметрыОперации, ПараметрыОбмена)
	
	Задание = ВыполнитьОбменВетисAPI(ПараметрыОперации, ПараметрыОбмена, УникальныйИдентификатор);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("АдресРезультата", Задание.АдресРезультата);
	ДополнительныеПараметры.Вставить("ВидОперации"    , ПараметрыОбмена.ВидОперации);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения             = ПараметрыОперации.ТекстСообщения;
	ПараметрыОжидания.ВыводитьОкноОжидания       = ПараметрыОперации.ВыводитьОкноОжидания;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = ПараметрыОперации.ВыводитьПрогрессВыполнения;
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияОбменаВетисAPI", ЭтотОбъект, ДополнительныеПараметры);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Задание, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьОбменВетисAPI(ПараметрыОперации, ПараметрыОбмена, Идентификатор)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Идентификатор);
	ПараметрыВыполнения.ДополнительныйРезультат = ПараметрыОперации.ДополнительныйРезультат;
	
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = ПараметрыОперации.НаименованиеФоновогоЗадания;
		
	ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне(ПараметрыОперации.ИмяПроцедуры,
		ПараметрыОбмена, ПараметрыВыполнения);

	Возврат ФоновоеЗадание;
КонецФункции

&НаКлиенте
Процедура ПослеВыполненияОбменаВетисAPI(Задание, ДополнительныеПараметры) Экспорт
	
	// Ответ: 
	// - Структура - Выполнено - результат в структуре.
	// - Неопределено - Отменено пользователем.
	Если Задание = Неопределено Тогда
		
		// Освобождаем выделенную память.
		УдалитьИзВременногоХранилища(ДополнительныеПараметры.АдресРезультата); // Вызов сервера.
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Удалить("АдресРезультата");
	
	ВидОперации = ДополнительныеПараметры.ВидОперации;
	
	// Результат.Статус:
	// - "Ошибка" - описание в ОписаниеОшибки.
	// - "Выполнено" - результат в Результат.АдресРезультата.
	Если Задание.Статус = "Выполнено" Тогда
		
		Если ВидОперации = ПредопределенноеЗначение("Справочник.ВидыОперацийОбменаAPI.ПолучениеСпискаПользователейКонтрагента") Тогда
			
			РезультатВыполнения = ПолучитьИзВременногоХранилища(Задание.АдресРезультата);
			
			Если РезультатВыполнения.Свойство("ДанныеОшибки") Тогда
				
				ОткрытьФорму("ОбщаяФорма.ФормаСообщенияРезультатаОбмена", РезультатВыполнения.ДанныеОшибки, ЭтотОбъект);
				
			Иначе
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("ВидОперации"    , ВидОперации);
				ПараметрыФормы.Вставить("АдресРезультата", РезультатВыполнения.АдресДанныхЗаполнения);
				
				Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеСопоставленияПользователей", ЭтотОбъект);
				
				ОткрытьФорму("Документ.АдминистрированиеПользователей.Форма.ФормаСопоставленияПользователей", ПараметрыФормы, ЭтотОбъект,,,, Оповещение);
				
			КонецЕсли;
			
		ИначеЕсли ВидОперации = ПредопределенноеЗначение("Справочник.ВидыОперацийОбменаAPI.ПолучениеДанныхПользователя") Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ВидОперации"    , ВидОперации);
			ПараметрыФормы.Вставить("АдресРезультата", Задание.АдресРезультата);
			
			Оповещение = Новый ОписаниеОповещения("ВыполнитьПослеСопоставленияПользователей", ЭтотОбъект);
			
			ОткрытьФорму("Документ.АдминистрированиеПользователей.Форма.ФормаСопоставленияПользователей", ПараметрыФормы, ЭтотОбъект,,,, Оповещение);
			
		Иначе
			
			РезультатОперации = ПолучитьИзВременногоХранилища(Задание.АдресРезультата);
			
			ЗавершитьВыполнениеТекущегоЭтапа(РезультатОперации);
			
		КонецЕсли;
		
	ИначеЕсли Задание.Статус = "Ошибка" Тогда
		
		// Освобождаем выделенную память.
		УдалитьИзВременногоХранилища(Задание.АдресРезультата);
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить операцию %1
			    |по причине:
				|%2'"), ДополнительныеПараметры.ВидОперации, Задание.ПодробноеПредставлениеОшибки);
			
		ВывестиСообщениеОбОшибке(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыВыполненияДлительнойОперации()
	
	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("ИмяПроцедуры");
	ПараметрыОперации.Вставить("НаименованиеФоновогоЗадания");
	ПараметрыОперации.Вставить("ТекстСообщения", "");
	ПараметрыОперации.Вставить("ВыводитьОкноОжидания"      , Ложь);
	ПараметрыОперации.Вставить("ВыводитьПрогрессВыполнения", Ложь);
	ПараметрыОперации.Вставить("ДополнительныйРезультат"   , Ложь);
	
	Возврат ПараметрыОперации;
КонецФункции

&НаКлиенте
Функция ПараметрыОбмена()
	
	ПараметрыОбмена = Новый Структура;
	ПараметрыОбмена.Вставить("Организация" , Объект.Организация);
	ПараметрыОбмена.Вставить("Пользователь", Объект.Ответственный);
	ПараметрыОбмена.Вставить("ВидОперации");
	
	Возврат ПараметрыОбмена;
КонецФункции

&НаКлиенте
Процедура ВывестиСообщениеОбОшибке(Знач ТекстОшибки)
	ОчиститьСообщения();
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	Элементы.СтраницыДокумента.ТекущаяСтраница = Элементы.СтраницаДокумента;
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеЗагрузки()
	
	Элементы.СтраницыДокумента.ТекущаяСтраница = Элементы.СтраницаДокумента;
	
	Возврат;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ДобавитьДанныеПользователя(Пользователь)
	
	СтрокаПользователя = Объект.ТаблицаПользователейМеркурия.Добавить();
	СтрокаПользователя.Пользователь      = Пользователь;
	СтрокаПользователя.РегистрацияНового = Истина;
	СтрокаПользователя.НомерКартинки     = 4;
	
	ЗаполнитьПраваДоступныеДляНазначения(Пользователь);
	ЗаполнитьПредприятияДоступныеДляНазначения(Пользователь);
	
	Элементы.ТаблицаПользователейМеркурия.ТекущаяСтрока = СтрокаПользователя.ПолучитьИдентификатор();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПраваДоступныеДляНазначения(Пользователь)
	
	Для Каждого ТекПраво Из СписокПравКНазначению Цикл
		СтрокаПрава = Объект.ТаблицаПравПользователей.Добавить();
		СтрокаПрава.Пользователь      = Пользователь;
		СтрокаПрава.ПравоПользователя = ТекПраво.Значение;
		Если СписокПравПоУмолчанию.НайтиПоЗначению(ТекПраво.Значение) = Неопределено Тогда
			СтрокаПрава.Используется = Ложь;
		Иначе
			СтрокаПрава.Используется = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПредприятияДоступныеДляНазначения(Пользователь)
	
	Для Каждого ТекПредприятие Из СписокПредприятийКонтрагента Цикл
		СтрокаПредприятия = Объект.ТаблицаОбслуживаемыхПредприятий.Добавить();
		СтрокаПредприятия.Пользователь = Пользователь;
		СтрокаПредприятия.Предприятие  = ТекПредприятие.Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекущиеДаныеПользователей(МассивПользователей = Неопределено)
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.ЗаполнитьДаныеПользователей(СписокПравКНазначению, СписокПравПоУмолчанию, СписокПредприятийКонтрагента, МассивПользователей);
	
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
	ЗаполнитьВспомогательныеРеквизиты();
	
КонецПроцедуры

&НаСервере
Процедура СписокПравДоступныхДляНазначения()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПраваПользователейВСистемеМеркурий.Ссылка КАК Ссылка,
		|	ПраваПользователейВСистемеМеркурий.Код КАК Код
		|ИЗ
		|	Справочник.ПраваПользователейВСистемеМеркурий КАК ПраваПользователейВСистемеМеркурий
		|ГДЕ
		|	НЕ ПраваПользователейВСистемеМеркурий.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПраваПользователейВСистемеМеркурий.Предопределенный,
		|	ПраваПользователейВСистемеМеркурий.Наименование";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокПравКНазначению.Добавить(Выборка.Ссылка);
		Если Выборка.Код = "MERCURY_HS_AUTHORIZED_APPLICANT"
			ИЛИ Выборка.Код = "ARGUS_HS_AUTHORIZED_APPLICANT" Тогда
			СписокПравПоУмолчанию.Добавить(Выборка.Ссылка);
			СписокНеДоступныхПрав.Добавить(Выборка.Ссылка);
		ИначеЕсли Выборка.Код = "MERCURY_HS_AUTHORIZED_ASSIGNMENT" Тогда
			СписокНеДоступныхПрав.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьЭтапыВыполненияОбмена(ЭтапыВыполненияОбмена, ВидОперации = Неопределено, Пользователь = Неопределено, ЭтапЗавершен = Истина, МассивСтрокЭтапа = Неопределено, ОшибкаОбмена = Неопределено)
	
	СтруктураПоиска = Новый Структура;
	Если ВидОперации <> Неопределено Тогда
		СтруктураПоиска.Вставить("ВидОперации" , ВидОперации);
	КонецЕсли;
	Если Пользователь <> Неопределено Тогда
		СтруктураПоиска.Вставить("Пользователь", Пользователь);
	КонецЕсли;
	СтруктураПоиска.Вставить("ЭтапЗавершен"    , ЭтапЗавершен);
	Если ОшибкаОбмена <> Неопределено Тогда
		СтруктураПоиска.Вставить("ОшибкаОбмена", ОшибкаОбмена);
	КонецЕсли;
	
	МассивСтрокЭтапа = ЭтапыВыполненияОбмена.НайтиСтроки(СтруктураПоиска);
	
	Возврат МассивСтрокЭтапа.Количество() > 0;
КонецФункции

&НаСервере
Процедура ОпределитьЭтапыВыполненияОбмена()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АдминистрированиеПользователейЭтапыВыполненияОбмена.ВидОперации КАК ВидОперации,
		|	АдминистрированиеПользователейЭтапыВыполненияОбмена.НомерЭтапа КАК НомерЭтапа
		|ИЗ
		|	Документ.АдминистрированиеПользователей.ЭтапыВыполненияОбмена КАК АдминистрированиеПользователейЭтапыВыполненияОбмена
		|ГДЕ
		|	АдминистрированиеПользователейЭтапыВыполненияОбмена.Ссылка = &Ссылка
		|	И НЕ АдминистрированиеПользователейЭтапыВыполненияОбмена.ЭтапЗавершен
		|
		|СГРУППИРОВАТЬ ПО
		|	АдминистрированиеПользователейЭтапыВыполненияОбмена.ВидОперации,
		|	АдминистрированиеПользователейЭтапыВыполненияОбмена.НомерЭтапа
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерЭтапа";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТребуемыеОперацииОбмена.Добавить(Выборка.ВидОперации);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоЭтаповОбмена()
	
	ДеревоЭтаповОбмена.ПолучитьЭлементы().Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаЭтапов.ВидОперации КАК ВидОперации,
		|	ТаблицаЭтапов.Пользователь КАК Пользователь,
		|	ТаблицаЭтапов.ЭтапЗавершен КАК ЭтапЗавершен,
		|	ТаблицаЭтапов.ОписаниеОшибки КАК ОписаниеОшибки,
		|	ТаблицаЭтапов.НомерЭтапа КАК НомерЭтапа
		|ПОМЕСТИТЬ ВТ_ТаблицаЭтапов
		|ИЗ
		|	&ТаблицаЭтапов КАК ТаблицаЭтапов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаЭтапов.ВидОперации КАК ВидОперации,
		|	ВТ_ТаблицаЭтапов.Пользователь КАК Пользователь,
		|	ВТ_ТаблицаЭтапов.ЭтапЗавершен КАК ЭтапЗавершен,
		|	ВТ_ТаблицаЭтапов.ОписаниеОшибки КАК ОписаниеОшибки
		|ИЗ
		|	ВТ_ТаблицаЭтапов КАК ВТ_ТаблицаЭтапов
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_ТаблицаЭтапов.НомерЭтапа
		|ИТОГИ ПО
		|	ВидОперации";
	
	Запрос.УстановитьПараметр("ТаблицаЭтапов", Объект.ЭтапыВыполненияОбмена.Выгрузить());

	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаВидОперации = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаВидОперации.Следующий() Цикл
		
		ИтоговыйСтатусЭтапа = Истина;
		
		СтрокаВидОперации = ДеревоЭтаповОбмена.ПолучитьЭлементы().Добавить();
		СтрокаВидОперации.ВидОперацииПользователь = ВыборкаВидОперации.ВидОперации;
		
		Выборка = ВыборкаВидОперации.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокаПользователь = СтрокаВидОперации.ПолучитьЭлементы().Добавить();
			СтрокаПользователь.ВидОперацииПользователь = Выборка.Пользователь;
			СтрокаПользователь.ОписаниеОшибки          = Выборка.ОписаниеОшибки;
			СтрокаПользователь.ЭтапЗавершен            = Выборка.ЭтапЗавершен;
			
			ИтоговыйСтатусЭтапа = Мин(ИтоговыйСтатусЭтапа, Выборка.ЭтапЗавершен);
			
		КонецЦикла;
		
		СтрокаВидОперации.ЭтапЗавершен = ИтоговыйСтатусЭтапа;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НастроитьОформлениеЭлементов(ЭтапыВыполненияОбмена, НадписьЗавершенныеЭтапы, ЭлементыФормы)
	
	Если ЭтапыВыполненияОбмена.Количество() > 0 Тогда
		
		ЕстьЗавершенныеЭтапы   = ЕстьЭтапыВыполненияОбмена(ЭтапыВыполненияОбмена);
		ЕстьНеЗавершенныеЭтапы = ЕстьЭтапыВыполненияОбмена(ЭтапыВыполненияОбмена,,, Ложь);
		
		Если ЕстьНеЗавершенныеЭтапы Тогда
			
			ЭлементыФормы.КартинкаЗавершенныеЭтапы.Картинка = БиблиотекаКартинок.Предупреждение;
			НадписьЗавершенныеЭтапы = НСтр("ru = 'Есть незавершённые этапы обмена.'");
			
		Иначе
			
			ЭлементыФормы.КартинкаЗавершенныеЭтапы.Картинка = БиблиотекаКартинок.Успешно16;
			НадписьЗавершенныеЭтапы = НСтр("ru = 'Все этапы обмена завершены.'");
			
		КонецЕсли;
		
		ЭлементыФормы.ПерезаполнитьДокумент.Доступность = НЕ ЕстьЗавершенныеЭтапы;
		ЭлементыФормы.Организация.Доступность           = НЕ ЕстьЗавершенныеЭтапы;
		
	Иначе
		
		ЭлементыФормы.КартинкаЗавершенныеЭтапы.Картинка = БиблиотекаКартинок.Пустая;
		НадписьЗавершенныеЭтапы = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЗависимыеЭлементыФормы(ТекущиеДанные = Неопределено)
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = Элементы.ТаблицаПользователейМеркурия.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДоступноИзменениеПрав               = Ложь;
	ДоступноИзменениеЗонОтветственности = Ложь;
	
	Если Не ТекущиеДанные.УдалениеСвязи Тогда
		
		ЕстьЭтапРегистрации   = ЕстьЭтапыВыполненияОбмена(Объект.ЭтапыВыполненияОбмена, ПредопределенноеЗначение("Справочник.ВидыОперацийОбменаAPI.РегистрацияПривязкаПользователей"), ТекущиеДанные.Пользователь);
		ЕстьЭтапИзмененияПрав = ЕстьЭтапыВыполненияОбмена(Объект.ЭтапыВыполненияОбмена, ПредопределенноеЗначение("Справочник.ВидыОперацийОбменаAPI.НазначениеПравПользователей"), ТекущиеДанные.Пользователь);
		ДоступноИзменениеПрав = НЕ ЕстьЭтапРегистрации И НЕ ЕстьЭтапИзмененияПрав;
		
		Если Не ТекущиеДанные.РегистрацияНового Тогда
			
			ДоступноИзменениеЗонОтветственности = Не ЕстьЭтапыВыполненияОбмена(Объект.ЭтапыВыполненияОбмена, ПредопределенноеЗначение("Справочник.ВидыОперацийОбменаAPI.НазначениеЗонОтветственностиПользователей"), ТекущиеДанные.Пользователь);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ТаблицаПравПользователей.Доступность        = ДоступноИзменениеПрав;
	Элементы.ТаблицаОбслуживаемыхПредприятий.Доступность = ДоступноИзменениеЗонОтветственности;
	Элементы.ТаблицаЗонОбслуживания.Доступность          = ДоступноИзменениеЗонОтветственности;
	Элементы.УдалитьСвязьПользователя.Доступность        = НЕ ТекущиеДанные.РегистрацияНового И НЕ ТекущиеДанные.УстановкаСвязи И НЕ ТекущиеДанные.Заблокирован;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВспомогательныеРеквизиты()
	
	//Для Каждого ТекущаяСтрока Из Объект.ТаблицаПользователейМеркурия Цикл
	//	
	//	Если ТекущаяСтрока.УдалениеСвязи Тогда
	//		ТекущаяСтрока.НомерКартинки = 0;
	//	ИначеЕсли ТекущаяСтрока.РегистрацияНового Тогда
	//		ТекущаяСтрока.НомерКартинки = 4;
	//	ИначеЕсли ТекущаяСтрока.УстановкаСвязи Тогда
	//		ТекущаяСтрока.НомерКартинки = 5;
	//	Иначе
	//		ТекущаяСтрока.НомерКартинки = 1;
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//
	//НастроитьОформлениеЭлементов(Объект.ЭтапыВыполненияОбмена, НадписьЗавершенныеЭтапы, Элементы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//Пользователи
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТаблицаПользователейМеркурия.Заблокирован");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаПользователейМеркурияПользователь.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста"    , ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	//Права
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТаблицаПравПользователей.ПравоПользователя");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокНеДоступныхПрав;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаПравПользователейПравоПользователя.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаПравПользователейИспользуется.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста"    , ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТаблицаПравПользователей.Изменен");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаПравПользователей.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ИзмененноеЗначениеРеквизитаЦвет);
	
	//Предприятия
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТаблицаОбслуживаемыхПредприятий.Изменен");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаОбслуживаемыхПредприятий.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ИзмененноеЗначениеРеквизитаЦвет);
	
КонецПроцедуры

#КонецОбласти