#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Возвращает описание блокируемых реквизитов.
//
// Возвращаемое значение:
//  Массив - содержит строки в формате ИмяРеквизита[;ИмяЭлементаФормы,...]
//           где ИмяРеквизита - имя реквизита объекта, ИмяЭлементаФормы - имя элемента формы,
//           связанного с реквизитом.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	
	Возврат Результат;
	
КонецФункции

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#Область ЗаполнениеДокумента

Процедура ОбработатьРезультатыВыполненияОбмена(ДокументСсылка, ТаблицаЭтапов) Экспорт
	
	ДокументОбъект              = ДокументСсылка.ПолучитьОбъект();
	ПользователиДляБлокировки   = Новый Массив;
	ПользователиДляУдаленияПрав = Новый Массив;
	ПользователиДляУдаленияЗонОтветственности = Новый Массив;
	
	Для Каждого РезультатОбмена Из ТаблицаЭтапов Цикл
		
		СтрокиОперации = ДокументОбъект.ЭтапыВыполненияОбмена.НайтиСтроки(Новый Структура("ВидОперации, ЭтапЗавершен", РезультатОбмена.ВидОперации, Ложь));
		
		Для Каждого ТекСтрока Из СтрокиОперации Цикл
			
			ТекСтрока.ЭтапЗавершен   = РезультатОбмена.ЭтапЗавершен;
			ТекСтрока.ОписаниеОшибки = РезультатОбмена.ОписаниеОшибки;
			ТекСтрока.ОшибкаОбмена   = Истина;
			
			Если РезультатОбмена.ЭтапЗавершен Тогда
				
				Если ПользователиДляБлокировки.Найти(ТекСтрока.Пользователь) = Неопределено Тогда
					ПользователиДляБлокировки.Добавить(ТекСтрока.Пользователь);
				КонецЕсли;
				
			Иначе
				
				Если РезультатОбмена.ВидОперации = Справочники.ВидыОперацийОбменаAPI.РегистрацияПривязкаПользователей
					ИЛИ РезультатОбмена.ВидОперации = Справочники.ВидыОперацийОбменаAPI.НазначениеПравПользователей
					ИЛИ РезультатОбмена.ВидОперации = Справочники.ВидыОперацийОбменаAPI.УдалениеСвязиПользователяСКонтрагентом Тогда
					
					Если ПользователиДляУдаленияПрав.Найти(ТекСтрока.Пользователь) = Неопределено Тогда
						ПользователиДляУдаленияПрав.Добавить(ТекСтрока.Пользователь);
					КонецЕсли;
					
				КонецЕсли;
				
				Если РезультатОбмена.ВидОперации = Справочники.ВидыОперацийОбменаAPI.НазначениеЗонОтветственностиПользователей
					ИЛИ РезультатОбмена.ВидОперации = Справочники.ВидыОперацийОбменаAPI.УдалениеСвязиПользователяСКонтрагентом Тогда
					
					Если ПользователиДляУдаленияЗонОтветственности.Найти(ТекСтрока.Пользователь) = Неопределено Тогда
						ПользователиДляУдаленияЗонОтветственности.Добавить(ТекСтрока.Пользователь);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ТекПользователь Из ПользователиДляБлокировки Цикл
		
		СтрокиПользователя = ДокументОбъект.ТаблицаПользователейМеркурия.НайтиСтроки(Новый Структура("Пользователь, Заблокирован", ТекПользователь, Ложь));
		Если СтрокиПользователя.Количество() > 0 Тогда
			СтрокиПользователя[0].Заблокирован = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ДокументОбъект.Записать();
	
	УдалитьДвиженияПоНезаврешеннымЭтапам(ДокументСсылка, ПользователиДляУдаленияПрав, ПользователиДляУдаленияЗонОтветственности);
	
КонецПроцедуры

Процедура УдалитьДвиженияПоНезаврешеннымЭтапам(ДокументСсылка, ПользователиДляУдаленияПрав, ПользователиДляУдаленияЗонОтветственности)
	
	Если ПользователиДляУдаленияПрав.Количество() > 0 Тогда
		
		УдалитьЗаписиИзРегистра(ДокументСсылка, ПользователиДляУдаленияПрав, "ПраваПользователейСистемыМеркурий");
		
	КонецЕсли;
	
	Если ПользователиДляУдаленияЗонОтветственности.Количество() > 0 Тогда
		
		УдалитьЗаписиИзРегистра(ДокументСсылка, ПользователиДляУдаленияЗонОтветственности, "ПредприятияОбслуживаемыеПользователем");
		УдалитьЗаписиИзРегистра(ДокументСсылка, ПользователиДляУдаленияЗонОтветственности, "ЗоныОтветственностиПользователя");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьЗаписиИзРегистра(ДокументСсылка, МассивПользователей, ИмяРегистра)
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений." + ИмяРегистра + ".НаборЗаписей");
		ЭлементБлокировки.УстановитьЗначение("Регистратор", ДокументСсылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
		НаборЗаписей.Прочитать();
		
		ТаблицаЗаписей = НаборЗаписей.Выгрузить();
		
		Для Каждого ТекущийПользователь Из МассивПользователей Цикл
			
			НайденныеСтроки = ТаблицаЗаписей.НайтиСтроки(Новый Структура("Пользователь", ТекущийПользователь));
			
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				ТаблицаЗаписей.Удалить(ТекСтрока);
			КонецЦикла;
			
		КонецЦикла;
		
		НаборЗаписей.Загрузить(ТаблицаЗаписей);
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("ru = 'Не удалось удалить движения регистра по незавершенному этапу: %Ссылка% по причине: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ДокументСсылка);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка удаления записей регистра по незавершенному этапу.'"),
			                         УровеньЖурналаРегистрации.Ошибка,
			                         Метаданные.Документы.АдминистрированиеПользователей,
			                         ДокументСсылка,
			                         ТекстСообщения);
		
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Монопольный обработчик обновления 2.0.8.1
// Формирует документы "Администрирование пользователей" для переноса текущих данных в администрирование пользователей
Процедура ВыполнитьПереносДанныхВАдминистрированиеПользователей() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК СуществуетДокумент
		|ИЗ
		|	Документ.АдминистрированиеПользователей КАК АдминистрированиеПользователей
		|ГДЕ
		|	НЕ АдминистрированиеПользователей.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПраваПользователейВСистемеМеркурий.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПраваПользователейВСистемеМеркурий КАК ПраваПользователейВСистемеМеркурий
		|ГДЕ
		|	НЕ ПраваПользователейВСистемеМеркурий.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПраваПользователейВСистемеМеркурий.Предопределенный,
		|	ПраваПользователейВСистемеМеркурий.Наименование";
	
	МассивДоступныхПрав = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УдалитьОбслуживаемыеПредприятияСрезПоследних.Организация КАК Организация,
		|	УдалитьОбслуживаемыеПредприятияСрезПоследних.Предприятие КАК Предприятие,
		|	УдалитьОбслуживаемыеПредприятияСрезПоследних.Пользователь.ПользовательСистемыМеркурий КАК ПользовательСистемыМеркурий,
		|	УдалитьОбслуживаемыеПредприятияСрезПоследних.ИспользоватьДляЗагрузкиВСД КАК ИспользоватьДляЗагрузкиВСД
		|ИЗ
		|	РегистрСведений.УдалитьОбслуживаемыеПредприятия.СрезПоследних КАК УдалитьОбслуживаемыеПредприятияСрезПоследних
		|ГДЕ
		|	УдалитьОбслуживаемыеПредприятияСрезПоследних.Операция = ЗНАЧЕНИЕ(Перечисление.УдалитьВидыОперацииНазначенияПредприятий.Назначение)
		|	И УдалитьОбслуживаемыеПредприятияСрезПоследних.Пользователь.ПользовательСистемыМеркурий <> ЗНАЧЕНИЕ(Справочник.ПользователиСистемыМеркурий.ПустаяСсылка)
		|ИТОГИ
		|	МАКСИМУМ(ИспользоватьДляЗагрузкиВСД)
		|ПО
		|	Организация,
		|	ПользовательСистемыМеркурий";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивПользователей = Новый Массив;
	
	ВыборкаОрганизация = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизация.Следующий() Цикл
		
		Контрагент             = ОбщегоНазначенияУВСВызовСервера.КонтрагентПоОрганизации(ВыборкаОрганизация.Организация);
		ПредприятияКонтрагента = ОбщегоНазначенияУВСВызовСервера.ПредприятияПоКонтрагенту(Контрагент);
		
		ДокОбъект = Документы.АдминистрированиеПользователей.СоздатьДокумент();
		ДокОбъект.Дата          = ТекущаяДата();
		ДокОбъект.Организация   = ВыборкаОрганизация.Организация;
		ДокОбъект.Контрагент    = Контрагент;
		ДокОбъект.Ответственный = Пользователи.АвторизованныйПользователь();
		ДокОбъект.Комментарий   = НСтр("ru = '#Документ создан автоматически при обновлении на релиз 2.0.8.1. Заполнение данных по правам и зонам ответственности пользователей.'");
		
		ВыборкаПользователи = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПользователи.Следующий() Цикл
			
			Пользователь = ВыборкаПользователи.ПользовательСистемыМеркурий;
			
			Если МассивПользователей.Найти(Пользователь) = Неопределено Тогда
				МассивПользователей.Добавить(Пользователь);
			КонецЕсли;
			
			СтрокаПользователя = ДокОбъект.ТаблицаПользователейМеркурия.Добавить();
			СтрокаПользователя.Пользователь = Пользователь;
			
			//Заполним права пользователя
			Для Каждого ТекПраво Из МассивДоступныхПрав Цикл
				
				СтрокаПраво = ДокОбъект.ТаблицаПравПользователей.Добавить();
				СтрокаПраво.Пользователь = Пользователь;
				СтрокаПраво.ПравоПользователя = ТекПраво;
				//Права по-умолчанию
				Если ТекПраво.Код = "MERCURY_HS_AUTHORIZED_APPLICANT"
						Или ТекПраво.Код = "ARGUS_HS_AUTHORIZED_APPLICANT" Тогда
					СтрокаПраво.Изменен = Истина;
					СтрокаПраво.Используется = Истина;
				ИначеЕсли ТекПраво = Справочники.ПраваПользователейВСистемеМеркурий.ЗагрузкаВСД
						И ВыборкаПользователи.ИспользоватьДляЗагрузкиВСД Тогда
					СтрокаПраво.Изменен = Истина;
					СтрокаПраво.Используется = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
			ПредприятияПользователя = Новый Массив;
			
			Выборка = ВыборкаПользователи.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ПредприятияПользователя.Добавить(Выборка.Предприятие);
				
			КонецЦикла;
			
			//Заполним предприятия контрагента для пользователя
			Для Каждого ТекПредприятие Из ПредприятияКонтрагента Цикл
				
				СтрокаПредприятие = ДокОбъект.ТаблицаОбслуживаемыхПредприятий.Добавить();
				СтрокаПредприятие.Пользователь = Пользователь;
				СтрокаПредприятие.Предприятие  = ТекПредприятие;
				Если ПредприятияПользователя.Найти(ТекПредприятие) <> Неопределено Тогда
					СтрокаПредприятие.Изменен      = Истина;
					СтрокаПредприятие.Используется = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокОбъект,,, РежимЗаписиДокумента.Проведение);
		Исключение
			ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстИсключения = НСтр("ru = 'Не удалось выполнить проведение документа по причине: %ПредставлениеОшибки%.'");
			ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПредставлениеОшибки%", ПредставлениеОшибки);
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.АдминистрированиеПользователей,
				,
				ТекстИсключения);
		КонецПопытки;
		
	КонецЦикла;
	
	Для Каждого ТекПользователь Из МассивПользователей Цикл
		
		ПользовательОбъект = ТекПользователь.ПолучитьОбъект();
		ПользовательОбъект.СобственныйПользователь = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПользовательОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли