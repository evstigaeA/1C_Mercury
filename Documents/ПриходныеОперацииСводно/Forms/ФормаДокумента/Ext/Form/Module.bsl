#Область ОписаниеПеременных

// СтандартныеПодсистемы.ОценкаПроизводительности
&НаКлиенте
Перем ИдентификаторЗамераПроведение, ИдентификаторЗамераПроведениеНеНужнаРегистрацияОшибки;
// Конец СтандартныеПодсистемы.ОценкаПроизводительности

#КонецОбласти

#Область ОбработчикиСобытийФорм

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	
	Если Объект.Проведен И Объект.Статус = Перечисления.СтатусыСводныхДокументов.УспешноПогашено Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриЧтенииСозданииНаСервере();
		Объект.Статус = Перечисления.СтатусыСводныхДокументов.Новая;
	КонецЕсли;
	
	Если Объект.УполномоченноеГашение Тогда
		
		Кнопка = ЭтотОбъект.КоманднаяПанель.ПодчиненныеЭлементы.Найти("ФормаДокументПриходныеОперацииСводноВыгрузитьВУчетнуюСистему");
		Если Кнопка <> Неопределено Тогда
			Кнопка.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ЗаполнитьВспомогательныеРеквизиты();
	
	ИзменитьЗаголовокПоТипуПриходнойОперации();
	
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ИдентификаторЗамераПроведение = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ПроведениеДокументаОшибка");
		ОценкаПроизводительностиКлиент.УстановитьПризнакОшибкиЗамера(ИдентификаторЗамераПроведение, Истина);
		
		ИдентификаторЗамераПроведениеНеНужнаРегистрацияОшибки = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(ИдентификаторЗамераПроведение, "ПроведениеДокумента");
		ОценкаПроизводительностиКлиент.УстановитьПризнакОшибкиЗамера(ИдентификаторЗамераПроведение, Ложь);
		
		ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(ИдентификаторЗамераПроведениеНеНужнаРегистрацияОшибки, "ПроведениеДокументаНеНужнаРегистрацияОшибки");
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьВспомогательныеРеквизиты();
	
	ИзменитьЗаголовокПоТипуПриходнойОперации();
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов.
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов") Тогда
		МодульЗапретРедактированияРеквизитовОбъектов = ОбщегоНазначения.ОбщийМодуль("ЗапретРедактированияРеквизитовОбъектов");
		МодульЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_Органиазация

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Объект.УполномоченноеГашение Тогда
		Объект.КонтрагентОтправитель = ОбщегоНазначенияУВСВызовСервера.КонтрагентПоОрганизации(Объект.Организация);
	Иначе
		Объект.КонтрагентПолучатель = ОбщегоНазначенияУВСВызовСервера.КонтрагентПоОрганизации(Объект.Организация);
	КонецЕсли;
	
	ОчиститьТабличныеЧасти();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_КонтрагентОтправитель

&НаКлиенте
Процедура КонтрагентОтправительПриИзменении(Элемент)
	
	ОчиститьТабличныеЧасти();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОтправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.КонтрагентНачалоВыбора(Элемент, СтандартнаяОбработка,, Объект.ПредприятиеОтправитель);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОтправительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.КонтрагентАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка,, Объект.ПредприятиеОтправитель, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОтправительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.КонтрагентОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка,, Объект.ПредприятиеОтправитель, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_ПредприятиеОтправитель

&НаКлиенте
Процедура ПредприятиеОтправительПриИзменении(Элемент)
	
	Если Объект.УполномоченноеГашение Тогда
		ОбщегоНазначенияУВСКлиент.ПредприятиеПриИзменении(Объект.КонтрагентОтправитель, Объект.ПредприятиеОтправитель);
	КонецЕсли;
	
	ОчиститьТабличныеЧасти();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеОтправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.ПредприятиеНачалоВыбора(Элемент, СтандартнаяОбработка, Объект.Организация, Объект.КонтрагентОтправитель, Объект.УполномоченноеГашение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеОтправительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.ПредприятиеАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация, Объект.КонтрагентОтправитель, Объект.УполномоченноеГашение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеОтправительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.ПредприятиеОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация, Объект.КонтрагентОтправитель, Объект.УполномоченноеГашение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_ПредприятиеПолучатель

&НаКлиенте
Процедура ПредприятиеПолучательПриИзменении(Элемент)
	
	Если Не Объект.УполномоченноеГашение Тогда
		ОбщегоНазначенияУВСКлиент.ПредприятиеПриИзменении(Объект.КонтрагентПолучатель, Объект.ПредприятиеПолучатель);
	КонецЕсли;
	
	ОчиститьТабличныеЧасти();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.ПредприятиеНачалоВыбора(Элемент, СтандартнаяОбработка, Объект.Организация, Объект.КонтрагентПолучатель,,, Объект.УполномоченноеГашение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеПолучательАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.ПредприятиеАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация, Объект.КонтрагентПолучатель,, Объект.УполномоченноеГашение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеПолучательОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.ПредприятиеОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация, Объект.КонтрагентПолучатель,, Объект.УполномоченноеГашение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_ТаблицаДанных

&НаКлиенте
Процедура ТаблицаДанныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаДанных.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтаФорма.ТолькоПросмотр Тогда
		Если ПустаяСтрока(ТекущиеДанные.GUIDСтроки) Тогда
			ТекущиеДанные.GUIDСтроки = Строка(Новый УникальныйИдентификатор());
		КонецЕсли;
	КонецЕсли;
	
	Если Поле.Имя = "ТаблицаДанныхПриходнаяОперация" Тогда
		ПоказатьЗначение(, Элементы.ТаблицаДанных.ТекущиеДанные.ПриходнаяОперация);
	ИначеЕсли Поле.Имя = "ТаблицаДанныхУпаковки" Тогда
		ПросмотрУпаковок = (ТекущиеДанные.СтатусЗаявки <> ПредопределенноеЗначение("Справочник.СтатусыЗаявок.Отклонена") 
							И ТекущиеДанные.СтатусЗаявки <> ПредопределенноеЗначение("Справочник.СтатусыЗаявок.Черновик")
							И ТекущиеДанные.СтатусЗаявки <> ПредопределенноеЗначение("Справочник.СтатусыЗаявок.Подготовлен")
							И ЗначениеЗаполнено(ТекущиеДанные.СтатусЗаявки)
							)
							ИЛИ ТекущиеДанные.ТипПродукцииЖивыеЖивотные;
		ОбщегоНазначенияУВСКлиент.ПродукцияУпаковкиВыбор(ЭтотОбъект, ТекущиеДанные, ТекущиеДанные.GUIDСтроки,, ПросмотрУпаковок);
	ИначеЕсли Поле.Имя = "ТаблицаДанныхДанныеВозврата" Тогда
		
		ТекущиеДанные = Элементы.ТаблицаДанных.ТекущиеДанные;
		
		ДанныеВозврата = Новый Структура;
		ДанныеВозврата.Вставить("ДатаАктаНесоответствия"              , ТекущиеДанные.ДатаАктаНесоответствия);
		ДанныеВозврата.Вставить("НомерАктаНесоответствия"             , ТекущиеДанные.НомерАктаНесоответствия);
		ДанныеВозврата.Вставить("СерияАктаНесоответствия"             , ТекущиеДанные.СерияАктаНесоответствия);
		ДанныеВозврата.Вставить("ПричинаСоставленияАктаНесоответствия", ТекущиеДанные.ПричинаСоставленияАктаНесоответствия);
		ДанныеВозврата.Вставить("ОписаниеНесоответствия"              , ТекущиеДанные.ОписаниеНесоответствия);
		ДанныеВозврата.Вставить("ДатаВСД_Возврат"                     , ТекущиеДанные.ДатаВСД_Возврат);
		ДанныеВозврата.Вставить("ДатаТТН_Возврат"                     , ТекущиеДанные.ДатаТТН_Возврат);
		ДанныеВозврата.Вставить("НазначениеГруза_Возврат"             , ТекущиеДанные.НазначениеГруза_Возврат);
		ДанныеВозврата.Вставить("НомерТТН_Возврат"                    , ТекущиеДанные.НомерТТН_Возврат);
		ДанныеВозврата.Вставить("СерияТТН_Возврат"                    , ТекущиеДанные.СерияТТН_Возврат);
		ДанныеВозврата.Вставить("ТипТТН_Возврат"                      , ТекущиеДанные.ТипТТН_Возврат);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДанныеВозврата", ДанныеВозврата);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ТекущиеДанные.СтатусЗаявки <> ПредопределенноеЗначение("Справочник.СтатусыЗаявок.Отклонена") И ЗначениеЗаполнено(ТекущиеДанные.СтатусЗаявки));
		
		Оповещение = Новый ОписаниеОповещения("ВводДанныхВозвратаЗавершение", ЭтотОбъект, ТекущиеДанные);
		
		ОткрытьФорму("Документ.ПриходныеОперацииСводно.Форма.ФормаВводаДанныхОВозврате", ПараметрыФормы, ЭтотОбъект,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводДанныхВозвратаЗавершение(ДанныеВозврата, ТекущиеДанные) Экспорт
	
	Если ДанныеВозврата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеВозврата);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныхПередУдалением(Элемент, Отказ)
	
	МассивСвязанныхТЧ = Новый Массив;
	МассивСвязанныхТЧ.Добавить("СписокФизическихУпаковок");
	
	ОбработкаТабличнойЧастиКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭтаФорма, "ТаблицаДанных", МассивСвязанныхТЧ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныхПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ТаблицаДанных.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВСДДоИзменения = ТекущиеДанные.ВСД;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.GUIDСтроки) Тогда
		ТекущиеДанные.GUIDСтроки = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныхВСДПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаДанных.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВСД = ТекущиеДанные.ВСД;
	
	СтрокиСВСД = Объект.ТаблицаДанных.НайтиСтроки(Новый Структура("ВСД", ВСД));
	
	Отказ = СтрокиСВСД.Количество() > 1;
	
	Если Отказ Тогда
		
		Состояние(НСтр("ru = 'Обнаружены дублирующиеся ВСД. Редактирование отменено.'"));
		ТекущиеДанные.ВСД = ВСДДоИзменения;
		Элементы.ТаблицаДанных.ЗакончитьРедактированиеСтроки(Истина);
		
	Иначе
		
		МассивВСД = Новый Массив;
		МассивВСД.Добавить(ВСД);
		
		ОбработкаПодбораВСД(МассивВСД);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныхВСДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбораВСД());
	
	ОткрытьФорму("Документ.ВСД.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныхРешениеОПриемеВходнойПартииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаДанных.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.РешениеОПриемеВходнойПартии = ПредопределенноеЗначение("Справочник.РешенияОПриемеВходнойПартии.ОформитьВозвратНаВсюПоставку") Тогда
		ТекущиеДанные.Количество = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныхНоменклатураУчетнойСистемыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаДанных.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУВСКлиент.НоменклатураУчетнойСистемыНачалоВыбора(Элемент, СтандартнаяОбработка, ТекущиеДанные.Продукция);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныхНоменклатураУчетнойСистемыАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаДанных.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУВСКлиент.НоменклатураУчетнойСистемыАвтоПодбор(ДанныеВыбора, Текст, СтандартнаяОбработка, ТекущиеДанные.Продукция);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныхНоменклатураУчетнойСистемыОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаДанных.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУВСКлиент.НоменклатураУчетнойСистемыОкончаниеВводаТекста(ДанныеВыбора, Текст, СтандартнаяОбработка, ТекущиеДанные.Продукция);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов") Тогда
		МодульЗапретРедактированияРеквизитовОбъектовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЗапретРедактированияРеквизитовОбъектовКлиент");
		МодульЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор_ТаблицаДанных(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормы.Вставить("РежимВыбора"       , Истина);
	ПараметрыФормы.Вставить("Отбор"             , СтруктураОтбораВСД());
	
	ОткрытьФорму("Документ.ВСД.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаПодбораВСД(ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Функция ОбработкаПодбораВСД(МассивВСД)
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.ЗаполнитьТаблицуВСДПриходныхОпераций(МассивВСД);
	
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
	ЗаполнитьВспомогательныеРеквизиты();
	
КонецФункции

&НаКлиенте
Процедура СформироватьПриходныеОперации(Команда)
	
	Если Объект.ТаблицаДанных.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выполнение операции невозможно, т.к. список документов пуст.'"));
		Возврат;
	КонецЕсли;
	
	Если Не Модифицированность Тогда
		СоздатьДокументыПриходныхОперацийПоВСД();
		Возврат
	КонецЕсли;
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("СформироватьПриходныеОперацииЗавершение", ЭтотОбъект), "Перед заполнением, требуется документ записать. Продолжить?", Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПриходныеОперацииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьДокументыПриходныхОперацийПоВСД();

КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыПриходныхОперацийПоВСД()

	НачатьТранзакцию();
	
	Для каждого Строка Из Объект.ТаблицаДанных Цикл
		
		Если Не ЗначениеЗаполнено(Строка.ВСД) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрЗаменить(НСтр("ru = 'В строке %1 не указан ВСД!'"), "%1", Строка.НомерСтроки),
				ЭтотОбъект,
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ТаблицаДанных", Строка.НомерСтроки, "ВСД"));
			Продолжить;
		КонецЕсли;
		
		СтрокиУпаковок  = Объект.СписокФизическихУпаковок.НайтиСтроки(Новый Структура("GUIDСтроки", Строка.GUIDСтроки));
		СтруктураОтвета = Документы.ПриходныеОперацииСводно.СоздатьПриходнуюОперацию(Строка, СтрокиУпаковок, Объект.УполномоченноеГашение);
		ЗаполнитьЗначенияСвойств(Строка, СтруктураОтвета);
		
	КонецЦикла;

	Попытка
		Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрупповоеЗаполнениеРеквизитов(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗаполненияРеквизитов", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ПриходныеОперацииСводно.Форма.ФормаГрупповогоЗаполненияЗначений",, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаполненияРеквизитов(ДанныеЗаполнения, ДополнительныеПараметры) Экспорт
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗапрещенныхСтатусов = ОбщегоНазначенияУВСВызовСервера.МассивСтатусовСЗапретомРедактированияФормы();
	
	Для Каждого ТекСтрока Из Объект.ТаблицаДанных Цикл
		
		Если МассивЗапрещенныхСтатусов.Найти(ТекСтрока.СтатусЗаявки) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекЗначение Из ДанныеЗаполнения Цикл
			
			ТекСтрока[ТекЗначение.Ключ] = ТекЗначение.Значение;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусы(Команда)
	
	ОбновитьСтатусыНаСервере();
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьСтатусыНаСервере()

	Для Каждого Строка Из Объект.ТаблицаДанных Цикл
		ОбновитьСтатусВСД(Строка);
		ОбновитьСтатусПриходнойОперации(Строка);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусВСД(Строка)

	Если ЗначениеЗаполнено(Строка.ВСД) Тогда
		Строка.СтатусВСД = РегистрыСведений.СтатусыВСД.ТекущийСтатусДокумента(Строка.ВСД);
	Иначе
		Строка.СтатусВСД = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусПриходнойОперации(Строка)

	Если ЗначениеЗаполнено(Строка.ПриходнаяОперация) Тогда
		Строка.СтатусЗаявки = РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.ТекущийСтатусДокумента(Строка.ПриходнаяОперация);
	Иначе
		Строка.СтатусЗаявки = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВспомогательныеРеквизиты()
	
	Для Каждого ТекСтрока Из Объект.ТаблицаДанных Цикл
		
		ОбновитьСтатусВСД(ТекСтрока);
		ОбновитьСтатусПриходнойОперации(ТекСтрока);
		ТекСтрока.Упаковки = ОбщегоНазначенияУВСКлиентСервер.СформироватьПредставлениеСпискаУпаковок(Объект, ТекСтрока.GUIDСтроки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличныеЧасти()
	
	Объект.ТаблицаДанных.Очистить();
	Объект.СписокФизическихУпаковок.Очистить();
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураОтбораВСД()
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация"           , Объект.Организация);
	СтруктураОтбора.Вставить("КонтрагентПолучатель"  , Объект.КонтрагентПолучатель);	
	СтруктураОтбора.Вставить("ПредприятиеПолучатель" , Объект.ПредприятиеПолучатель);
	
	Если ЗначениеЗаполнено(Объект.ПредприятиеОтправитель) Тогда
		СтруктураОтбора.Вставить("ПредприятиеОтправитель", Объект.ПредприятиеОтправитель);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.КонтрагентОтправитель) Тогда
		СтруктураОтбора.Вставить("КонтрагентОтправитель" , Объект.КонтрагентОтправитель);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.НомерТТН) Тогда
		СтруктураОтбора.Вставить("НомерТТН"          , Объект.НомерТТН);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ДатаТТН) Тогда
		СтруктураОтбора.Вставить("ДатаТТН"           , Объект.ДатаТТН);
	КонецЕсли;
	
	Возврат СтруктураОтбора;
КонецФункции

&НаСервере
Процедура УстановитьСвойстваЭлементовФормы()
	
	Элементы.КонтрагентПолучатель.ТолькоПросмотр  = НЕ Объект.УполномоченноеГашение;
	Элементы.КонтрагентОтправитель.ТолькоПросмотр = Объект.УполномоченноеГашение;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьЗаголовокПоТипуПриходнойОперации()
	
	Если Объект.УполномоченноеГашение Тогда
		АвтоЗаголовок = Ложь;
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Шаблон = НСтр("ru='%1 %2 от %3'");
		Иначе
			Шаблон = НСтр("ru='%1 (создание)'");
		КонецЕсли;
		ЗаголовокТекстом = НСтр("ru = 'Уполномоченное гашение (сводно)'");
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ЗаголовокТекстом, Объект.Номер, Объект.Дата);
	Иначе
		АвтоЗаголовок = Истина;
		Заголовок = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_КонтрагентПолучатель

&НаКлиенте
Процедура КонтрагентПолучательПриИзменении(Элемент)
	
	ОчиститьТабличныеЧасти();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.КонтрагентНачалоВыбора(Элемент, СтандартнаяОбработка, Объект.Организация, Объект.ПредприятиеПолучатель,, Объект.УполномоченноеГашение);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПолучательАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.КонтрагентАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация, Объект.ПредприятиеПолучатель,, Объект.УполномоченноеГашение);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПолучательОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.КонтрагентОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация, Объект.ПредприятиеПолучатель,, Объект.УполномоченноеГашение);
	
КонецПроцедуры

#КонецОбласти
