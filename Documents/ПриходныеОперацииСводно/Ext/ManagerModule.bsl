#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Возвращает описание блокируемых реквизитов.
//
// Возвращаемое значение:
//  Массив - содержит строки в формате ИмяРеквизита[;ИмяЭлементаФормы,...]
//           где ИмяРеквизита - имя реквизита объекта, ИмяЭлементаФормы - имя элемента формы,
//           связанного с реквизитом.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	
	Возврат Результат;
	
КонецФункции

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.ВнесениеНомеровТранспортныхСредствГрупповое.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
КонецПроцедуры

// Добавляет команду создания документа "Приходные операции (сводно)".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеПриходныхОперацийСводно") Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер       = Метаданные.Документы.ПриходныеОперацииСводно.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление  = ИнтеграцияВетисAPIСервер.ПредставлениеОбъекта(Метаданные.Документы.ПриходныеОперацииСводно);
		КомандаСоздатьНаОсновании.ПараметрыФормы = Новый Структура("УполномоченноеГашение", Ложь);
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Добавляет команду создания документа "Приходные операции (сводно) уполномоченное гашение".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОснованииУполномоченноеГашение(КомандыСозданияНаОсновании) Экспорт
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеДокументовУполномоченногоГашения") Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Обработчик    = "СозданиеНаОснованииКлиент.СозданиеНаОснованииУполномоченноеГашениеСводно";
		КомандаСоздатьНаОсновании.Идентификатор = "УполномоченноеГашениеСводно";
		КомандаСоздатьНаОсновании.Представление = НСтр("ru = 'Уполномоченное гашение (сводно)'");
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.ВСД";
	КомандаПечати.Идентификатор = "ПолнаяИнформация";
	КомандаПечати.Представление = НСтр("ru = 'Ветеринарная справка (формат pdf)'");
	КомандаПечати.Картинка = БиблиотекаКартинок.ФорматPDF;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюУВСКлиент.СформироватьПечатнуюФормуВетеринарнойСправки";
	КомандаПечати.Порядок = 1;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "";
	КомандаПечати.Идентификатор = "НастройкаПечатиДокументов";
	КомандаПечати.Представление = НСтр("ru = 'Настройка печати документов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Обработчик = "УправлениеПечатьюУВСКлиент.НастройкаПечатиДокументов";
	КомандаПечати.Порядок = 2;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.ПриходныеОперацииСводно";
	КомандаПечати.Идентификатор = "СжатоеСИнформацией";
	КомандаПечати.Представление = НСтр("ru = 'Штрих-коды ВСД с дополнительной информацией'");
	КомандаПечати.Картинка = БиблиотекаКартинок.ФорматMXL;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 3;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.ПриходныеОперацииСводно";
	КомандаПечати.Идентификатор = "Сжатое";
	КомандаПечати.Представление = НСтр("ru = 'Штрих-коды ВСД'");
	КомандаПечати.Картинка = БиблиотекаКартинок.ФорматMXL;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 4;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СжатоеСИнформацией") Тогда
	    // Формируем табличный документ и добавляем его в коллекцию печатных форм.
	    УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
	        "СжатоеСИнформацией", "Штрих-коды ВСД с дополнительной информацией", Документы.ВСД.СформироватьПечатнуюФормуСжатогоВСДСИнформацией(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Сжатое") Тогда
	    // Формируем табличный документ и добавляем его в коллекцию печатных форм.
	    УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
	        "Сжатое", "Штрих-коды ВСД", Документы.ВСД.СформироватьПечатнуюФормуСжатогоВСД(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;

КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Ссылка");
	Поля.Добавить("Номер");
	Поля.Добавить("Дата");
	Поля.Добавить("УполномоченноеГашение");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	Если Данные.УполномоченноеГашение Тогда
		СтандартнаяОбработка = Ложь;
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Уполномоченное гашение (сводно) %1 от %2'"),
			Данные.Номер,
			Данные.Дата);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаСписка" Тогда
		
		Если Параметры.Свойство("ТекущаяСтрока") И ЗначениеЗаполнено(Параметры.ТекущаяСтрока) Тогда
			
			УполномоченноеГашение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ТекущаяСтрока, "УполномоченноеГашение");
			
			СтандартнаяОбработка = Ложь;
			Параметры.Вставить("УполномоченноеГашение", УполномоченноеГашение);
			
			ВыбраннаяФорма = "Документ.ПриходныеОперацииСводно.Форма.ФормаСписка"
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоздатьПриходнуюОперацию(СтрокаДокумента, СтрокиУпаковок, УполномоченноеГашение) Экспорт
	
	СтруктураОтвета = Новый Структура("ПриходнаяОперация, СтатусЗаявки");
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПриходныеОперации.Ссылка КАК ПриходнаяОперация,
		|	ЕСТЬNULL(ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.Статус, НЕОПРЕДЕЛЕНО) КАК СтатусЗаявки
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПриходныеОперацииДокумент.Ссылка КАК Ссылка,
		|		ПриходныеОперацииДокумент.Дата КАК Дата
		|	ИЗ
		|		Документ.ПриходныеОперации КАК ПриходныеОперацииДокумент
		|	ГДЕ
		|		НЕ ПриходныеОперацииДокумент.ПометкаУдаления
		|		И ПриходныеОперацииДокумент.ВСД = &ВСД) КАК ПриходныеОперации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.СрезПоследних КАК ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних
		|		ПО (ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.ДокументСсылка = ПриходныеОперации.Ссылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПриходныеОперации.Дата УБЫВ";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ВСД", СтрокаДокумента.ВСД);
	ВыборкаРезультата = Запрос.Выполнить().Выбрать();
	
	СписокСостоянийДляИзменения = Новый СписокЗначений();
	СписокСостоянийДляИзменения.Добавить(Неопределено);
	СписокСостоянийДляИзменения.Добавить(Справочники.СтатусыЗаявок.Черновик);
	СписокСостоянийДляИзменения.Добавить(Справочники.СтатусыЗаявок.Подготовлен);
	СписокСостоянийДляИзменения.Добавить(Справочники.СтатусыЗаявок.ЗаявкаОтмененаАдминистратором);
	СписокСостоянийДляИзменения.Добавить(Справочники.СтатусыЗаявок.Отклонена);
	СписокСостоянийДляИзменения.Добавить(Справочники.СтатусыЗаявок.ОшибкаОтправкиЗапроса);
	
	Если ВыборкаРезультата.Следующий() Тогда
		
		Если СписокСостоянийДляИзменения.НайтиПоЗначению(ВыборкаРезультата.СтатусЗаявки) = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтруктураОтвета, ВыборкаРезультата);
			Возврат СтруктураОтвета;
		КонецЕсли;
		
		ДокументПриходнаяОперация = ВыборкаРезультата.ПриходнаяОперация.ПолучитьОбъект();
		
		Для Каждого ТабЧасть Из ДокументПриходнаяОперация.Метаданные().ТабличныеЧасти Цикл
			ДокументПриходнаяОперация[ТабЧасть.Имя].Очистить();
		КонецЦикла;
		
	Иначе
		ДокументПриходнаяОперация = Документы.ПриходныеОперации.СоздатьДокумент();
	КонецЕсли;
	
	ДокументПриходнаяОперация.УполномоченноеГашение = УполномоченноеГашение;
	
	ДанныеЗаполнения = ОбщегоНазначенияУВССервер.ПолучитьДанныеДляЗаполненияПриходнойОперацииПоВСД(СтрокаДокумента.ВСД);
	
	ВыборкаШапка = ДанныеЗаполнения[4].Выбрать();
	ВыборкаШапка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ДокументПриходнаяОперация, ВыборкаШапка);
	
	ПоследнийТранспортПерегрузки = Справочники.Транспорт.ПустаяСсылка();
	ВыборкаТаблицаМаршрутСледования = ДанныеЗаполнения[5].Выбрать();
	Пока ВыборкаТаблицаМаршрутСледования.Следующий() Цикл
		НоваяСтрока = ДокументПриходнаяОперация.ТаблицаМаршрутСледования.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаТаблицаМаршрутСледования);
		Если ВыборкаТаблицаМаршрутСледования.ОсуществляетсяПерегрузка Тогда
			ПоследнийТранспортПерегрузки = ВыборкаТаблицаМаршрутСледования.ИнформацияОСледующемТранспорте;
		КонецЕсли;
	КонецЦикла;
	
	Если ПоследнийТранспортПерегрузки <> Справочники.Транспорт.ПустаяСсылка() Тогда
		ДокументПриходнаяОперация.Транспорт = ПоследнийТранспортПерегрузки;
	КонецЕсли;
	
	ВыборкаПроизводители = ДанныеЗаполнения[6].Выбрать();
	Пока ВыборкаПроизводители.Следующий() Цикл
		НоваяСтрока = ДокументПриходнаяОперация.ПроизводителиПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПроизводители);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ДокументПриходнаяОперация, СтрокаДокумента);
	
	ДокументПриходнаяОперация.ВСД                = СтрокаДокумента.ВСД;
	ДокументПриходнаяОперация.Дата               = ТекущаяДата();
	ДокументПриходнаяОперация.ТипТТН             = СтрокаДокумента.ВСД.ТипТТН;
	Если СтрокаДокумента.РешениеОПриемеВходнойПартии = Справочники.РешенияОПриемеВходнойПартии.ОформитьВозвратНаВсюПоставку
		ИЛИ СтрокаДокумента.РешениеОПриемеВходнойПартии = Справочники.РешенияОПриемеВходнойПартии.ПринятьЧастьГруза Тогда
			ДокументПриходнаяОперация.Количество_Возврат = СтрокаДокумента.ВСД.Количество - СтрокаДокумента.Количество;
	КонецЕсли;

	//Упаковки
	Для Каждого ТекДанные Из СтрокиУпаковок Цикл
		НоваяСтрока = ДокументПриходнаяОперация.СписокФизическихУпаковок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекДанные);
	КонецЦикла;
		
	ДокументПриходнаяОперацияСсылка = Документы.ПриходныеОперации.ПустаяСсылка();
	
	Попытка
		ДокументПриходнаяОперация.Записать();
		СтруктураОтвета.ПриходнаяОперация = ДокументПриходнаяОперация.Ссылка;
		СтруктураОтвета.СтатусЗаявки = ВыборкаРезультата.СтатусЗаявки;
		Возврат СтруктураОтвета;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		СтруктураОтвета.ПриходнаяОперация = Документы.ПриходныеОперации.ПустаяСсылка();
		СтруктураОтвета.СтатусЗаявки = ВыборкаРезультата.СтатусЗаявки;
		Возврат СтруктураОтвета;
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#КонецЕсли