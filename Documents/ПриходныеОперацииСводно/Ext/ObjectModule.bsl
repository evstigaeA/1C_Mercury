#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("Ответственный") Тогда
		ДополнительныеСвойства.Свойство("Ответственный", Ответственный);
	Иначе
		Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		// Проверяем, сколько документов из "ТаблицаДанных" успешно обработано и ставим статус группового документа
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТЧ_ТаблицаДанных.ПриходнаяОперация КАК ПриходнаяОперация
			|ПОМЕСТИТЬ ВТ_ТаблицаДанных
			|ИЗ
			|	&ТЧ_ТаблицаДанных КАК ТЧ_ТаблицаДанных
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПриходныеСводноТаблицаДанных.ПриходнаяОперация КАК ПриходнаяОперация
			|ИЗ
			|	ВТ_ТаблицаДанных КАК ПриходныеСводноТаблицаДанных
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.ДокументСсылка КАК ДокументСсылка,
			|			ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.Статус КАК Статус
			|		ИЗ
			|			РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.СрезПоследних КАК ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних
			|		ГДЕ
			|			ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.Статус = &Статус) КАК ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних
			|		ПО ПриходныеСводноТаблицаДанных.ПриходнаяОперация = ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.ДокументСсылка";
		
		Запрос.УстановитьПараметр("ТЧ_ТаблицаДанных", ТаблицаДанных);
		Запрос.УстановитьПараметр("Статус", Справочники.СтатусыЗаявок.УспешноОбработана);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Если РезультатЗапроса.Выгрузить().Количество() >= ТаблицаДанных.Количество() Тогда
				Статус = Перечисления.СтатусыСводныхДокументов.УспешноПогашено;
			Иначе
				Статус = Перечисления.СтатусыСводныхДокументов.ЧастичноПогашено;
			КонецЕсли;
		КонецЕсли;
	
		Для Каждого ТекСтрока Из ТаблицаДанных Цикл
			Если Не ЗначениеЗаполнено(ТекСтрока.ПриходнаяОперация) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтрЗаменить(НСтр("ru = 'В строке %1 не указана Приходная операция!'"), "%1", ТекСтрока.НомерСтроки),
					ЭтотОбъект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ТаблицаДанных", ТекСтрока.НомерСтроки, "ПриходнаяОперация"),
					,
					Отказ);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	УИДокументаУчетнойСистемы = "";
	ТаблицаДанных.Очистить();
	СписокФизическихУпаковок.Очистить();
	
	РеквизитПроверки = ?(УполномоченноеГашение, "ПредприятиеОтправитель", "ПредприятиеПолучатель");
	
	ЕстьПравоОбслуживания = ИнтеграцияВетисAPIСервер.ПроверитьОграниченияПользователя(Организация, ЭтотОбъект[РеквизитПроверки]);
	
	Если НЕ ЕстьПравоОбслуживания Тогда
		ЭтотОбъект[РеквизитПроверки] = Неопределено;
	КонецЕсли;
	
	Если УполномоченноеГашение Тогда
		
		Если НЕ РегистрыСведений.УполномоченноеГашение.ВозможностьОформленияУполномоченногоГашения(Организация, КонтрагентПолучатель) Тогда
			
			КонтрагентПолучатель  = Неопределено;
			ПредприятиеПолучатель = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ИнтеграцияВетисAPIСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Попытка
		ИнтеграцияВетисAPIОтправкаЗаявокНаОформление.СформироватьЗаявки(ТаблицаДанных.ВыгрузитьКолонку("ПриходнаяОперация"), Отказ);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(), Ссылка,,,Отказ);
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если Статус = Перечисления.СтатусыСводныхДокументов.УспешноПогашено ИЛИ Статус = Перечисления.СтатусыСводныхДокументов.ЧастичноПогашено Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("ДокументОснование")
			И (ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ТранспортныеОперации")) Тогда
			
			ДанныеЗаполнения.Свойство("УполномоченноеГашение", УполномоченноеГашение);
			
			ЗаполнитьДокументНаОснованииТранспортнойОперации(ДанныеЗаполнения.ДокументОснование);
			
		Иначе
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ТранспортныеОперации") Тогда
		
		ЗаполнитьДокументНаОснованииТранспортнойОперации(ДанныеЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьДокументНаОснованииТранспортнойОперации(Знач ДокументОснование)
	
	ТекстОшибки = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА &УполномоченноеГашение
		|			ТОГДА ТранспортныеОперации.Организация
		|		ИНАЧЕ НастройкиПодключенияКВетисAPI.Организация
		|	КОНЕЦ КАК Организация,
		|	ТранспортныеОперации.КонтрагентОтправитель КАК КонтрагентОтправитель,
		|	ТранспортныеОперации.ПредприятиеОтправитель КАК ПредприятиеОтправитель,
		|	ТранспортныеОперации.КонтрагентПолучатель КАК КонтрагентПолучатель,
		|	ТранспортныеОперации.ПредприятиеПолучатель КАК ПредприятиеПолучатель,
		|	ТранспортныеОперации.НомерТТН КАК НомерТТН,
		|	ТранспортныеОперации.ДатаТТН КАК ДатаТТН,
		|	ЕСТЬNULL(ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.Статус, ""Отсутствует"") КАК Статус,
		|	ВЫБОР
		|		КОГДА УполномоченноеГашение.Контрагент ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОшибкаУполномоченногоГашения
		|ИЗ
		|	Документ.ТранспортныеОперации КАК ТранспортныеОперации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.СрезПоследних(, ДокументСсылка = &ДокументОснование) КАК ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних
		|		ПО ТранспортныеОперации.Ссылка = ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.ДокументСсылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УполномоченноеГашение КАК УполномоченноеГашение
		|		ПО ТранспортныеОперации.Организация = УполномоченноеГашение.Организация
		|			И ТранспортныеОперации.КонтрагентПолучатель = УполномоченноеГашение.Контрагент
		|			И (&УполномоченноеГашение = ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиПодключенияКВетисAPI КАК НастройкиПодключенияКВетисAPI
		|		ПО ТранспортныеОперации.КонтрагентПолучатель = НастройкиПодключенияКВетисAPI.Контрагент
		|			И (НЕ НастройкиПодключенияКВетисAPI.ПометкаУдаления)
		|			И (&УполномоченноеГашение = ЛОЖЬ)
		|ГДЕ
		|	ТранспортныеОперации.Ссылка = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование"    , ДокументОснование);
	Запрос.УстановитьПараметр("УполномоченноеГашение", УполномоченноеГашение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если Выборка.Статус <> Справочники.СтатусыЗаявок.УспешноОбработана Тогда
		
		ТекстОшибки = НСтр("ru='Документ %Документ% находится в статусе ""%Статус%"". Ввод на основании разрешен только в статусе ""Заявка успешно обработана"".'");
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДокументОснование);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%"  , Выборка.Статус);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.Организация) Тогда
		
		Если УполномоченноеГашение Тогда
			
			Если Выборка.ОшибкаУполномоченногоГашения Тогда
				
				ТекстОшибки = НСтр("ru='Хоз. субъект получатель %Контрагент% не доступен для оформления уполномоченного гашения. Ввод на основании запрещен.'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Контрагент%", Выборка.КонтрагентПолучатель);
				
				ВызватьИсключение ТекстОшибки;
				
			КонецЕсли;
			
			ПредприятиеПроверки = Выборка.ПредприятиеОтправитель;
			
		Иначе
			
			ПредприятиеПроверки = Выборка.ПредприятиеПолучатель;
			
		КонецЕсли;
		
		Если Не ИнтеграцияВетисAPIСервер.ПроверитьОграниченияПользователя(Выборка.Организация, ПредприятиеПроверки,, ТекстОшибки) Тогда
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
	Иначе
		
		ТекстОшибки = НСтр("ru='Хоз. субъект получатель %Контрагент% не является обслуживаемым. Ввод на основании запрещен.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Контрагент%", Выборка.КонтрагентПолучатель);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументВСД.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ВСД КАК ДокументВСД
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыВСД.СрезПоследних КАК СтатусыВСДСрезПоследних
		|		ПО ДокументВСД.Ссылка = СтатусыВСДСрезПоследних.ВСД
		|ГДЕ
		|	ДокументВСД.Организация = &Организация
		|	И СтатусыВСДСрезПоследних.СтатусВСД = ЗНАЧЕНИЕ(Справочник.СтатусыВСД.Оформлен)
		|	И ДокументВСД.GUID_Меркурий В
		|			(ВЫБРАТЬ
		|				ТранспортныеОперацииТаблицаВСД.ВСД.GUID_Меркурий КАК ВСДGUID_Меркурий
		|			ИЗ
		|				Документ.ТранспортныеОперации.ТаблицаВСД КАК ТранспортныеОперацииТаблицаВСД
		|			ГДЕ
		|				ТранспортныеОперацииТаблицаВСД.Ссылка = &Ссылка)";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Ссылка"     , ДокументОснование);
	
	МассивВСД = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ЗаполнитьТаблицуВСДПриходныхОпераций(МассивВСД);
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнитьТаблицуВСДПриходныхОпераций(МассивВСД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДанных.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДанных.ВСД КАК ВСД
		|ПОМЕСТИТЬ ВТ_ТаблицаДанных
		|ИЗ
		|	&ТаблицаДанных КАК ТаблицаДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыПродукции.Ссылка КАК ВидПродукции
		|ПОМЕСТИТЬ ВТ_ИсключенияИзЖивыхЖивотных
		|ИЗ
		|	Справочник.ВидыПродукции КАК ВидыПродукции
		|ГДЕ
		|	ВидыПродукции.GUID_Меркурий В(&МассивИдентификаторов)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидПродукции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаДанных.ВСД КАК ВСД,
		|	ВТ_ТаблицаДанных.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ТаблицаВСД
		|ИЗ
		|	ВТ_ТаблицаДанных КАК ВТ_ТаблицаДанных
		|ГДЕ
		|	ВТ_ТаблицаДанных.ВСД В(&МассивВСД)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВСД.Ссылка,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	Документ.ВСД КАК ВСД
		|ГДЕ
		|	ВСД.Ссылка В(&МассивВСД)
		|	И НЕ ВСД.Ссылка В
		|				(ВЫБРАТЬ
		|					ВТ_ТаблицаДанных.ВСД КАК ВСД
		|				ИЗ
		|					ВТ_ТаблицаДанных КАК ВТ_ТаблицаДанных)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаВСД.НомерСтроки КАК НомерСтроки,
		|	ТаблицаВСД.ВСД КАК ВСД,
		|	ТаблицаВСД.ВСД.ТипПродукции КАК ТипПродукции,
		|	ТаблицаВСД.ВСД.ВидПродукции КАК ВидПродукции,
		|	ТаблицаВСД.ВСД.ПодвидПродукции КАК ПодвидПродукции,
		|	ТаблицаВСД.ВСД.Продукция КАК Продукция,
		|	ТаблицаВСД.ВСД.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаВСД.ВСД.Количество КАК Количество,
		|	СтатусыВСДСрезПоследних.СтатусВСД КАК СтатусВСД
		|ПОМЕСТИТЬ ДанныеВСД
		|ИЗ
		|	ТаблицаВСД КАК ТаблицаВСД
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыВСД.СрезПоследних КАК СтатусыВСДСрезПоследних
		|		ПО ТаблицаВСД.ВСД = СтатусыВСДСрезПоследних.ВСД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеВСД.Продукция КАК Продукция,
		|	СоответствиеПродукцииНоменклатуреУчетнойСистемы.НоменклатураУчетнойСистемы КАК НоменклатураУчетнойСистемы
		|ПОМЕСТИТЬ ВТ_Соответствие
		|ИЗ
		|	ДанныеВСД КАК ДанныеВСД
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеПродукцииНоменклатуреУчетнойСистемы КАК СоответствиеПродукцииНоменклатуреУчетнойСистемы
		|		ПО ДанныеВСД.Продукция = СоответствиеПродукцииНоменклатуреУчетнойСистемы.Продукция
		|ГДЕ
		|	СоответствиеПродукцииНоменклатуреУчетнойСистемы.Продукция В
		|			(ВЫБРАТЬ
		|				ДанныеВСД.Продукция
		|			ИЗ
		|				ДанныеВСД КАК ДанныеВСД)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеВСД.Продукция КАК Продукция,
		|	МАКСИМУМ(ВТ_Соответствие.НоменклатураУчетнойСистемы) КАК НоменклатураУчетнойСистемы
		|ПОМЕСТИТЬ ВТ_СписокНайденнойНоменклатура
		|ИЗ
		|	ДанныеВСД КАК ДанныеВСД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Соответствие КАК ВТ_Соответствие
		|		ПО ДанныеВСД.Продукция = ВТ_Соответствие.Продукция
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеВСД.Продукция
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеВСД.Продукция,
		|	МАКСИМУМ(НоменклатураУчетнойСистемы.Ссылка)
		|ИЗ
		|	ДанныеВСД КАК ДанныеВСД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураУчетнойСистемы КАК НоменклатураУчетнойСистемы
		|		ПО ДанныеВСД.Продукция.Наименование = НоменклатураУчетнойСистемы.Наименование
		|ГДЕ
		|	НЕ ДанныеВСД.Продукция В
		|				(ВЫБРАТЬ
		|					ВТ_Соответствие.Продукция
		|				ИЗ
		|					ВТ_Соответствие КАК ВТ_Соответствие)
		|	И НоменклатураУчетнойСистемы.Наименование В
		|			(ВЫБРАТЬ
		|				ДанныеВСД.Продукция.Наименование
		|			ИЗ
		|				ДанныеВСД КАК ДанныеВСД)
		|	И НЕ НоменклатураУчетнойСистемы.ЭтоГруппа
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеВСД.Продукция
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПриходныеОперацииДокумент.Ссылка КАК ПриходнаяОперация,
		|	ПриходныеОперацииДокумент.ВСД КАК ВСД,
		|	ПриходныеОперацииДокумент.ДатаАктаНесоответствия КАК ДатаАктаНесоответствия,
		|	ПриходныеОперацииДокумент.ДатаВСД_Возврат КАК ДатаВСД_Возврат,
		|	ПриходныеОперацииДокумент.ДатаТТН_Возврат КАК ДатаТТН_Возврат,
		|	ПриходныеОперацииДокумент.Продукция КАК Продукция,
		|	ПриходныеОперацииДокумент.НоменклатураУчетнойСистемы КАК НоменклатураУчетнойСистемы,
		|	ПриходныеОперацииДокумент.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ПриходныеОперацииДокумент.Количество КАК Количество,
		|	ПриходныеОперацииДокумент.НазначениеГруза_Возврат КАК НазначениеГруза_Возврат,
		|	ПриходныеОперацииДокумент.НомерАктаНесоответствия КАК НомерАктаНесоответствия,
		|	ПриходныеОперацииДокумент.НомерТТН_Возврат КАК НомерТТН_Возврат,
		|	ПриходныеОперацииДокумент.ОписаниеНесоответствия КАК ОписаниеНесоответствия,
		|	ПриходныеОперацииДокумент.ОтветственныйЗаВетеринарныйКонтроль КАК ОтветственныйЗаВетеринарныйКонтроль,
		|	ПриходныеОперацииДокумент.ОтветственныйЗаДокументарныйКонтроль КАК ОтветственныйЗаДокументарныйКонтроль,
		|	ПриходныеОперацииДокумент.ПричинаСоставленияАктаНесоответствия КАК ПричинаСоставленияАктаНесоответствия,
		|	ПриходныеОперацииДокумент.РезультатВетеринарногоКонтроля КАК РезультатВетеринарногоКонтроля,
		|	ПриходныеОперацииДокумент.РешениеОПриемеВходнойПартии КАК РешениеОПриемеВходнойПартии,
		|	ПриходныеОперацииДокумент.РезультатДокументарногоКонтроля КАК РезультатДокументарногоКонтроля,
		|	ПриходныеОперацииДокумент.СерияАктаНесоответствия КАК СерияАктаНесоответствия,
		|	ПриходныеОперацииДокумент.СерияТТН_Возврат КАК СерияТТН_Возврат,
		|	ПриходныеОперацииДокумент.ТипТТН_Возврат КАК ТипТТН_Возврат,
		|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.Статус КАК СтатусЗаявки
		|ПОМЕСТИТЬ ДанныеПриходнойОперации
		|ИЗ
		|	Документ.ПриходныеОперации КАК ПриходныеОперацииДокумент
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.СрезПоследних КАК ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних
		|		ПО ПриходныеОперацииДокумент.Ссылка = ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.ДокументСсылка
		|ГДЕ
		|	НЕ ПриходныеОперацииДокумент.ПометкаУдаления
		|	И ПриходныеОперацииДокумент.ВСД В
		|			(ВЫБРАТЬ
		|				ТаблицаВСД.ВСД КАК ВСД
		|			ИЗ
		|				ТаблицаВСД КАК ТаблицаВСД)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеВСД.НомерСтроки КАК НомерСтроки,
		|	ДанныеВСД.ВСД КАК ВСД,
		|	ДанныеВСД.ТипПродукции КАК ТипПродукции,
		|	ДанныеВСД.ПодвидПродукции КАК ПодвидПродукции,
		|	ДанныеВСД.СтатусВСД КАК СтатусВСД,
		|	ДанныеПриходнойОперации.ПриходнаяОперация КАК ПриходнаяОперация,
		|	ЕСТЬNULL(ДанныеПриходнойОперации.НоменклатураУчетнойСистемы, ВТ_СписокНайденнойНоменклатура.НоменклатураУчетнойСистемы) КАК НоменклатураУчетнойСистемы,
		|	ЕСТЬNULL(ДанныеПриходнойОперации.Продукция, ДанныеВСД.Продукция) КАК Продукция,
		|	ЕСТЬNULL(ДанныеПриходнойОперации.ЕдиницаИзмерения, ДанныеВСД.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(ДанныеПриходнойОперации.Количество, ДанныеВСД.Количество) КАК Количество,
		|	ДанныеПриходнойОперации.ДатаАктаНесоответствия КАК ДатаАктаНесоответствия,
		|	ДанныеПриходнойОперации.ДатаВСД_Возврат КАК ДатаВСД_Возврат,
		|	ДанныеПриходнойОперации.ДатаТТН_Возврат КАК ДатаТТН_Возврат,
		|	ДанныеПриходнойОперации.НазначениеГруза_Возврат КАК НазначениеГруза_Возврат,
		|	ДанныеПриходнойОперации.НомерАктаНесоответствия КАК НомерАктаНесоответствия,
		|	ДанныеПриходнойОперации.НомерТТН_Возврат КАК НомерТТН_Возврат,
		|	ДанныеПриходнойОперации.ОписаниеНесоответствия КАК ОписаниеНесоответствия,
		|	ДанныеПриходнойОперации.ОтветственныйЗаДокументарныйКонтроль КАК ОтветственныйЗаДокументарныйКонтроль,
		|	ДанныеПриходнойОперации.ПричинаСоставленияАктаНесоответствия КАК ПричинаСоставленияАктаНесоответствия,
		|	ДанныеПриходнойОперации.РезультатВетеринарногоКонтроля КАК РезультатВетеринарногоКонтроля,
		|	ДанныеПриходнойОперации.РешениеОПриемеВходнойПартии КАК РешениеОПриемеВходнойПартии,
		|	ДанныеПриходнойОперации.РезультатДокументарногоКонтроля КАК РезультатДокументарногоКонтроля,
		|	ДанныеПриходнойОперации.СерияАктаНесоответствия КАК СерияАктаНесоответствия,
		|	ДанныеПриходнойОперации.СерияТТН_Возврат КАК СерияТТН_Возврат,
		|	ДанныеПриходнойОперации.ТипТТН_Возврат КАК ТипТТН_Возврат,
		|	ДанныеПриходнойОперации.СтатусЗаявки КАК СтатусЗаявки,
		|	ВЫБОР
		|		КОГДА ДанныеПриходнойОперации.СтатусЗаявки В (&МассивСтатусов)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЗапретИзмененияДанных,
		|	ВЫБОР
		|		КОГДА ДанныеВСД.ТипПродукции = ЗНАЧЕНИЕ(Справочник.ТипыПродукции.ЖивыеЖивотные)
		|				И НЕ ДанныеВСД.ВидПродукции В
		|						(ВЫБРАТЬ
		|							ВТ_ИсключенияИзЖивыхЖивотных.ВидПродукции КАК ВидПродукции
		|						ИЗ
		|							ВТ_ИсключенияИзЖивыхЖивотных КАК ВТ_ИсключенияИзЖивыхЖивотных)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТипПродукцииЖивыеЖивотные
		|ИЗ
		|	ДанныеВСД КАК ДанныеВСД
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПриходнойОперации КАК ДанныеПриходнойОперации
		|		ПО ДанныеВСД.ВСД = ДанныеПриходнойОперации.ВСД
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СписокНайденнойНоменклатура КАК ВТ_СписокНайденнойНоменклатура
		|		ПО ДанныеВСД.Продукция = ВТ_СписокНайденнойНоменклатура.Продукция";
	
	Запрос.УстановитьПараметр("ТаблицаДанных" , ТаблицаДанных.Выгрузить());
	Запрос.УстановитьПараметр("МассивВСД"     , МассивВСД);
	Запрос.УстановитьПараметр("МассивСтатусов", РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.МассивСтатусовСЗапретомРедактированияФормы());
	Запрос.УстановитьПараметр("МассивИдентификаторов", ИнтеграцияВетисAPIСлужебныйПовтИсп.ПродукцияИсключениеИзТипаЖивыеЖивотные());
	
	РеквизитыПоУмолчанию = ЗаполнениеРеквизитовОбъектов.ПолучитьЗначенияРеквизитовЗаполнения("Документ.ПриходныеОперации");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
 		Если Выборка.НомерСтроки = Неопределено Тогда // Новая строка
			СтрокаТЧ = ТаблицаДанных.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, Выборка);
			СтрокаТЧ.GUIDСтроки = Строка(Новый УникальныйИдентификатор);
			
			// Для новой строки заполним значения по умолчанию, если они не заполнены
			Для Каждого ТекКлюч Из РеквизитыПоУмолчанию Цикл
				
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ[ТекКлюч.Ключ]) Тогда
					
					СтрокаТЧ[ТекКлюч.Ключ] = ТекКлюч.Значение;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЗначениеЗаполнено(СтрокаТЧ.ПриходнаяОперация) Тогда
				ЗаполнитьУпаковки(СтрокаТЧ.ПриходнаяОперация.СписокФизическихУпаковок, СтрокаТЧ);
			Иначе
				ЗаполнитьУпаковки(СтрокаТЧ.ВСД.СписокФизическихУпаковок, СтрокаТЧ);
			КонецЕсли;
			
		Иначе
			СтрокаТЧ = ТаблицаДанных[Выборка.НомерСтроки - 1]; // Данный ВСД уже есть в таб части если заявка в разрешенном статусе, то обновим данные
			Если Не Выборка.ЗапретИзмененияДанных Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТЧ, Выборка);
				
				Если ЗначениеЗаполнено(СтрокаТЧ.ПриходнаяОперация) Тогда
					ЗаполнитьУпаковки(СтрокаТЧ.ПриходнаяОперация.СписокФизическихУпаковок, СтрокаТЧ);
				Иначе
					ЗаполнитьУпаковки(СтрокаТЧ.ВСД.СписокФизическихУпаковок, СтрокаТЧ);
				КонецЕсли;
			
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьУпаковки(СписокУпаковок, СтрокаТЧ)
	
	НайденныеСтроки = СписокФизическихУпаковок.НайтиСтроки(Новый Структура("GUIDСтроки", СтрокаТЧ.GUIDСтроки));
	Для Каждого ТекСтрока Из НайденныеСтроки Цикл
		СписокФизическихУпаковок.Удалить(ТекСтрока);
	КонецЦикла;
	
	Если СписокУпаковок.Количество() > 0 Тогда
		Для Каждого ТекДанные Из СписокУпаковок Цикл
			НоваяСтрока = СписокФизическихУпаковок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекДанные);
			НоваяСтрока.GUIDСтроки = СтрокаТЧ.GUIDСтроки;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

