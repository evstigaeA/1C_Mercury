#Область ОписаниеПеременных

// СтандартныеПодсистемы.ОценкаПроизводительности
&НаКлиенте
Перем ИдентификаторЗамераПроведение, ИдентификаторЗамераПроведениеНеНужнаРегистрацияОшибки;
// Конец СтандартныеПодсистемы.ОценкаПроизводительности

#КонецОбласти

#Область ОбработчикиСобытийФорм

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	ОбщегоНазначенияУВСКлиентСервер.ДополнительныеДействияСФормой(ЭтаФорма);

	ИспользоватьОбменЧерезУниверсальныйФормат = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЧерезУниверсальныйФормат");
	
	ПриЧтенииСозданииНаСервере();
	
	ОбщегоНазначенияУВСКлиентСервер.УстановитьСвойстваЭлементовФормыДанныхТТН(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ДанныеЗаполненияСтрок = ЗаполнениеРеквизитовОбъектов.ПолучитьЗначенияРеквизитовТабличнойЧасти(Объект, "ТаблицаПродукция");
	
	ЗаполнитьВспомогательныеРеквизиты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбщегоНазначенияУВСКлиент.УстановитьВидимостьДанныхПоТипуПеревозки(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ИдентификаторЗамераПроведение = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ПроведениеДокументаОшибка");
		ОценкаПроизводительностиКлиент.УстановитьПризнакОшибкиЗамера(ИдентификаторЗамераПроведение, Истина);
				
		ИдентификаторЗамераПроведениеНеНужнаРегистрацияОшибки = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(ИдентификаторЗамераПроведение, "ПроведениеДокумента");
		ОценкаПроизводительностиКлиент.УстановитьПризнакОшибкиЗамера(ИдентификаторЗамераПроведение, Ложь);
		
		ОценкаПроизводительностиКлиент.УстановитьКлючевуюОперациюЗамера(ИдентификаторЗамераПроведениеНеНужнаРегистрацияОшибки, "ПроведениеДокументаНеНужнаРегистрацияОшибки");
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	ОбщегоНазначенияУВСКлиентСервер.ДополнительныеДействияСФормой(ЭтаФорма);
	Оповестить("ИзменениеСтатусаЗаявкиНаОформлениеОперации");
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьВспомогательныеРеквизиты();
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов.
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов") Тогда
		МодульЗапретРедактированияРеквизитовОбъектов = ОбщегоНазначения.ОбщийМодуль("ЗапретРедактированияРеквизитовОбъектов");
		МодульЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияУВСКлиент.ОповеститьДокументы(ИмяСобытия, Параметр, Источник, ЭтаФорма);
	
	Если ИмяСобытия = "ПроведенаПроверкаРегионализации" Тогда
		ЭтаФорма.Прочитать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтатусНажатие(Элемент, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.ОткрытьФормуЖурналаСостоянияЗаявок(ЭтотОбъект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипТТНПриИзменении(Элемент)
	
	ОбщегоНазначенияУВСКлиентСервер.УстановитьСвойстваЭлементовФормыДанныхТТН(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерТТНПриИзменении(Элемент)
	
	ОбщегоНазначенияУВСКлиентСервер.УстановитьСвойстваЭлементовФормыДанныхТТН(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаТТНПриИзменении(Элемент)
	
	ОбщегоНазначенияУВСКлиентСервер.УстановитьСвойстваЭлементовФормыДанныхТТН(ЭтотОбъект);
	
КонецПроцедуры

#Область ОбработчикиСобытий_Органиазация

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Объект.КонтрагентОтправитель = ОбщегоНазначенияУВСВызовСервера.КонтрагентПоОрганизации(Объект.Организация);
	
	ОчиститьТабличныеЧасти();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_ПредприятиеОтправитель

&НаКлиенте
Процедура ПредприятиеОтправительПриИзменении(Элемент)
	
	ОбщегоНазначенияУВСКлиент.ПредприятиеПриИзменении(Объект.КонтрагентОтправитель, Объект.ПредприятиеОтправитель);
	ОбщегоНазначенияУВСКлиент.УстановитьЗначениеРеквизитовПоТипуПеревозки(Объект);
	ОбщегоНазначенияУВСКлиент.УстановитьВидимостьДанныхПоТипуПеревозки(ЭтотОбъект);
	ОчиститьТабличныеЧасти();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеОтправительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.ПредприятиеНачалоВыбора(Элемент, СтандартнаяОбработка, Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеОтправительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.ПредприятиеАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеОтправительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.ПредприятиеОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.Организация);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_КонтрагентПолучатель

&НаКлиенте
Процедура КонтрагентПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.КонтрагентНачалоВыбора(Элемент, СтандартнаяОбработка,, Объект.ПредприятиеПолучатель);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПолучательАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.КонтрагентАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка,, Объект.ПредприятиеПолучатель);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПолучательОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.КонтрагентОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка,, Объект.ПредприятиеПолучатель);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_ПредприятиеПолучатель

&НаКлиенте
Процедура ПредприятиеПолучательПриИзменении(Элемент)
	
	ОбщегоНазначенияУВСКлиент.УстановитьЗначениеРеквизитовПоТипуПеревозки(Объект);
	ОбщегоНазначенияУВСКлиент.УстановитьВидимостьДанныхПоТипуПеревозки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.ПредприятиеНачалоВыбора(Элемент, СтандартнаяОбработка,, Объект.КонтрагентПолучатель, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеПолучательАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.ПредприятиеАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка,, Объект.КонтрагентПолучатель, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятиеПолучательОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ОбщегоНазначенияУВСКлиент.ПредприятиеОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка,, Объект.КонтрагентПолучатель, Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийТабличнойЧасти

#Область ТаблицаПродукции

&НаКлиенте
Процедура ТаблицаПродукцияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцияПередНачаломИзменения(Элемент, Отказ)
	
	КвалификаторЧисла = Новый КвалификаторыЧисла(10, 1);
	Элементы.ТаблицаПродукцияКоличествоМесяцевНахожденияЖивотныхНаТерриторииТС.ОграничениеТипа = Новый ОписаниеТипов("Число", КвалификаторЧисла);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцияПередУдалением(Элемент, Отказ)
	
	МассивСвязанныхТЧ = Новый Массив;
	МассивСвязанныхТЧ.Добавить("СписокФизическихУпаковок");
	МассивСвязанныхТЧ.Добавить("СписокСвязанныхДокументов");
	МассивСвязанныхТЧ.Добавить("УсловияПеремещенияПродукции");
	
	ОбработкаТабличнойЧастиКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭтаФорма, "ТаблицаПродукция", МассивСвязанныхТЧ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаПродукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтаФорма.ТолькоПросмотр Тогда
		Если ПустаяСтрока(ТекущиеДанные.GUIDСтроки) Тогда
			ТекущиеДанные.GUIDСтроки = Строка(Новый УникальныйИдентификатор());
		КонецЕсли;
	КонецЕсли;
		
	Если Поле.Имя = "ТаблицаПродукцияУпаковки" ИЛИ Поле.Имя = "ТаблицаПродукцияРешениеПоПеревозке" ИЛИ Поле.Имя = "ТаблицаПродукцияСвязанныеДокументы" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		GUIDСтроки = ТекущиеДанные.GUIDСтроки;
	
		Если Поле.Имя = "ТаблицаПродукцияУпаковки" Тогда
			
			Если ТекущиеДанные.ТипПродукцииЖивыеЖивотные Тогда
				Возврат;
			КонецЕсли;
			
			ОбщегоНазначенияУВСКлиент.ПродукцияУпаковкиВыбор(ЭтотОбъект, ТекущиеДанные, GUIDСтроки);
			
		ИначеЕсли Поле.Имя = "ТаблицаПродукцияРешениеПоПеревозке" ИЛИ Поле.Имя = "ТаблицаПродукцияСвязанныеДокументы" Тогда
			
			Если Поле.Имя = "ТаблицаПродукцияРешениеПоПеревозке" Тогда
				
				Если ТекущиеДанные.РешениеПоПеревозке <> ПредопределенноеЗначение("Справочник.ВидыТребованийДляПеремещения.ПеремещениеРазрешеноПриУсловии") Тогда
					Возврат;
				КонецЕсли;
				
				ИмяТЧ    = "УсловияПеремещенияПродукции";
				ИмяОткрываемойФормы = "Обработка.ПодборУсловийПеремещенияВРамкахРегионализации.Форма";
			Иначе
				ИмяТЧ    = "СписокСвязанныхДокументов";
				ИмяОткрываемойФормы = "Обработка.ВводДанныхПоСвязаннымДокументам.Форма";
			КонецЕсли;
			
			АдресХранения = ПоместитьТаблицуВоВременноеХранилище(ИмяТЧ, GUIDСтроки);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("АдресХранения",  АдресХранения);
			ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
			ДополнительныеПараметры.Вставить("ИмяТЧ"        , ИмяТЧ);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ТаблицаПродукцияВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыФормы,,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = "ТаблицаПродукцияЗаписьСкладскогоЖурнала" Тогда
			
		ПоказатьЗначение(, ТекущиеДанные.ЗаписьСкладскогоЖурнала);
		
	ИначеЕсли Поле.Имя = "ТаблицаПродукцияПродукцияПолучателя" Тогда
			
		ПоказатьЗначение(, ТекущиеДанные.ПродукцияПолучателя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцияВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	ИмяТЧ = ДополнительныеПараметры.ИмяТЧ;
	
	НайденныеСтроки = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("GUIDСтроки", ТекущиеДанные.GUIDСтроки));
	
	Для Каждого ТекСтрока Из НайденныеСтроки Цикл
		Объект[ИмяТЧ].Удалить(ТекСтрока);
	КонецЦикла;
	
	ДанныеВведены = Ложь;
	Для Каждого ТекСтрока Из Результат Цикл
		НоваяСтрока = Объект[ИмяТЧ].Добавить();
		НоваяСтрока.GUIDСтроки         = ТекущиеДанные.GUIDСтроки;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		ДанныеВведены = Истина;
	КонецЦикла;
	
	Если ДанныеВведены Тогда
		Если ИмяТЧ = "СписокСвязанныхДокументов" Тогда
			ТекущиеДанные.СвязанныеДокументы = НСтр("ru = 'Данные указаны'");
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Функция ПоместитьТаблицуВоВременноеХранилище(ИмяТЧ, ИдентификаторСтроки)
	
	Таблица = Объект[ИмяТЧ].Выгрузить(Новый Структура("GUIDСтроки", ИдентификаторСтроки));
	
	Возврат ПоместитьВоВременноеХранилище(Таблица, УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Процедура ТаблицаПродукцияПродукцияПолучателяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаПродукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("КонтрагентПолучатель", Объект.КонтрагентПолучатель);
	ПараметрыОтбора.Вставить("ПродукцияПолучателя" , Истина);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор"               , ПараметрыОтбора);
	ПараметрыФормы.Вставить("СобственнаяПродукция", ТекущиеДанные.Продукция);
	
	ОткрытьФорму("Справочник.Продукция.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцияПродукцияПолучателяАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаПродукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("КонтрагентПолучатель", Объект.КонтрагентПолучатель);
	ПараметрыПодбора.Вставить("Продукция"           , ТекущиеДанные.Продукция);
	
	ОбработкаТабличнойЧастиКлиент.ПродукцияПолучателяАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, ПараметрыПодбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцияПродукцияПолучателяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаПродукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("КонтрагентПолучатель", Объект.КонтрагентПолучатель);
	ПараметрыПодбора.Вставить("Продукция"           , ТекущиеДанные.Продукция);
	
	ОбработкаТабличнойЧастиКлиент.ПродукцияПолучателяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, ПараметрыПодбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцияНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаПродукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУВСКлиент.НоменклатураУчетнойСистемыНачалоВыбора(Элемент, СтандартнаяОбработка, ТекущиеДанные.ЗаписьСкладскогоЖурнала);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцияНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаПродукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУВСКлиент.НоменклатураУчетнойСистемыАвтоПодбор(ДанныеВыбора, Текст, СтандартнаяОбработка, ТекущиеДанные.ЗаписьСкладскогоЖурнала);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцияНоменклатураОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаПродукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУВСКлиент.НоменклатураУчетнойСистемыОкончаниеВводаТекста(ДанныеВыбора, Текст, СтандартнаяОбработка, ТекущиеДанные.ЗаписьСкладскогоЖурнала);
	
КонецПроцедуры

#КонецОбласти

#Область ТаблицаВСД

&НаКлиенте
Процедура ТаблицаВСДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьЗначение(, Элементы.ТаблицаВСД.ТекущиеДанные.ВСД);
КонецПроцедуры

#КонецОбласти

#Область ТаблицаМаршрутСледования

&НаКлиенте
Процедура ТаблицаМаршрутСледованияОсуществляетсяПерегрузкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаМаршрутСледования.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ОсуществляетсяПерегрузка Тогда
		ТекущиеДанные.ИнформацияОСледующемТранспорте = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов") Тогда
		МодульЗапретРедактированияРеквизитовОбъектовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЗапретРедактированияРеквизитовОбъектовКлиент");
		МодульЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор_ТаблицаПродукция(Команда)
	
	АдресХраненияДанных   = ОбщегоНазначенияУВСВызовСервера.ПоместитьТаблицуФормыВоВременноеХранилище(Объект.ТаблицаПродукция, Новый УникальныйИдентификатор);
	АдресХраненияУпаковок = ОбщегоНазначенияУВСВызовСервера.ПоместитьТаблицуФормыВоВременноеХранилище(Объект.СписокФизическихУпаковок, Новый УникальныйИдентификатор);
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор продукции в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'транспортную операцию'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресХраненияДанных"  , АдресХраненияДанных);
	ПараметрыФормы.Вставить("АдресХраненияУпаковок", АдресХраненияУпаковок);
	ПараметрыФормы.Вставить("Дата"                 , Объект.Дата);
	ПараметрыФормы.Вставить("Документ"             , Объект.Ссылка);
	ПараметрыФормы.Вставить("Организация"          , Объект.Организация);
	ПараметрыФормы.Вставить("Предприятие"          , Объект.ПредприятиеОтправитель);
	ПараметрыФормы.Вставить("Заголовок"            , ПараметрЗаголовок);
	ПараметрыФормы.Вставить("КонтрольОстатков"     , Истина);
	
	Оповещение = Новый ОписаниеОповещения("Подбор_ТаблицаПродукцияЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ПодборЗаписейСкладскогоЖурнала.Форма.ФормаПодбора", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор_ТаблицаПродукцияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ОбработатьРезультатПодбора(Результат);

КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатПодбора(АдресХранения)

	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранения);
	Объект.СписокФизическихУпаковок.Загрузить(СтруктураДанных.СписокФизическихУпаковок);
	
	ТаблицаДанных = СтруктураДанных.Продукция;
	Для Каждого ТекДанные Из ТаблицаДанных Цикл
		СтруктураПоиска = Новый Структура("GUIDСтроки", ТекДанные.GUIDСтроки);
		НайденныеСтроки = Объект.ТаблицаПродукция.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].Количество = ТекДанные.Количество;
		Иначе
			НоваяСтрока = Объект.ТаблицаПродукция.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекДанные);
			НоваяСтрока.ТипПродукции = НоваяСтрока.ЗаписьСкладскогоЖурнала.ТипПродукции;
			НоваяСтрока.Продукция    = НоваяСтрока.ЗаписьСкладскогоЖурнала.Продукция;
			НоваяСтрока.НекачественныйГруз = НоваяСтрока.ЗаписьСкладскогоЖурнала.НекачественныйГруз;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполненияСтрок);
			Если НоваяСтрока.ТипПродукцииЖивыеЖивотные Тогда
				НоваяСтрока.ПроводиласьВетсанэкспертиза = Справочники.РезультатыЛабораторногоИсследования.ПустаяСсылка();
				НоваяСтрока.ОсуществленКонтрольВрачом   = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрупповоеЗаполнениеРеквизитов(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗаполненияРеквизитов", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ТранспортныеОперации.Форма.ФормаГрупповогоЗаполненияЗначений",, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаполненияРеквизитов(ДанныеЗаполнения, ДополнительныеПараметры) Экспорт
	
	ОбработкаТабличнойЧастиКлиент.ГрупповоеЗаполнениеСтрокДокумента(ДанныеЗаполнения, Объект);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ЗаполнитьИзУчетнойСистемыНаСервере()
	
	ТЗДанные = ОбменУВСУчетнаяСистемаСервер.ЗагрузитьДанныеДляТранспортнойОперацииИзУчетнойСистемы(Объект.Ссылка);
	Если Не ТЗДанные = Неопределено Тогда 
		Объект.ТаблицаПродукция.Загрузить(ТЗДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзУчетнойСистемы(Команда)
	
	ЗаполнитьИзУчетнойСистемыНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьВспомогательныеРеквизиты()
	
	МассивЗаписей = Объект.ТаблицаПродукция.Выгрузить(, "ЗаписьСкладскогоЖурнала");
	ПринадлежностьЗаписейЖивымЖивотным = ИнтеграцияВетисAPIВызовСервера.ПродукцияПринадлежитТипуЖивыхЖивотных(МассивЗаписей, Ложь);
	
	Для Каждого ТекСтрока Из Объект.ТаблицаПродукция Цикл
		
		ТекСтрока.ТипПродукцииЖивыеЖивотные = ПринадлежностьЗаписейЖивымЖивотным.Получить(ТекСтрока.ЗаписьСкладскогоЖурнала);
		ТекСтрока.Упаковки = ОбщегоНазначенияУВСКлиентСервер.СформироватьПредставлениеСпискаУпаковок(Объект, ТекСтрока.GUIDСтроки);
		ТекСтрока.ТипПродукции = ТекСтрока.ЗаписьСкладскогоЖурнала.ТипПродукции;
		ТекСтрока.Продукция    = ТекСтрока.ЗаписьСкладскогоЖурнала.Продукция;
		ТекСтрока.НекачественныйГруз = ТекСтрока.ЗаписьСкладскогоЖурнала.НекачественныйГруз;
		
		НайденныеСтроки = Объект.СписокСвязанныхДокументов.НайтиСтроки(Новый Структура("GUIDСтроки", ТекСтрока.GUIDСтроки));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ТекСтрока.СвязанныеДокументы = НСтр("ru = 'Данные указаны'");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//Решение по перевозке (регионализация)
	//Не проводилась
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТаблицаПродукция.РешениеПоПеревозке");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.ВидыТребованийДляПеремещения.ПустаяСсылка();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаПродукцияРешениеПоПеревозке.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Проверка не проводилась'"));
	
	//Перемещение запрещено
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТаблицаПродукция.РешениеПоПеревозке");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.ВидыТребованийДляПеремещения.ПеремещениеЗапрещено;

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаПродукция.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
	//Перемещение разрешено
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТаблицаПродукция.РешениеПоПеревозке");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.ВидыТребованийДляПеремещения.ПеремещениеРазрешено;

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаПродукция.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.МоиВариантыОтчетовЦвет);
	
	//Связанные документы
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТаблицаПродукция.СвязанныеДокументы");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаПродукцияСвязанныеДокументы.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Данные не указаны'"));
	
	//Номенклатура учетной системы
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИспользоватьОбменЧерезУниверсальныйФормат");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаПродукцияНоменклатура.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//Доступность вида происхождения продукции
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТаблицаПродукция.ТипПродукции");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = ИнтеграцияВетисAPIСлужебныйПовтИсп.ТипыПродукцииСДоступнымВидомПроисхождения();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаПродукцияВидПроисхожденияПродукции.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//Маршрут следования
	ОбработкаТабличнойЧастиСервер.УстановитьУсловноеОформлениеМаршрутаСледования(ЭтаФорма);
	//Ветеринарно-санитарная экспертиза
	ОбработкаТабличнойЧастиСервер.УстановитьУсловноеОформлениеВетЭкспертизы(ЭтаФорма  , "ТаблицаПродукция");
	//Блокировка реквизитов для живых животных
	ОбработкаТабличнойЧастиСервер.УстановитьУсловноеОформлениеПоТипуПродукции(ЭтаФорма, "ТаблицаПродукция");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличныеЧасти()
	
	Объект.СписокСвязанныхДокументов.Очистить();
	Объект.СписокФизическихУпаковок.Очистить();
	Объект.ТаблицаМаршрутСледования.Очистить();
	Объект.ТаблицаПродукция.Очистить();
	Объект.УсловияПеремещенияПродукции.Очистить();
	
КонецПроцедуры

#КонецОбласти