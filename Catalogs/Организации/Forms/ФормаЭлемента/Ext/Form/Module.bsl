#Область ОписаниеПеременных

&НаКлиенте
Перем ПеременныеКлиента;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Свойство("Основание") И Параметры.Основание <> Неопределено Тогда
		ОрганизацияУчетнойСистемы = Параметры.Основание;
		ЗаполнитьЗначенияСвойств(Объект, ОрганизацияУчетнойСистемы);
	КонецЕсли;
	
	УстановитьПараметрыВыбораСпискаКонтрагентовУполномоченногоГашения();
	
	Если Не Объект.Ссылка.Пустая() Тогда
		ЗаполнитьСписокКонтрагентовУполномоченногоГашения();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(ОрганизацияУчетнойСистемы) Тогда
		СтруктураЗаписи = Новый Структура();
		
		СтруктураЗаписи.Вставить("Организация", 			  Объект.Ссылка);
		СтруктураЗаписи.Вставить("ОрганизацияУчетнойСистемы", ОрганизацияУчетнойСистемы);
		
		РегистрыСведений.СоответствиеОрганизацийОрганизациямУчетнойСистемы.ДобавитьЗапись(СтруктураЗаписи);
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.УполномоченноеГашение.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Объект.Ссылка);
	
	Для Каждого ТекЗначение Из СписокКонтрагентов Цикл
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Организация = Объект.Ссылка;
		НоваяЗапись.Контрагент  = ТекЗначение.Значение;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормыСписокКонтрагентов

&НаКлиенте
Процедура СписокКонтрагентовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаИдентификатор = Элемент.ТекущаяСтрока;
	Если СтрокаИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СписокЗначенийВФорме = ЭтотОбъект[Элемент.Имя];
	ЭлементСпискаВФорме = СписокЗначенийВФорме.НайтиПоИдентификатору(СтрокаИдентификатор);
	
	Значение = ЭлементСпискаВФорме.Значение;
	Если Значение = Неопределено
		Или Значение = Тип("Неопределено")
		Или Значение = Новый ОписаниеТипов("Неопределено")
		Или Не ЗначениеЗаполнено(Значение) Тогда
		Отказ = Истина; // Запрет пустых значений.
	Иначе
		Для Каждого ЭлементСпискаДубльВФорме Из СписокЗначенийВФорме Цикл
			Если ЭлементСпискаДубльВФорме.Значение = Значение И ЭлементСпискаДубльВФорме <> ЭлементСпискаВФорме Тогда
				Состояние(НСтр("ru = 'Обнаружены дублирующиеся записи. Редактирование отменено.'"));
				Отказ = Истина; // Запрет дублей.
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЭлементСпискаДоНачалаИзменения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПеременныеКлиента, "ЭлементСпискаДоНачалаИзменения");
	ЕстьИнформация = (ЭлементСпискаДоНачалаИзменения <> Неопределено И ЭлементСпискаДоНачалаИзменения.Идентификатор = СтрокаИдентификатор);
	Если Не Отказ И ЕстьИнформация И ЭлементСпискаДоНачалаИзменения.Значение <> Значение Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		// Откат значений.
		Если ЕстьИнформация Тогда
			ЗаполнитьЗначенияСвойств(ЭлементСпискаВФорме, ЭлементСпискаДоНачалаИзменения);
		КонецЕсли;
		// Перезапуск события "ПередОкончаниемРедактирования" с ОтменаНачалаРедактирования = Истина.
		Элемент.ЗакончитьРедактированиеСтроки(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКонтрагентовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Для Каждого ТекЭлемент Из ВыбранноеЗначение Цикл
		Если СписокКонтрагентов.НайтиПоЗначению(ТекЭлемент) = Неопределено Тогда
			СписокКонтрагентов.Добавить(ТекЭлемент);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСписокКонтрагентовУполномоченногоГашения()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УполномоченноеГашение.Контрагент КАК Контрагент
		|ИЗ
		|	РегистрСведений.УполномоченноеГашение КАК УполномоченноеГашение
		|ГДЕ
		|	УполномоченноеГашение.Организация = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	СписокКонтрагентов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент"));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораСпискаКонтрагентовУполномоченногоГашения()
	
	МассивПараметров = Новый Массив();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.НеИспользуется", Ложь));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Основной", Ложь));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ПометкаУдаления", Ложь));
	
	Элементы.СписокКонтрагентовЗначение.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

#КонецОбласти